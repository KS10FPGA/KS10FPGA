#
# This script reads a DEC listing file and extracts the object
#  code.
#  

#
# Start
#

BEGIN {
    FS="[	]";
    printf "         //\n";
    printf "         // " filename "\n";
    printf "         // Do not edit this file.\n"
    printf "         // It was created by an awk script.\n"
    printf "         //\n";
    printf "         \n";
}

#
# Pointers
#
#  These looks like:
#
#" xxx	xxxxxx	xx xx x xx xxxxxx 	

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7] [0-7][0-7] [0-7] [0-7][0-7] [0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 2)), 30);
    data2 = lshift(strtonum("0" substr($3,  4, 2)), 24);
    data3 = lshift(strtonum("0" substr($3,  7, 1)), 22);
    data4 = lshift(strtonum("0" substr($3,  9, 2)), 18);
    data5 = lshift(strtonum("0" substr($3, 12, 6)), 0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5);
    i = strtonum("0" $2)
    map[i] = data;
}

#
# IO Instructions
#
#  These looks like:
#
#" xxx	xxxxxx	7 xxx xx x xx xxxxxx 

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7] [0-7][0-7][0-7] [0-7][0-7] [0-7] [0-7][0-7] [0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 1)), 33);
    data2 = lshift(strtonum("0" substr($3,  3, 3)), 24);
    data3 = lshift(strtonum("0" substr($3,  7, 2)), 21);
    data4 = lshift(strtonum("0" substr($3, 10, 1)), 22);
    data5 = lshift(strtonum("0" substr($3, 12, 2)), 18);
    data6 = lshift(strtonum("0" substr($3, 15, 6)),  0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5 + data6);
    i = strtonum("0" $2)
    map[i] = data;
}

#
# IO Instructions
#
#  These looks like:
#
#" xxx	xxxxxx	7 xxx x x xx xxxxxx 
/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7] [0-7][0-7][0-7] [0-7] [0-7] [0-7][0-7] [0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 1)), 33);
    data2 = lshift(strtonum("0" substr($3,  3, 3)), 24);
    data3 = lshift(strtonum("0" substr($3,  7, 1)), 23);
    data4 = lshift(strtonum("0" substr($3,  9, 1)), 22);
    data5 = lshift(strtonum("0" substr($3, 11, 2)), 18);
    data6 = lshift(strtonum("0" substr($3, 14, 6)),  0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5 + data6);
    i = strtonum("0" $2)
    map[i] = data;
}

#
# CONO Instructions
#
#  These looks like:
#
#" xxx	xxxxxx	xxx xx xx xx xxxxxx 

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7] [0-7][0-7] [0-7][0-7] [0-7][0-7] [0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 3)), 27);
    data2 = lshift(strtonum("0" substr($3,  5, 2)), 21)
    data3 = lshift(strtonum("0" substr($3,  8, 2)), 20);
    data4 = lshift(strtonum("0" substr($3, 11, 2)), 18);
    data5 = lshift(strtonum("0" substr($3, 14, 6)),  0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5);
    i = strtonum("0" $2)
    map[i] = data;
}

#
# Sixbit 
#  6x 6-bit characters span the 36-bit word
#
#  These looks like:
#
#" xxx	aaaaaa	dd dd dd dd dd dd "
#

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7] [0-7][0-7] [0-7][0-7] [0-7][0-7] [0-7][0-7] [0-7][0-7].*/ {
    data1 = substr($3,  1, 2);
    data2 = substr($3,  4, 2);
    data3 = substr($3,  7, 2);
    data4 = substr($3, 10, 2);
    data5 = substr($3, 13, 2);
    data6 = substr($3, 16, 2);
    #print $2, (data1 data2 data3 data4 data5 data6)
    i = strtonum("0" $2)
    map[i] = (data1 data2 data3 data4 data5 data6)
}

#
# ASCII
#  5x 7-bit characters are left justified in the 36-bit word.
#
#  These looks like:
#
#" xxx	aaaaaa	ddd ddd ddd ddd ddd "
# 

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7] [0-7][0-7][0-7] [0-7][0-7][0-7] [0-7][0-7][0-7] [0-7][0-7][0-7].*/ {
    data1 = lshift(and(strtonum("0" substr($3,  1, 3)), 0177), 29)
    data2 = lshift(and(strtonum("0" substr($3,  5, 3)), 0177), 22)
    data3 = lshift(and(strtonum("0" substr($3,  9, 3)), 0177), 15)
    data4 = lshift(and(strtonum("0" substr($3, 13, 3)), 0177),  8)
    data5 = lshift(and(strtonum("0" substr($3, 17, 3)), 0177),  1)
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5);
    #print $2 " " data
    i = strtonum("0" $2)
    map[i] = data
}

#
# BYTE
#  1x 8-bit byte is left justified in the 36-bit word.
#
#  These looks like:
#
#" xxx	aaaaaa	ddd 0000000000 "
#

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7] 0000000000.*/ {
    data1 = lshift(and(strtonum("0" substr($3,  1, 3)), 0377), 29);
    data = sprintf("%012o", data1)
    i = strtonum("0" $2)
    map[i] = data
}

#
# Bytes
#" 2791	023352	0 117 124 0 123 120 	"
#
# See DSQDC
#

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7] [0-7][0-7][0-7] [0-7][0-7][0-7] [0-7] [0-7][0-7][0-7] [0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 1)), 34);
    data2 = lshift(strtonum("0" substr($3,  3, 3)), 26);
    data3 = lshift(strtonum("0" substr($3,  7, 3)), 18);
    data4 = lshift(strtonum("0" substr($3, 11, 1)), 16);
    data5 = lshift(strtonum("0" substr($3, 13, 3)),  8);
    data6 = lshift(strtonum("0" substr($3, 17, 3)),  0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5 + data6);
    i = strtonum("0" $2)
    map[i] = data

}

#
# OPCODES
#
#  These looks like:
#
#" xxx	aaaaaa	ddd dd d dd dddddd "
#

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7] [0-7][0-7] [0-7] [0-7][0-7] [0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    data1 = lshift(strtonum("0" substr($3,  1, 3)), 27);
    data2 = lshift(strtonum("0" substr($3,  5, 2)), 23);
    data3 = lshift(strtonum("0" substr($3,  8, 1)), 22);
    data4 = lshift(strtonum("0" substr($3, 10, 2)), 18);
    data5 = lshift(strtonum("0" substr($3, 13, 6)),  0);
    data  = sprintf("%012o", data1 + data2 + data3 + data4 + data5);
    i = strtonum("0" $2)
    map[i] = data
}

#
# Definitions
# 
#  These looks like:
#
#" xxx	aaaaaa	dddddd	dddddd "
#

/^.*\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7][0-7][0-7][0-7]\t[0-7][0-7][0-7][0-7][0-7][0-7].*/ {
    #print $2, ($3 $4)
    i = strtonum("0" $2)
    map[i] = ($3 $4)
}

#
# Write Sorted output to file
#

END {
   for (i = 0; i < 077777; i++) { 
       if (map[i] != "") {
           printf "         SSRAM[%05d] = 36'o%s;	// %06o\n", i, map[i], i
       } else {
           #printf "         SSRAM[%05d] = 36'o%s;	// %06o (unused)\n", i, "000000000000", i
       }
   }
}
