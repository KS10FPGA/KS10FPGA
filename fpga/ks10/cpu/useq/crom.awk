################################################################################
##
## KS-10 Processor
##
## Brief
##   Dispatch ROM Parser
##
## Details
##
##   This awk script parses the KS10 Microcode Listing File and extracts the
##   the contents of the Control ROM.
##
## File
##   crom.awk
##
## Author
##   Rob Doyle - doyle (at) cox (dot) net
##
################################################################################
##
## Copyright (C) 2012-2023 Rob Doyle
##
## This source file may be used and distributed without restriction provided
## that this copyright statement is not removed from the file and that any
## derivative work contains the original copyright notice and the associated
## disclaimer.
##
## This source file is free software; you can redistribute it and#or modify it
## under the terms of the GNU Lesser General Public License as published by the
## Free Software Foundation; version 2.1 of the License.
##
## This source is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
## FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
## for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this source; if not, download it from
## http://www.gnu.org/licenses/lgpl.txt
##
################################################################################

BEGIN {
    FS="[, ;	]";
    printf "//\n";
    printf "//\n";
    printf "// CROM.DAT\n";
    printf "// This code is extracted from the KS10 microcode listing by an\n";
    printf "// AWK script. DO NOT EDIT THIS FILE!\n";
    printf "//\n";
    printf "//\n";
    printf "\n";
}

/^U [0-7][0-7][0-7][0-7], / {
    #print $4 " " $5 " " $6 " " $7 " " $8 " " $9 " " $10 " " $11 " " $12 "// " $2
    i         = strtonum("0"  $2);
    MAP2[i]   = strtonum("0"  $2);
    MAP[ 4,i] = strtonum("0"  $4);
    MAP[ 5,i] = strtonum("0"  $5);
    MAP[ 6,i] = strtonum("0"  $6);
    MAP[ 7,i] = strtonum("0"  $7);
    MAP[ 8,i] = strtonum("0"  $8);
    MAP[ 9,i] = strtonum("0"  $9);
    MAP[10,i] = strtonum("0" $10);
    MAP[11,i] = strtonum("0" $11);
    MAP[12,i] = strtonum("0" $12);
}

END {
    for (i = 0; i < 4096; i++) {
	if (MAP2[i] == i) {
            #
            # Edit the Microcode and insert the CPU Serial Number
            #  Carefully check to ensure that we edit the correct microword.
            #   1. The CROM address is 1700
            #   2. Check all of the microcode fields to ensure they contain the expected data.
            #   3. Ensure that the SERIALNUM will fit in 18 bits (i.e., it is less than 262144)
            #   4. The lower 24 bits of the microcode (excluding serial number) are zero so there
            #      is no need to merge microcode underneath the serial number.
            #
             if ((i == 01700) && (SERIALNUM < 262144) &&
                 (MAP[ 4,i] == 00137) && (MAP[ 5,i] == 03771) && (MAP[ 6,i] == 00005) &&
                 (MAP[ 7,i] == 04374) && (MAP[ 8,i] == 04007) && (MAP[ 9,i] == 00700) &&
                 (MAP[10,i] == 00000) && (MAP[11,i] == 00001) && (MAP[12,i] == 00001)) {
                 printf "%03x%03x%03x%03x%03x%03x%03x%03x%03x	// CROM[%4o] = 108'o%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o;	// Set CPU Serial Number to %d\n",
                     MAP[ 4,i], MAP[ 5,i], MAP[ 6,i], MAP[ 7,i], MAP[ 8,i], MAP[ 9,i], MAP[10,i], SERIALNUM / 4096, SERIALNUM % 4096, i,
                     MAP[ 4,i], MAP[ 5,i], MAP[ 6,i], MAP[ 7,i], MAP[ 8,i], MAP[ 9,i], MAP[10,i], SERIALNUM / 4096, SERIALNUM % 4096, SERIALNUM
            } else  {
                printf "%03x%03x%03x%03x%03x%03x%03x%03x%03x	// CROM[%4o] = 108'o%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o;\n",
                    MAP[ 4,i], MAP[ 5,i], MAP[ 6,i], MAP[ 7,i], MAP[ 8,i], MAP[ 9,i], MAP[10,i], MAP[11,i], MAP[12,i], i,
                    MAP[ 4,i], MAP[ 5,i], MAP[ 6,i], MAP[ 7,i], MAP[ 8,i], MAP[ 9,i], MAP[10,i], MAP[11,i], MAP[12,i]
            }
	} else {
	    printf "%03x%03x%03x%03x%03x%03x%03x%03x%03x	// CROM[%4o] = 108'o%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o_%04o;	// Unused\n",
		0, 0, 0, 0, 0, 0, 0, 0, 0, i,
		0, 0, 0, 0, 0, 0, 0, 0, 0
	}
    }
}
