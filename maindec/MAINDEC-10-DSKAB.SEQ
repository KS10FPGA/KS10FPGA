;DSKAB







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E299A-DD

	DIAGNOSTIC CODE:	DSKAB

	PRODUCT NAME:	 	DSKABA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (2)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAB.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAB.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE SECOND IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS SOME OF THE FOLLOWING
	INSTRUCTIONS.  MOVE, COMPARE, HALF WORD AND BOOLE.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAB.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAB.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAB                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAB

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (2)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
DSKABT	MAC	28-Mar-78 12:29		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAB
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 2
DSKABT	MAC	28-Mar-78 12:29		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 3
DSKABT	MAC	28-Mar-78 12:29		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414200		PAREA3=SIXBIT/DSKAB/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414200		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
DSKAB1	MAC	28-Mar-78 12:29		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) [DSKAB]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 062 051 040 
   798	030656	133 104 123 113 101 
   799	030657	102 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (2)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0029

   807					SUBTTL	TEST OF THE ADD INSTRUCTION
   808
   809					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED
   810					;TO ADD A NON-ZERO NUMBER CONTAINED IN E TO AN AC CONTAINING ALL ZEROS,
   811					;THE RESULT IS A NON-ZERO NUMBER IN THE AC.  FIRST, THE AC IS CLEARED;
   812					;THEN, ANON-ZERO POSITIVE NUMBER IS ADDED TO THE AC USING THE ADD 
   813					;INSTRUCTION.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   814
   815	030661	200 00 0 00 035330 		A10400:	MOVE	[0]		;PRESET AC TO ALL ZEROS
   816	030662	270 00 0 00 035331 		ADD	[123456765432]	;*ADD OF A NON-ZERO NUMBER TO AN AC OF ALL
   817									;ZEROS SHOULD RESULT
   818									;IN AN AC CONTAINING A NON-ZERO NUMBER
   819	030663	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON-ZERO
   820						STOP^
   821	030664	254 04 0 00 030665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   822	030665	324 00 0 00 030666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   823									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   824									;IN THE SUBTEST) TO LOOP ON ERROR^
   825
   826					;AD ADD [ADC1], AD ADD EN [ADC1],
   827					;F CYC ACT EN A [F1], AD FM + FETCH EN A [ADFP],
   828					;F CYC ACT EN C[F1], IR ADSUB [IR1], IRXX [IR1]
   829
   830					;**********
   831
   832					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED TO ADD
   833					;A WORD OF ALL ZEROS TO AN AC CONTAINING A NON-ZERO POSITIVE NUMBER, THE
   834					;RESULT IS A NON-ZERO POSITIVE NUMBER IN THE AC.  FIRST, THE AC IS
   835					;INITIALIZED WITH A NON-ZERO POSITIVE NUMBER; THEN, A WORD OF ALL ZEROS
   836					; IS ADDED TO THE AC.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   837
   838	030666	200 00 0 00 035331 	A10500:	MOVE	[123456765432]	;PRESET AC WITH A NON-ZERO NUMBER
   839	030667	270 00 0 00 035330 		ADD	[0]		;*ADD OF A WORD OF ALL ZEROS TO AN AC
   840									;CONTAINING A NON-ZERO NUMBER
   841									;SHOULD RESULT IN AN AC CONTAINING A NON-ZERO NUMBER
   842	030670	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON-ZERO
   843						STOP^
   844	030671	254 04 0 00 030672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   845	030672	324 00 0 00 030673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   846									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   847									;IN THE SUBTEST) TO LOOP ON ERROR^
   848
   849					;AR AD EN [ARMA], AR AD EN A [ARMA], ET2C F/F [E],
   850					;AR AD ET2 EN [ARMA], IR ADSUB [IR1]
   851
   852					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0030

   853					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED TO ADD
   854					;A WORD OF ALL ZEROS TO AN AC CONTAINING A NON-ZERO POSITIVE NUMBER, THE
   855					;RESULT IS A NON-ZERO POSITIVE NUMBER IN THE AC.  FIRST, THE AC IS
   856					;INITIALIZED WITH A NON-ZERO POSITIVE NUMBER; THEN, A WORD OF ALL ZEROS
   857					; IS ADDED TO THE AC.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   858
   859	030673	200 00 0 00 035332 	A10600:	MOVE	[XWD 123456,0]	;PRESET AC WITH A NON-ZERO NUMBER
   860	030674	270 00 0 00 035330 		ADD	[0]		;*ADD OF A WORD OF ALL ZEROS TO AN AC CONTAINING
   861									;A NON-ZERO NUMBER SHOULD RESULT IN AN AC
   862									;CONTAINING A NON-ZERO NUMBER
   863	030675	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON-ZERO
   864						STOP^
   865	030676	254 04 0 00 030677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   866	030677	324 00 0 00 030700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   867									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   868									;IN THE SUBTEST) TO LOOP ON ERROR^
   869
   870					;AR AD EN [ARMA], AR AD EN A [ARMA], ET2C F/F[E],
   871					;AR AD ET2 EN [ARMA], IR AD SUB [IR1]
   872
   873					;*********
   874
   875					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED TO ADD
   876					;A WORD OF ALL ZEROS TO AN AC CONTAINING A NON-ZERO POSITIVE NUMBER, THE
   877					;RESULT IS A NON-ZERO POSITIVE NUMBER IN THE AC.  FIRST, THE AC IS
   878					;INITIALIZED WITH A NON-ZERO POSITIVE NUMBER; THEN, A WORD OF ALL ZEROS
   879					; IS ADDED TO THE AC.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   880
   881	030700	200 00 0 00 035333 	A10700:	MOVE	[123456]	;PRESET AC WITH A NON-ZERO NUMBER
   882	030701	270 00 0 00 035330 		ADD	[0]		;*ADD OF A WORD OF ALL ZEROS TO AN AC CONTAINING
   883									;A NON-ZERO NUMBER
   884									;SHOULD RESULT IN AN AC CONTAINING A NON-ZERO NUMBER
   885	030702	336 00 0 00 000000 		SKIPN			;PASS TEST IS C(AC) IS NON-ZERO
   886						STOP^
   887	030703	254 04 0 00 030704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   888	030704	324 00 0 00 030705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   889									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   890									;IN THE SUBTEST) TO LOOP ON ERROR^
   891
   892					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0031

   893					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED TO ADD
   894					;A WORD CONTAINING A NON-ZERO POSITIVE NUMBER TO AN AC OF ALL ZEROS, THE
   895					;RESULT IS A NON-ZERO POSITIVE NUMBER IN THE AC.  FIRST, THE AC IS
   896					;INITIALIZED WITH A WORD OF ALL ZEROS ;THEN, A NON-ZERO POSITIVE NUMBER
   897					;IS ADDED TO THE AC.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   898
   899	030705	200 00 0 00 035330 	A13300:	MOVE	[0]		;PRESET AC WITH ALL ZEROS
   900	030706	270 00 0 00 035332 		ADD	[123456,,0]	;*ADD OF A NON-ZERO NUMBER TO AN AC CONTAINING ALL ZEROS
   901									;SHOULD RESULT IN AN AC CONTAINING A NON-ZERO NUMBER
   902	030707	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON-ZERO
   903						STOP^
   904	030710	254 04 0 00 030711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   905	030711	324 00 0 00 030712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   907									;IN THE SUBTEST) TO LOOP ON ERROR^
   908
   909					;**********
   910
   911					;THIS TEST VERIFIES THAT WHEN THE ADD INSTRUCTION IS USED TO ADD
   912					;A WORD CONTAINING A NON-ZERO POSITIVE NUMBER TO AN AC OF ALL ZEROS, THE
   913					;RESULT IS A NON-ZERO POSITIVE NUMBER IN THE AC.  FIRST, THE AC IS
   914					;INITIALIZED WITH A WORD OF ALL ZEROS ;THEN, A NON-ZERO POSITIVE NUMBER
   915					;IS ADDED TO THE AC.  THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
   916
   917	030712	200 00 0 00 035330 	A13400:	MOVE	[0]		;PRESET AC WITH ALL ZEROS
   918	030713	270 00 0 00 035333 		ADD	[123456]	;*ADD OF A NON-ZERO NUMBER TO AN AC CONTAINING ALL ZEROS
   919									;SHOULD RESULT IN AN AC CONTAINING A NON-ZERO NUMBER
   920	030714	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON-ZERO
   921						STOP^
   922	030715	254 04 0 00 030716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   923	030716	324 00 0 00 030717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   924									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   925									;IN THE SUBTEST) TO LOOP ON ERROR^
   926
   927					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0032

   928					;ADD ZERO TO A RIPPLED ONE
   929
   930			011000		SN=11000
   931			000000			ZZ=0
   932
   933					A11000:	REPEAT	^D36,
   934					<;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
   935					;A WORD OF ALL ZEROS IS ADDED TO AN
   936					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
   937					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
   938					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
   939					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
   940					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
   941					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
   942					;EVERY BIT OF THE AC.
   943					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
   944					SN=SN+1
   945						ZZ=ZZ+ZZ
   946						IFE	ZZ,<ZZ=1>
   947						MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
   948						ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
   949						EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
   950						EQV	[0]		;RESULTS IN C(AC)=0
   951						SKIPE			;PASS TEST IF C(AC)=0
   952						STOP
   953					
   954					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
   955					;IR ADDX [IR1], IR ADSUB [IR1]
   956					
   957					;**********
   958					PAGE
   959					>
   960					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
   961					;A WORD OF ALL ZEROS IS ADDED TO AN
   962					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
   963					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
   964					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
   965					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
   966					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
   967					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
   968					;EVERY BIT OF THE AC.
   969					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
   970			011001		SN=SN+1
   971			000000			ZZ=ZZ+ZZ
   972			000001			IFE	ZZ,<ZZ=1>
   973	030717	200 00 0 00 035334 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
   974	030720	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
   975	030721	444 00 0 00 035334 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
   976	030722	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
   977	030723	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
   978						STOP^
   979	030724	254 04 0 00 030725 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   980	030725	324 00 0 00 030726 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   981									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   982									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0033

   983
   984					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
   985					;IR ADDX [IR1], IR ADSUB [IR1]
   986
   987					;**********
   988					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0034

   989
   990					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
   991					;A WORD OF ALL ZEROS IS ADDED TO AN
   992					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
   993					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
   994					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
   995					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
   996					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
   997					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
   998					;EVERY BIT OF THE AC.
   999					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1000			011002		SN=SN+1
  1001			000002			ZZ=ZZ+ZZ
  1002						IFE	ZZ,<ZZ=1>
  1003	030726	200 00 0 00 035335 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1004	030727	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1005	030730	444 00 0 00 035335 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1006	030731	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1007	030732	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1008						STOP^
  1009	030733	254 04 0 00 030734 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1010	030734	324 00 0 00 030735 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1011									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1012									;IN THE SUBTEST) TO LOOP ON ERROR^
  1013
  1014					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1015					;IR ADDX [IR1], IR ADSUB [IR1]
  1016
  1017					;**********
  1018					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0035

  1019
  1020					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1021					;A WORD OF ALL ZEROS IS ADDED TO AN
  1022					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1023					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1024					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1025					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1026					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1027					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1028					;EVERY BIT OF THE AC.
  1029					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1030			011003		SN=SN+1
  1031			000004			ZZ=ZZ+ZZ
  1032						IFE	ZZ,<ZZ=1>
  1033	030735	200 00 0 00 035336 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1034	030736	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1035	030737	444 00 0 00 035336 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1036	030740	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1037	030741	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1038						STOP^
  1039	030742	254 04 0 00 030743 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1040	030743	324 00 0 00 030744 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1041									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1042									;IN THE SUBTEST) TO LOOP ON ERROR^
  1043
  1044					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1045					;IR ADDX [IR1], IR ADSUB [IR1]
  1046
  1047					;**********
  1048					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0036

  1049
  1050					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1051					;A WORD OF ALL ZEROS IS ADDED TO AN
  1052					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1053					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1054					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1055					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1056					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1057					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1058					;EVERY BIT OF THE AC.
  1059					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1060			011004		SN=SN+1
  1061			000010			ZZ=ZZ+ZZ
  1062						IFE	ZZ,<ZZ=1>
  1063	030744	200 00 0 00 035337 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1064	030745	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1065	030746	444 00 0 00 035337 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1066	030747	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1067	030750	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1068						STOP^
  1069	030751	254 04 0 00 030752 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1070	030752	324 00 0 00 030753 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1071									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1072									;IN THE SUBTEST) TO LOOP ON ERROR^
  1073
  1074					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1075					;IR ADDX [IR1], IR ADSUB [IR1]
  1076
  1077					;**********
  1078					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0037

  1079
  1080					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1081					;A WORD OF ALL ZEROS IS ADDED TO AN
  1082					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1083					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1084					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1085					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1086					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1087					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1088					;EVERY BIT OF THE AC.
  1089					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1090			011005		SN=SN+1
  1091			000020			ZZ=ZZ+ZZ
  1092						IFE	ZZ,<ZZ=1>
  1093	030753	200 00 0 00 035340 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1094	030754	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1095	030755	444 00 0 00 035340 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1096	030756	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1097	030757	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1098						STOP^
  1099	030760	254 04 0 00 030761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1100	030761	324 00 0 00 030762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1101									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1102									;IN THE SUBTEST) TO LOOP ON ERROR^
  1103
  1104					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1105					;IR ADDX [IR1], IR ADSUB [IR1]
  1106
  1107					;**********
  1108					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0038

  1109
  1110					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1111					;A WORD OF ALL ZEROS IS ADDED TO AN
  1112					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1113					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1114					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1115					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1116					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1117					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1118					;EVERY BIT OF THE AC.
  1119					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1120			011006		SN=SN+1
  1121			000040			ZZ=ZZ+ZZ
  1122						IFE	ZZ,<ZZ=1>
  1123	030762	200 00 0 00 035341 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1124	030763	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1125	030764	444 00 0 00 035341 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1126	030765	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1127	030766	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1128						STOP^
  1129	030767	254 04 0 00 030770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1130	030770	324 00 0 00 030771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1131									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1132									;IN THE SUBTEST) TO LOOP ON ERROR^
  1133
  1134					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1135					;IR ADDX [IR1], IR ADSUB [IR1]
  1136
  1137					;**********
  1138					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0039

  1139
  1140					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1141					;A WORD OF ALL ZEROS IS ADDED TO AN
  1142					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1143					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1144					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1145					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1146					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1147					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1148					;EVERY BIT OF THE AC.
  1149					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1150			011007		SN=SN+1
  1151			000100			ZZ=ZZ+ZZ
  1152						IFE	ZZ,<ZZ=1>
  1153	030771	200 00 0 00 035342 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1154	030772	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1155	030773	444 00 0 00 035342 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1156	030774	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1157	030775	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1158						STOP^
  1159	030776	254 04 0 00 030777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1160	030777	324 00 0 00 031000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1161									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1162									;IN THE SUBTEST) TO LOOP ON ERROR^
  1163
  1164					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1165					;IR ADDX [IR1], IR ADSUB [IR1]
  1166
  1167					;**********
  1168					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0040

  1169
  1170					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1171					;A WORD OF ALL ZEROS IS ADDED TO AN
  1172					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1173					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1174					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1175					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1176					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1177					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1178					;EVERY BIT OF THE AC.
  1179					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1180			011010		SN=SN+1
  1181			000200			ZZ=ZZ+ZZ
  1182						IFE	ZZ,<ZZ=1>
  1183	031000	200 00 0 00 035343 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1184	031001	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1185	031002	444 00 0 00 035343 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1186	031003	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1187	031004	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1188						STOP^
  1189	031005	254 04 0 00 031006 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1190	031006	324 00 0 00 031007 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1191									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1192									;IN THE SUBTEST) TO LOOP ON ERROR^
  1193
  1194					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1195					;IR ADDX [IR1], IR ADSUB [IR1]
  1196
  1197					;**********
  1198					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0041

  1199
  1200					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1201					;A WORD OF ALL ZEROS IS ADDED TO AN
  1202					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1203					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1204					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1205					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1206					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1207					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1208					;EVERY BIT OF THE AC.
  1209					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1210			011011		SN=SN+1
  1211			000400			ZZ=ZZ+ZZ
  1212						IFE	ZZ,<ZZ=1>
  1213	031007	200 00 0 00 035344 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1214	031010	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1215	031011	444 00 0 00 035344 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1216	031012	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1217	031013	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1218						STOP^
  1219	031014	254 04 0 00 031015 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1220	031015	324 00 0 00 031016 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1221									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1222									;IN THE SUBTEST) TO LOOP ON ERROR^
  1223
  1224					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1225					;IR ADDX [IR1], IR ADSUB [IR1]
  1226
  1227					;**********
  1228					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0042

  1229
  1230					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1231					;A WORD OF ALL ZEROS IS ADDED TO AN
  1232					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1233					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1234					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1235					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1236					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1237					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1238					;EVERY BIT OF THE AC.
  1239					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1240			011012		SN=SN+1
  1241			001000			ZZ=ZZ+ZZ
  1242						IFE	ZZ,<ZZ=1>
  1243	031016	200 00 0 00 035345 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1244	031017	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1245	031020	444 00 0 00 035345 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1246	031021	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1247	031022	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1248						STOP^
  1249	031023	254 04 0 00 031024 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1250	031024	324 00 0 00 031025 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1251									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1252									;IN THE SUBTEST) TO LOOP ON ERROR^
  1253
  1254					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1255					;IR ADDX [IR1], IR ADSUB [IR1]
  1256
  1257					;**********
  1258					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0043

  1259
  1260					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1261					;A WORD OF ALL ZEROS IS ADDED TO AN
  1262					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1263					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1264					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1265					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1266					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1267					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1268					;EVERY BIT OF THE AC.
  1269					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1270			011013		SN=SN+1
  1271			002000			ZZ=ZZ+ZZ
  1272						IFE	ZZ,<ZZ=1>
  1273	031025	200 00 0 00 035346 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1274	031026	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1275	031027	444 00 0 00 035346 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1276	031030	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1277	031031	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1278						STOP^
  1279	031032	254 04 0 00 031033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1280	031033	324 00 0 00 031034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1281									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1282									;IN THE SUBTEST) TO LOOP ON ERROR^
  1283
  1284					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1285					;IR ADDX [IR1], IR ADSUB [IR1]
  1286
  1287					;**********
  1288					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0044

  1289
  1290					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1291					;A WORD OF ALL ZEROS IS ADDED TO AN
  1292					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1293					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1294					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1295					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1296					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1297					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1298					;EVERY BIT OF THE AC.
  1299					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1300			011014		SN=SN+1
  1301			004000			ZZ=ZZ+ZZ
  1302						IFE	ZZ,<ZZ=1>
  1303	031034	200 00 0 00 035347 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1304	031035	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1305	031036	444 00 0 00 035347 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1306	031037	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1307	031040	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1308						STOP^
  1309	031041	254 04 0 00 031042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1310	031042	324 00 0 00 031043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1311									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1312									;IN THE SUBTEST) TO LOOP ON ERROR^
  1313
  1314					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1315					;IR ADDX [IR1], IR ADSUB [IR1]
  1316
  1317					;**********
  1318					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-13
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0045

  1319
  1320					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1321					;A WORD OF ALL ZEROS IS ADDED TO AN
  1322					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1323					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1324					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1325					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1326					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1327					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1328					;EVERY BIT OF THE AC.
  1329					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1330			011015		SN=SN+1
  1331			010000			ZZ=ZZ+ZZ
  1332						IFE	ZZ,<ZZ=1>
  1333	031043	200 00 0 00 035350 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1334	031044	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1335	031045	444 00 0 00 035350 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1336	031046	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1337	031047	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1338						STOP^
  1339	031050	254 04 0 00 031051 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1340	031051	324 00 0 00 031052 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1341									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1342									;IN THE SUBTEST) TO LOOP ON ERROR^
  1343
  1344					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1345					;IR ADDX [IR1], IR ADSUB [IR1]
  1346
  1347					;**********
  1348					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-14
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0046

  1349
  1350					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1351					;A WORD OF ALL ZEROS IS ADDED TO AN
  1352					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1353					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1354					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1355					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1356					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1357					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1358					;EVERY BIT OF THE AC.
  1359					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1360			011016		SN=SN+1
  1361			020000			ZZ=ZZ+ZZ
  1362						IFE	ZZ,<ZZ=1>
  1363	031052	200 00 0 00 035351 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1364	031053	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1365	031054	444 00 0 00 035351 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1366	031055	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1367	031056	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1368						STOP^
  1369	031057	254 04 0 00 031060 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1370	031060	324 00 0 00 031061 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1371									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1372									;IN THE SUBTEST) TO LOOP ON ERROR^
  1373
  1374					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1375					;IR ADDX [IR1], IR ADSUB [IR1]
  1376
  1377					;**********
  1378					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-15
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0047

  1379
  1380					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1381					;A WORD OF ALL ZEROS IS ADDED TO AN
  1382					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1383					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1384					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1385					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1386					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1387					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1388					;EVERY BIT OF THE AC.
  1389					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1390			011017		SN=SN+1
  1391			040000			ZZ=ZZ+ZZ
  1392						IFE	ZZ,<ZZ=1>
  1393	031061	200 00 0 00 035352 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1394	031062	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1395	031063	444 00 0 00 035352 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1396	031064	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1397	031065	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1398						STOP^
  1399	031066	254 04 0 00 031067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1400	031067	324 00 0 00 031070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1401									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1402									;IN THE SUBTEST) TO LOOP ON ERROR^
  1403
  1404					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1405					;IR ADDX [IR1], IR ADSUB [IR1]
  1406
  1407					;**********
  1408					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-16
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0048

  1409
  1410					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1411					;A WORD OF ALL ZEROS IS ADDED TO AN
  1412					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1413					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1414					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1415					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1416					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1417					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1418					;EVERY BIT OF THE AC.
  1419					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1420			011020		SN=SN+1
  1421			100000			ZZ=ZZ+ZZ
  1422						IFE	ZZ,<ZZ=1>
  1423	031070	200 00 0 00 035353 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1424	031071	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1425	031072	444 00 0 00 035353 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1426	031073	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1427	031074	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1428						STOP^
  1429	031075	254 04 0 00 031076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1430	031076	324 00 0 00 031077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1431									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1432									;IN THE SUBTEST) TO LOOP ON ERROR^
  1433
  1434					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1435					;IR ADDX [IR1], IR ADSUB [IR1]
  1436
  1437					;**********
  1438					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-17
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0049

  1439
  1440					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1441					;A WORD OF ALL ZEROS IS ADDED TO AN
  1442					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1443					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1444					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1445					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1446					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1447					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1448					;EVERY BIT OF THE AC.
  1449					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1450			011021		SN=SN+1
  1451			200000			ZZ=ZZ+ZZ
  1452						IFE	ZZ,<ZZ=1>
  1453	031077	200 00 0 00 035354 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1454	031100	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1455	031101	444 00 0 00 035354 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1456	031102	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1457	031103	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1458						STOP^
  1459	031104	254 04 0 00 031105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1460	031105	324 00 0 00 031106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1461									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1462									;IN THE SUBTEST) TO LOOP ON ERROR^
  1463
  1464					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1465					;IR ADDX [IR1], IR ADSUB [IR1]
  1466
  1467					;**********
  1468					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-18
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0050

  1469
  1470					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1471					;A WORD OF ALL ZEROS IS ADDED TO AN
  1472					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1473					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1474					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1475					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1476					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1477					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1478					;EVERY BIT OF THE AC.
  1479					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1480			011022		SN=SN+1
  1481			400000			ZZ=ZZ+ZZ
  1482						IFE	ZZ,<ZZ=1>
  1483	031106	200 00 0 00 035355 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1484	031107	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1485	031110	444 00 0 00 035355 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1486	031111	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1487	031112	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1488						STOP^
  1489	031113	254 04 0 00 031114 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1490	031114	324 00 0 00 031115 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1491									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1492									;IN THE SUBTEST) TO LOOP ON ERROR^
  1493
  1494					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1495					;IR ADDX [IR1], IR ADSUB [IR1]
  1496
  1497					;**********
  1498					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-19
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0051

  1499
  1500					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1501					;A WORD OF ALL ZEROS IS ADDED TO AN
  1502					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1503					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1504					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1505					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1506					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1507					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1508					;EVERY BIT OF THE AC.
  1509					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1510			011023		SN=SN+1
  1511		000001	000000			ZZ=ZZ+ZZ
  1512						IFE	ZZ,<ZZ=1>
  1513	031115	200 00 0 00 035356 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1514	031116	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1515	031117	444 00 0 00 035356 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1516	031120	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1517	031121	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1518						STOP^
  1519	031122	254 04 0 00 031123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1520	031123	324 00 0 00 031124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1521									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1522									;IN THE SUBTEST) TO LOOP ON ERROR^
  1523
  1524					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1525					;IR ADDX [IR1], IR ADSUB [IR1]
  1526
  1527					;**********
  1528					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-20
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0052

  1529
  1530					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1531					;A WORD OF ALL ZEROS IS ADDED TO AN
  1532					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1533					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1534					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1535					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1536					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1537					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1538					;EVERY BIT OF THE AC.
  1539					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1540			011024		SN=SN+1
  1541		000002	000000			ZZ=ZZ+ZZ
  1542						IFE	ZZ,<ZZ=1>
  1543	031124	200 00 0 00 035357 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1544	031125	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1545	031126	444 00 0 00 035357 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1546	031127	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1547	031130	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1548						STOP^
  1549	031131	254 04 0 00 031132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1550	031132	324 00 0 00 031133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1551									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1552									;IN THE SUBTEST) TO LOOP ON ERROR^
  1553
  1554					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1555					;IR ADDX [IR1], IR ADSUB [IR1]
  1556
  1557					;**********
  1558					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-21
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0053

  1559
  1560					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1561					;A WORD OF ALL ZEROS IS ADDED TO AN
  1562					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1563					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1564					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1565					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1566					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1567					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1568					;EVERY BIT OF THE AC.
  1569					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1570			011025		SN=SN+1
  1571		000004	000000			ZZ=ZZ+ZZ
  1572						IFE	ZZ,<ZZ=1>
  1573	031133	200 00 0 00 035360 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1574	031134	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1575	031135	444 00 0 00 035360 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1576	031136	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1577	031137	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1578						STOP^
  1579	031140	254 04 0 00 031141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1580	031141	324 00 0 00 031142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1581									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1582									;IN THE SUBTEST) TO LOOP ON ERROR^
  1583
  1584					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1585					;IR ADDX [IR1], IR ADSUB [IR1]
  1586
  1587					;**********
  1588					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-22
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0054

  1589
  1590					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1591					;A WORD OF ALL ZEROS IS ADDED TO AN
  1592					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1593					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1594					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1595					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1596					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1597					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1598					;EVERY BIT OF THE AC.
  1599					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1600			011026		SN=SN+1
  1601		000010	000000			ZZ=ZZ+ZZ
  1602						IFE	ZZ,<ZZ=1>
  1603	031142	200 00 0 00 035361 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1604	031143	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1605	031144	444 00 0 00 035361 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1606	031145	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1607	031146	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1608						STOP^
  1609	031147	254 04 0 00 031150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1610	031150	324 00 0 00 031151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1611									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1612									;IN THE SUBTEST) TO LOOP ON ERROR^
  1613
  1614					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1615					;IR ADDX [IR1], IR ADSUB [IR1]
  1616
  1617					;**********
  1618					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-23
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0055

  1619
  1620					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1621					;A WORD OF ALL ZEROS IS ADDED TO AN
  1622					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1623					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1624					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1625					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1626					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1627					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1628					;EVERY BIT OF THE AC.
  1629					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1630			011027		SN=SN+1
  1631		000020	000000			ZZ=ZZ+ZZ
  1632						IFE	ZZ,<ZZ=1>
  1633	031151	200 00 0 00 035362 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1634	031152	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1635	031153	444 00 0 00 035362 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1636	031154	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1637	031155	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1638						STOP^
  1639	031156	254 04 0 00 031157 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1640	031157	324 00 0 00 031160 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1641									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1642									;IN THE SUBTEST) TO LOOP ON ERROR^
  1643
  1644					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1645					;IR ADDX [IR1], IR ADSUB [IR1]
  1646
  1647					;**********
  1648					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-24
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0056

  1649
  1650					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1651					;A WORD OF ALL ZEROS IS ADDED TO AN
  1652					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1653					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1654					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1655					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1656					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1657					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1658					;EVERY BIT OF THE AC.
  1659					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1660			011030		SN=SN+1
  1661		000040	000000			ZZ=ZZ+ZZ
  1662						IFE	ZZ,<ZZ=1>
  1663	031160	200 00 0 00 035363 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1664	031161	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1665	031162	444 00 0 00 035363 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1666	031163	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1667	031164	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1668						STOP^
  1669	031165	254 04 0 00 031166 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1670	031166	324 00 0 00 031167 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1671									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1672									;IN THE SUBTEST) TO LOOP ON ERROR^
  1673
  1674					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1675					;IR ADDX [IR1], IR ADSUB [IR1]
  1676
  1677					;**********
  1678					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-25
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0057

  1679
  1680					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1681					;A WORD OF ALL ZEROS IS ADDED TO AN
  1682					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1683					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1684					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1685					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1686					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1687					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1688					;EVERY BIT OF THE AC.
  1689					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1690			011031		SN=SN+1
  1691		000100	000000			ZZ=ZZ+ZZ
  1692						IFE	ZZ,<ZZ=1>
  1693	031167	200 00 0 00 035364 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1694	031170	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1695	031171	444 00 0 00 035364 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1696	031172	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1697	031173	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1698						STOP^
  1699	031174	254 04 0 00 031175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1700	031175	324 00 0 00 031176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1701									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1702									;IN THE SUBTEST) TO LOOP ON ERROR^
  1703
  1704					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1705					;IR ADDX [IR1], IR ADSUB [IR1]
  1706
  1707					;**********
  1708					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-26
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0058

  1709
  1710					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1711					;A WORD OF ALL ZEROS IS ADDED TO AN
  1712					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1713					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1714					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1715					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1716					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1717					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1718					;EVERY BIT OF THE AC.
  1719					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1720			011032		SN=SN+1
  1721		000200	000000			ZZ=ZZ+ZZ
  1722						IFE	ZZ,<ZZ=1>
  1723	031176	200 00 0 00 035365 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1724	031177	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1725	031200	444 00 0 00 035365 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1726	031201	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1727	031202	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1728						STOP^
  1729	031203	254 04 0 00 031204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1730	031204	324 00 0 00 031205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1731									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1732									;IN THE SUBTEST) TO LOOP ON ERROR^
  1733
  1734					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1735					;IR ADDX [IR1], IR ADSUB [IR1]
  1736
  1737					;**********
  1738					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-27
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0059

  1739
  1740					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1741					;A WORD OF ALL ZEROS IS ADDED TO AN
  1742					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1743					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1744					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1745					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1746					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1747					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1748					;EVERY BIT OF THE AC.
  1749					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1750			011033		SN=SN+1
  1751		000400	000000			ZZ=ZZ+ZZ
  1752						IFE	ZZ,<ZZ=1>
  1753	031205	200 00 0 00 035366 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1754	031206	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1755	031207	444 00 0 00 035366 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1756	031210	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1757	031211	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1758						STOP^
  1759	031212	254 04 0 00 031213 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1760	031213	324 00 0 00 031214 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1761									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1762									;IN THE SUBTEST) TO LOOP ON ERROR^
  1763
  1764					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1765					;IR ADDX [IR1], IR ADSUB [IR1]
  1766
  1767					;**********
  1768					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-28
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0060

  1769
  1770					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1771					;A WORD OF ALL ZEROS IS ADDED TO AN
  1772					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1773					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1774					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1775					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1776					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1777					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1778					;EVERY BIT OF THE AC.
  1779					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1780			011034		SN=SN+1
  1781		001000	000000			ZZ=ZZ+ZZ
  1782						IFE	ZZ,<ZZ=1>
  1783	031214	200 00 0 00 035367 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1784	031215	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1785	031216	444 00 0 00 035367 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1786	031217	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1787	031220	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1788						STOP^
  1789	031221	254 04 0 00 031222 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1790	031222	324 00 0 00 031223 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1791									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1792									;IN THE SUBTEST) TO LOOP ON ERROR^
  1793
  1794					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1795					;IR ADDX [IR1], IR ADSUB [IR1]
  1796
  1797					;**********
  1798					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-29
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0061

  1799
  1800					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1801					;A WORD OF ALL ZEROS IS ADDED TO AN
  1802					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1803					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1804					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1805					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1806					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1807					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1808					;EVERY BIT OF THE AC.
  1809					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1810			011035		SN=SN+1
  1811		002000	000000			ZZ=ZZ+ZZ
  1812						IFE	ZZ,<ZZ=1>
  1813	031223	200 00 0 00 035370 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1814	031224	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1815	031225	444 00 0 00 035370 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1816	031226	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1817	031227	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1818						STOP^
  1819	031230	254 04 0 00 031231 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1820	031231	324 00 0 00 031232 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1821									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1822									;IN THE SUBTEST) TO LOOP ON ERROR^
  1823
  1824					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1825					;IR ADDX [IR1], IR ADSUB [IR1]
  1826
  1827					;**********
  1828					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-30
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0062

  1829
  1830					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1831					;A WORD OF ALL ZEROS IS ADDED TO AN
  1832					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1833					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1834					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1835					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1836					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1837					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1838					;EVERY BIT OF THE AC.
  1839					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1840			011036		SN=SN+1
  1841		004000	000000			ZZ=ZZ+ZZ
  1842						IFE	ZZ,<ZZ=1>
  1843	031232	200 00 0 00 035371 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1844	031233	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1845	031234	444 00 0 00 035371 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1846	031235	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1847	031236	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1848						STOP^
  1849	031237	254 04 0 00 031240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1850	031240	324 00 0 00 031241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1851									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1852									;IN THE SUBTEST) TO LOOP ON ERROR^
  1853
  1854					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1855					;IR ADDX [IR1], IR ADSUB [IR1]
  1856
  1857					;**********
  1858					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-31
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0063

  1859
  1860					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1861					;A WORD OF ALL ZEROS IS ADDED TO AN
  1862					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1863					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1864					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1865					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1866					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1867					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1868					;EVERY BIT OF THE AC.
  1869					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1870			011037		SN=SN+1
  1871		010000	000000			ZZ=ZZ+ZZ
  1872						IFE	ZZ,<ZZ=1>
  1873	031241	200 00 0 00 035372 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1874	031242	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1875	031243	444 00 0 00 035372 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1876	031244	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1877	031245	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1878						STOP^
  1879	031246	254 04 0 00 031247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1880	031247	324 00 0 00 031250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1882									;IN THE SUBTEST) TO LOOP ON ERROR^
  1883
  1884					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1885					;IR ADDX [IR1], IR ADSUB [IR1]
  1886
  1887					;**********
  1888					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-32
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0064

  1889
  1890					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1891					;A WORD OF ALL ZEROS IS ADDED TO AN
  1892					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1893					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1894					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1895					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1896					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1897					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1898					;EVERY BIT OF THE AC.
  1899					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1900			011040		SN=SN+1
  1901		020000	000000			ZZ=ZZ+ZZ
  1902						IFE	ZZ,<ZZ=1>
  1903	031250	200 00 0 00 035373 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1904	031251	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1905	031252	444 00 0 00 035373 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1906	031253	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1907	031254	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1908						STOP^
  1909	031255	254 04 0 00 031256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1910	031256	324 00 0 00 031257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1911									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1912									;IN THE SUBTEST) TO LOOP ON ERROR^
  1913
  1914					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1915					;IR ADDX [IR1], IR ADSUB [IR1]
  1916
  1917					;**********
  1918					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-33
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0065

  1919
  1920					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1921					;A WORD OF ALL ZEROS IS ADDED TO AN
  1922					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1923					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1924					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1925					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1926					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1927					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1928					;EVERY BIT OF THE AC.
  1929					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1930			011041		SN=SN+1
  1931		040000	000000			ZZ=ZZ+ZZ
  1932						IFE	ZZ,<ZZ=1>
  1933	031257	200 00 0 00 035374 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1934	031260	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1935	031261	444 00 0 00 035374 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1936	031262	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1937	031263	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1938						STOP^
  1939	031264	254 04 0 00 031265 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1940	031265	324 00 0 00 031266 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1941									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1942									;IN THE SUBTEST) TO LOOP ON ERROR^
  1943
  1944					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1945					;IR ADDX [IR1], IR ADSUB [IR1]
  1946
  1947					;**********
  1948					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-34
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0066

  1949
  1950					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1951					;A WORD OF ALL ZEROS IS ADDED TO AN
  1952					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1953					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1954					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1955					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1956					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1957					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1958					;EVERY BIT OF THE AC.
  1959					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1960			011042		SN=SN+1
  1961		100000	000000			ZZ=ZZ+ZZ
  1962						IFE	ZZ,<ZZ=1>
  1963	031266	200 00 0 00 035375 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1964	031267	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1965	031270	444 00 0 00 035375 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1966	031271	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1967	031272	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1968						STOP^
  1969	031273	254 04 0 00 031274 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1970	031274	324 00 0 00 031275 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1971									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1972									;IN THE SUBTEST) TO LOOP ON ERROR^
  1973
  1974					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  1975					;IR ADDX [IR1], IR ADSUB [IR1]
  1976
  1977					;**********
  1978					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-35
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0067

  1979
  1980					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  1981					;A WORD OF ALL ZEROS IS ADDED TO AN
  1982					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  1983					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  1984					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  1985					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  1986					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  1987					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  1988					;EVERY BIT OF THE AC.
  1989					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  1990			011043		SN=SN+1
  1991		200000	000000			ZZ=ZZ+ZZ
  1992						IFE	ZZ,<ZZ=1>
  1993	031275	200 00 0 00 035376 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  1994	031276	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  1995	031277	444 00 0 00 035376 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  1996	031300	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  1997	031301	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1998						STOP^
  1999	031302	254 04 0 00 031303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2000	031303	324 00 0 00 031304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2002									;IN THE SUBTEST) TO LOOP ON ERROR^
  2003
  2004					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  2005					;IR ADDX [IR1], IR ADSUB [IR1]
  2006
  2007					;**********
  2008					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-36
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0068

  2009
  2010					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2011					;A WORD OF ALL ZEROS IS ADDED TO AN
  2012					;AC CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2013					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS IN IT ORIGINALLY.
  2014					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2015					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2016					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2017					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2018					;EVERY BIT OF THE AC.
  2019					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2020			011044		SN=SN+1
  2021		400000	000000			ZZ=ZZ+ZZ
  2022						IFE	ZZ,<ZZ=1>
  2023	031304	200 00 0 00 035377 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  2024	031305	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO FLOATING ONE
  2025	031306	444 00 0 00 035377 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2026	031307	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2027	031310	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2028						STOP^
  2029	031311	254 04 0 00 031312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2030	031312	324 00 0 00 031313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2031									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2032									;IN THE SUBTEST) TO LOOP ON ERROR^
  2033
  2034					;ADDX; AD AR + EN [ADAP], F CYC ACT EN A[F1],
  2035					;IR ADDX [IR1], IR ADSUB [IR1]
  2036
  2037					;**********
  2038					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 5-37
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0069

  2039
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0070

  2040					;THIS TEST VERIFIES THAT THE ADDITION OF A WORD OF 
  2041					;ALL ZEROS TO AN AC OF ALL ZEROS RESULTS IN
  2042					;C(AC)=0. FIRST THE AC IS CLEARED; THEN, A WORD
  2043					;OF ALL ZEROS IS ADDED TO THE AC. THE RESULT IN
  2044					;THE AC IS THEN CHECKED TO INSURE THAT C(AC)=0
  2045
  2046	031313	200 00 0 00 035330 	A11100:	MOVE	[0]		;PRESET AC TO ZERO
  2047	031314	270 00 0 00 035330 		ADD	[0]		;*ADD OF ZERO TO ZERO SHOULD RESULT IN C(AC)=0
  2048	031315	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2049						STOP^
  2050	031316	254 04 0 00 031317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2051	031317	324 00 0 00 031320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2052									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2053									;IN THE SUBTEST) TO LOOP ON ERROR^
  2054
  2055					;FCE[F1], IR AD SUB [IR1]
  2056					;AD FM + EN [ADFP], AD FM + EN A [ADFP],
  2057					;F CYC ACT EN C[F1], IR ADSUB [IR1]
  2058
  2059					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0071

  2060					;ADD ZERO TO A RIPPLED ONE
  2061
  2062			013200		SN=13200
  2063			000000			ZZ=0
  2064
  2065					A13200:	REPEAT	^D36,
  2066					<;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2067					;TO AN AC  OF ALL ZEROS IS ADDED A
  2068					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2069					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2070					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2071					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2072					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2073					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2074					;EVERY BIT OF THE AC.
  2075					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2076					SN=SN+1
  2077						ZZ=ZZ+ZZ
  2078						IFE	ZZ,<ZZ=1>
  2079						MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2080						ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2081						EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2082						EQV	[0]		;RESULTS IN C(AC)=0
  2083						SKIPE			;PASS TEST IF C(AC)=0
  2084						STOP
  2085					
  2086					;**********
  2087					>
  2088					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2089					;TO AN AC  OF ALL ZEROS IS ADDED A
  2090					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2091					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2092					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2093					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2094					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2095					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2096					;EVERY BIT OF THE AC.
  2097					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2098			013201		SN=SN+1
  2099			000000			ZZ=ZZ+ZZ
  2100			000001			IFE	ZZ,<ZZ=1>
  2101	031320	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2102	031321	270 00 0 00 035334 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2103	031322	444 00 0 00 035334 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2104	031323	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2105	031324	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2106						STOP^
  2107	031325	254 04 0 00 031326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2108	031326	324 00 0 00 031327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2110									;IN THE SUBTEST) TO LOOP ON ERROR^
  2111
  2112					;**********
  2113
  2114					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0072

  2115					;TO AN AC  OF ALL ZEROS IS ADDED A
  2116					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2117					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2118					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2119					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2120					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2121					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2122					;EVERY BIT OF THE AC.
  2123					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2124			013202		SN=SN+1
  2125			000002			ZZ=ZZ+ZZ
  2126						IFE	ZZ,<ZZ=1>
  2127	031327	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2128	031330	270 00 0 00 035335 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2129	031331	444 00 0 00 035335 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2130	031332	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2131	031333	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2132						STOP^
  2133	031334	254 04 0 00 031335 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2134	031335	324 00 0 00 031336 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2135									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2136									;IN THE SUBTEST) TO LOOP ON ERROR^
  2137
  2138					;**********
  2139
  2140					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2141					;TO AN AC  OF ALL ZEROS IS ADDED A
  2142					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2143					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2144					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2145					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2146					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2147					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2148					;EVERY BIT OF THE AC.
  2149					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2150			013203		SN=SN+1
  2151			000004			ZZ=ZZ+ZZ
  2152						IFE	ZZ,<ZZ=1>
  2153	031336	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2154	031337	270 00 0 00 035336 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2155	031340	444 00 0 00 035336 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2156	031341	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2157	031342	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2158						STOP^
  2159	031343	254 04 0 00 031344 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2160	031344	324 00 0 00 031345 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2161									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2162									;IN THE SUBTEST) TO LOOP ON ERROR^
  2163
  2164					;**********
  2165
  2166					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2167					;TO AN AC  OF ALL ZEROS IS ADDED A
  2168					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2169					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0073

  2170					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2171					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2172					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2173					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2174					;EVERY BIT OF THE AC.
  2175					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2176			013204		SN=SN+1
  2177			000010			ZZ=ZZ+ZZ
  2178						IFE	ZZ,<ZZ=1>
  2179	031345	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2180	031346	270 00 0 00 035337 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2181	031347	444 00 0 00 035337 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2182	031350	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2183	031351	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2184						STOP^
  2185	031352	254 04 0 00 031353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2186	031353	324 00 0 00 031354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2187									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2188									;IN THE SUBTEST) TO LOOP ON ERROR^
  2189
  2190					;**********
  2191
  2192					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2193					;TO AN AC  OF ALL ZEROS IS ADDED A
  2194					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2195					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2196					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2197					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2198					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2199					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2200					;EVERY BIT OF THE AC.
  2201					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2202			013205		SN=SN+1
  2203			000020			ZZ=ZZ+ZZ
  2204						IFE	ZZ,<ZZ=1>
  2205	031354	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2206	031355	270 00 0 00 035340 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2207	031356	444 00 0 00 035340 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2208	031357	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2209	031360	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2210						STOP^
  2211	031361	254 04 0 00 031362 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2212	031362	324 00 0 00 031363 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2213									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2214									;IN THE SUBTEST) TO LOOP ON ERROR^
  2215
  2216					;**********
  2217
  2218					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2219					;TO AN AC  OF ALL ZEROS IS ADDED A
  2220					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2221					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2222					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2223					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2224					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0074

  2225					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2226					;EVERY BIT OF THE AC.
  2227					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2228			013206		SN=SN+1
  2229			000040			ZZ=ZZ+ZZ
  2230						IFE	ZZ,<ZZ=1>
  2231	031363	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2232	031364	270 00 0 00 035341 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2233	031365	444 00 0 00 035341 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2234	031366	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2235	031367	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2236						STOP^
  2237	031370	254 04 0 00 031371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2238	031371	324 00 0 00 031372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2239									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2240									;IN THE SUBTEST) TO LOOP ON ERROR^
  2241
  2242					;**********
  2243
  2244					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2245					;TO AN AC  OF ALL ZEROS IS ADDED A
  2246					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2247					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2248					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2249					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2250					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2251					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2252					;EVERY BIT OF THE AC.
  2253					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2254			013207		SN=SN+1
  2255			000100			ZZ=ZZ+ZZ
  2256						IFE	ZZ,<ZZ=1>
  2257	031372	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2258	031373	270 00 0 00 035342 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2259	031374	444 00 0 00 035342 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2260	031375	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2261	031376	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2262						STOP^
  2263	031377	254 04 0 00 031400 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2264	031400	324 00 0 00 031401 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2265									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2266									;IN THE SUBTEST) TO LOOP ON ERROR^
  2267
  2268					;**********
  2269
  2270					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2271					;TO AN AC  OF ALL ZEROS IS ADDED A
  2272					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2273					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2274					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2275					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2276					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2277					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2278					;EVERY BIT OF THE AC.
  2279					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0075

  2280			013210		SN=SN+1
  2281			000200			ZZ=ZZ+ZZ
  2282						IFE	ZZ,<ZZ=1>
  2283	031401	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2284	031402	270 00 0 00 035343 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2285	031403	444 00 0 00 035343 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2286	031404	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2287	031405	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2288						STOP^
  2289	031406	254 04 0 00 031407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2290	031407	324 00 0 00 031410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2291									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2292									;IN THE SUBTEST) TO LOOP ON ERROR^
  2293
  2294					;**********
  2295
  2296					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2297					;TO AN AC  OF ALL ZEROS IS ADDED A
  2298					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2299					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2300					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2301					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2302					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2303					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2304					;EVERY BIT OF THE AC.
  2305					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2306			013211		SN=SN+1
  2307			000400			ZZ=ZZ+ZZ
  2308						IFE	ZZ,<ZZ=1>
  2309	031410	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2310	031411	270 00 0 00 035344 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2311	031412	444 00 0 00 035344 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2312	031413	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2313	031414	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2314						STOP^
  2315	031415	254 04 0 00 031416 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2316	031416	324 00 0 00 031417 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2318									;IN THE SUBTEST) TO LOOP ON ERROR^
  2319
  2320					;**********
  2321
  2322					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2323					;TO AN AC  OF ALL ZEROS IS ADDED A
  2324					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2325					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2326					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2327					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2328					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2329					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2330					;EVERY BIT OF THE AC.
  2331					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2332			013212		SN=SN+1
  2333			001000			ZZ=ZZ+ZZ
  2334						IFE	ZZ,<ZZ=1>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0076

  2335	031417	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2336	031420	270 00 0 00 035345 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2337	031421	444 00 0 00 035345 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2338	031422	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2339	031423	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2340						STOP^
  2341	031424	254 04 0 00 031425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2342	031425	324 00 0 00 031426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2343									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2344									;IN THE SUBTEST) TO LOOP ON ERROR^
  2345
  2346					;**********
  2347
  2348					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2349					;TO AN AC  OF ALL ZEROS IS ADDED A
  2350					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2351					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2352					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2353					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2354					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2355					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2356					;EVERY BIT OF THE AC.
  2357					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2358			013213		SN=SN+1
  2359			002000			ZZ=ZZ+ZZ
  2360						IFE	ZZ,<ZZ=1>
  2361	031426	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2362	031427	270 00 0 00 035346 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2363	031430	444 00 0 00 035346 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2364	031431	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2365	031432	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2366						STOP^
  2367	031433	254 04 0 00 031434 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2368	031434	324 00 0 00 031435 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2370									;IN THE SUBTEST) TO LOOP ON ERROR^
  2371
  2372					;**********
  2373
  2374					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2375					;TO AN AC  OF ALL ZEROS IS ADDED A
  2376					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2377					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2378					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2379					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2380					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2381					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2382					;EVERY BIT OF THE AC.
  2383					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2384			013214		SN=SN+1
  2385			004000			ZZ=ZZ+ZZ
  2386						IFE	ZZ,<ZZ=1>
  2387	031435	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2388	031436	270 00 0 00 035347 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2389	031437	444 00 0 00 035347 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0077

  2390	031440	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2391	031441	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2392						STOP^
  2393	031442	254 04 0 00 031443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2394	031443	324 00 0 00 031444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2395									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2396									;IN THE SUBTEST) TO LOOP ON ERROR^
  2397
  2398					;**********
  2399
  2400					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2401					;TO AN AC  OF ALL ZEROS IS ADDED A
  2402					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2403					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2404					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2405					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2406					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2407					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2408					;EVERY BIT OF THE AC.
  2409					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2410			013215		SN=SN+1
  2411			010000			ZZ=ZZ+ZZ
  2412						IFE	ZZ,<ZZ=1>
  2413	031444	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2414	031445	270 00 0 00 035350 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2415	031446	444 00 0 00 035350 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2416	031447	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2417	031450	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2418						STOP^
  2419	031451	254 04 0 00 031452 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2420	031452	324 00 0 00 031453 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2421									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2422									;IN THE SUBTEST) TO LOOP ON ERROR^
  2423
  2424					;**********
  2425
  2426					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2427					;TO AN AC  OF ALL ZEROS IS ADDED A
  2428					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2429					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2430					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2431					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2432					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2433					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2434					;EVERY BIT OF THE AC.
  2435					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2436			013216		SN=SN+1
  2437			020000			ZZ=ZZ+ZZ
  2438						IFE	ZZ,<ZZ=1>
  2439	031453	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2440	031454	270 00 0 00 035351 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2441	031455	444 00 0 00 035351 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2442	031456	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2443	031457	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2444						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0078

  2445	031460	254 04 0 00 031461 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2446	031461	324 00 0 00 031462 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2447									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2448									;IN THE SUBTEST) TO LOOP ON ERROR^
  2449
  2450					;**********
  2451
  2452					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2453					;TO AN AC  OF ALL ZEROS IS ADDED A
  2454					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2455					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2456					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2457					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2458					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2459					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2460					;EVERY BIT OF THE AC.
  2461					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2462			013217		SN=SN+1
  2463			040000			ZZ=ZZ+ZZ
  2464						IFE	ZZ,<ZZ=1>
  2465	031462	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2466	031463	270 00 0 00 035352 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2467	031464	444 00 0 00 035352 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2468	031465	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2469	031466	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2470						STOP^
  2471	031467	254 04 0 00 031470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2472	031470	324 00 0 00 031471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2473									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2474									;IN THE SUBTEST) TO LOOP ON ERROR^
  2475
  2476					;**********
  2477
  2478					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2479					;TO AN AC  OF ALL ZEROS IS ADDED A
  2480					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2481					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2482					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2483					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2484					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2485					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2486					;EVERY BIT OF THE AC.
  2487					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2488			013220		SN=SN+1
  2489			100000			ZZ=ZZ+ZZ
  2490						IFE	ZZ,<ZZ=1>
  2491	031471	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2492	031472	270 00 0 00 035353 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2493	031473	444 00 0 00 035353 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2494	031474	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2495	031475	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2496						STOP^
  2497	031476	254 04 0 00 031477 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2498	031477	324 00 0 00 031500 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0079

  2500									;IN THE SUBTEST) TO LOOP ON ERROR^
  2501
  2502					;**********
  2503
  2504					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2505					;TO AN AC  OF ALL ZEROS IS ADDED A
  2506					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2507					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2508					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2509					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2510					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2511					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2512					;EVERY BIT OF THE AC.
  2513					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2514			013221		SN=SN+1
  2515			200000			ZZ=ZZ+ZZ
  2516						IFE	ZZ,<ZZ=1>
  2517	031500	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2518	031501	270 00 0 00 035354 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2519	031502	444 00 0 00 035354 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2520	031503	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2521	031504	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2522						STOP^
  2523	031505	254 04 0 00 031506 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2524	031506	324 00 0 00 031507 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2526									;IN THE SUBTEST) TO LOOP ON ERROR^
  2527
  2528					;**********
  2529
  2530					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2531					;TO AN AC  OF ALL ZEROS IS ADDED A
  2532					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2533					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2534					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2535					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2536					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2537					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2538					;EVERY BIT OF THE AC.
  2539					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2540			013222		SN=SN+1
  2541			400000			ZZ=ZZ+ZZ
  2542						IFE	ZZ,<ZZ=1>
  2543	031507	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2544	031510	270 00 0 00 035355 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2545	031511	444 00 0 00 035355 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2546	031512	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2547	031513	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2548						STOP^
  2549	031514	254 04 0 00 031515 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2550	031515	324 00 0 00 031516 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2551									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2552									;IN THE SUBTEST) TO LOOP ON ERROR^
  2553
  2554					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0080

  2555
  2556					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2557					;TO AN AC  OF ALL ZEROS IS ADDED A
  2558					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2559					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2560					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2561					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2562					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2563					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2564					;EVERY BIT OF THE AC.
  2565					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2566			013223		SN=SN+1
  2567		000001	000000			ZZ=ZZ+ZZ
  2568						IFE	ZZ,<ZZ=1>
  2569	031516	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2570	031517	270 00 0 00 035356 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2571	031520	444 00 0 00 035356 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2572	031521	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2573	031522	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2574						STOP^
  2575	031523	254 04 0 00 031524 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2576	031524	324 00 0 00 031525 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2577									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2578									;IN THE SUBTEST) TO LOOP ON ERROR^
  2579
  2580					;**********
  2581
  2582					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2583					;TO AN AC  OF ALL ZEROS IS ADDED A
  2584					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2585					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2586					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2587					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2588					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2589					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2590					;EVERY BIT OF THE AC.
  2591					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2592			013224		SN=SN+1
  2593		000002	000000			ZZ=ZZ+ZZ
  2594						IFE	ZZ,<ZZ=1>
  2595	031525	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2596	031526	270 00 0 00 035357 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2597	031527	444 00 0 00 035357 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2598	031530	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2599	031531	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2600						STOP^
  2601	031532	254 04 0 00 031533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2602	031533	324 00 0 00 031534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2603									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2604									;IN THE SUBTEST) TO LOOP ON ERROR^
  2605
  2606					;**********
  2607
  2608					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2609					;TO AN AC  OF ALL ZEROS IS ADDED A
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0081

  2610					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2611					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2612					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2613					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2614					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2615					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2616					;EVERY BIT OF THE AC.
  2617					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2618			013225		SN=SN+1
  2619		000004	000000			ZZ=ZZ+ZZ
  2620						IFE	ZZ,<ZZ=1>
  2621	031534	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2622	031535	270 00 0 00 035360 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2623	031536	444 00 0 00 035360 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2624	031537	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2625	031540	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2626						STOP^
  2627	031541	254 04 0 00 031542 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2628	031542	324 00 0 00 031543 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2629									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2630									;IN THE SUBTEST) TO LOOP ON ERROR^
  2631
  2632					;**********
  2633
  2634					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2635					;TO AN AC  OF ALL ZEROS IS ADDED A
  2636					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2637					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2638					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2639					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2640					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2641					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2642					;EVERY BIT OF THE AC.
  2643					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2644			013226		SN=SN+1
  2645		000010	000000			ZZ=ZZ+ZZ
  2646						IFE	ZZ,<ZZ=1>
  2647	031543	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2648	031544	270 00 0 00 035361 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2649	031545	444 00 0 00 035361 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2650	031546	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2651	031547	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2652						STOP^
  2653	031550	254 04 0 00 031551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2654	031551	324 00 0 00 031552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2655									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2656									;IN THE SUBTEST) TO LOOP ON ERROR^
  2657
  2658					;**********
  2659
  2660					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2661					;TO AN AC  OF ALL ZEROS IS ADDED A
  2662					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2663					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2664					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0082

  2665					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2666					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2667					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2668					;EVERY BIT OF THE AC.
  2669					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2670			013227		SN=SN+1
  2671		000020	000000			ZZ=ZZ+ZZ
  2672						IFE	ZZ,<ZZ=1>
  2673	031552	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2674	031553	270 00 0 00 035362 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2675	031554	444 00 0 00 035362 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2676	031555	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2677	031556	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2678						STOP^
  2679	031557	254 04 0 00 031560 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2680	031560	324 00 0 00 031561 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2681									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2682									;IN THE SUBTEST) TO LOOP ON ERROR^
  2683
  2684					;**********
  2685
  2686					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2687					;TO AN AC  OF ALL ZEROS IS ADDED A
  2688					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2689					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2690					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2691					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2692					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2693					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2694					;EVERY BIT OF THE AC.
  2695					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2696			013230		SN=SN+1
  2697		000040	000000			ZZ=ZZ+ZZ
  2698						IFE	ZZ,<ZZ=1>
  2699	031561	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2700	031562	270 00 0 00 035363 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2701	031563	444 00 0 00 035363 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2702	031564	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2703	031565	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2704						STOP^
  2705	031566	254 04 0 00 031567 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2706	031567	324 00 0 00 031570 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2707									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2708									;IN THE SUBTEST) TO LOOP ON ERROR^
  2709
  2710					;**********
  2711
  2712					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2713					;TO AN AC  OF ALL ZEROS IS ADDED A
  2714					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2715					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2716					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2717					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2718					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2719					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0083

  2720					;EVERY BIT OF THE AC.
  2721					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2722			013231		SN=SN+1
  2723		000100	000000			ZZ=ZZ+ZZ
  2724						IFE	ZZ,<ZZ=1>
  2725	031570	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2726	031571	270 00 0 00 035364 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2727	031572	444 00 0 00 035364 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2728	031573	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2729	031574	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2730						STOP^
  2731	031575	254 04 0 00 031576 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2732	031576	324 00 0 00 031577 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2733									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2734									;IN THE SUBTEST) TO LOOP ON ERROR^
  2735
  2736					;**********
  2737
  2738					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2739					;TO AN AC  OF ALL ZEROS IS ADDED A
  2740					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2741					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2742					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2743					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2744					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2745					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2746					;EVERY BIT OF THE AC.
  2747					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2748			013232		SN=SN+1
  2749		000200	000000			ZZ=ZZ+ZZ
  2750						IFE	ZZ,<ZZ=1>
  2751	031577	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2752	031600	270 00 0 00 035365 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2753	031601	444 00 0 00 035365 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2754	031602	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2755	031603	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2756						STOP^
  2757	031604	254 04 0 00 031605 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2758	031605	324 00 0 00 031606 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2759									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2760									;IN THE SUBTEST) TO LOOP ON ERROR^
  2761
  2762					;**********
  2763
  2764					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2765					;TO AN AC  OF ALL ZEROS IS ADDED A
  2766					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2767					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2768					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2769					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2770					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2771					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2772					;EVERY BIT OF THE AC.
  2773					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2774			013233		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-13
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0084

  2775		000400	000000			ZZ=ZZ+ZZ
  2776						IFE	ZZ,<ZZ=1>
  2777	031606	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2778	031607	270 00 0 00 035366 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2779	031610	444 00 0 00 035366 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2780	031611	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2781	031612	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2782						STOP^
  2783	031613	254 04 0 00 031614 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2784	031614	324 00 0 00 031615 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2785									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2786									;IN THE SUBTEST) TO LOOP ON ERROR^
  2787
  2788					;**********
  2789
  2790					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2791					;TO AN AC  OF ALL ZEROS IS ADDED A
  2792					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2793					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2794					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2795					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2796					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2797					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2798					;EVERY BIT OF THE AC.
  2799					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2800			013234		SN=SN+1
  2801		001000	000000			ZZ=ZZ+ZZ
  2802						IFE	ZZ,<ZZ=1>
  2803	031615	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2804	031616	270 00 0 00 035367 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2805	031617	444 00 0 00 035367 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2806	031620	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2807	031621	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2808						STOP^
  2809	031622	254 04 0 00 031623 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2810	031623	324 00 0 00 031624 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2811									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2812									;IN THE SUBTEST) TO LOOP ON ERROR^
  2813
  2814					;**********
  2815
  2816					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2817					;TO AN AC  OF ALL ZEROS IS ADDED A
  2818					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2819					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2820					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2821					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2822					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2823					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2824					;EVERY BIT OF THE AC.
  2825					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2826			013235		SN=SN+1
  2827		002000	000000			ZZ=ZZ+ZZ
  2828						IFE	ZZ,<ZZ=1>
  2829	031624	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-14
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0085

  2830	031625	270 00 0 00 035370 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2831	031626	444 00 0 00 035370 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2832	031627	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2833	031630	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2834						STOP^
  2835	031631	254 04 0 00 031632 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2836	031632	324 00 0 00 031633 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2837									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2838									;IN THE SUBTEST) TO LOOP ON ERROR^
  2839
  2840					;**********
  2841
  2842					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2843					;TO AN AC  OF ALL ZEROS IS ADDED A
  2844					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2845					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2846					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2847					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2848					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2849					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2850					;EVERY BIT OF THE AC.
  2851					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2852			013236		SN=SN+1
  2853		004000	000000			ZZ=ZZ+ZZ
  2854						IFE	ZZ,<ZZ=1>
  2855	031633	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2856	031634	270 00 0 00 035371 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2857	031635	444 00 0 00 035371 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2858	031636	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2859	031637	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2860						STOP^
  2861	031640	254 04 0 00 031641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2862	031641	324 00 0 00 031642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2863									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2864									;IN THE SUBTEST) TO LOOP ON ERROR^
  2865
  2866					;**********
  2867
  2868					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2869					;TO AN AC  OF ALL ZEROS IS ADDED A
  2870					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2871					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2872					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2873					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2874					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2875					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2876					;EVERY BIT OF THE AC.
  2877					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2878			013237		SN=SN+1
  2879		010000	000000			ZZ=ZZ+ZZ
  2880						IFE	ZZ,<ZZ=1>
  2881	031642	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2882	031643	270 00 0 00 035372 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2883	031644	444 00 0 00 035372 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2884	031645	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-15
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0086

  2885	031646	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2886						STOP^
  2887	031647	254 04 0 00 031650 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2888	031650	324 00 0 00 031651 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2889									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2890									;IN THE SUBTEST) TO LOOP ON ERROR^
  2891
  2892					;**********
  2893
  2894					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2895					;TO AN AC  OF ALL ZEROS IS ADDED A
  2896					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2897					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2898					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2899					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2900					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2901					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2902					;EVERY BIT OF THE AC.
  2903					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2904			013240		SN=SN+1
  2905		020000	000000			ZZ=ZZ+ZZ
  2906						IFE	ZZ,<ZZ=1>
  2907	031651	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2908	031652	270 00 0 00 035373 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2909	031653	444 00 0 00 035373 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2910	031654	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2911	031655	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2912						STOP^
  2913	031656	254 04 0 00 031657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2914	031657	324 00 0 00 031660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2915									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2916									;IN THE SUBTEST) TO LOOP ON ERROR^
  2917
  2918					;**********
  2919
  2920					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2921					;TO AN AC  OF ALL ZEROS IS ADDED A
  2922					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2923					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2924					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2925					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2926					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2927					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2928					;EVERY BIT OF THE AC.
  2929					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2930			013241		SN=SN+1
  2931		040000	000000			ZZ=ZZ+ZZ
  2932						IFE	ZZ,<ZZ=1>
  2933	031660	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2934	031661	270 00 0 00 035374 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2935	031662	444 00 0 00 035374 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2936	031663	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2937	031664	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2938						STOP^
  2939	031665	254 04 0 00 031666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-16
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0087

  2940	031666	324 00 0 00 031667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2941									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2942									;IN THE SUBTEST) TO LOOP ON ERROR^
  2943
  2944					;**********
  2945
  2946					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2947					;TO AN AC  OF ALL ZEROS IS ADDED A
  2948					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2949					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2950					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2951					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2952					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2953					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2954					;EVERY BIT OF THE AC.
  2955					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2956			013242		SN=SN+1
  2957		100000	000000			ZZ=ZZ+ZZ
  2958						IFE	ZZ,<ZZ=1>
  2959	031667	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2960	031670	270 00 0 00 035375 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2961	031671	444 00 0 00 035375 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2962	031672	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2963	031673	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2964						STOP^
  2965	031674	254 04 0 00 031675 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2966	031675	324 00 0 00 031676 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2967									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2968									;IN THE SUBTEST) TO LOOP ON ERROR^
  2969
  2970					;**********
  2971
  2972					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2973					;TO AN AC  OF ALL ZEROS IS ADDED A
  2974					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  2975					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  2976					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  2977					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  2978					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  2979					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  2980					;EVERY BIT OF THE AC.
  2981					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  2982			013243		SN=SN+1
  2983		200000	000000			ZZ=ZZ+ZZ
  2984						IFE	ZZ,<ZZ=1>
  2985	031676	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  2986	031677	270 00 0 00 035376 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  2987	031700	444 00 0 00 035376 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  2988	031701	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  2989	031702	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  2990						STOP^
  2991	031703	254 04 0 00 031704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2992	031704	324 00 0 00 031705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2993									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2994									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-17
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0088

  2995
  2996					;**********
  2997
  2998					;THIS TEST CHECKS THE 'ADD' INSTRUCTION AND THE ADDER ON A 0NE-BIT-AT-A-TIME BASIS.
  2999					;TO AN AC  OF ALL ZEROS IS ADDED A
  3000					;WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE IN ONE AND ONLY ONE BIT,
  3001					;THE RESULT IS THAT THE AC CONTAINS THE SAME NUMBER WHICH WAS ADDED TO IT.
  3002					;THE AC IS THEN EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  3003					;BE ALL ONES.  NEXT, THE AC IS EQUIVALENCED WITH A WORD OF ALL ZEROS.
  3004					;THE FINAL RESULT SHOULD BE C(AC)=0. THIS
  3005					;TEST IS REPEATED 36 TIMES SO THAT A ONE MAY BE RIPPLED THOUGH
  3006					;EVERY BIT OF THE AC.
  3007					;THE AC IS CHECKED TO INSURE THAT IT CONTAINS ALL ZEROS.
  3008			013244		SN=SN+1
  3009		400000	000000			ZZ=ZZ+ZZ
  3010						IFE	ZZ,<ZZ=1>
  3011	031705	200 00 0 00 035330 		MOVE	[0]		;LOAD AC WITH ALL ZEROS
  3012	031706	270 00 0 00 035377 		ADD	[ZZ]		;*ADD OF FLOATING ONE TO ZERO
  3013	031707	444 00 0 00 035377 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  3014	031710	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3015	031711	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3016						STOP^
  3017	031712	254 04 0 00 031713 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3018	031713	324 00 0 00 031714 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3019									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3020									;IN THE SUBTEST) TO LOOP ON ERROR^
  3021
  3022					;**********
  3023
  3024					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-18
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0089

  3025					;ADD A RIPPLED ONE TO A RIPPLED ONE
  3026
  3027			011200		SN=11200
  3028			000000			ZZ=0
  3029
  3030					A11200:	REPEAT	^D35,
  3031					<;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3032					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3033					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3034					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3035					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3036					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3037					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3038					;SO THAT A ONE WILL BE FLOATED THROUGH
  3039					;BITS 1 THRU 35 OF BOTH AC AND E
  3040					SN=SN+1
  3041						ZZ=ZZ+ZZ
  3042						IFE	ZZ,<ZZ=1>
  3043						MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3044						ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3045						EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3046						EQV	[0]		;RESULTS IN C(AC)=0
  3047						SKIPE			;PASS TEST IF C(AC)=0
  3048						STOP
  3049					
  3050					;**********
  3051					>
  3052					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3053					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3054					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3055					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3056					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3057					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3058					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3059					;SO THAT A ONE WILL BE FLOATED THROUGH
  3060					;BITS 1 THRU 35 OF BOTH AC AND E
  3061			011201		SN=SN+1
  3062			000000			ZZ=ZZ+ZZ
  3063			000001			IFE	ZZ,<ZZ=1>
  3064	031714	200 00 0 00 035334 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3065	031715	270 00 0 00 035334 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3066	031716	444 00 0 00 035335 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3067	031717	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3068	031720	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3069						STOP^
  3070	031721	254 04 0 00 031722 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3071	031722	324 00 0 00 031723 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3072									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3073									;IN THE SUBTEST) TO LOOP ON ERROR^
  3074
  3075					;**********
  3076
  3077					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3078					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3079					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-19
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0090

  3080					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3081					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3082					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3083					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3084					;SO THAT A ONE WILL BE FLOATED THROUGH
  3085					;BITS 1 THRU 35 OF BOTH AC AND E
  3086			011202		SN=SN+1
  3087			000002			ZZ=ZZ+ZZ
  3088						IFE	ZZ,<ZZ=1>
  3089	031723	200 00 0 00 035335 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3090	031724	270 00 0 00 035335 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3091	031725	444 00 0 00 035336 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3092	031726	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3093	031727	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3094						STOP^
  3095	031730	254 04 0 00 031731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3096	031731	324 00 0 00 031732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3097									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3098									;IN THE SUBTEST) TO LOOP ON ERROR^
  3099
  3100					;**********
  3101
  3102					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3103					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3104					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3105					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3106					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3107					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3108					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3109					;SO THAT A ONE WILL BE FLOATED THROUGH
  3110					;BITS 1 THRU 35 OF BOTH AC AND E
  3111			011203		SN=SN+1
  3112			000004			ZZ=ZZ+ZZ
  3113						IFE	ZZ,<ZZ=1>
  3114	031732	200 00 0 00 035336 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3115	031733	270 00 0 00 035336 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3116	031734	444 00 0 00 035337 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3117	031735	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3118	031736	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3119						STOP^
  3120	031737	254 04 0 00 031740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3121	031740	324 00 0 00 031741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3122									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3123									;IN THE SUBTEST) TO LOOP ON ERROR^
  3124
  3125					;**********
  3126
  3127					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3128					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3129					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3130					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3131					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3132					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3133					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3134					;SO THAT A ONE WILL BE FLOATED THROUGH
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-20
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0091

  3135					;BITS 1 THRU 35 OF BOTH AC AND E
  3136			011204		SN=SN+1
  3137			000010			ZZ=ZZ+ZZ
  3138						IFE	ZZ,<ZZ=1>
  3139	031741	200 00 0 00 035337 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3140	031742	270 00 0 00 035337 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3141	031743	444 00 0 00 035340 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3142	031744	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3143	031745	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3144						STOP^
  3145	031746	254 04 0 00 031747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3146	031747	324 00 0 00 031750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3147									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3148									;IN THE SUBTEST) TO LOOP ON ERROR^
  3149
  3150					;**********
  3151
  3152					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3153					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3154					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3155					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3156					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3157					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3158					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3159					;SO THAT A ONE WILL BE FLOATED THROUGH
  3160					;BITS 1 THRU 35 OF BOTH AC AND E
  3161			011205		SN=SN+1
  3162			000020			ZZ=ZZ+ZZ
  3163						IFE	ZZ,<ZZ=1>
  3164	031750	200 00 0 00 035340 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3165	031751	270 00 0 00 035340 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3166	031752	444 00 0 00 035341 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3167	031753	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3168	031754	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3169						STOP^
  3170	031755	254 04 0 00 031756 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3171	031756	324 00 0 00 031757 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3172									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3173									;IN THE SUBTEST) TO LOOP ON ERROR^
  3174
  3175					;**********
  3176
  3177					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3178					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3179					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3180					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3181					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3182					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3183					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3184					;SO THAT A ONE WILL BE FLOATED THROUGH
  3185					;BITS 1 THRU 35 OF BOTH AC AND E
  3186			011206		SN=SN+1
  3187			000040			ZZ=ZZ+ZZ
  3188						IFE	ZZ,<ZZ=1>
  3189	031757	200 00 0 00 035341 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-21
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0092

  3190	031760	270 00 0 00 035341 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3191	031761	444 00 0 00 035342 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3192	031762	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3193	031763	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3194						STOP^
  3195	031764	254 04 0 00 031765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3196	031765	324 00 0 00 031766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3197									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3198									;IN THE SUBTEST) TO LOOP ON ERROR^
  3199
  3200					;**********
  3201
  3202					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3203					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3204					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3205					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3206					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3207					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3208					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3209					;SO THAT A ONE WILL BE FLOATED THROUGH
  3210					;BITS 1 THRU 35 OF BOTH AC AND E
  3211			011207		SN=SN+1
  3212			000100			ZZ=ZZ+ZZ
  3213						IFE	ZZ,<ZZ=1>
  3214	031766	200 00 0 00 035342 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3215	031767	270 00 0 00 035342 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3216	031770	444 00 0 00 035343 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3217	031771	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3218	031772	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3219						STOP^
  3220	031773	254 04 0 00 031774 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3221	031774	324 00 0 00 031775 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3223									;IN THE SUBTEST) TO LOOP ON ERROR^
  3224
  3225					;**********
  3226
  3227					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3228					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3229					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3230					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3231					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3232					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3233					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3234					;SO THAT A ONE WILL BE FLOATED THROUGH
  3235					;BITS 1 THRU 35 OF BOTH AC AND E
  3236			011210		SN=SN+1
  3237			000200			ZZ=ZZ+ZZ
  3238						IFE	ZZ,<ZZ=1>
  3239	031775	200 00 0 00 035343 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3240	031776	270 00 0 00 035343 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3241	031777	444 00 0 00 035344 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3242	032000	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3243	032001	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3244						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-22
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0093

  3245	032002	254 04 0 00 032003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3246	032003	324 00 0 00 032004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3247									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3248									;IN THE SUBTEST) TO LOOP ON ERROR^
  3249
  3250					;**********
  3251
  3252					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3253					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3254					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3255					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3256					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3257					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3258					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3259					;SO THAT A ONE WILL BE FLOATED THROUGH
  3260					;BITS 1 THRU 35 OF BOTH AC AND E
  3261			011211		SN=SN+1
  3262			000400			ZZ=ZZ+ZZ
  3263						IFE	ZZ,<ZZ=1>
  3264	032004	200 00 0 00 035344 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3265	032005	270 00 0 00 035344 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3266	032006	444 00 0 00 035345 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3267	032007	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3268	032010	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3269						STOP^
  3270	032011	254 04 0 00 032012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3271	032012	324 00 0 00 032013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3272									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3273									;IN THE SUBTEST) TO LOOP ON ERROR^
  3274
  3275					;**********
  3276
  3277					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3278					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3279					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3280					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3281					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3282					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3283					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3284					;SO THAT A ONE WILL BE FLOATED THROUGH
  3285					;BITS 1 THRU 35 OF BOTH AC AND E
  3286			011212		SN=SN+1
  3287			001000			ZZ=ZZ+ZZ
  3288						IFE	ZZ,<ZZ=1>
  3289	032013	200 00 0 00 035345 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3290	032014	270 00 0 00 035345 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3291	032015	444 00 0 00 035346 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3292	032016	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3293	032017	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3294						STOP^
  3295	032020	254 04 0 00 032021 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3296	032021	324 00 0 00 032022 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3297									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3298									;IN THE SUBTEST) TO LOOP ON ERROR^
  3299
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-23
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0094

  3300					;**********
  3301
  3302					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3303					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3304					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3305					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3306					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3307					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3308					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3309					;SO THAT A ONE WILL BE FLOATED THROUGH
  3310					;BITS 1 THRU 35 OF BOTH AC AND E
  3311			011213		SN=SN+1
  3312			002000			ZZ=ZZ+ZZ
  3313						IFE	ZZ,<ZZ=1>
  3314	032022	200 00 0 00 035346 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3315	032023	270 00 0 00 035346 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3316	032024	444 00 0 00 035347 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3317	032025	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3318	032026	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3319						STOP^
  3320	032027	254 04 0 00 032030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3321	032030	324 00 0 00 032031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3322									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3323									;IN THE SUBTEST) TO LOOP ON ERROR^
  3324
  3325					;**********
  3326
  3327					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3328					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3329					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3330					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3331					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3332					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3333					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3334					;SO THAT A ONE WILL BE FLOATED THROUGH
  3335					;BITS 1 THRU 35 OF BOTH AC AND E
  3336			011214		SN=SN+1
  3337			004000			ZZ=ZZ+ZZ
  3338						IFE	ZZ,<ZZ=1>
  3339	032031	200 00 0 00 035347 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3340	032032	270 00 0 00 035347 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3341	032033	444 00 0 00 035350 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3342	032034	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3343	032035	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3344						STOP^
  3345	032036	254 04 0 00 032037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3346	032037	324 00 0 00 032040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3347									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3348									;IN THE SUBTEST) TO LOOP ON ERROR^
  3349
  3350					;**********
  3351
  3352					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3353					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3354					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-24
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0095

  3355					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3356					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3357					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3358					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3359					;SO THAT A ONE WILL BE FLOATED THROUGH
  3360					;BITS 1 THRU 35 OF BOTH AC AND E
  3361			011215		SN=SN+1
  3362			010000			ZZ=ZZ+ZZ
  3363						IFE	ZZ,<ZZ=1>
  3364	032040	200 00 0 00 035350 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3365	032041	270 00 0 00 035350 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3366	032042	444 00 0 00 035351 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3367	032043	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3368	032044	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3369						STOP^
  3370	032045	254 04 0 00 032046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3371	032046	324 00 0 00 032047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3372									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3373									;IN THE SUBTEST) TO LOOP ON ERROR^
  3374
  3375					;**********
  3376
  3377					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3378					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3379					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3380					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3381					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3382					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3383					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3384					;SO THAT A ONE WILL BE FLOATED THROUGH
  3385					;BITS 1 THRU 35 OF BOTH AC AND E
  3386			011216		SN=SN+1
  3387			020000			ZZ=ZZ+ZZ
  3388						IFE	ZZ,<ZZ=1>
  3389	032047	200 00 0 00 035351 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3390	032050	270 00 0 00 035351 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3391	032051	444 00 0 00 035352 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3392	032052	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3393	032053	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3394						STOP^
  3395	032054	254 04 0 00 032055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3396	032055	324 00 0 00 032056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3397									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3398									;IN THE SUBTEST) TO LOOP ON ERROR^
  3399
  3400					;**********
  3401
  3402					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3403					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3404					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3405					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3406					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3407					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3408					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3409					;SO THAT A ONE WILL BE FLOATED THROUGH
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-25
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0096

  3410					;BITS 1 THRU 35 OF BOTH AC AND E
  3411			011217		SN=SN+1
  3412			040000			ZZ=ZZ+ZZ
  3413						IFE	ZZ,<ZZ=1>
  3414	032056	200 00 0 00 035352 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3415	032057	270 00 0 00 035352 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3416	032060	444 00 0 00 035353 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3417	032061	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3418	032062	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3419						STOP^
  3420	032063	254 04 0 00 032064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3421	032064	324 00 0 00 032065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3422									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3423									;IN THE SUBTEST) TO LOOP ON ERROR^
  3424
  3425					;**********
  3426
  3427					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3428					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3429					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3430					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3431					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3432					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3433					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3434					;SO THAT A ONE WILL BE FLOATED THROUGH
  3435					;BITS 1 THRU 35 OF BOTH AC AND E
  3436			011220		SN=SN+1
  3437			100000			ZZ=ZZ+ZZ
  3438						IFE	ZZ,<ZZ=1>
  3439	032065	200 00 0 00 035353 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3440	032066	270 00 0 00 035353 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3441	032067	444 00 0 00 035354 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3442	032070	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3443	032071	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3444						STOP^
  3445	032072	254 04 0 00 032073 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3446	032073	324 00 0 00 032074 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3447									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3448									;IN THE SUBTEST) TO LOOP ON ERROR^
  3449
  3450					;**********
  3451
  3452					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3453					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3454					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3455					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3456					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3457					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3458					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3459					;SO THAT A ONE WILL BE FLOATED THROUGH
  3460					;BITS 1 THRU 35 OF BOTH AC AND E
  3461			011221		SN=SN+1
  3462			200000			ZZ=ZZ+ZZ
  3463						IFE	ZZ,<ZZ=1>
  3464	032074	200 00 0 00 035354 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-26
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0097

  3465	032075	270 00 0 00 035354 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3466	032076	444 00 0 00 035355 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3467	032077	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3468	032100	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3469						STOP^
  3470	032101	254 04 0 00 032102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3471	032102	324 00 0 00 032103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3472									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3473									;IN THE SUBTEST) TO LOOP ON ERROR^
  3474
  3475					;**********
  3476
  3477					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3478					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3479					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3480					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3481					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3482					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3483					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3484					;SO THAT A ONE WILL BE FLOATED THROUGH
  3485					;BITS 1 THRU 35 OF BOTH AC AND E
  3486			011222		SN=SN+1
  3487			400000			ZZ=ZZ+ZZ
  3488						IFE	ZZ,<ZZ=1>
  3489	032103	200 00 0 00 035355 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3490	032104	270 00 0 00 035355 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3491	032105	444 00 0 00 035356 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3492	032106	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3493	032107	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3494						STOP^
  3495	032110	254 04 0 00 032111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3496	032111	324 00 0 00 032112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3497									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3498									;IN THE SUBTEST) TO LOOP ON ERROR^
  3499
  3500					;**********
  3501
  3502					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3503					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3504					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3505					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3506					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3507					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3508					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3509					;SO THAT A ONE WILL BE FLOATED THROUGH
  3510					;BITS 1 THRU 35 OF BOTH AC AND E
  3511			011223		SN=SN+1
  3512		000001	000000			ZZ=ZZ+ZZ
  3513						IFE	ZZ,<ZZ=1>
  3514	032112	200 00 0 00 035356 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3515	032113	270 00 0 00 035356 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3516	032114	444 00 0 00 035357 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3517	032115	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3518	032116	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3519						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-27
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0098

  3520	032117	254 04 0 00 032120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3521	032120	324 00 0 00 032121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3522									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3523									;IN THE SUBTEST) TO LOOP ON ERROR^
  3524
  3525					;**********
  3526
  3527					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3528					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3529					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3530					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3531					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3532					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3533					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3534					;SO THAT A ONE WILL BE FLOATED THROUGH
  3535					;BITS 1 THRU 35 OF BOTH AC AND E
  3536			011224		SN=SN+1
  3537		000002	000000			ZZ=ZZ+ZZ
  3538						IFE	ZZ,<ZZ=1>
  3539	032121	200 00 0 00 035357 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3540	032122	270 00 0 00 035357 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3541	032123	444 00 0 00 035360 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3542	032124	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3543	032125	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3544						STOP^
  3545	032126	254 04 0 00 032127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3546	032127	324 00 0 00 032130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3547									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3548									;IN THE SUBTEST) TO LOOP ON ERROR^
  3549
  3550					;**********
  3551
  3552					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3553					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3554					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3555					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3556					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3557					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3558					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3559					;SO THAT A ONE WILL BE FLOATED THROUGH
  3560					;BITS 1 THRU 35 OF BOTH AC AND E
  3561			011225		SN=SN+1
  3562		000004	000000			ZZ=ZZ+ZZ
  3563						IFE	ZZ,<ZZ=1>
  3564	032130	200 00 0 00 035360 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3565	032131	270 00 0 00 035360 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3566	032132	444 00 0 00 035361 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3567	032133	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3568	032134	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3569						STOP^
  3570	032135	254 04 0 00 032136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3571	032136	324 00 0 00 032137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3572									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3573									;IN THE SUBTEST) TO LOOP ON ERROR^
  3574
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-28
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0099

  3575					;**********
  3576
  3577					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3578					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3579					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3580					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3581					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3582					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3583					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3584					;SO THAT A ONE WILL BE FLOATED THROUGH
  3585					;BITS 1 THRU 35 OF BOTH AC AND E
  3586			011226		SN=SN+1
  3587		000010	000000			ZZ=ZZ+ZZ
  3588						IFE	ZZ,<ZZ=1>
  3589	032137	200 00 0 00 035361 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3590	032140	270 00 0 00 035361 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3591	032141	444 00 0 00 035362 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3592	032142	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3593	032143	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3594						STOP^
  3595	032144	254 04 0 00 032145 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3596	032145	324 00 0 00 032146 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3597									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3598									;IN THE SUBTEST) TO LOOP ON ERROR^
  3599
  3600					;**********
  3601
  3602					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3603					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3604					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3605					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3606					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3607					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3608					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3609					;SO THAT A ONE WILL BE FLOATED THROUGH
  3610					;BITS 1 THRU 35 OF BOTH AC AND E
  3611			011227		SN=SN+1
  3612		000020	000000			ZZ=ZZ+ZZ
  3613						IFE	ZZ,<ZZ=1>
  3614	032146	200 00 0 00 035362 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3615	032147	270 00 0 00 035362 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3616	032150	444 00 0 00 035363 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3617	032151	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3618	032152	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3619						STOP^
  3620	032153	254 04 0 00 032154 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3621	032154	324 00 0 00 032155 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3622									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3623									;IN THE SUBTEST) TO LOOP ON ERROR^
  3624
  3625					;**********
  3626
  3627					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3628					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3629					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-29
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0100

  3630					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3631					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3632					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3633					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3634					;SO THAT A ONE WILL BE FLOATED THROUGH
  3635					;BITS 1 THRU 35 OF BOTH AC AND E
  3636			011230		SN=SN+1
  3637		000040	000000			ZZ=ZZ+ZZ
  3638						IFE	ZZ,<ZZ=1>
  3639	032155	200 00 0 00 035363 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3640	032156	270 00 0 00 035363 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3641	032157	444 00 0 00 035364 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3642	032160	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3643	032161	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3644						STOP^
  3645	032162	254 04 0 00 032163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3646	032163	324 00 0 00 032164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3647									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3648									;IN THE SUBTEST) TO LOOP ON ERROR^
  3649
  3650					;**********
  3651
  3652					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3653					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3654					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3655					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3656					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3657					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3658					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3659					;SO THAT A ONE WILL BE FLOATED THROUGH
  3660					;BITS 1 THRU 35 OF BOTH AC AND E
  3661			011231		SN=SN+1
  3662		000100	000000			ZZ=ZZ+ZZ
  3663						IFE	ZZ,<ZZ=1>
  3664	032164	200 00 0 00 035364 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3665	032165	270 00 0 00 035364 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3666	032166	444 00 0 00 035365 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3667	032167	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3668	032170	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3669						STOP^
  3670	032171	254 04 0 00 032172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3671	032172	324 00 0 00 032173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3672									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3673									;IN THE SUBTEST) TO LOOP ON ERROR^
  3674
  3675					;**********
  3676
  3677					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3678					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3679					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3680					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3681					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3682					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3683					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3684					;SO THAT A ONE WILL BE FLOATED THROUGH
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-30
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0101

  3685					;BITS 1 THRU 35 OF BOTH AC AND E
  3686			011232		SN=SN+1
  3687		000200	000000			ZZ=ZZ+ZZ
  3688						IFE	ZZ,<ZZ=1>
  3689	032173	200 00 0 00 035365 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3690	032174	270 00 0 00 035365 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3691	032175	444 00 0 00 035366 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3692	032176	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3693	032177	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3694						STOP^
  3695	032200	254 04 0 00 032201 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3696	032201	324 00 0 00 032202 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3697									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3698									;IN THE SUBTEST) TO LOOP ON ERROR^
  3699
  3700					;**********
  3701
  3702					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3703					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3704					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3705					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3706					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3707					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3708					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3709					;SO THAT A ONE WILL BE FLOATED THROUGH
  3710					;BITS 1 THRU 35 OF BOTH AC AND E
  3711			011233		SN=SN+1
  3712		000400	000000			ZZ=ZZ+ZZ
  3713						IFE	ZZ,<ZZ=1>
  3714	032202	200 00 0 00 035366 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3715	032203	270 00 0 00 035366 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3716	032204	444 00 0 00 035367 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3717	032205	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3718	032206	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3719						STOP^
  3720	032207	254 04 0 00 032210 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3721	032210	324 00 0 00 032211 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3722									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3723									;IN THE SUBTEST) TO LOOP ON ERROR^
  3724
  3725					;**********
  3726
  3727					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3728					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3729					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3730					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3731					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3732					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3733					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3734					;SO THAT A ONE WILL BE FLOATED THROUGH
  3735					;BITS 1 THRU 35 OF BOTH AC AND E
  3736			011234		SN=SN+1
  3737		001000	000000			ZZ=ZZ+ZZ
  3738						IFE	ZZ,<ZZ=1>
  3739	032211	200 00 0 00 035367 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-31
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0102

  3740	032212	270 00 0 00 035367 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3741	032213	444 00 0 00 035370 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3742	032214	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3743	032215	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3744						STOP^
  3745	032216	254 04 0 00 032217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3746	032217	324 00 0 00 032220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3747									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3748									;IN THE SUBTEST) TO LOOP ON ERROR^
  3749
  3750					;**********
  3751
  3752					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3753					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3754					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3755					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3756					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3757					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3758					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3759					;SO THAT A ONE WILL BE FLOATED THROUGH
  3760					;BITS 1 THRU 35 OF BOTH AC AND E
  3761			011235		SN=SN+1
  3762		002000	000000			ZZ=ZZ+ZZ
  3763						IFE	ZZ,<ZZ=1>
  3764	032220	200 00 0 00 035370 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3765	032221	270 00 0 00 035370 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3766	032222	444 00 0 00 035371 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3767	032223	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3768	032224	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3769						STOP^
  3770	032225	254 04 0 00 032226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3771	032226	324 00 0 00 032227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3772									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3773									;IN THE SUBTEST) TO LOOP ON ERROR^
  3774
  3775					;**********
  3776
  3777					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3778					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3779					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3780					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3781					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3782					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3783					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3784					;SO THAT A ONE WILL BE FLOATED THROUGH
  3785					;BITS 1 THRU 35 OF BOTH AC AND E
  3786			011236		SN=SN+1
  3787		004000	000000			ZZ=ZZ+ZZ
  3788						IFE	ZZ,<ZZ=1>
  3789	032227	200 00 0 00 035371 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3790	032230	270 00 0 00 035371 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3791	032231	444 00 0 00 035372 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3792	032232	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3793	032233	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3794						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-32
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0103

  3795	032234	254 04 0 00 032235 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3796	032235	324 00 0 00 032236 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3797									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3798									;IN THE SUBTEST) TO LOOP ON ERROR^
  3799
  3800					;**********
  3801
  3802					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3803					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3804					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3805					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3806					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3807					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3808					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3809					;SO THAT A ONE WILL BE FLOATED THROUGH
  3810					;BITS 1 THRU 35 OF BOTH AC AND E
  3811			011237		SN=SN+1
  3812		010000	000000			ZZ=ZZ+ZZ
  3813						IFE	ZZ,<ZZ=1>
  3814	032236	200 00 0 00 035372 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3815	032237	270 00 0 00 035372 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3816	032240	444 00 0 00 035373 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3817	032241	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3818	032242	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3819						STOP^
  3820	032243	254 04 0 00 032244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3821	032244	324 00 0 00 032245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3822									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3823									;IN THE SUBTEST) TO LOOP ON ERROR^
  3824
  3825					;**********
  3826
  3827					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3828					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3829					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3830					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3831					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3832					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3833					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3834					;SO THAT A ONE WILL BE FLOATED THROUGH
  3835					;BITS 1 THRU 35 OF BOTH AC AND E
  3836			011240		SN=SN+1
  3837		020000	000000			ZZ=ZZ+ZZ
  3838						IFE	ZZ,<ZZ=1>
  3839	032245	200 00 0 00 035373 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3840	032246	270 00 0 00 035373 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3841	032247	444 00 0 00 035374 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3842	032250	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3843	032251	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3844						STOP^
  3845	032252	254 04 0 00 032253 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3846	032253	324 00 0 00 032254 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3847									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3848									;IN THE SUBTEST) TO LOOP ON ERROR^
  3849
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-33
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0104

  3850					;**********
  3851
  3852					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3853					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3854					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3855					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3856					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3857					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3858					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3859					;SO THAT A ONE WILL BE FLOATED THROUGH
  3860					;BITS 1 THRU 35 OF BOTH AC AND E
  3861			011241		SN=SN+1
  3862		040000	000000			ZZ=ZZ+ZZ
  3863						IFE	ZZ,<ZZ=1>
  3864	032254	200 00 0 00 035374 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3865	032255	270 00 0 00 035374 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3866	032256	444 00 0 00 035375 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3867	032257	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3868	032260	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3869						STOP^
  3870	032261	254 04 0 00 032262 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3871	032262	324 00 0 00 032263 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3872									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3873									;IN THE SUBTEST) TO LOOP ON ERROR^
  3874
  3875					;**********
  3876
  3877					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3878					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3879					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
  3880					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3881					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3882					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3883					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3884					;SO THAT A ONE WILL BE FLOATED THROUGH
  3885					;BITS 1 THRU 35 OF BOTH AC AND E
  3886			011242		SN=SN+1
  3887		100000	000000			ZZ=ZZ+ZZ
  3888						IFE	ZZ,<ZZ=1>
  3889	032263	200 00 0 00 035375 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3890	032264	270 00 0 00 035375 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3891	032265	444 00 0 00 035376 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3892	032266	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3893	032267	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3894						STOP^
  3895	032270	254 04 0 00 032271 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3896	032271	324 00 0 00 032272 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3897									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3898									;IN THE SUBTEST) TO LOOP ON ERROR^
  3899
  3900					;**********
  3901
  3902					;THIS TEST VERIFIES THAT THE RESULT OF ADDING C(AC)
  3903					;TO C(E) WHERE AC IS DIFFERENT FROM E BUT C(AC)=
  3904					;C(E)=A ONE IN ONE AND ONLY ONE BIT IS AN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 7-34
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0105

  3905					;AC WHOSE CONTENTS IS NON-ZERO. HENCE, IF A
  3906					;CARRY IS NOT GENERATED IN THE ADDITION PROCESS THE
  3907					;RESULT IN THE AC WILL BE ZERO AND THE TEST
  3908					;WILL FAIL. THIS TEST IS REPEATED 35 TIMES
  3909					;SO THAT A ONE WILL BE FLOATED THROUGH
  3910					;BITS 1 THRU 35 OF BOTH AC AND E
  3911			011243		SN=SN+1
  3912		200000	000000			ZZ=ZZ+ZZ
  3913						IFE	ZZ,<ZZ=1>
  3914	032272	200 00 0 00 035376 		MOVE	[ZZ]		;PRESET AC WITH A FLOATING ONE
  3915	032273	270 00 0 00 035376 		ADD	[ZZ]		;*ADD FLOATING ONE TO SAME SHOULD RESULT IN C(AC) NONZERO
  3916	032274	444 00 0 00 035377 		EQV	[ZZ+ZZ]		;RESULTS IN C(AC)=ALL ONES
  3917	032275	444 00 0 00 035330 		EQV	[0]		;RESULTS IN C(AC)=0
  3918	032276	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3919						STOP^
  3920	032277	254 04 0 00 032300 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3921	032300	324 00 0 00 032301 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3922									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3923									;IN THE SUBTEST) TO LOOP ON ERROR^
  3924
  3925					;**********
  3926
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0106

  3927			011300		SN=11300
  3928			000000			ZZ=0
  3929			000000			YY=0
  3930
  3931					A11300:	REPEAT	^D18,
  3932					<;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  3933					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  3934					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  3935					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  3936					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  3937					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  3938					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  3939					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  3940					;FORMER VALUE PLUS THE CURRENT C(AC)
  3941					SN=SN+1
  3942						YY=YY/2
  3943						ZZ=ZZ+YY
  3944						IFE	YY,<YY=400000>
  3945						IFE	ZZ,<ZZ=400000>
  3946						MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  3947						ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  3948									;POWER SHOULD RESULT IN C(AC)=0.
  3949						SKIPE			;PASS TEST IF C(AC)=0
  3950						STOP
  3951					
  3952					;**********
  3953					>
  3954					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  3955					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  3956					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  3957					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  3958					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  3959					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  3960					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  3961					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  3962					;FORMER VALUE PLUS THE CURRENT C(AC)
  3963			011301		SN=SN+1
  3964			000000			YY=YY/2
  3965			000000			ZZ=ZZ+YY
  3966			400000			IFE	YY,<YY=400000>
  3967			400000			IFE	ZZ,<ZZ=400000>
  3968	032301	200 00 0 00 035377 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  3969	032302	270 00 0 00 035377 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  3970									;POWER SHOULD RESULT IN C(AC)=0.
  3971	032303	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3972						STOP^
  3973	032304	254 04 0 00 032305 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3974	032305	324 00 0 00 032306 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3975									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3976									;IN THE SUBTEST) TO LOOP ON ERROR^
  3977
  3978					;**********
  3979
  3980					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  3981					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0107

  3982					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  3983					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  3984					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  3985					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  3986					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  3987					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  3988					;FORMER VALUE PLUS THE CURRENT C(AC)
  3989			011302		SN=SN+1
  3990			200000			YY=YY/2
  3991			600000			ZZ=ZZ+YY
  3992						IFE	YY,<YY=400000>
  3993						IFE	ZZ,<ZZ=400000>
  3994	032306	200 00 0 00 035400 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  3995	032307	270 00 0 00 035376 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  3996									;POWER SHOULD RESULT IN C(AC)=0.
  3997	032310	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  3998						STOP^
  3999	032311	254 04 0 00 032312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4000	032312	324 00 0 00 032313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4002									;IN THE SUBTEST) TO LOOP ON ERROR^
  4003
  4004					;**********
  4005
  4006					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4007					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4008					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4009					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4010					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4011					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4012					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4013					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4014					;FORMER VALUE PLUS THE CURRENT C(AC)
  4015			011303		SN=SN+1
  4016			100000			YY=YY/2
  4017			700000			ZZ=ZZ+YY
  4018						IFE	YY,<YY=400000>
  4019						IFE	ZZ,<ZZ=400000>
  4020	032313	200 00 0 00 035401 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4021	032314	270 00 0 00 035375 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4022									;POWER SHOULD RESULT IN C(AC)=0.
  4023	032315	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4024						STOP^
  4025	032316	254 04 0 00 032317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4026	032317	324 00 0 00 032320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4027									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4028									;IN THE SUBTEST) TO LOOP ON ERROR^
  4029
  4030					;**********
  4031
  4032					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4033					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4034					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4035					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4036					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0108

  4037					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4038					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4039					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4040					;FORMER VALUE PLUS THE CURRENT C(AC)
  4041			011304		SN=SN+1
  4042			040000			YY=YY/2
  4043			740000			ZZ=ZZ+YY
  4044						IFE	YY,<YY=400000>
  4045						IFE	ZZ,<ZZ=400000>
  4046	032320	200 00 0 00 035402 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4047	032321	270 00 0 00 035374 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4048									;POWER SHOULD RESULT IN C(AC)=0.
  4049	032322	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4050						STOP^
  4051	032323	254 04 0 00 032324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4052	032324	324 00 0 00 032325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4053									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4054									;IN THE SUBTEST) TO LOOP ON ERROR^
  4055
  4056					;**********
  4057
  4058					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4059					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4060					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4061					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4062					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4063					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4064					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4065					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4066					;FORMER VALUE PLUS THE CURRENT C(AC)
  4067			011305		SN=SN+1
  4068			020000			YY=YY/2
  4069			760000			ZZ=ZZ+YY
  4070						IFE	YY,<YY=400000>
  4071						IFE	ZZ,<ZZ=400000>
  4072	032325	200 00 0 00 035403 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4073	032326	270 00 0 00 035373 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4074									;POWER SHOULD RESULT IN C(AC)=0.
  4075	032327	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4076						STOP^
  4077	032330	254 04 0 00 032331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4078	032331	324 00 0 00 032332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4079									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4080									;IN THE SUBTEST) TO LOOP ON ERROR^
  4081
  4082					;**********
  4083
  4084					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4085					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4086					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4087					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4088					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4089					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4090					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4091					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0109

  4092					;FORMER VALUE PLUS THE CURRENT C(AC)
  4093			011306		SN=SN+1
  4094			010000			YY=YY/2
  4095			770000			ZZ=ZZ+YY
  4096						IFE	YY,<YY=400000>
  4097						IFE	ZZ,<ZZ=400000>
  4098	032332	200 00 0 00 035404 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4099	032333	270 00 0 00 035372 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4100									;POWER SHOULD RESULT IN C(AC)=0.
  4101	032334	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4102						STOP^
  4103	032335	254 04 0 00 032336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4104	032336	324 00 0 00 032337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4105									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4106									;IN THE SUBTEST) TO LOOP ON ERROR^
  4107
  4108					;**********
  4109
  4110					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4111					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4112					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4113					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4114					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4115					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4116					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4117					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4118					;FORMER VALUE PLUS THE CURRENT C(AC)
  4119			011307		SN=SN+1
  4120			004000			YY=YY/2
  4121			774000			ZZ=ZZ+YY
  4122						IFE	YY,<YY=400000>
  4123						IFE	ZZ,<ZZ=400000>
  4124	032337	200 00 0 00 035405 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4125	032340	270 00 0 00 035371 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4126									;POWER SHOULD RESULT IN C(AC)=0.
  4127	032341	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4128						STOP^
  4129	032342	254 04 0 00 032343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4130	032343	324 00 0 00 032344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4131									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4132									;IN THE SUBTEST) TO LOOP ON ERROR^
  4133
  4134					;**********
  4135
  4136					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4137					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4138					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4139					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4140					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4141					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4142					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4143					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4144					;FORMER VALUE PLUS THE CURRENT C(AC)
  4145			011310		SN=SN+1
  4146			002000			YY=YY/2
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0110

  4147			776000			ZZ=ZZ+YY
  4148						IFE	YY,<YY=400000>
  4149						IFE	ZZ,<ZZ=400000>
  4150	032344	200 00 0 00 035406 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4151	032345	270 00 0 00 035370 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4152									;POWER SHOULD RESULT IN C(AC)=0.
  4153	032346	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4154						STOP^
  4155	032347	254 04 0 00 032350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4156	032350	324 00 0 00 032351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4157									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4158									;IN THE SUBTEST) TO LOOP ON ERROR^
  4159
  4160					;**********
  4161
  4162					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4163					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4164					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4165					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4166					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4167					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4168					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4169					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4170					;FORMER VALUE PLUS THE CURRENT C(AC)
  4171			011311		SN=SN+1
  4172			001000			YY=YY/2
  4173			777000			ZZ=ZZ+YY
  4174						IFE	YY,<YY=400000>
  4175						IFE	ZZ,<ZZ=400000>
  4176	032351	200 00 0 00 035407 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4177	032352	270 00 0 00 035367 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4178									;POWER SHOULD RESULT IN C(AC)=0.
  4179	032353	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4180						STOP^
  4181	032354	254 04 0 00 032355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4182	032355	324 00 0 00 032356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4183									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4184									;IN THE SUBTEST) TO LOOP ON ERROR^
  4185
  4186					;**********
  4187
  4188					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4189					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4190					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4191					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4192					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4193					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4194					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4195					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4196					;FORMER VALUE PLUS THE CURRENT C(AC)
  4197			011312		SN=SN+1
  4198			000400			YY=YY/2
  4199			777400			ZZ=ZZ+YY
  4200						IFE	YY,<YY=400000>
  4201						IFE	ZZ,<ZZ=400000>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0111

  4202	032356	200 00 0 00 035410 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4203	032357	270 00 0 00 035366 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4204									;POWER SHOULD RESULT IN C(AC)=0.
  4205	032360	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4206						STOP^
  4207	032361	254 04 0 00 032362 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4208	032362	324 00 0 00 032363 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4209									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4210									;IN THE SUBTEST) TO LOOP ON ERROR^
  4211
  4212					;**********
  4213
  4214					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4215					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4216					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4217					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4218					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4219					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4220					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4221					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4222					;FORMER VALUE PLUS THE CURRENT C(AC)
  4223			011313		SN=SN+1
  4224			000200			YY=YY/2
  4225			777600			ZZ=ZZ+YY
  4226						IFE	YY,<YY=400000>
  4227						IFE	ZZ,<ZZ=400000>
  4228	032363	200 00 0 00 035411 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4229	032364	270 00 0 00 035365 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4230									;POWER SHOULD RESULT IN C(AC)=0.
  4231	032365	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4232						STOP^
  4233	032366	254 04 0 00 032367 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4234	032367	324 00 0 00 032370 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4235									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4236									;IN THE SUBTEST) TO LOOP ON ERROR^
  4237
  4238					;**********
  4239
  4240					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4241					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4242					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4243					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4244					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4245					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4246					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4247					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4248					;FORMER VALUE PLUS THE CURRENT C(AC)
  4249			011314		SN=SN+1
  4250			000100			YY=YY/2
  4251			777700			ZZ=ZZ+YY
  4252						IFE	YY,<YY=400000>
  4253						IFE	ZZ,<ZZ=400000>
  4254	032370	200 00 0 00 035412 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4255	032371	270 00 0 00 035364 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4256									;POWER SHOULD RESULT IN C(AC)=0.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0112

  4257	032372	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4258						STOP^
  4259	032373	254 04 0 00 032374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4260	032374	324 00 0 00 032375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4261									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4262									;IN THE SUBTEST) TO LOOP ON ERROR^
  4263
  4264					;**********
  4265
  4266					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4267					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4268					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4269					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4270					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4271					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4272					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4273					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4274					;FORMER VALUE PLUS THE CURRENT C(AC)
  4275			011315		SN=SN+1
  4276			000040			YY=YY/2
  4277			777740			ZZ=ZZ+YY
  4278						IFE	YY,<YY=400000>
  4279						IFE	ZZ,<ZZ=400000>
  4280	032375	200 00 0 00 035413 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4281	032376	270 00 0 00 035363 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4282									;POWER SHOULD RESULT IN C(AC)=0.
  4283	032377	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4284						STOP^
  4285	032400	254 04 0 00 032401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4286	032401	324 00 0 00 032402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4287									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4288									;IN THE SUBTEST) TO LOOP ON ERROR^
  4289
  4290					;**********
  4291
  4292					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4293					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4294					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4295					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4296					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4297					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4298					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4299					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4300					;FORMER VALUE PLUS THE CURRENT C(AC)
  4301			011316		SN=SN+1
  4302			000020			YY=YY/2
  4303			777760			ZZ=ZZ+YY
  4304						IFE	YY,<YY=400000>
  4305						IFE	ZZ,<ZZ=400000>
  4306	032402	200 00 0 00 035414 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4307	032403	270 00 0 00 035362 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4308									;POWER SHOULD RESULT IN C(AC)=0.
  4309	032404	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4310						STOP^
  4311	032405	254 04 0 00 032406 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0113

  4312	032406	324 00 0 00 032407 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4313									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4314									;IN THE SUBTEST) TO LOOP ON ERROR^
  4315
  4316					;**********
  4317
  4318					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4319					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4320					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4321					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4322					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4323					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4324					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4325					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4326					;FORMER VALUE PLUS THE CURRENT C(AC)
  4327			011317		SN=SN+1
  4328			000010			YY=YY/2
  4329			777770			ZZ=ZZ+YY
  4330						IFE	YY,<YY=400000>
  4331						IFE	ZZ,<ZZ=400000>
  4332	032407	200 00 0 00 035415 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4333	032410	270 00 0 00 035361 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4334									;POWER SHOULD RESULT IN C(AC)=0.
  4335	032411	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4336						STOP^
  4337	032412	254 04 0 00 032413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4338	032413	324 00 0 00 032414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4339									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4340									;IN THE SUBTEST) TO LOOP ON ERROR^
  4341
  4342					;**********
  4343
  4344					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4345					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4346					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4347					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4348					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4349					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4350					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4351					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4352					;FORMER VALUE PLUS THE CURRENT C(AC)
  4353			011320		SN=SN+1
  4354			000004			YY=YY/2
  4355			777774			ZZ=ZZ+YY
  4356						IFE	YY,<YY=400000>
  4357						IFE	ZZ,<ZZ=400000>
  4358	032414	200 00 0 00 035416 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4359	032415	270 00 0 00 035360 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4360									;POWER SHOULD RESULT IN C(AC)=0.
  4361	032416	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4362						STOP^
  4363	032417	254 04 0 00 032420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4364	032420	324 00 0 00 032421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4365									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4366									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0114

  4367
  4368					;**********
  4369
  4370					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4371					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4372					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4373					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4374					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4375					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4376					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4377					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4378					;FORMER VALUE PLUS THE CURRENT C(AC)
  4379			011321		SN=SN+1
  4380			000002			YY=YY/2
  4381			777776			ZZ=ZZ+YY
  4382						IFE	YY,<YY=400000>
  4383						IFE	ZZ,<ZZ=400000>
  4384	032421	200 00 0 00 035417 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4385	032422	270 00 0 00 035357 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4386									;POWER SHOULD RESULT IN C(AC)=0.
  4387	032423	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4388						STOP^
  4389	032424	254 04 0 00 032425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4390	032425	324 00 0 00 032426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4391									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4392									;IN THE SUBTEST) TO LOOP ON ERROR^
  4393
  4394					;**********
  4395
  4396					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4397					;36TH POWER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4398					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4399					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHOUT THE
  4400					;ADDER. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4401					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4402					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4403					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MADE EQUAL TO ITS
  4404					;FORMER VALUE PLUS THE CURRENT C(AC)
  4405			011322		SN=SN+1
  4406			000001			YY=YY/2
  4407			777777			ZZ=ZZ+YY
  4408						IFE	YY,<YY=400000>
  4409						IFE	ZZ,<ZZ=400000>
  4410	032426	200 00 0 00 035420 		MOVE	[XWD ZZ,0]	;PRESET AC TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4411	032427	270 00 0 00 035356 		ADD	[XWD YY,0]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4412									;POWER SHOULD RESULT IN C(AC)=0.
  4413	032430	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4414						STOP^
  4415	032431	254 04 0 00 032432 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4416	032432	324 00 0 00 032433 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4417									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4418									;IN THE SUBTEST) TO LOOP ON ERROR^
  4419
  4420					;**********
  4421
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0115

  4422					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0116

  4423			011400		SN=11400
  4424			000000			ZZ=0
  4425			000000			YY=0
  4426
  4427					A11400:	REPEAT	^D18,
  4428					<;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4429					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4430					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4431					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4432					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4433					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4434					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4435					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4436					;FORMER VALUE PLUS THE CURRENT C(AC)
  4437					SN=SN+1
  4438						YY=YY/2
  4439						ZZ=ZZ+YY
  4440						IFE	YY,<YY=400000>
  4441						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4442						MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4443									;POWER SHOULD RESULT IN C(AC)=0.
  4444						ADD	[YY]		;PASS TEST IF C(AC)=0
  4445						SKIPE
  4446						STOP
  4447					
  4448					;**********
  4449					>
  4450					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4451					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4452					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4453					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4454					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4455					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4456					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4457					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4458					;FORMER VALUE PLUS THE CURRENT C(AC)
  4459			011401		SN=SN+1
  4460			000000			YY=YY/2
  4461			000000			ZZ=ZZ+YY
  4462			400000			IFE	YY,<YY=400000>
  4463			400000			IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4464	032433	200 00 0 00 035421 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4465									;POWER SHOULD RESULT IN C(AC)=0.
  4466	032434	270 00 0 00 035355 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4467	032435	332 00 0 00 000000 		SKIPE
  4468						STOP^
  4469	032436	254 04 0 00 032437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4470	032437	324 00 0 00 032440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4471									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4472									;IN THE SUBTEST) TO LOOP ON ERROR^
  4473
  4474					;**********
  4475
  4476					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4477					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0117

  4478					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4479					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4480					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4481					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4482					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4483					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4484					;FORMER VALUE PLUS THE CURRENT C(AC)
  4485			011402		SN=SN+1
  4486			200000			YY=YY/2
  4487			600000			ZZ=ZZ+YY
  4488						IFE	YY,<YY=400000>
  4489						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4490	032440	200 00 0 00 035422 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4491									;POWER SHOULD RESULT IN C(AC)=0.
  4492	032441	270 00 0 00 035354 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4493	032442	332 00 0 00 000000 		SKIPE
  4494						STOP^
  4495	032443	254 04 0 00 032444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4496	032444	324 00 0 00 032445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4497									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4498									;IN THE SUBTEST) TO LOOP ON ERROR^
  4499
  4500					;**********
  4501
  4502					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4503					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4504					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4505					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4506					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4507					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4508					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4509					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4510					;FORMER VALUE PLUS THE CURRENT C(AC)
  4511			011403		SN=SN+1
  4512			100000			YY=YY/2
  4513			700000			ZZ=ZZ+YY
  4514						IFE	YY,<YY=400000>
  4515						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4516	032445	200 00 0 00 035423 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4517									;POWER SHOULD RESULT IN C(AC)=0.
  4518	032446	270 00 0 00 035353 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4519	032447	332 00 0 00 000000 		SKIPE
  4520						STOP^
  4521	032450	254 04 0 00 032451 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4522	032451	324 00 0 00 032452 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4523									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4524									;IN THE SUBTEST) TO LOOP ON ERROR^
  4525
  4526					;**********
  4527
  4528					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4529					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4530					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4531					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4532					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0118

  4533					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4534					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4535					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4536					;FORMER VALUE PLUS THE CURRENT C(AC)
  4537			011404		SN=SN+1
  4538			040000			YY=YY/2
  4539			740000			ZZ=ZZ+YY
  4540						IFE	YY,<YY=400000>
  4541						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4542	032452	200 00 0 00 035424 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4543									;POWER SHOULD RESULT IN C(AC)=0.
  4544	032453	270 00 0 00 035352 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4545	032454	332 00 0 00 000000 		SKIPE
  4546						STOP^
  4547	032455	254 04 0 00 032456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4548	032456	324 00 0 00 032457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4550									;IN THE SUBTEST) TO LOOP ON ERROR^
  4551
  4552					;**********
  4553
  4554					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4555					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4556					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4557					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4558					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4559					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4560					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4561					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4562					;FORMER VALUE PLUS THE CURRENT C(AC)
  4563			011405		SN=SN+1
  4564			020000			YY=YY/2
  4565			760000			ZZ=ZZ+YY
  4566						IFE	YY,<YY=400000>
  4567						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4568	032457	200 00 0 00 035425 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4569									;POWER SHOULD RESULT IN C(AC)=0.
  4570	032460	270 00 0 00 035351 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4571	032461	332 00 0 00 000000 		SKIPE
  4572						STOP^
  4573	032462	254 04 0 00 032463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4574	032463	324 00 0 00 032464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4575									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4576									;IN THE SUBTEST) TO LOOP ON ERROR^
  4577
  4578					;**********
  4579
  4580					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4581					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4582					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4583					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4584					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4585					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4586					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4587					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-13
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0119

  4588					;FORMER VALUE PLUS THE CURRENT C(AC)
  4589			011406		SN=SN+1
  4590			010000			YY=YY/2
  4591			770000			ZZ=ZZ+YY
  4592						IFE	YY,<YY=400000>
  4593						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4594	032464	200 00 0 00 035426 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4595									;POWER SHOULD RESULT IN C(AC)=0.
  4596	032465	270 00 0 00 035350 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4597	032466	332 00 0 00 000000 		SKIPE
  4598						STOP^
  4599	032467	254 04 0 00 032470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4600	032470	324 00 0 00 032471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4601									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4602									;IN THE SUBTEST) TO LOOP ON ERROR^
  4603
  4604					;**********
  4605
  4606					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4607					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4608					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4609					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4610					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4611					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4612					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4613					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4614					;FORMER VALUE PLUS THE CURRENT C(AC)
  4615			011407		SN=SN+1
  4616			004000			YY=YY/2
  4617			774000			ZZ=ZZ+YY
  4618						IFE	YY,<YY=400000>
  4619						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4620	032471	200 00 0 00 035427 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4621									;POWER SHOULD RESULT IN C(AC)=0.
  4622	032472	270 00 0 00 035347 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4623	032473	332 00 0 00 000000 		SKIPE
  4624						STOP^
  4625	032474	254 04 0 00 032475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4626	032475	324 00 0 00 032476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4627									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4628									;IN THE SUBTEST) TO LOOP ON ERROR^
  4629
  4630					;**********
  4631
  4632					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4633					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4634					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4635					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4636					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4637					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4638					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4639					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4640					;FORMER VALUE PLUS THE CURRENT C(AC)
  4641			011410		SN=SN+1
  4642			002000			YY=YY/2
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-14
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0120

  4643			776000			ZZ=ZZ+YY
  4644						IFE	YY,<YY=400000>
  4645						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4646	032476	200 00 0 00 035430 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4647									;POWER SHOULD RESULT IN C(AC)=0.
  4648	032477	270 00 0 00 035346 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4649	032500	332 00 0 00 000000 		SKIPE
  4650						STOP^
  4651	032501	254 04 0 00 032502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4652	032502	324 00 0 00 032503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4653									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4654									;IN THE SUBTEST) TO LOOP ON ERROR^
  4655
  4656					;**********
  4657
  4658					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4659					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4660					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4661					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4662					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4663					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4664					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4665					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4666					;FORMER VALUE PLUS THE CURRENT C(AC)
  4667			011411		SN=SN+1
  4668			001000			YY=YY/2
  4669			777000			ZZ=ZZ+YY
  4670						IFE	YY,<YY=400000>
  4671						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4672	032503	200 00 0 00 035431 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4673									;POWER SHOULD RESULT IN C(AC)=0.
  4674	032504	270 00 0 00 035345 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4675	032505	332 00 0 00 000000 		SKIPE
  4676						STOP^
  4677	032506	254 04 0 00 032507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4678	032507	324 00 0 00 032510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4679									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4680									;IN THE SUBTEST) TO LOOP ON ERROR^
  4681
  4682					;**********
  4683
  4684					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4685					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4686					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4687					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4688					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4689					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4690					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4691					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4692					;FORMER VALUE PLUS THE CURRENT C(AC)
  4693			011412		SN=SN+1
  4694			000400			YY=YY/2
  4695			777400			ZZ=ZZ+YY
  4696						IFE	YY,<YY=400000>
  4697						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-15
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0121

  4698	032510	200 00 0 00 035432 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4699									;POWER SHOULD RESULT IN C(AC)=0.
  4700	032511	270 00 0 00 035344 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4701	032512	332 00 0 00 000000 		SKIPE
  4702						STOP^
  4703	032513	254 04 0 00 032514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4704	032514	324 00 0 00 032515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4705									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4706									;IN THE SUBTEST) TO LOOP ON ERROR^
  4707
  4708					;**********
  4709
  4710					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4711					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4712					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4713					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4714					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4715					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4716					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4717					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4718					;FORMER VALUE PLUS THE CURRENT C(AC)
  4719			011413		SN=SN+1
  4720			000200			YY=YY/2
  4721			777600			ZZ=ZZ+YY
  4722						IFE	YY,<YY=400000>
  4723						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4724	032515	200 00 0 00 035433 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4725									;POWER SHOULD RESULT IN C(AC)=0.
  4726	032516	270 00 0 00 035343 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4727	032517	332 00 0 00 000000 		SKIPE
  4728						STOP^
  4729	032520	254 04 0 00 032521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4730	032521	324 00 0 00 032522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4731									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4732									;IN THE SUBTEST) TO LOOP ON ERROR^
  4733
  4734					;**********
  4735
  4736					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4737					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4738					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4739					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4740					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4741					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4742					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4743					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4744					;FORMER VALUE PLUS THE CURRENT C(AC)
  4745			011414		SN=SN+1
  4746			000100			YY=YY/2
  4747			777700			ZZ=ZZ+YY
  4748						IFE	YY,<YY=400000>
  4749						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4750	032522	200 00 0 00 035434 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4751									;POWER SHOULD RESULT IN C(AC)=0.
  4752	032523	270 00 0 00 035342 		ADD	[YY]		;PASS TEST IF C(AC)=0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-16
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0122

  4753	032524	332 00 0 00 000000 		SKIPE
  4754						STOP^
  4755	032525	254 04 0 00 032526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4756	032526	324 00 0 00 032527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4757									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4758									;IN THE SUBTEST) TO LOOP ON ERROR^
  4759
  4760					;**********
  4761
  4762					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4763					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4764					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4765					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4766					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4767					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4768					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4769					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4770					;FORMER VALUE PLUS THE CURRENT C(AC)
  4771			011415		SN=SN+1
  4772			000040			YY=YY/2
  4773			777740			ZZ=ZZ+YY
  4774						IFE	YY,<YY=400000>
  4775						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4776	032527	200 00 0 00 035435 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4777									;POWER SHOULD RESULT IN C(AC)=0.
  4778	032530	270 00 0 00 035341 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4779	032531	332 00 0 00 000000 		SKIPE
  4780						STOP^
  4781	032532	254 04 0 00 032533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4782	032533	324 00 0 00 032534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4783									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4784									;IN THE SUBTEST) TO LOOP ON ERROR^
  4785
  4786					;**********
  4787
  4788					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4789					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4790					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4791					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4792					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4793					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4794					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4795					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4796					;FORMER VALUE PLUS THE CURRENT C(AC)
  4797			011416		SN=SN+1
  4798			000020			YY=YY/2
  4799			777760			ZZ=ZZ+YY
  4800						IFE	YY,<YY=400000>
  4801						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4802	032534	200 00 0 00 035436 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4803									;POWER SHOULD RESULT IN C(AC)=0.
  4804	032535	270 00 0 00 035340 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4805	032536	332 00 0 00 000000 		SKIPE
  4806						STOP^
  4807	032537	254 04 0 00 032540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-17
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0123

  4808	032540	324 00 0 00 032541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4809									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4810									;IN THE SUBTEST) TO LOOP ON ERROR^
  4811
  4812					;**********
  4813
  4814					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4815					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4816					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4817					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4818					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4819					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4820					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4821					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4822					;FORMER VALUE PLUS THE CURRENT C(AC)
  4823			011417		SN=SN+1
  4824			000010			YY=YY/2
  4825			777770			ZZ=ZZ+YY
  4826						IFE	YY,<YY=400000>
  4827						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4828	032541	200 00 0 00 035437 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4829									;POWER SHOULD RESULT IN C(AC)=0.
  4830	032542	270 00 0 00 035337 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4831	032543	332 00 0 00 000000 		SKIPE
  4832						STOP^
  4833	032544	254 04 0 00 032545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4834	032545	324 00 0 00 032546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4835									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4836									;IN THE SUBTEST) TO LOOP ON ERROR^
  4837
  4838					;**********
  4839
  4840					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4841					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4842					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4843					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4844					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4845					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4846					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4847					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4848					;FORMER VALUE PLUS THE CURRENT C(AC)
  4849			011420		SN=SN+1
  4850			000004			YY=YY/2
  4851			777774			ZZ=ZZ+YY
  4852						IFE	YY,<YY=400000>
  4853						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4854	032546	200 00 0 00 035440 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4855									;POWER SHOULD RESULT IN C(AC)=0.
  4856	032547	270 00 0 00 035336 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4857	032550	332 00 0 00 000000 		SKIPE
  4858						STOP^
  4859	032551	254 04 0 00 032552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4860	032552	324 00 0 00 032553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4861									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4862									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 8-18
DSKAB1	MAC	28-Mar-78 12:29		TEST OF THE ADD INSTRUCTION                                                        SEQ 0124

  4863
  4864					;**********
  4865
  4866					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4867					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4868					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4869					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4870					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4871					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4872					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4873					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4874					;FORMER VALUE PLUS THE CURRENT C(AC)
  4875			011421		SN=SN+1
  4876			000002			YY=YY/2
  4877			777776			ZZ=ZZ+YY
  4878						IFE	YY,<YY=400000>
  4879						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4880	032553	200 00 0 00 035441 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4881									;POWER SHOULD RESULT IN C(AC)=0.
  4882	032554	270 00 0 00 035335 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4883	032555	332 00 0 00 000000 		SKIPE
  4884						STOP^
  4885	032556	254 04 0 00 032557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4886	032557	324 00 0 00 032560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4887									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4888									;IN THE SUBTEST) TO LOOP ON ERROR^
  4889
  4890					;**********
  4891
  4892					;THIS TEST VERIFIES THAT THE ADDITION OF TWO NUMBERS WHOSE SUM IS 2 RAISED TO THE
  4893					;36TH POSER WILL RESULT IN THE C(AC)=0 SINCE THIS NUMBER IS ONE LARGER
  4894					;THAN THE 36 BIT HARDWARE OF THE PROCESSOR IS DESIGNED TO HANDLE. THIS TEST
  4895					;ALSO VERIFIES CARRY GENERATION AND PROPAGATION THROUGHT THE
  4896					;ADDEC. THIS TEST IS REPEATED 36 TIMES. TESTING BEGINS WITH LOADING THE
  4897					;AC WITH 400000000000 AND ADDING THE SAME NUMBER TO IT; THEN,
  4898					;CHECKING FOR C(AC)=0. IN THE SUBSEQUENT 35 TESTS, THE NUMBER
  4899					;LOADED INTO THE AC IS HALVED EACH TIME AND C(E) IS MODE EQUAL TO ITS
  4900					;FORMER VALUE PLUS THE CURRENT C(AC)
  4901			011422		SN=SN+1
  4902			000001			YY=YY/2
  4903			777777			ZZ=ZZ+YY
  4904						IFE	YY,<YY=400000>
  4905						IFE	ZZ,<ZZ=400000>	;PRESET AB TO A RIPPLED ONE STARTING WITH BIT POSITION 0
  4906	032560	200 00 0 00 035442 		MOVE	[XWD -1,ZZ]	;*ADD OF TWO NUMBERS TOTALING 2 RAISED TO THE 36TH
  4907									;POWER SHOULD RESULT IN C(AC)=0.
  4908	032561	270 00 0 00 035334 		ADD	[YY]		;PASS TEST IF C(AC)=0
  4909	032562	332 00 0 00 000000 		SKIPE
  4910						STOP^
  4911	032563	254 04 0 00 032564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4912	032564	324 00 0 00 032565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4913									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4914									;IN THE SUBTEST) TO LOOP ON ERROR^
  4915
  4916					;**********
  4917
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 9
DSKAB1	MAC	28-Mar-78 12:29		SPECIAL KI10 FOUR BIT ADDER TEST                                                   SEQ 0125

  4918					SUBTTL	SPECIAL KI10 FOUR BIT ADDER TEST
  4919
  4920					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  4921					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  4922					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 33 TO BIT 32.
  4923
  4924	032565	200 00 0 00 035443 	A13500:	MOVE	[-1,,-5]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 33
  4925	032566	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 33 TO BIT 32
  4926	032567	444 00 0 00 035440 		EQV	[-1,,-4]	;RESULT IN AC=ALL ONES
  4927	032570	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  4928	032571	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4929						STOP^
  4930	032572	254 04 0 00 032573 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4931	032573	324 00 0 00 032574 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4932									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4933									;IN THE SUBTEST) TO LOOP ON ERROR^
  4934
  4935					;**********
  4936
  4937					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  4938					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  4939					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 29 TO BIT 28.
  4940
  4941	032574	200 00 0 00 035444 	A13600:	MOVE	[-1,,-101]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 29
  4942	032575	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 29 TO BIT 28
  4943	032576	444 00 0 00 035434 		EQV	[-1,,-100]	;RESULT IN AC=ALL ONES
  4944	032577	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  4945	032600	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4946						STOP^
  4947	032601	254 04 0 00 032602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4948	032602	324 00 0 00 032603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4949									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4950									;IN THE SUBTEST) TO LOOP ON ERROR^
  4951
  4952					;**********
  4953
  4954					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  4955					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  4956					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 25 TO BIT 24.
  4957
  4958	032603	200 00 0 00 035445 	A13700:	MOVE	[-1,,-2001]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 25
  4959	032604	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 25 TO BIT 24
  4960	032605	444 00 0 00 035430 		EQV	[-1,,-2000]	;RESULT IN AC=ALL ONES
  4961	032606	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  4962	032607	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4963						STOP^
  4964	032610	254 04 0 00 032611 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4965	032611	324 00 0 00 032612 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4966									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4967									;IN THE SUBTEST) TO LOOP ON ERROR^
  4968
  4969					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 10
DSKAB1	MAC	28-Mar-78 12:29		SPECIAL KI10 FOUR BIT ADDER TEST                                                   SEQ 0126

  4970					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  4971					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  4972					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 21 TO BIT 20.
  4973
  4974	032612	200 00 0 00 035446 	A14000:	MOVE	[-1,,-40001]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 21
  4975	032613	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 21 TO BIT 20
  4976	032614	444 00 0 00 035424 		EQV	[-1,,-40000]	;RESULT IN AC=ALL ONES
  4977	032615	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  4978	032616	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4979						STOP^
  4980	032617	254 04 0 00 032620 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4981	032620	324 00 0 00 032621 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4982									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4983									;IN THE SUBTEST) TO LOOP ON ERROR^
  4984
  4985					;**********
  4986
  4987					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  4988					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  4989					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 18 TO BIT 17.
  4990
  4991	032621	200 00 0 00 035447 	A14100:	MOVE	[-1,,-400001]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 18
  4992	032622	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 18 TO BIT 17
  4993	032623	444 00 0 00 035421 		EQV	[-1,,400000]	;RESULT IN AC=ALL ONES
  4994	032624	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  4995	032625	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  4996						STOP^
  4997	032626	254 04 0 00 032627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4998	032627	324 00 0 00 032630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5000									;IN THE SUBTEST) TO LOOP ON ERROR^
  5001
  5002					;**********
  5003
  5004					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5005					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5006					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 14 TO BIT 13.
  5007
  5008	032630	200 00 0 00 035450 	A14200:	MOVE	[-11,,-1]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 14
  5009	032631	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 14 TO BIT 13
  5010	032632	444 00 0 00 035415 		EQV	[-10,,0]	;RESULT IN AC=ALL ONES
  5011	032633	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  5012	032634	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5013						STOP^
  5014	032635	254 04 0 00 032636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5015	032636	324 00 0 00 032637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5017									;IN THE SUBTEST) TO LOOP ON ERROR^
  5018
  5019					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 11
DSKAB1	MAC	28-Mar-78 12:29		SPECIAL KI10 FOUR BIT ADDER TEST                                                   SEQ 0127

  5020					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5021					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5022					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 10 TO BIT 9.
  5023
  5024	032637	200 00 0 00 035451 	A14300:	MOVE	[-201,,-1]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 10
  5025	032640	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 10 TO BIT 9
  5026	032641	444 00 0 00 035411 		EQV	[-200,,0]	;RESULT IN AC=ALL ONES
  5027	032642	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  5028	032643	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5029						STOP^
  5030	032644	254 04 0 00 032645 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5031	032645	324 00 0 00 032646 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5032									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5033									;IN THE SUBTEST) TO LOOP ON ERROR^
  5034
  5035					;**********
  5036
  5037					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5038					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5039					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 6 TO BIT 5.
  5040
  5041	032646	200 00 0 00 035452 	A14400:	MOVE	[-4001,,-1]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 6
  5042	032647	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 6 TO BIT 5
  5043	032650	444 00 0 00 035405 		EQV	[-4000,,0]	;RESULT IN AC=ALL ONES
  5044	032651	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  5045	032652	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5046						STOP^
  5047	032653	254 04 0 00 032654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5048	032654	324 00 0 00 032655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5049									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5050									;IN THE SUBTEST) TO LOOP ON ERROR^
  5051
  5052					;**********
  5053
  5054					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5055					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5056					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 2 TO BIT 1.
  5057
  5058	032655	200 00 0 00 035453 	A14500:	MOVE	[-100001,,-1]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 2
  5059	032656	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 2 TO BIT 1
  5060	032657	444 00 0 00 035401 		EQV	[-100000,,0]	;RESULT IN AC=ALL ONES
  5061	032660	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  5062	032661	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5063						STOP^
  5064	032662	254 04 0 00 032663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5065	032663	324 00 0 00 032664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5066									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5067									;IN THE SUBTEST) TO LOOP ON ERROR^
  5068
  5069					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 12
DSKAB1	MAC	28-Mar-78 12:29		SPECIAL KI10 FOUR BIT ADDER TEST                                                   SEQ 0128

  5070					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5071					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5072					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT 1 TO BIT 0.
  5073
  5074	032664	200 00 0 00 035454 	A14600:	MOVE	[-200001,,-1]	;PRESET AC WITH ALL ONES EXCEPT FOR BIT 1
  5075	032665	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT 1 TO BIT 0
  5076	032666	444 00 0 00 035400 		EQV	[600000,,0]	;RESULT IN AC=ALL ONES
  5077	032667	444 00 0 00 035330 		EQV	[0]		;RESULT IN AC=0
  5078	032670	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5079						STOP^
  5080	032671	254 04 0 00 032672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5081	032672	324 00 0 00 032673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5082									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5083									;IN THE SUBTEST) TO LOOP ON ERROR^
  5084
  5085					;**********
  5086
  5087					;THIS TEST CHECKS THE CARRY FUNCTION FROM THE MOST SIGNIFICANT BIT OF A FOUR
  5088					;BIT ADDER TO THE LEAST SIGNIFICANT BIT OF THE NEXT SIGNIFICANT FOUR BIT ADDER.
  5089					;SPECIFICALLY, IT IS VERIFIED THAT AN ILLEGAL CARRY DOES NOT OCCUR FROM BIT -1TO BIT 35.
  5090
  5091	032673	200 00 0 00 035442 	A14700:	MOVE	[-1,,-1]	;PRESET AC WITH ALL ONES
  5092	032674	270 00 0 00 035334 		ADD	[1]		;*ADD SHOULD NOT CAUSE CARRY FROM BIT -1 TO BIT 35
  5093	032675	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5094						STOP^
  5095	032676	254 04 0 00 032677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5096	032677	324 00 0 00 032700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5097									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5098									;IN THE SUBTEST) TO LOOP ON ERROR^
  5099
  5100					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0129

  5101					SUBTTL	TEST OF SUB AND COMPARE INSTRUCTIONS
  5102
  5103					;THIS TEST VERIFIES THAT IF A NON ZERO POSITIVE NUMBER IN E IS
  5104					;SUBTRACTED FROM THE AC WHEN C(AC)=0, THE RESULT IN THE AC
  5105					;IS NEGATIVE
  5106
  5107	032700	200 00 0 00 035330 	A11500:	MOVE	[0]		;PRESET AC TO ZERO
  5108	032701	274 00 0 00 035455 		SUB	[XWD 0,-1]	;*SUB OF POSITIVE NONZERO NUMBER FROM AC OF ALL ZEROS
  5109									;SHOULD RESULT IN C(AC) NEGATIVE
  5110	032702	331 00 0 00 000000 		SKIPL			;PASS TEST IF C(AC) IS NEGATIVE
  5111						STOP^
  5112	032703	254 04 0 00 032704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5113	032704	324 00 0 00 032705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5114									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5115									;IN THE SUBTEST) TO LOOP ON ERROR^
  5116
  5117					;AD AR- EN D [ADAM], F CYC ACT ENB [F1],
  5118					;IR SUBX[IR1], IR ADSUB[IR1]
  5119
  5120					;**********
  5121
  5122					;THIS TEST VERIFIES THAT IF A WORD OF ALL ZEROS IS
  5123					;SUBTRACTED FROM AN AC OF ALL ZEROS, THE RESULT
  5124					;IS AN AC OF ZEROS.
  5125
  5126	032705	200 00 0 00 035330 	A11600:	MOVE	[0]		;PRESET AC TO ZERO
  5127	032706	274 00 0 00 035330 		SUB	[0]		;*SUB OF 0 FROM 0 SHOULD RESULT IN C(AC)=0
  5128	032707	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5129						STOP^
  5130	032710	254 04 0 00 032711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5131	032711	324 00 0 00 032712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5132									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5133									;IN THE SUBTEST) TO LOOP ON ERROR^
  5134					;AD CRY 36[ADCR], F CYC ACT EN D[F1], IF SUBX [IR1]
  5135
  5136					;**********
  5137					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0130

  5138			011700		SN=11700
  5139			000000			ZZ=0
  5140
  5141					A11700:	REPEAT	^D36,
  5142					<;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5143					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5144					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5145					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5146					SN=SN+1
  5147						ZZ=ZZ+ZZ
  5148						IFE	ZZ,<ZZ=1>
  5149						MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5150						SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5151						SKIPE			;PASS TEST IF C(AC)=0
  5152						STOP
  5153					
  5154					;**********
  5155					>
  5156					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5157					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5158					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5159					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5160			011701		SN=SN+1
  5161			000000			ZZ=ZZ+ZZ
  5162			000001			IFE	ZZ,<ZZ=1>
  5163	032712	200 00 0 00 035334 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5164	032713	274 00 0 00 035334 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5165	032714	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5166						STOP^
  5167	032715	254 04 0 00 032716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5168	032716	324 00 0 00 032717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5169									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5170									;IN THE SUBTEST) TO LOOP ON ERROR^
  5171
  5172					;**********
  5173
  5174					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5175					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5176					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5177					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5178			011702		SN=SN+1
  5179			000002			ZZ=ZZ+ZZ
  5180						IFE	ZZ,<ZZ=1>
  5181	032717	200 00 0 00 035335 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5182	032720	274 00 0 00 035335 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5183	032721	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5184						STOP^
  5185	032722	254 04 0 00 032723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5186	032723	324 00 0 00 032724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5187									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5188									;IN THE SUBTEST) TO LOOP ON ERROR^
  5189
  5190					;**********
  5191
  5192					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0131

  5193					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5194					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5195					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5196			011703		SN=SN+1
  5197			000004			ZZ=ZZ+ZZ
  5198						IFE	ZZ,<ZZ=1>
  5199	032724	200 00 0 00 035336 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5200	032725	274 00 0 00 035336 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5201	032726	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5202						STOP^
  5203	032727	254 04 0 00 032730 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5204	032730	324 00 0 00 032731 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5205									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5206									;IN THE SUBTEST) TO LOOP ON ERROR^
  5207
  5208					;**********
  5209
  5210					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5211					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5212					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5213					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5214			011704		SN=SN+1
  5215			000010			ZZ=ZZ+ZZ
  5216						IFE	ZZ,<ZZ=1>
  5217	032731	200 00 0 00 035337 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5218	032732	274 00 0 00 035337 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5219	032733	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5220						STOP^
  5221	032734	254 04 0 00 032735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5222	032735	324 00 0 00 032736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5223									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5224									;IN THE SUBTEST) TO LOOP ON ERROR^
  5225
  5226					;**********
  5227
  5228					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5229					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5230					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5231					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5232			011705		SN=SN+1
  5233			000020			ZZ=ZZ+ZZ
  5234						IFE	ZZ,<ZZ=1>
  5235	032736	200 00 0 00 035340 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5236	032737	274 00 0 00 035340 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5237	032740	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5238						STOP^
  5239	032741	254 04 0 00 032742 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5240	032742	324 00 0 00 032743 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5241									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5242									;IN THE SUBTEST) TO LOOP ON ERROR^
  5243
  5244					;**********
  5245
  5246					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5247					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0132

  5248					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5249					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5250			011706		SN=SN+1
  5251			000040			ZZ=ZZ+ZZ
  5252						IFE	ZZ,<ZZ=1>
  5253	032743	200 00 0 00 035341 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5254	032744	274 00 0 00 035341 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5255	032745	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5256						STOP^
  5257	032746	254 04 0 00 032747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5258	032747	324 00 0 00 032750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5259									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5260									;IN THE SUBTEST) TO LOOP ON ERROR^
  5261
  5262					;**********
  5263
  5264					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5265					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5266					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5267					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5268			011707		SN=SN+1
  5269			000100			ZZ=ZZ+ZZ
  5270						IFE	ZZ,<ZZ=1>
  5271	032750	200 00 0 00 035342 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5272	032751	274 00 0 00 035342 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5273	032752	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5274						STOP^
  5275	032753	254 04 0 00 032754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5276	032754	324 00 0 00 032755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5277									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5278									;IN THE SUBTEST) TO LOOP ON ERROR^
  5279
  5280					;**********
  5281
  5282					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5283					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5284					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5285					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5286			011710		SN=SN+1
  5287			000200			ZZ=ZZ+ZZ
  5288						IFE	ZZ,<ZZ=1>
  5289	032755	200 00 0 00 035343 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5290	032756	274 00 0 00 035343 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5291	032757	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5292						STOP^
  5293	032760	254 04 0 00 032761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5294	032761	324 00 0 00 032762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5295									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5296									;IN THE SUBTEST) TO LOOP ON ERROR^
  5297
  5298					;**********
  5299
  5300					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5301					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5302					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0133

  5303					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5304			011711		SN=SN+1
  5305			000400			ZZ=ZZ+ZZ
  5306						IFE	ZZ,<ZZ=1>
  5307	032762	200 00 0 00 035344 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5308	032763	274 00 0 00 035344 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5309	032764	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5310						STOP^
  5311	032765	254 04 0 00 032766 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5312	032766	324 00 0 00 032767 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5313									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5314									;IN THE SUBTEST) TO LOOP ON ERROR^
  5315
  5316					;**********
  5317
  5318					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5319					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5320					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5321					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5322			011712		SN=SN+1
  5323			001000			ZZ=ZZ+ZZ
  5324						IFE	ZZ,<ZZ=1>
  5325	032767	200 00 0 00 035345 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5326	032770	274 00 0 00 035345 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5327	032771	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5328						STOP^
  5329	032772	254 04 0 00 032773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5330	032773	324 00 0 00 032774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5331									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5332									;IN THE SUBTEST) TO LOOP ON ERROR^
  5333
  5334					;**********
  5335
  5336					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5337					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5338					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5339					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5340			011713		SN=SN+1
  5341			002000			ZZ=ZZ+ZZ
  5342						IFE	ZZ,<ZZ=1>
  5343	032774	200 00 0 00 035346 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5344	032775	274 00 0 00 035346 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5345	032776	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5346						STOP^
  5347	032777	254 04 0 00 033000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5348	033000	324 00 0 00 033001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5349									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5350									;IN THE SUBTEST) TO LOOP ON ERROR^
  5351
  5352					;**********
  5353
  5354					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5355					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5356					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5357					;TIMES IN ORDER TO TEST ALL 36 BITS.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0134

  5358			011714		SN=SN+1
  5359			004000			ZZ=ZZ+ZZ
  5360						IFE	ZZ,<ZZ=1>
  5361	033001	200 00 0 00 035347 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5362	033002	274 00 0 00 035347 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5363	033003	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5364						STOP^
  5365	033004	254 04 0 00 033005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5366	033005	324 00 0 00 033006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5367									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5368									;IN THE SUBTEST) TO LOOP ON ERROR^
  5369
  5370					;**********
  5371
  5372					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5373					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5374					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5375					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5376			011715		SN=SN+1
  5377			010000			ZZ=ZZ+ZZ
  5378						IFE	ZZ,<ZZ=1>
  5379	033006	200 00 0 00 035350 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5380	033007	274 00 0 00 035350 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5381	033010	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5382						STOP^
  5383	033011	254 04 0 00 033012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5384	033012	324 00 0 00 033013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5385									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5386									;IN THE SUBTEST) TO LOOP ON ERROR^
  5387
  5388					;**********
  5389
  5390					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5391					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5392					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5393					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5394			011716		SN=SN+1
  5395			020000			ZZ=ZZ+ZZ
  5396						IFE	ZZ,<ZZ=1>
  5397	033013	200 00 0 00 035351 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5398	033014	274 00 0 00 035351 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5399	033015	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5400						STOP^
  5401	033016	254 04 0 00 033017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5402	033017	324 00 0 00 033020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5403									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5404									;IN THE SUBTEST) TO LOOP ON ERROR^
  5405
  5406					;**********
  5407
  5408					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5409					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5410					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5411					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5412			011717		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0135

  5413			040000			ZZ=ZZ+ZZ
  5414						IFE	ZZ,<ZZ=1>
  5415	033020	200 00 0 00 035352 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5416	033021	274 00 0 00 035352 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5417	033022	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5418						STOP^
  5419	033023	254 04 0 00 033024 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5420	033024	324 00 0 00 033025 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5421									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5422									;IN THE SUBTEST) TO LOOP ON ERROR^
  5423
  5424					;**********
  5425
  5426					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5427					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5428					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5429					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5430			011720		SN=SN+1
  5431			100000			ZZ=ZZ+ZZ
  5432						IFE	ZZ,<ZZ=1>
  5433	033025	200 00 0 00 035353 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5434	033026	274 00 0 00 035353 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5435	033027	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5436						STOP^
  5437	033030	254 04 0 00 033031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5438	033031	324 00 0 00 033032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5439									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5440									;IN THE SUBTEST) TO LOOP ON ERROR^
  5441
  5442					;**********
  5443
  5444					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5445					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5446					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5447					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5448			011721		SN=SN+1
  5449			200000			ZZ=ZZ+ZZ
  5450						IFE	ZZ,<ZZ=1>
  5451	033032	200 00 0 00 035354 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5452	033033	274 00 0 00 035354 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5453	033034	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5454						STOP^
  5455	033035	254 04 0 00 033036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5456	033036	324 00 0 00 033037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5457									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5458									;IN THE SUBTEST) TO LOOP ON ERROR^
  5459
  5460					;**********
  5461
  5462					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5463					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5464					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5465					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5466			011722		SN=SN+1
  5467			400000			ZZ=ZZ+ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0136

  5468						IFE	ZZ,<ZZ=1>
  5469	033037	200 00 0 00 035355 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5470	033040	274 00 0 00 035355 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5471	033041	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5472						STOP^
  5473	033042	254 04 0 00 033043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5474	033043	324 00 0 00 033044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5475									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5476									;IN THE SUBTEST) TO LOOP ON ERROR^
  5477
  5478					;**********
  5479
  5480					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5481					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5482					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5483					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5484			011723		SN=SN+1
  5485		000001	000000			ZZ=ZZ+ZZ
  5486						IFE	ZZ,<ZZ=1>
  5487	033044	200 00 0 00 035356 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5488	033045	274 00 0 00 035356 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5489	033046	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5490						STOP^
  5491	033047	254 04 0 00 033050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5492	033050	324 00 0 00 033051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5493									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5494									;IN THE SUBTEST) TO LOOP ON ERROR^
  5495
  5496					;**********
  5497
  5498					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5499					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5500					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5501					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5502			011724		SN=SN+1
  5503		000002	000000			ZZ=ZZ+ZZ
  5504						IFE	ZZ,<ZZ=1>
  5505	033051	200 00 0 00 035357 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5506	033052	274 00 0 00 035357 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5507	033053	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5508						STOP^
  5509	033054	254 04 0 00 033055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5510	033055	324 00 0 00 033056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5511									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5512									;IN THE SUBTEST) TO LOOP ON ERROR^
  5513
  5514					;**********
  5515
  5516					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5517					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5518					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5519					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5520			011725		SN=SN+1
  5521		000004	000000			ZZ=ZZ+ZZ
  5522						IFE	ZZ,<ZZ=1>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0137

  5523	033056	200 00 0 00 035360 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5524	033057	274 00 0 00 035360 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5525	033060	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5526						STOP^
  5527	033061	254 04 0 00 033062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5528	033062	324 00 0 00 033063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5529									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5530									;IN THE SUBTEST) TO LOOP ON ERROR^
  5531
  5532					;**********
  5533
  5534					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5535					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5536					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5537					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5538			011726		SN=SN+1
  5539		000010	000000			ZZ=ZZ+ZZ
  5540						IFE	ZZ,<ZZ=1>
  5541	033063	200 00 0 00 035361 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5542	033064	274 00 0 00 035361 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5543	033065	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5544						STOP^
  5545	033066	254 04 0 00 033067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5546	033067	324 00 0 00 033070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5547									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5548									;IN THE SUBTEST) TO LOOP ON ERROR^
  5549
  5550					;**********
  5551
  5552					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5553					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5554					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5555					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5556			011727		SN=SN+1
  5557		000020	000000			ZZ=ZZ+ZZ
  5558						IFE	ZZ,<ZZ=1>
  5559	033070	200 00 0 00 035362 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5560	033071	274 00 0 00 035362 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5561	033072	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5562						STOP^
  5563	033073	254 04 0 00 033074 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5564	033074	324 00 0 00 033075 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5565									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5566									;IN THE SUBTEST) TO LOOP ON ERROR^
  5567
  5568					;**********
  5569
  5570					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5571					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5572					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5573					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5574			011730		SN=SN+1
  5575		000040	000000			ZZ=ZZ+ZZ
  5576						IFE	ZZ,<ZZ=1>
  5577	033075	200 00 0 00 035363 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0138

  5578	033076	274 00 0 00 035363 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5579	033077	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5580						STOP^
  5581	033100	254 04 0 00 033101 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5582	033101	324 00 0 00 033102 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5583									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5584									;IN THE SUBTEST) TO LOOP ON ERROR^
  5585
  5586					;**********
  5587
  5588					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5589					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5590					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5591					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5592			011731		SN=SN+1
  5593		000100	000000			ZZ=ZZ+ZZ
  5594						IFE	ZZ,<ZZ=1>
  5595	033102	200 00 0 00 035364 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5596	033103	274 00 0 00 035364 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5597	033104	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5598						STOP^
  5599	033105	254 04 0 00 033106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5600	033106	324 00 0 00 033107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5601									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5602									;IN THE SUBTEST) TO LOOP ON ERROR^
  5603
  5604					;**********
  5605
  5606					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5607					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5608					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5609					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5610			011732		SN=SN+1
  5611		000200	000000			ZZ=ZZ+ZZ
  5612						IFE	ZZ,<ZZ=1>
  5613	033107	200 00 0 00 035365 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5614	033110	274 00 0 00 035365 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5615	033111	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5616						STOP^
  5617	033112	254 04 0 00 033113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5618	033113	324 00 0 00 033114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5619									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5620									;IN THE SUBTEST) TO LOOP ON ERROR^
  5621
  5622					;**********
  5623
  5624					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5625					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5626					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5627					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5628			011733		SN=SN+1
  5629		000400	000000			ZZ=ZZ+ZZ
  5630						IFE	ZZ,<ZZ=1>
  5631	033114	200 00 0 00 035366 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5632	033115	274 00 0 00 035366 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0139

  5633	033116	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5634						STOP^
  5635	033117	254 04 0 00 033120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5636	033120	324 00 0 00 033121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5637									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5638									;IN THE SUBTEST) TO LOOP ON ERROR^
  5639
  5640					;**********
  5641
  5642					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5643					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5644					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5645					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5646			011734		SN=SN+1
  5647		001000	000000			ZZ=ZZ+ZZ
  5648						IFE	ZZ,<ZZ=1>
  5649	033121	200 00 0 00 035367 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5650	033122	274 00 0 00 035367 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5651	033123	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5652						STOP^
  5653	033124	254 04 0 00 033125 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5654	033125	324 00 0 00 033126 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5655									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5656									;IN THE SUBTEST) TO LOOP ON ERROR^
  5657
  5658					;**********
  5659
  5660					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5661					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5662					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5663					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5664			011735		SN=SN+1
  5665		002000	000000			ZZ=ZZ+ZZ
  5666						IFE	ZZ,<ZZ=1>
  5667	033126	200 00 0 00 035370 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5668	033127	274 00 0 00 035370 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5669	033130	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5670						STOP^
  5671	033131	254 04 0 00 033132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5672	033132	324 00 0 00 033133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5673									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5674									;IN THE SUBTEST) TO LOOP ON ERROR^
  5675
  5676					;**********
  5677
  5678					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5679					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5680					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5681					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5682			011736		SN=SN+1
  5683		004000	000000			ZZ=ZZ+ZZ
  5684						IFE	ZZ,<ZZ=1>
  5685	033133	200 00 0 00 035371 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5686	033134	274 00 0 00 035371 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5687	033135	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0140

  5688						STOP^
  5689	033136	254 04 0 00 033137 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5690	033137	324 00 0 00 033140 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5691									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5692									;IN THE SUBTEST) TO LOOP ON ERROR^
  5693
  5694					;**********
  5695
  5696					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5697					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5698					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5699					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5700			011737		SN=SN+1
  5701		010000	000000			ZZ=ZZ+ZZ
  5702						IFE	ZZ,<ZZ=1>
  5703	033140	200 00 0 00 035372 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5704	033141	274 00 0 00 035372 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5705	033142	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5706						STOP^
  5707	033143	254 04 0 00 033144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5708	033144	324 00 0 00 033145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5709									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5710									;IN THE SUBTEST) TO LOOP ON ERROR^
  5711
  5712					;**********
  5713
  5714					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5715					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5716					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5717					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5718			011740		SN=SN+1
  5719		020000	000000			ZZ=ZZ+ZZ
  5720						IFE	ZZ,<ZZ=1>
  5721	033145	200 00 0 00 035373 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5722	033146	274 00 0 00 035373 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5723	033147	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5724						STOP^
  5725	033150	254 04 0 00 033151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5726	033151	324 00 0 00 033152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5727									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5728									;IN THE SUBTEST) TO LOOP ON ERROR^
  5729
  5730					;**********
  5731
  5732					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5733					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5734					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5735					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5736			011741		SN=SN+1
  5737		040000	000000			ZZ=ZZ+ZZ
  5738						IFE	ZZ,<ZZ=1>
  5739	033152	200 00 0 00 035374 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5740	033153	274 00 0 00 035374 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5741	033154	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5742						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0141

  5743	033155	254 04 0 00 033156 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5744	033156	324 00 0 00 033157 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5745									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5746									;IN THE SUBTEST) TO LOOP ON ERROR^
  5747
  5748					;**********
  5749
  5750					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5751					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5752					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5753					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5754			011742		SN=SN+1
  5755		100000	000000			ZZ=ZZ+ZZ
  5756						IFE	ZZ,<ZZ=1>
  5757	033157	200 00 0 00 035375 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5758	033160	274 00 0 00 035375 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5759	033161	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5760						STOP^
  5761	033162	254 04 0 00 033163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5762	033163	324 00 0 00 033164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5763									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5764									;IN THE SUBTEST) TO LOOP ON ERROR^
  5765
  5766					;**********
  5767
  5768					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5769					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5770					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5771					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5772			011743		SN=SN+1
  5773		200000	000000			ZZ=ZZ+ZZ
  5774						IFE	ZZ,<ZZ=1>
  5775	033164	200 00 0 00 035376 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5776	033165	274 00 0 00 035376 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5777	033166	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5778						STOP^
  5779	033167	254 04 0 00 033170 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5780	033170	324 00 0 00 033171 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5781									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5782									;IN THE SUBTEST) TO LOOP ON ERROR^
  5783
  5784					;**********
  5785
  5786					;THIS TEST VERIFIES THAT IF A RIPPLED ONE
  5787					;IS SUBTRACTED FROM ITSELF, THE RESULT IS
  5788					;AN AC OF ALL ZEROS. THIS TEST IS REPEATED 36
  5789					;TIMES IN ORDER TO TEST ALL 36 BITS.
  5790			011744		SN=SN+1
  5791		400000	000000			ZZ=ZZ+ZZ
  5792						IFE	ZZ,<ZZ=1>
  5793	033171	200 00 0 00 035377 		MOVE	[ZZ]		;LOAD AC WITH A FLOATING ONE
  5794	033172	274 00 0 00 035377 		SUB	[ZZ]		;*SUB OF FLOATING ONE FROM ITSELF SHOULD RESULT IN C(AC)=0
  5795	033173	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5796						STOP^
  5797	033174	254 04 0 00 033175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-13
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0142

  5798	033175	324 00 0 00 033176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5799									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5800									;IN THE SUBTEST) TO LOOP ON ERROR^
  5801
  5802					;**********
  5803
  5804					PAGE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 13-14
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0143

  5805					;THIS TEST VERIFIES THAT IF A WORD OF ALL
  5806					;ONES IS SUBTRACTED FROM ITSELF, THE RESULT
  5807					;IN THE AC IS ZERO.
  5808
  5809	033176	200 00 0 00 035442 	A12000:	MOVE	[-1]		;PRESET AC TO ALL ONES
  5810	033177	274 00 0 00 035442 		SUB	[-1]		;*SUB OF -1 FROM ITSELF SHOULD RESULT IN C(AC)=0
  5811	033200	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5812						STOP^
  5813	033201	254 04 0 00 033202 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5814	033202	324 00 0 00 033203 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5815									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5816									;IN THE SUBTEST) TO LOOP ON ERROR^
  5817
  5818					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 14
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0144

  5819					;THIS TEST VERIFIES THAT CAMA ALWAYS SKIPS THE
  5820					;NEXT INSTRUCTION INDEPENDENT OF THE DATA WITH AC
  5821					;AND E. THIS TEST FAILS IF CAMA DOES NOT SKIP ALWAYS.
  5822
  5823	033203	200 00 0 00 035330 	A12100:	MOVE	[0]		;PRESET AC, E TO ZERO
  5824	033204	314 00 0 00 000000 		CAMA			;*CAMA SHOULD ALWAYS SKIP THE NEXT INSTRUCTION,
  5825									;OTHERWISE THIS TEST FAILS
  5826						STOP^
  5827	033205	254 04 0 00 033206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5828	033206	324 00 0 00 033207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5829									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5830									;IN THE SUBTEST) TO LOOP ON ERROR^
  5831
  5832					;ET0 [E], ET0 EN[E], IR CAXX[IR3], AD CRY 3C[ADCR],
  5833					;FCYC ACT EN D [ADCR], AD CRY 36 F/F'S [ADCR],
  5834					;PC CLOCK EN [PCC], ET0 C F/F[E], IR CAXX[IR3],
  5835					;ADZ COND P[ADZ] AND ADZ COND Z[ADZ]
  5836
  5837					;**********
  5838
  5839					;THIS TEST VERIFIES THAT CAME IS DATA SENSITIVE.
  5840					;IT SKIPS THE NEXT INSTRUCTION IF AND ONLY
  5841					;IF C(AC)=C(E). IN THIS TEST AC=E=0 AND
  5842					;C(AC)=C(E)=0. HENCE, CAME MUST
  5843					;SKIP THE NEXT INSTRUCTION
  5844					;IN THIS TEST
  5845
  5846	033207	200 00 0 00 035330 	A12200:	MOVE	[0]		;PRESET AC, E TO ZERO
  5847	033210	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP SINCE E=AC
  5848						STOP^
  5849	033211	254 04 0 00 033212 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5850	033212	324 00 0 00 033213 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5851									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5852									;IN THE SUBTEST) TO LOOP ON ERROR^
  5853
  5854					;AD FM + EN [ADFP], F CXC ACT ENC[F1], IRCAXX[IR3]
  5855
  5856					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 15
DSKAB1	MAC	28-Mar-78 12:29		TEST OF SUB AND COMPARE INSTRUCTIONS                                               SEQ 0145

  5857					;THIS TEST VERIFIES THAT CAME IS DATA SENSITIVE
  5858					;IT SKIPS THE NEXT INSTRUCTION OF AND ONLY IF
  5859					;C(AC)=C(E). IN THIS TEST C(AC)=C(E)=0;
  5860					;BUT, E IS NOT WITHIN THE AC RANGE.
  5861					;HENCE, CAME MUST SKIP
  5862					;THE NEXT INSTRUCTION IN THIS TEST.
  5863
  5864	033213	200 00 0 00 035330 	A12300:	MOVE	[0]		;*CAME SHOULD SKIP WHEN C(AC)=C(E)=0
  5865	033214	312 00 0 00 035330 		CAME	[0]
  5866						STOP^
  5867	033215	254 04 0 00 033216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5868	033216	324 00 0 00 033217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5869									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5870									;IN THE SUBTEST) TO LOOP ON ERROR^
  5871
  5872					;CAMX: FCE[F1], IR CAMX[IR1]
  5873
  5874					;**********
  5875
  5876					;THIS TEST VERIFIES THAT CAME IS DATA SENSITIVE.
  5877					;IT SKIPS THE NEXT INSTRUCTION IF AND ONLY IF
  5878					;C(AC)=C(E). IN THIS TEST C(AC)=0 AND
  5879					;C(E)=-1. HENCE, CAME SHOULD NOT
  5880					;SKIP THE NEXT INSTRUCTION IN THIS TEST.
  5881
  5882	033217	200 00 0 00 035330 	A12400:	MOVE	[0]		;PRESET AC TO ZERO
  5883	033220	312 00 0 00 035442 		CAME	[-1]		;*CAME SHOULD NOT SKIP BECAUSE C(AC)=0 ANDC(E)=-
  5884	033221	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAME PASSES TEST
  5885						STOP^
  5886	033222	254 04 0 00 033223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5887	033223	324 00 0 00 033224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5888									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5889									;IN THE SUBTEST) TO LOOP ON ERROR^
  5890
  5891					;AD AR- EN [ADAM], IR CAXX [IR3], F CYC ACT EN B [F1],
  5892					;AD AR- F/F'S [ADAM], AD ADD [ADC1], AD FM + FETCH EN A [ADFP],
  5893					;F CYC ACT EN A [F1], AD ADD EN C [ADC1], AD ADD F/F'S [ADC1]
  5894
  5895					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 16
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0146

  5896					SUBTTL	TEST OF COMPARE (CAMX) INSTRUCTIONS
  5897
  5898					;**********
  5899
  5900					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  5901					;ONLY WHEN C(AC) IS LESS THAN C(E).
  5902					;IN THIS TEST, C(AC)=-1 AND C(E)=0; HENCE, CAML SHOULD SKIP.  OTHERWISE,THE 
  5903					;PROGRAM HALTS.
  5904
  5905	033224	200 00 0 00 035442 	B100:	MOVE	[-1]		;PRELOAD AC WITH -1
  5906	033225	311 00 0 00 035330 		CAML	[0]		;*CAML SHOULD SKIP BECAUSE C(AC) IS LESS THAN C(E)
  5907						STOP^
  5908	033226	254 04 0 00 033227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5909	033227	324 00 0 00 033230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5910									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5911									;IN THE SUBTEST) TO LOOP ON ERROR^
  5912
  5913					;*****     FAILURE ANALYSIS     *****
  5914					;C(AC0)		C(AC1)		FAILING SIGNAL
  5915
  5916					;				FC: AB PC EN
  5917					;				ET0: COND Q: PC CLK EN
  5918
  5919					;**********
  5920
  5921					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  5922					;ONLY WHEN C(AC) IS LESS THAN C(E).
  5923					;IN THIS CASE, C(AC)=0 AND C(E)=-1; HENCE, CAML SHOULD NOT SKIP.  OTHERWISE,
  5924					;THE PROGRAM HALTS.
  5925
  5926	033230	200 00 0 00 035330 	B200:	MOVE	[0]		;PRELOAD AC WITH 0
  5927	033231	311 00 0 00 035442 		CAML	[-1]		;*CAML SHOULD NOT SKIP BECAUSE
  5928									;C(AC) IS GREATER THAN C(E)
  5929	033232	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAML PASSES
  5930						STOP^
  5931	033233	254 04 0 00 033234 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5932	033234	324 00 0 00 033235 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5933									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5934									;IN THE SUBTEST) TO LOOP ON ERROR^
  5935
  5936					;*****     FAILURE ANALYSIS     *****
  5937					;C(AC0)		C(AC1)		FAILING SIGNAL
  5938
  5939					;				SW: FCE
  5940					;				FC: PC CHANGE
  5941
  5942					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 17
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0147

  5943					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  5944					;ONLY WHEN C(AC) IS LESS THAN C(E).
  5945					;IN THIS CASE, C(AC)=400000,,0 (THE MOST
  5946					;NEGATIVE NUMBER) AND C(E)=377777,,-1
  5947					;(THE MOST POSITIVE NUMBER); HENCE,
  5948					;CAML SHOULD SKIP.  OTHERWISE, THE
  5949					;PROGRAM HALTS
  5950
  5951	033235	200 00 0 00 035377 	B300:	MOVE	[XWD 400000,0]	;PRELOAD AC WITH 400000,,0
  5952	033236	311 00 0 00 035456 		CAML	[XWD 377777,-1]	;*CAML SHOULD SKIP BECAUSE C(AC) IS LESS THAN C(E)
  5953						STOP^
  5954	033237	254 04 0 00 033240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5955	033240	324 00 0 00 033241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5956									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5957									;IN THE SUBTEST) TO LOOP ON ERROR^
  5958
  5959					;*****     FAILURE ANALYSIS     *****
  5960					;C(AC0)		C(AC1)		FAILING SIGNAL
  5961
  5962					;				FC: AD ADD
  5963
  5964					;**********
  5965
  5966					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  5967					;ONLY WHEN C(AC) IS LESS THAN C(E).
  5968					;IN THIS CASE, C(AC)=377777,,-1 (THE MOST POSITIVE NUMBER) AND C(E)=400000,,0 (THE MOST NEG
  5969					ATIVE NUMBER)
  5970					;HENCE, CAML SHOULD NOT SKIP.  OTHERWISE, THE PROGRAM HALTS.
  5971
  5972	033241	200 00 0 00 035456 	B400:	MOVE	[XWD 377777,-1]	;PRELOAD AC WITH 377777,,-1
  5973	033242	311 00 0 00 035377 		CAML	[XWD 400000,0]	;*CAML SHOULD NOT SKIP BECAUSE
  5974									;C(AC) IS GREATER THAN C(E)
  5975	033243	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAML PASSES
  5976						STOP^
  5977	033244	254 04 0 00 033245 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5978	033245	324 00 0 00 033246 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5979									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5980									;IN THE SUBTEST) TO LOOP ON ERROR^
  5981
  5982					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 18
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0148

  5983					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  5984					;ONLY WHEN C(AC) IS LESS THAN C(E).
  5985					;IN THIS CASE, C(AC)=400000,,0 (THE MOST NEGTIVE NUMBER) AND C(E)=-1;
  5986					;HENCE, CAML SHOULD SKIP.  OTHERWISE, THE PROGRAM HALTS
  5987
  5988	033246	200 00 0 00 035377 	B500:	MOVE	[XWD 400000,0]	;PRELOAD AC WITH 400000,,0
  5989	033247	311 00 0 00 035442 		CAML	[-1]		;*CAML SHOULD SKIP BECAUSE C(AC) IS LESS THAN C(E)
  5990						STOP^
  5991	033250	254 04 0 00 033251 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5992	033251	324 00 0 00 033252 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5993									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5994									;IN THE SUBTEST) TO LOOP ON ERROR^
  5995
  5996					;*****     FAILURE ANALYSIS     *****
  5997					;C(AC0)		C(AC1)		FAILING SIGNAL
  5998
  5999					;				FC: AD FM + EN
  6000
  6001					;**********
  6002
  6003					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6004					;ONLY WHEN C(AC) IS LESS THAN C(E).
  6005					;IN THIS CASE, C(AC)=0 AND C(E)=-1 ;HENCE, CAML SHOULD NOT SKIP.  OTHERWISE,
  6006					;THE PROGRAM HALTS.
  6007
  6008	033252	400 00 0 00 000000 	B600:	SETZ			;PRELOAD AC WITH 0		
  6009	033253	311 00 0 00 035442 		CAML	[-1]		;*CAML SHOULD NOT SKIP BECAUSE
  6010									;C(AC) IS GREATER THAN C(E)
  6011	033254	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAML PASSES.
  6012						STOP^
  6013	033255	254 04 0 00 033256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6014	033256	324 00 0 00 033257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6015									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6016									;IN THE SUBTEST) TO LOOP ON ERROR^
  6017
  6018					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 19
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0149

  6019					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT INSTRUCTION WHEN AND
  6020					;ONLY WHEN C(AC) IS LESS THAN C(E).
  6021					;IN THIS CASE, C(AC)=0 AND C(E)=0 ;HENCE, CAML SHOULD NOT SKIP.  OTHERWISE,
  6022					;THE PROGRAM HALTS.
  6023
  6024	033257	400 00 0 00 000000 	B700:	SETZ			;PRELOAD AS WITH 0		
  6025	033260	311 00 0 00 035330 		CAML	[0]		;*CAML SHOULD NOT SKIP BECAUSE C(AC)=C(E)
  6026	033261	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAML PASSES
  6027						STOP^
  6028	033262	254 04 0 00 033263 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6029	033263	324 00 0 00 033264 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6030									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6031									;IN THE SUBTEST) TO LOOP ON ERROR^
  6032
  6033					;*****     FAILURE ANALYSIS     *****
  6034					;C(AC0)		C(AC1)		FAILING SIGNAL
  6035
  6036					;				FC: AD CRY 36
  6037
  6038					;**********
  6039
  6040					;THIS TEST VERIFIES THAT CAML SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6041					;ONLY WHEN C(AC) IS LESS THAN C(E).
  6042					;IN THIS CASE, C(AC)=0 AND C(E)=400000,,O (THE MOST NEGATIVE NUMBER);
  6043					;HENCE CAML SHOULD NOT SKIP.  OTHERWISE, THE PROGRAM HALTS.
  6044
  6045	033264	400 00 0 00 000000 	B1000:	SETZ			;PRELOAD AC WITH 0
  6046	033265	311 00 0 00 035377 		CAML	[XWD 400000,0]	;*CAML SHOULD NOT SKIP BECAUSE
  6047									;C(AC) IS GREATER THAN C(E)
  6048	033266	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAML PASSES
  6049						STOP^
  6050	033267	254 04 0 00 033270 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6051	033270	324 00 0 00 033271 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6052									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6053									;IN THE SUBTEST) TO LOOP ON ERROR^
  6054
  6055					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 20
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0150

  6056					;THIS TEST VERIFIES THAT CAM IS DATA INDEPENDENT.  IT NEVER SKIPS
  6057					;THE NEXT SEQUENTIAL INSTRUCTION
  6058					;IN THIS CASE, C(AC)=-1 AND C(E)=0
  6059					;IF IT DOES SKIP THE NEXT INSTRUCTION, THE PROGRAM HALTS
  6060
  6061	033271	200 00 0 00 035442 	B1100:	MOVE	[-1]		;PRELOAD AC WITH -1	
  6062	033272	310 00 0 00 035330 		CAM	[0]		;*CAM SHOULD NEVER SKIP
  6063	033273	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAM PASSES
  6064						STOP^
  6065	033274	254 04 0 00 033275 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6066	033275	324 00 0 00 033276 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6067									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6068									;IN THE SUBTEST) TO LOOP ON ERROR^
  6069
  6070					;**********
  6071
  6072					;THIS TEST VERIFIES THAT CAMGE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6073					;ONLY WHEN C(AC) IS GREATER THAN OR EQUAL TO C(E).
  6074					;IN THIS CASE, C(AC)=-1 AND C(E)=0;  HENCE, CAMGE SHOULD NOT SKIP.
  6075					;OTHERWISE, THE PROGRAM HALTS.
  6076
  6077	033276	200 00 0 00 035442 	B1200:	MOVE	[-1]		;PRELOAD AC WITH-1	
  6078	033277	315 00 0 00 035330 		CAMGE	[0]		;*CAMGE SHOULD NOT SKIP BECAUSE C(AC) IS LESS THAN C(E)
  6079	033300	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAMGE PASSES.
  6080						STOP^
  6081	033301	254 04 0 00 033302 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6082	033302	324 00 0 00 033303 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6083									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6084									;IN THE SUBTEST) TO LOOP ON ERROR^
  6085
  6086					;*****     FAILURE ANALYSIS     *****
  6087					;C(AC0)		C(AC1)		FAILING SIGNAL
  6088
  6089					;				FC: PC CHANGE
  6090					;				FC: AB PC EN
  6091
  6092					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 21
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0151

  6093					;THIS TEST VERIFIES THAT CAMGE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6094					;ONLY WHEN C(AC) IS GREATER THAN OR EQUAL TO C(E)
  6095					;IN THIS CASE, C(AC)=0 AND C(E)=-1;  HENCE CAMGE SHOULD SKIP.
  6096					;OTHEWISE, THE PROGRAM HALTS.
  6097
  6098	033303	400 00 0 00 000000 	B1300:	SETZ			;PRELOAD AC WITH 0		
  6099	033304	315 00 0 00 035442 		CAMGE	[-1]		;*CAMGE SHOULD SKIP BECAUSE C(AC) IS GREATER THAN C(E)
  6100						STOP^
  6101	033305	254 04 0 00 033306 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6102	033306	324 00 0 00 033307 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6103									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6104									;IN THE SUBTEST) TO LOOP ON ERROR^
  6105
  6106					;*****     FAILURE ANALYSIS     *****
  6107					;C(AC0)		C(AC1)		FAILING SIGNAL
  6108
  6109					;				SW: FCE
  6110					;				ET0: COND Q: PC CLK EN
  6111
  6112					;**********
  6113
  6114					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6115					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E)
  6116					;IN THIS CASE C(AC)=0 AND C(E)=-1;  HENCE CAMN SHOULD SKIP.
  6117					;OTHERWISE, THE PROGRAM HALTS
  6118
  6119	033307	400 00 0 00 000000 	B1400:	SETZ			;PRELOAD AC WITH 0		
  6120	033310	316 00 0 00 035442 		CAMN	[-1]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)
  6121						STOP^
  6122	033311	254 04 0 00 033312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6123	033312	324 00 0 00 033313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6124									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6125									;IN THE SUBTEST) TO LOOP ON ERROR^
  6126
  6127					;*****     FAILURE ANALYSIS     *****
  6128					;C(AC0)		C(AC1)		FAILING SIGNAL
  6129
  6130					;				FC:AD FM + EN
  6131					;				FC: AD AR - EN
  6132					;				FC: AD CRY 36
  6133					;				FC: AD ADD
  6134					;				FC: AB PC EN
  6135					;				ET0: PC CLK EN
  6136
  6137					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 22
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0152

  6138					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  6139					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E)
  6140					;IN THIS CASE, C(AC)=0 AND C(E)=0;  HENCE CAMN SHOULD NOT SKIP.
  6141					;OTHERWISE, THE PROGRAM HALTS
  6142
  6143	033313	400 00 0 00 000000 	B1500:	SETZ			;PRELOAD AC WITH 0		
  6144	033314	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD NOT SKIP BECAUSE C(AC)=C(E).
  6145	033315	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF CAMN PASSES
  6146						STOP^
  6147	033316	254 04 0 00 033317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6148	033317	324 00 0 00 033320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6149									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6150									;IN THE SUBTEST) TO LOOP ON ERROR^
  6151
  6152					;*****     FAILURE ANALYSIS     *****
  6153					;C(AC0)		C(AC1)		FAILING SIGNAL
  6154
  6155					;				SW: FCE
  6156					;				FC: PC CHANGE
  6157
  6158					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0153

  6159			001600		SN=1600
  6160			000000			ZZ=0
  6161
  6162					B1600:	REPEAT	^D18,<
  6163					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6164					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6165					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6166					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6167					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6168					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6169					
  6170					SN=SN+1
  6171						ZZ=ZZ+ZZ
  6172						IFE	ZZ,<ZZ=1>
  6173						MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6174						CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6175						CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6176						STOP
  6177					
  6178					;*****     FAILURE ANALYSIS     *****
  6179					;C(AC0)		C(AC1)		FAILING SIGNAL
  6180					
  6181					;				ET0: COND P
  6182					
  6183					;**********
  6184					>
  6185
  6186					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6187					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6188					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6189					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6190					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6191					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6192
  6193			001601		SN=SN+1
  6194			000000			ZZ=ZZ+ZZ
  6195			000001			IFE	ZZ,<ZZ=1>
  6196	033320	200 00 0 00 035334 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6197	033321	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6198	033322	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6199						STOP^
  6200	033323	254 04 0 00 033324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6201	033324	324 00 0 00 033325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6202									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6203									;IN THE SUBTEST) TO LOOP ON ERROR^
  6204
  6205					;*****     FAILURE ANALYSIS     *****
  6206					;C(AC0)		C(AC1)		FAILING SIGNAL
  6207
  6208					;				ET0: COND P
  6209
  6210					;**********
  6211
  6212
  6213					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0154

  6214					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6215					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6216					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6217					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6218					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6219
  6220			001602		SN=SN+1
  6221			000002			ZZ=ZZ+ZZ
  6222						IFE	ZZ,<ZZ=1>
  6223	033325	200 00 0 00 035335 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6224	033326	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6225	033327	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6226						STOP^
  6227	033330	254 04 0 00 033331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6228	033331	324 00 0 00 033332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6229									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6230									;IN THE SUBTEST) TO LOOP ON ERROR^
  6231
  6232					;*****     FAILURE ANALYSIS     *****
  6233					;C(AC0)		C(AC1)		FAILING SIGNAL
  6234
  6235					;				ET0: COND P
  6236
  6237					;**********
  6238
  6239
  6240					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6241					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6242					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6243					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6244					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6245					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6246
  6247			001603		SN=SN+1
  6248			000004			ZZ=ZZ+ZZ
  6249						IFE	ZZ,<ZZ=1>
  6250	033332	200 00 0 00 035336 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6251	033333	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6252	033334	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6253						STOP^
  6254	033335	254 04 0 00 033336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6255	033336	324 00 0 00 033337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6256									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6257									;IN THE SUBTEST) TO LOOP ON ERROR^
  6258
  6259					;*****     FAILURE ANALYSIS     *****
  6260					;C(AC0)		C(AC1)		FAILING SIGNAL
  6261
  6262					;				ET0: COND P
  6263
  6264					;**********
  6265
  6266
  6267					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6268					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0155

  6269					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6270					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6271					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6272					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6273
  6274			001604		SN=SN+1
  6275			000010			ZZ=ZZ+ZZ
  6276						IFE	ZZ,<ZZ=1>
  6277	033337	200 00 0 00 035337 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6278	033340	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6279	033341	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6280						STOP^
  6281	033342	254 04 0 00 033343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6282	033343	324 00 0 00 033344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6283									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6284									;IN THE SUBTEST) TO LOOP ON ERROR^
  6285
  6286					;*****     FAILURE ANALYSIS     *****
  6287					;C(AC0)		C(AC1)		FAILING SIGNAL
  6288
  6289					;				ET0: COND P
  6290
  6291					;**********
  6292
  6293
  6294					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6295					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6296					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6297					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6298					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6299					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6300
  6301			001605		SN=SN+1
  6302			000020			ZZ=ZZ+ZZ
  6303						IFE	ZZ,<ZZ=1>
  6304	033344	200 00 0 00 035340 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6305	033345	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6306	033346	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6307						STOP^
  6308	033347	254 04 0 00 033350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6309	033350	324 00 0 00 033351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6310									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6311									;IN THE SUBTEST) TO LOOP ON ERROR^
  6312
  6313					;*****     FAILURE ANALYSIS     *****
  6314					;C(AC0)		C(AC1)		FAILING SIGNAL
  6315
  6316					;				ET0: COND P
  6317
  6318					;**********
  6319
  6320
  6321					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6322					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6323					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0156

  6324					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6325					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6326					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6327
  6328			001606		SN=SN+1
  6329			000040			ZZ=ZZ+ZZ
  6330						IFE	ZZ,<ZZ=1>
  6331	033351	200 00 0 00 035341 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6332	033352	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6333	033353	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6334						STOP^
  6335	033354	254 04 0 00 033355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6336	033355	324 00 0 00 033356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6337									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6338									;IN THE SUBTEST) TO LOOP ON ERROR^
  6339
  6340					;*****     FAILURE ANALYSIS     *****
  6341					;C(AC0)		C(AC1)		FAILING SIGNAL
  6342
  6343					;				ET0: COND P
  6344
  6345					;**********
  6346
  6347
  6348					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6349					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6350					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6351					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6352					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6353					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6354
  6355			001607		SN=SN+1
  6356			000100			ZZ=ZZ+ZZ
  6357						IFE	ZZ,<ZZ=1>
  6358	033356	200 00 0 00 035342 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6359	033357	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6360	033360	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6361						STOP^
  6362	033361	254 04 0 00 033362 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6363	033362	324 00 0 00 033363 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6364									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6365									;IN THE SUBTEST) TO LOOP ON ERROR^
  6366
  6367					;*****     FAILURE ANALYSIS     *****
  6368					;C(AC0)		C(AC1)		FAILING SIGNAL
  6369
  6370					;				ET0: COND P
  6371
  6372					;**********
  6373
  6374
  6375					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6376					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6377					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6378					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0157

  6379					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6380					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6381
  6382			001610		SN=SN+1
  6383			000200			ZZ=ZZ+ZZ
  6384						IFE	ZZ,<ZZ=1>
  6385	033363	200 00 0 00 035343 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6386	033364	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6387	033365	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6388						STOP^
  6389	033366	254 04 0 00 033367 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6390	033367	324 00 0 00 033370 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6391									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6392									;IN THE SUBTEST) TO LOOP ON ERROR^
  6393
  6394					;*****     FAILURE ANALYSIS     *****
  6395					;C(AC0)		C(AC1)		FAILING SIGNAL
  6396
  6397					;				ET0: COND P
  6398
  6399					;**********
  6400
  6401
  6402					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6403					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6404					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6405					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6406					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6407					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6408
  6409			001611		SN=SN+1
  6410			000400			ZZ=ZZ+ZZ
  6411						IFE	ZZ,<ZZ=1>
  6412	033370	200 00 0 00 035344 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6413	033371	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6414	033372	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6415						STOP^
  6416	033373	254 04 0 00 033374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6417	033374	324 00 0 00 033375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6418									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6419									;IN THE SUBTEST) TO LOOP ON ERROR^
  6420
  6421					;*****     FAILURE ANALYSIS     *****
  6422					;C(AC0)		C(AC1)		FAILING SIGNAL
  6423
  6424					;				ET0: COND P
  6425
  6426					;**********
  6427
  6428
  6429					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6430					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6431					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6432					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6433					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0158

  6434					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6435
  6436			001612		SN=SN+1
  6437			001000			ZZ=ZZ+ZZ
  6438						IFE	ZZ,<ZZ=1>
  6439	033375	200 00 0 00 035345 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6440	033376	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6441	033377	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6442						STOP^
  6443	033400	254 04 0 00 033401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6444	033401	324 00 0 00 033402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6445									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6446									;IN THE SUBTEST) TO LOOP ON ERROR^
  6447
  6448					;*****     FAILURE ANALYSIS     *****
  6449					;C(AC0)		C(AC1)		FAILING SIGNAL
  6450
  6451					;				ET0: COND P
  6452
  6453					;**********
  6454
  6455
  6456					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6457					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6458					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6459					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6460					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6461					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6462
  6463			001613		SN=SN+1
  6464			002000			ZZ=ZZ+ZZ
  6465						IFE	ZZ,<ZZ=1>
  6466	033402	200 00 0 00 035346 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6467	033403	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6468	033404	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6469						STOP^
  6470	033405	254 04 0 00 033406 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6471	033406	324 00 0 00 033407 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6472									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6473									;IN THE SUBTEST) TO LOOP ON ERROR^
  6474
  6475					;*****     FAILURE ANALYSIS     *****
  6476					;C(AC0)		C(AC1)		FAILING SIGNAL
  6477
  6478					;				ET0: COND P
  6479
  6480					;**********
  6481
  6482
  6483					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6484					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6485					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6486					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6487					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6488					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0159

  6489
  6490			001614		SN=SN+1
  6491			004000			ZZ=ZZ+ZZ
  6492						IFE	ZZ,<ZZ=1>
  6493	033407	200 00 0 00 035347 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6494	033410	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6495	033411	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6496						STOP^
  6497	033412	254 04 0 00 033413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6498	033413	324 00 0 00 033414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6500									;IN THE SUBTEST) TO LOOP ON ERROR^
  6501
  6502					;*****     FAILURE ANALYSIS     *****
  6503					;C(AC0)		C(AC1)		FAILING SIGNAL
  6504
  6505					;				ET0: COND P
  6506
  6507					;**********
  6508
  6509
  6510					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6511					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6512					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6513					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6514					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6515					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6516
  6517			001615		SN=SN+1
  6518			010000			ZZ=ZZ+ZZ
  6519						IFE	ZZ,<ZZ=1>
  6520	033414	200 00 0 00 035350 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6521	033415	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6522	033416	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6523						STOP^
  6524	033417	254 04 0 00 033420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6525	033420	324 00 0 00 033421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6526									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6527									;IN THE SUBTEST) TO LOOP ON ERROR^
  6528
  6529					;*****     FAILURE ANALYSIS     *****
  6530					;C(AC0)		C(AC1)		FAILING SIGNAL
  6531
  6532					;				ET0: COND P
  6533
  6534					;**********
  6535
  6536
  6537					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6538					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6539					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6540					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6541					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6542					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6543
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0160

  6544			001616		SN=SN+1
  6545			020000			ZZ=ZZ+ZZ
  6546						IFE	ZZ,<ZZ=1>
  6547	033421	200 00 0 00 035351 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6548	033422	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6549	033423	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6550						STOP^
  6551	033424	254 04 0 00 033425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6552	033425	324 00 0 00 033426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6553									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6554									;IN THE SUBTEST) TO LOOP ON ERROR^
  6555
  6556					;*****     FAILURE ANALYSIS     *****
  6557					;C(AC0)		C(AC1)		FAILING SIGNAL
  6558
  6559					;				ET0: COND P
  6560
  6561					;**********
  6562
  6563
  6564					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6565					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6566					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6567					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6568					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6569					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6570
  6571			001617		SN=SN+1
  6572			040000			ZZ=ZZ+ZZ
  6573						IFE	ZZ,<ZZ=1>
  6574	033426	200 00 0 00 035352 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6575	033427	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6576	033430	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6577						STOP^
  6578	033431	254 04 0 00 033432 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6579	033432	324 00 0 00 033433 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6580									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6581									;IN THE SUBTEST) TO LOOP ON ERROR^
  6582
  6583					;*****     FAILURE ANALYSIS     *****
  6584					;C(AC0)		C(AC1)		FAILING SIGNAL
  6585
  6586					;				ET0: COND P
  6587
  6588					;**********
  6589
  6590
  6591					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6592					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6593					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6594					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6595					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6596					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6597
  6598			001620		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0161

  6599			100000			ZZ=ZZ+ZZ
  6600						IFE	ZZ,<ZZ=1>
  6601	033433	200 00 0 00 035353 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6602	033434	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6603	033435	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6604						STOP^
  6605	033436	254 04 0 00 033437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6606	033437	324 00 0 00 033440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6607									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6608									;IN THE SUBTEST) TO LOOP ON ERROR^
  6609
  6610					;*****     FAILURE ANALYSIS     *****
  6611					;C(AC0)		C(AC1)		FAILING SIGNAL
  6612
  6613					;				ET0: COND P
  6614
  6615					;**********
  6616
  6617
  6618					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6619					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6620					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6621					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6622					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6623					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6624
  6625			001621		SN=SN+1
  6626			200000			ZZ=ZZ+ZZ
  6627						IFE	ZZ,<ZZ=1>
  6628	033440	200 00 0 00 035354 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6629	033441	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6630	033442	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6631						STOP^
  6632	033443	254 04 0 00 033444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6633	033444	324 00 0 00 033445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6634									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6635									;IN THE SUBTEST) TO LOOP ON ERROR^
  6636
  6637					;*****     FAILURE ANALYSIS     *****
  6638					;C(AC0)		C(AC1)		FAILING SIGNAL
  6639
  6640					;				ET0: COND P
  6641
  6642					;**********
  6643
  6644
  6645					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6646					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6647					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6648					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6649					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6650					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6651
  6652			001622		SN=SN+1
  6653			400000			ZZ=ZZ+ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 23-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0162

  6654						IFE	ZZ,<ZZ=1>
  6655	033445	200 00 0 00 035355 		MOVE	[XWD ZZ]	;PRELOAD AC,E WITH A FLOATING 1
  6656	033446	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6657	033447	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6658						STOP^
  6659	033450	254 04 0 00 033451 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6660	033451	324 00 0 00 033452 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6661									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6662									;IN THE SUBTEST) TO LOOP ON ERROR^
  6663
  6664					;*****     FAILURE ANALYSIS     *****
  6665					;C(AC0)		C(AC1)		FAILING SIGNAL
  6666
  6667					;				ET0: COND P
  6668
  6669					;**********
  6670
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0163

  6671			000000			ZZ=0
  6672
  6673						REPEAT	^D18,<
  6674					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6675					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6676					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6677					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6678					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6679					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6680					
  6681					SN=SN+1
  6682						ZZ=ZZ+ZZ
  6683						IFE	ZZ,<ZZ=1>
  6684						MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6685						CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6686						CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6687						STOP
  6688					
  6689					;**********
  6690					>
  6691
  6692					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6693					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6694					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6695					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6696					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6697					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6698
  6699			001623		SN=SN+1
  6700			000000			ZZ=ZZ+ZZ
  6701			000001			IFE	ZZ,<ZZ=1>
  6702	033452	200 00 0 00 035356 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6703	033453	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6704	033454	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6705						STOP^
  6706	033455	254 04 0 00 033456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6707	033456	324 00 0 00 033457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6708									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6709									;IN THE SUBTEST) TO LOOP ON ERROR^
  6710
  6711					;**********
  6712
  6713
  6714					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6715					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6716					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6717					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6718					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6719					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6720
  6721			001624		SN=SN+1
  6722			000002			ZZ=ZZ+ZZ
  6723						IFE	ZZ,<ZZ=1>
  6724	033457	200 00 0 00 035357 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6725	033460	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0164

  6726	033461	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6727						STOP^
  6728	033462	254 04 0 00 033463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6729	033463	324 00 0 00 033464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6730									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6731									;IN THE SUBTEST) TO LOOP ON ERROR^
  6732
  6733					;**********
  6734
  6735
  6736					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6737					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6738					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6739					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6740					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6741					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6742
  6743			001625		SN=SN+1
  6744			000004			ZZ=ZZ+ZZ
  6745						IFE	ZZ,<ZZ=1>
  6746	033464	200 00 0 00 035360 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6747	033465	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6748	033466	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6749						STOP^
  6750	033467	254 04 0 00 033470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6751	033470	324 00 0 00 033471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6752									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6753									;IN THE SUBTEST) TO LOOP ON ERROR^
  6754
  6755					;**********
  6756
  6757
  6758					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6759					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6760					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6761					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6762					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6763					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6764
  6765			001626		SN=SN+1
  6766			000010			ZZ=ZZ+ZZ
  6767						IFE	ZZ,<ZZ=1>
  6768	033471	200 00 0 00 035361 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6769	033472	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6770	033473	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6771						STOP^
  6772	033474	254 04 0 00 033475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6773	033475	324 00 0 00 033476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6774									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6775									;IN THE SUBTEST) TO LOOP ON ERROR^
  6776
  6777					;**********
  6778
  6779
  6780					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0165

  6781					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6782					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6783					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6784					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6785					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6786
  6787			001627		SN=SN+1
  6788			000020			ZZ=ZZ+ZZ
  6789						IFE	ZZ,<ZZ=1>
  6790	033476	200 00 0 00 035362 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6791	033477	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6792	033500	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6793						STOP^
  6794	033501	254 04 0 00 033502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6795	033502	324 00 0 00 033503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6797									;IN THE SUBTEST) TO LOOP ON ERROR^
  6798
  6799					;**********
  6800
  6801
  6802					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6803					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6804					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6805					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6806					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6807					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6808
  6809			001630		SN=SN+1
  6810			000040			ZZ=ZZ+ZZ
  6811						IFE	ZZ,<ZZ=1>
  6812	033503	200 00 0 00 035363 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6813	033504	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6814	033505	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6815						STOP^
  6816	033506	254 04 0 00 033507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6817	033507	324 00 0 00 033510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6818									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6819									;IN THE SUBTEST) TO LOOP ON ERROR^
  6820
  6821					;**********
  6822
  6823
  6824					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6825					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6826					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6827					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6828					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6829					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6830
  6831			001631		SN=SN+1
  6832			000100			ZZ=ZZ+ZZ
  6833						IFE	ZZ,<ZZ=1>
  6834	033510	200 00 0 00 035364 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6835	033511	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0166

  6836	033512	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6837						STOP^
  6838	033513	254 04 0 00 033514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6839	033514	324 00 0 00 033515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6840									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6841									;IN THE SUBTEST) TO LOOP ON ERROR^
  6842
  6843					;**********
  6844
  6845
  6846					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6847					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6848					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6849					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6850					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6851					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6852
  6853			001632		SN=SN+1
  6854			000200			ZZ=ZZ+ZZ
  6855						IFE	ZZ,<ZZ=1>
  6856	033515	200 00 0 00 035365 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6857	033516	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6858	033517	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6859						STOP^
  6860	033520	254 04 0 00 033521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6861	033521	324 00 0 00 033522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6862									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6863									;IN THE SUBTEST) TO LOOP ON ERROR^
  6864
  6865					;**********
  6866
  6867
  6868					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6869					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6870					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6871					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6872					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6873					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6874
  6875			001633		SN=SN+1
  6876			000400			ZZ=ZZ+ZZ
  6877						IFE	ZZ,<ZZ=1>
  6878	033522	200 00 0 00 035366 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6879	033523	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6880	033524	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6881						STOP^
  6882	033525	254 04 0 00 033526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6883	033526	324 00 0 00 033527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6884									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6885									;IN THE SUBTEST) TO LOOP ON ERROR^
  6886
  6887					;**********
  6888
  6889
  6890					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0167

  6891					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6892					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6893					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6894					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6895					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6896
  6897			001634		SN=SN+1
  6898			001000			ZZ=ZZ+ZZ
  6899						IFE	ZZ,<ZZ=1>
  6900	033527	200 00 0 00 035367 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6901	033530	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6902	033531	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6903						STOP^
  6904	033532	254 04 0 00 033533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6905	033533	324 00 0 00 033534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6907									;IN THE SUBTEST) TO LOOP ON ERROR^
  6908
  6909					;**********
  6910
  6911
  6912					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6913					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6914					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6915					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6916					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6917					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6918
  6919			001635		SN=SN+1
  6920			002000			ZZ=ZZ+ZZ
  6921						IFE	ZZ,<ZZ=1>
  6922	033534	200 00 0 00 035370 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6923	033535	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6924	033536	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6925						STOP^
  6926	033537	254 04 0 00 033540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6927	033540	324 00 0 00 033541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6928									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6929									;IN THE SUBTEST) TO LOOP ON ERROR^
  6930
  6931					;**********
  6932
  6933
  6934					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6935					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6936					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6937					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6938					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6939					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6940
  6941			001636		SN=SN+1
  6942			004000			ZZ=ZZ+ZZ
  6943						IFE	ZZ,<ZZ=1>
  6944	033541	200 00 0 00 035371 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6945	033542	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0168

  6946	033543	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6947						STOP^
  6948	033544	254 04 0 00 033545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6949	033545	324 00 0 00 033546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6950									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6951									;IN THE SUBTEST) TO LOOP ON ERROR^
  6952
  6953					;**********
  6954
  6955
  6956					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6957					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6958					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6959					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6960					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6961					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6962
  6963			001637		SN=SN+1
  6964			010000			ZZ=ZZ+ZZ
  6965						IFE	ZZ,<ZZ=1>
  6966	033546	200 00 0 00 035372 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6967	033547	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6968	033550	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6969						STOP^
  6970	033551	254 04 0 00 033552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6971	033552	324 00 0 00 033553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6972									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6973									;IN THE SUBTEST) TO LOOP ON ERROR^
  6974
  6975					;**********
  6976
  6977
  6978					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  6979					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  6980					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  6981					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  6982					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  6983					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  6984
  6985			001640		SN=SN+1
  6986			020000			ZZ=ZZ+ZZ
  6987						IFE	ZZ,<ZZ=1>
  6988	033553	200 00 0 00 035373 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  6989	033554	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  6990	033555	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  6991						STOP^
  6992	033556	254 04 0 00 033557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6993	033557	324 00 0 00 033560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6995									;IN THE SUBTEST) TO LOOP ON ERROR^
  6996
  6997					;**********
  6998
  6999
  7000					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0169

  7001					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  7002					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  7003					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  7004					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  7005					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  7006
  7007			001641		SN=SN+1
  7008			040000			ZZ=ZZ+ZZ
  7009						IFE	ZZ,<ZZ=1>
  7010	033560	200 00 0 00 035374 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  7011	033561	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  7012	033562	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  7013						STOP^
  7014	033563	254 04 0 00 033564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7015	033564	324 00 0 00 033565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7017									;IN THE SUBTEST) TO LOOP ON ERROR^
  7018
  7019					;**********
  7020
  7021
  7022					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  7023					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  7024					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  7025					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  7026					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  7027					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  7028
  7029			001642		SN=SN+1
  7030			100000			ZZ=ZZ+ZZ
  7031						IFE	ZZ,<ZZ=1>
  7032	033565	200 00 0 00 035375 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  7033	033566	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  7034	033567	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  7035						STOP^
  7036	033570	254 04 0 00 033571 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7037	033571	324 00 0 00 033572 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7038									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7039									;IN THE SUBTEST) TO LOOP ON ERROR^
  7040
  7041					;**********
  7042
  7043
  7044					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  7045					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  7046					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  7047					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  7048					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  7049					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  7050
  7051			001643		SN=SN+1
  7052			200000			ZZ=ZZ+ZZ
  7053						IFE	ZZ,<ZZ=1>
  7054	033572	200 00 0 00 035376 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  7055	033573	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 24-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0170

  7056	033574	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  7057						STOP^
  7058	033575	254 04 0 00 033576 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7059	033576	324 00 0 00 033577 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7060									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7061									;IN THE SUBTEST) TO LOOP ON ERROR^
  7062
  7063					;**********
  7064
  7065
  7066					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY
  7067					;WHEN C(AC) IS NOT EQUAL TO C(E).  IT ALSO VERIFIES THAT CAME
  7068					;SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND ONLY WHEN
  7069					;C(AC)=C(E).  IN BOTH CASES AC=E;  HENCE, C(AC)=C(E)
  7070					;IF EITHER CAMN OR CAME FAILS, THE PROGRAM HALTS
  7071					;THIS TEST IS REPEATED 36 TIMES IN ORDER TO FLOAT A 1 THRU ALL 36 BITS
  7072
  7073			001644		SN=SN+1
  7074			400000			ZZ=ZZ+ZZ
  7075						IFE	ZZ,<ZZ=1>
  7076	033577	200 00 0 00 035377 		MOVE	[XWD ZZ,0]	;PRELOAD AC,E WITH A FLOATING 1
  7077	033600	316 00 0 00 000000 		CAMN			;*CAMN SHOLD NOT SKIP BECAUSE C(AC)=C(E)		
  7078	033601	312 00 0 00 000000 		CAME			;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)		
  7079						STOP^
  7080	033602	254 04 0 00 033603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7081	033603	324 00 0 00 033604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7082									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7083									;IN THE SUBTEST) TO LOOP ON ERROR^
  7084
  7085					;**********
  7086
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0171

  7087			001700		SN=1700
  7088			000000			ZZ=0
  7089
  7090					B1700:	REPEAT	^D36,<
  7091					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7092					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7093					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7094					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7095					SN=SN+1
  7096						ZZ=ZZ+ZZ
  7097						IFE	ZZ,<ZZ=1>
  7098						SETZ			;PRELOAD AC WITH 0
  7099						CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7100						STOP		
  7101					
  7102					;**********
  7103					>
  7104
  7105					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7106					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7107					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7108					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7109			001701		SN=SN+1
  7110			000000			ZZ=ZZ+ZZ
  7111			000001			IFE	ZZ,<ZZ=1>
  7112	033604	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7113	033605	316 00 0 00 035334 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7114						STOP		^
  7115	033606	254 04 0 00 033607 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7116	033607	324 00 0 00 033610 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7117									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7118									;IN THE SUBTEST) TO LOOP ON ERROR^
  7119
  7120					;**********
  7121
  7122
  7123					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7124					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7125					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7126					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7127			001702		SN=SN+1
  7128			000002			ZZ=ZZ+ZZ
  7129						IFE	ZZ,<ZZ=1>
  7130	033610	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7131	033611	316 00 0 00 035335 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7132						STOP		^
  7133	033612	254 04 0 00 033613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7134	033613	324 00 0 00 033614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7135									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7136									;IN THE SUBTEST) TO LOOP ON ERROR^
  7137
  7138					;**********
  7139
  7140
  7141					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0172

  7142					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7143					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7144					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7145			001703		SN=SN+1
  7146			000004			ZZ=ZZ+ZZ
  7147						IFE	ZZ,<ZZ=1>
  7148	033614	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7149	033615	316 00 0 00 035336 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7150						STOP		^
  7151	033616	254 04 0 00 033617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7152	033617	324 00 0 00 033620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7153									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7154									;IN THE SUBTEST) TO LOOP ON ERROR^
  7155
  7156					;**********
  7157
  7158
  7159					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7160					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7161					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7162					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7163			001704		SN=SN+1
  7164			000010			ZZ=ZZ+ZZ
  7165						IFE	ZZ,<ZZ=1>
  7166	033620	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7167	033621	316 00 0 00 035337 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7168						STOP		^
  7169	033622	254 04 0 00 033623 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7170	033623	324 00 0 00 033624 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7171									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7172									;IN THE SUBTEST) TO LOOP ON ERROR^
  7173
  7174					;**********
  7175
  7176
  7177					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7178					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7179					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7180					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7181			001705		SN=SN+1
  7182			000020			ZZ=ZZ+ZZ
  7183						IFE	ZZ,<ZZ=1>
  7184	033624	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7185	033625	316 00 0 00 035340 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7186						STOP		^
  7187	033626	254 04 0 00 033627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7188	033627	324 00 0 00 033630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7189									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7190									;IN THE SUBTEST) TO LOOP ON ERROR^
  7191
  7192					;**********
  7193
  7194
  7195					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7196					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0173

  7197					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7198					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7199			001706		SN=SN+1
  7200			000040			ZZ=ZZ+ZZ
  7201						IFE	ZZ,<ZZ=1>
  7202	033630	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7203	033631	316 00 0 00 035341 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7204						STOP		^
  7205	033632	254 04 0 00 033633 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7206	033633	324 00 0 00 033634 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7207									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7208									;IN THE SUBTEST) TO LOOP ON ERROR^
  7209
  7210					;**********
  7211
  7212
  7213					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7214					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7215					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7216					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7217			001707		SN=SN+1
  7218			000100			ZZ=ZZ+ZZ
  7219						IFE	ZZ,<ZZ=1>
  7220	033634	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7221	033635	316 00 0 00 035342 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7222						STOP		^
  7223	033636	254 04 0 00 033637 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7224	033637	324 00 0 00 033640 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7225									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7226									;IN THE SUBTEST) TO LOOP ON ERROR^
  7227
  7228					;**********
  7229
  7230
  7231					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7232					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7233					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7234					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7235			001710		SN=SN+1
  7236			000200			ZZ=ZZ+ZZ
  7237						IFE	ZZ,<ZZ=1>
  7238	033640	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7239	033641	316 00 0 00 035343 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7240						STOP		^
  7241	033642	254 04 0 00 033643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7242	033643	324 00 0 00 033644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7243									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7244									;IN THE SUBTEST) TO LOOP ON ERROR^
  7245
  7246					;**********
  7247
  7248
  7249					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7250					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7251					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0174

  7252					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7253			001711		SN=SN+1
  7254			000400			ZZ=ZZ+ZZ
  7255						IFE	ZZ,<ZZ=1>
  7256	033644	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7257	033645	316 00 0 00 035344 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7258						STOP		^
  7259	033646	254 04 0 00 033647 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7260	033647	324 00 0 00 033650 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7261									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7262									;IN THE SUBTEST) TO LOOP ON ERROR^
  7263
  7264					;**********
  7265
  7266
  7267					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7268					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7269					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7270					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7271			001712		SN=SN+1
  7272			001000			ZZ=ZZ+ZZ
  7273						IFE	ZZ,<ZZ=1>
  7274	033650	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7275	033651	316 00 0 00 035345 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7276						STOP		^
  7277	033652	254 04 0 00 033653 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7278	033653	324 00 0 00 033654 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7279									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7280									;IN THE SUBTEST) TO LOOP ON ERROR^
  7281
  7282					;**********
  7283
  7284
  7285					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7286					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7287					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7288					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7289			001713		SN=SN+1
  7290			002000			ZZ=ZZ+ZZ
  7291						IFE	ZZ,<ZZ=1>
  7292	033654	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7293	033655	316 00 0 00 035346 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7294						STOP		^
  7295	033656	254 04 0 00 033657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7296	033657	324 00 0 00 033660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7297									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7298									;IN THE SUBTEST) TO LOOP ON ERROR^
  7299
  7300					;**********
  7301
  7302
  7303					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7304					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7305					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7306					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0175

  7307			001714		SN=SN+1
  7308			004000			ZZ=ZZ+ZZ
  7309						IFE	ZZ,<ZZ=1>
  7310	033660	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7311	033661	316 00 0 00 035347 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7312						STOP		^
  7313	033662	254 04 0 00 033663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7314	033663	324 00 0 00 033664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7315									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7316									;IN THE SUBTEST) TO LOOP ON ERROR^
  7317
  7318					;**********
  7319
  7320
  7321					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7322					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7323					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7324					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7325			001715		SN=SN+1
  7326			010000			ZZ=ZZ+ZZ
  7327						IFE	ZZ,<ZZ=1>
  7328	033664	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7329	033665	316 00 0 00 035350 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7330						STOP		^
  7331	033666	254 04 0 00 033667 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7332	033667	324 00 0 00 033670 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7333									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7334									;IN THE SUBTEST) TO LOOP ON ERROR^
  7335
  7336					;**********
  7337
  7338
  7339					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7340					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7341					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7342					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7343			001716		SN=SN+1
  7344			020000			ZZ=ZZ+ZZ
  7345						IFE	ZZ,<ZZ=1>
  7346	033670	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7347	033671	316 00 0 00 035351 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7348						STOP		^
  7349	033672	254 04 0 00 033673 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7350	033673	324 00 0 00 033674 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7352									;IN THE SUBTEST) TO LOOP ON ERROR^
  7353
  7354					;**********
  7355
  7356
  7357					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7358					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7359					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7360					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7361			001717		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0176

  7362			040000			ZZ=ZZ+ZZ
  7363						IFE	ZZ,<ZZ=1>
  7364	033674	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7365	033675	316 00 0 00 035352 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7366						STOP		^
  7367	033676	254 04 0 00 033677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7368	033677	324 00 0 00 033700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7370									;IN THE SUBTEST) TO LOOP ON ERROR^
  7371
  7372					;**********
  7373
  7374
  7375					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7376					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7377					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7378					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7379			001720		SN=SN+1
  7380			100000			ZZ=ZZ+ZZ
  7381						IFE	ZZ,<ZZ=1>
  7382	033700	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7383	033701	316 00 0 00 035353 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7384						STOP		^
  7385	033702	254 04 0 00 033703 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7386	033703	324 00 0 00 033704 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7387									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7388									;IN THE SUBTEST) TO LOOP ON ERROR^
  7389
  7390					;**********
  7391
  7392
  7393					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7394					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7395					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7396					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7397			001721		SN=SN+1
  7398			200000			ZZ=ZZ+ZZ
  7399						IFE	ZZ,<ZZ=1>
  7400	033704	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7401	033705	316 00 0 00 035354 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7402						STOP		^
  7403	033706	254 04 0 00 033707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7404	033707	324 00 0 00 033710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7405									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7406									;IN THE SUBTEST) TO LOOP ON ERROR^
  7407
  7408					;**********
  7409
  7410
  7411					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7412					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7413					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7414					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7415			001722		SN=SN+1
  7416			400000			ZZ=ZZ+ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0177

  7417						IFE	ZZ,<ZZ=1>
  7418	033710	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7419	033711	316 00 0 00 035355 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7420						STOP		^
  7421	033712	254 04 0 00 033713 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7422	033713	324 00 0 00 033714 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7423									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7424									;IN THE SUBTEST) TO LOOP ON ERROR^
  7425
  7426					;**********
  7427
  7428
  7429					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7430					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7431					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7432					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7433			001723		SN=SN+1
  7434		000001	000000			ZZ=ZZ+ZZ
  7435						IFE	ZZ,<ZZ=1>
  7436	033714	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7437	033715	316 00 0 00 035356 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7438						STOP		^
  7439	033716	254 04 0 00 033717 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7440	033717	324 00 0 00 033720 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7441									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7442									;IN THE SUBTEST) TO LOOP ON ERROR^
  7443
  7444					;**********
  7445
  7446
  7447					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7448					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7449					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7450					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7451			001724		SN=SN+1
  7452		000002	000000			ZZ=ZZ+ZZ
  7453						IFE	ZZ,<ZZ=1>
  7454	033720	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7455	033721	316 00 0 00 035357 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7456						STOP		^
  7457	033722	254 04 0 00 033723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7458	033723	324 00 0 00 033724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7459									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7460									;IN THE SUBTEST) TO LOOP ON ERROR^
  7461
  7462					;**********
  7463
  7464
  7465					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7466					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7467					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7468					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7469			001725		SN=SN+1
  7470		000004	000000			ZZ=ZZ+ZZ
  7471						IFE	ZZ,<ZZ=1>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0178

  7472	033724	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7473	033725	316 00 0 00 035360 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7474						STOP		^
  7475	033726	254 04 0 00 033727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7476	033727	324 00 0 00 033730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7477									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7478									;IN THE SUBTEST) TO LOOP ON ERROR^
  7479
  7480					;**********
  7481
  7482
  7483					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7484					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7485					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7486					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7487			001726		SN=SN+1
  7488		000010	000000			ZZ=ZZ+ZZ
  7489						IFE	ZZ,<ZZ=1>
  7490	033730	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7491	033731	316 00 0 00 035361 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7492						STOP		^
  7493	033732	254 04 0 00 033733 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7494	033733	324 00 0 00 033734 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7496									;IN THE SUBTEST) TO LOOP ON ERROR^
  7497
  7498					;**********
  7499
  7500
  7501					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7502					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7503					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7504					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7505			001727		SN=SN+1
  7506		000020	000000			ZZ=ZZ+ZZ
  7507						IFE	ZZ,<ZZ=1>
  7508	033734	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7509	033735	316 00 0 00 035362 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7510						STOP		^
  7511	033736	254 04 0 00 033737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7512	033737	324 00 0 00 033740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7513									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7514									;IN THE SUBTEST) TO LOOP ON ERROR^
  7515
  7516					;**********
  7517
  7518
  7519					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7520					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7521					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7522					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7523			001730		SN=SN+1
  7524		000040	000000			ZZ=ZZ+ZZ
  7525						IFE	ZZ,<ZZ=1>
  7526	033740	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0179

  7527	033741	316 00 0 00 035363 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7528						STOP		^
  7529	033742	254 04 0 00 033743 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7530	033743	324 00 0 00 033744 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7531									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7532									;IN THE SUBTEST) TO LOOP ON ERROR^
  7533
  7534					;**********
  7535
  7536
  7537					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7538					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7539					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7540					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7541			001731		SN=SN+1
  7542		000100	000000			ZZ=ZZ+ZZ
  7543						IFE	ZZ,<ZZ=1>
  7544	033744	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7545	033745	316 00 0 00 035364 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7546						STOP		^
  7547	033746	254 04 0 00 033747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7548	033747	324 00 0 00 033750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7550									;IN THE SUBTEST) TO LOOP ON ERROR^
  7551
  7552					;**********
  7553
  7554
  7555					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7556					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7557					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7558					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7559			001732		SN=SN+1
  7560		000200	000000			ZZ=ZZ+ZZ
  7561						IFE	ZZ,<ZZ=1>
  7562	033750	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7563	033751	316 00 0 00 035365 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7564						STOP		^
  7565	033752	254 04 0 00 033753 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7566	033753	324 00 0 00 033754 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7567									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7568									;IN THE SUBTEST) TO LOOP ON ERROR^
  7569
  7570					;**********
  7571
  7572
  7573					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7574					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7575					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7576					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7577			001733		SN=SN+1
  7578		000400	000000			ZZ=ZZ+ZZ
  7579						IFE	ZZ,<ZZ=1>
  7580	033754	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7581	033755	316 00 0 00 035366 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0180

  7582						STOP		^
  7583	033756	254 04 0 00 033757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7584	033757	324 00 0 00 033760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7585									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7586									;IN THE SUBTEST) TO LOOP ON ERROR^
  7587
  7588					;**********
  7589
  7590
  7591					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7592					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7593					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7594					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7595			001734		SN=SN+1
  7596		001000	000000			ZZ=ZZ+ZZ
  7597						IFE	ZZ,<ZZ=1>
  7598	033760	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7599	033761	316 00 0 00 035367 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7600						STOP		^
  7601	033762	254 04 0 00 033763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7602	033763	324 00 0 00 033764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7603									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7604									;IN THE SUBTEST) TO LOOP ON ERROR^
  7605
  7606					;**********
  7607
  7608
  7609					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7610					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7611					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7612					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7613			001735		SN=SN+1
  7614		002000	000000			ZZ=ZZ+ZZ
  7615						IFE	ZZ,<ZZ=1>
  7616	033764	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7617	033765	316 00 0 00 035370 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7618						STOP		^
  7619	033766	254 04 0 00 033767 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7620	033767	324 00 0 00 033770 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7621									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7622									;IN THE SUBTEST) TO LOOP ON ERROR^
  7623
  7624					;**********
  7625
  7626
  7627					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7628					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7629					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7630					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7631			001736		SN=SN+1
  7632		004000	000000			ZZ=ZZ+ZZ
  7633						IFE	ZZ,<ZZ=1>
  7634	033770	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7635	033771	316 00 0 00 035371 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7636						STOP		^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0181

  7637	033772	254 04 0 00 033773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7638	033773	324 00 0 00 033774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7639									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7640									;IN THE SUBTEST) TO LOOP ON ERROR^
  7641
  7642					;**********
  7643
  7644
  7645					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7646					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7647					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7648					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7649			001737		SN=SN+1
  7650		010000	000000			ZZ=ZZ+ZZ
  7651						IFE	ZZ,<ZZ=1>
  7652	033774	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7653	033775	316 00 0 00 035372 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7654						STOP		^
  7655	033776	254 04 0 00 033777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7656	033777	324 00 0 00 034000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7657									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7658									;IN THE SUBTEST) TO LOOP ON ERROR^
  7659
  7660					;**********
  7661
  7662
  7663					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7664					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7665					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7666					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7667			001740		SN=SN+1
  7668		020000	000000			ZZ=ZZ+ZZ
  7669						IFE	ZZ,<ZZ=1>
  7670	034000	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7671	034001	316 00 0 00 035373 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7672						STOP		^
  7673	034002	254 04 0 00 034003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7674	034003	324 00 0 00 034004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7675									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7676									;IN THE SUBTEST) TO LOOP ON ERROR^
  7677
  7678					;**********
  7679
  7680
  7681					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7682					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7683					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7684					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7685			001741		SN=SN+1
  7686		040000	000000			ZZ=ZZ+ZZ
  7687						IFE	ZZ,<ZZ=1>
  7688	034004	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7689	034005	316 00 0 00 035374 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7690						STOP		^
  7691	034006	254 04 0 00 034007 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0182

  7692	034007	324 00 0 00 034010 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7693									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7694									;IN THE SUBTEST) TO LOOP ON ERROR^
  7695
  7696					;**********
  7697
  7698
  7699					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7700					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7701					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7702					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7703			001742		SN=SN+1
  7704		100000	000000			ZZ=ZZ+ZZ
  7705						IFE	ZZ,<ZZ=1>
  7706	034010	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7707	034011	316 00 0 00 035375 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7708						STOP		^
  7709	034012	254 04 0 00 034013 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7710	034013	324 00 0 00 034014 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7711									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7712									;IN THE SUBTEST) TO LOOP ON ERROR^
  7713
  7714					;**********
  7715
  7716
  7717					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7718					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7719					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7720					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7721			001743		SN=SN+1
  7722		200000	000000			ZZ=ZZ+ZZ
  7723						IFE	ZZ,<ZZ=1>
  7724	034014	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7725	034015	316 00 0 00 035376 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7726						STOP		^
  7727	034016	254 04 0 00 034017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7728	034017	324 00 0 00 034020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7729									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7730									;IN THE SUBTEST) TO LOOP ON ERROR^
  7731
  7732					;**********
  7733
  7734
  7735					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT INSTRUCTION WHEN AND
  7736					;ONLY WHEN C(AC)=0 AND C(E)=FLOATING 1.  HENCE,
  7737					;CAMN SHOULD SKIP;  OTHERWISE, THE PROGRAM HALTS
  7738					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF E
  7739			001744		SN=SN+1
  7740		400000	000000			ZZ=ZZ+ZZ
  7741						IFE	ZZ,<ZZ=1>
  7742	034020	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  7743	034021	316 00 0 00 035377 		CAMN	[ZZ]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7744						STOP		^
  7745	034022	254 04 0 00 034023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7746	034023	324 00 0 00 034024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 25-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0183

  7747									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7748									;IN THE SUBTEST) TO LOOP ON ERROR^
  7749
  7750					;**********
  7751
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0184

  7752			002000		SN=2000
  7753			000000			ZZ=0
  7754
  7755					B2000:	REPEAT	^D36,<
  7756					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7757					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7758					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7759					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7760					SN=SN+1
  7761						ZZ=ZZ+ZZ
  7762						IFE	ZZ,<ZZ=1>
  7763						MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7764						CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7765						STOP
  7766					
  7767					;**********
  7768					>
  7769
  7770					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7771					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7772					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7773					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7774			002001		SN=SN+1
  7775			000000			ZZ=ZZ+ZZ
  7776			000001			IFE	ZZ,<ZZ=1>
  7777	034024	200 00 0 00 035334 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7778	034025	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7779						STOP^
  7780	034026	254 04 0 00 034027 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7781	034027	324 00 0 00 034030 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7782									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7783									;IN THE SUBTEST) TO LOOP ON ERROR^
  7784
  7785					;**********
  7786
  7787
  7788					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7789					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7790					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7791					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7792			002002		SN=SN+1
  7793			000002			ZZ=ZZ+ZZ
  7794						IFE	ZZ,<ZZ=1>
  7795	034030	200 00 0 00 035335 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7796	034031	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7797						STOP^
  7798	034032	254 04 0 00 034033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7799	034033	324 00 0 00 034034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7800									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7801									;IN THE SUBTEST) TO LOOP ON ERROR^
  7802
  7803					;**********
  7804
  7805
  7806					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0185

  7807					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7808					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7809					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7810			002003		SN=SN+1
  7811			000004			ZZ=ZZ+ZZ
  7812						IFE	ZZ,<ZZ=1>
  7813	034034	200 00 0 00 035336 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7814	034035	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7815						STOP^
  7816	034036	254 04 0 00 034037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7817	034037	324 00 0 00 034040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7818									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7819									;IN THE SUBTEST) TO LOOP ON ERROR^
  7820
  7821					;**********
  7822
  7823
  7824					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7825					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7826					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7827					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7828			002004		SN=SN+1
  7829			000010			ZZ=ZZ+ZZ
  7830						IFE	ZZ,<ZZ=1>
  7831	034040	200 00 0 00 035337 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7832	034041	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7833						STOP^
  7834	034042	254 04 0 00 034043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7835	034043	324 00 0 00 034044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7836									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7837									;IN THE SUBTEST) TO LOOP ON ERROR^
  7838
  7839					;**********
  7840
  7841
  7842					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7843					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7844					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7845					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7846			002005		SN=SN+1
  7847			000020			ZZ=ZZ+ZZ
  7848						IFE	ZZ,<ZZ=1>
  7849	034044	200 00 0 00 035340 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7850	034045	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7851						STOP^
  7852	034046	254 04 0 00 034047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7853	034047	324 00 0 00 034050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7854									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7855									;IN THE SUBTEST) TO LOOP ON ERROR^
  7856
  7857					;**********
  7858
  7859
  7860					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7861					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0186

  7862					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7863					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7864			002006		SN=SN+1
  7865			000040			ZZ=ZZ+ZZ
  7866						IFE	ZZ,<ZZ=1>
  7867	034050	200 00 0 00 035341 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7868	034051	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7869						STOP^
  7870	034052	254 04 0 00 034053 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7871	034053	324 00 0 00 034054 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7872									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7873									;IN THE SUBTEST) TO LOOP ON ERROR^
  7874
  7875					;**********
  7876
  7877
  7878					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7879					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7880					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7881					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7882			002007		SN=SN+1
  7883			000100			ZZ=ZZ+ZZ
  7884						IFE	ZZ,<ZZ=1>
  7885	034054	200 00 0 00 035342 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7886	034055	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7887						STOP^
  7888	034056	254 04 0 00 034057 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7889	034057	324 00 0 00 034060 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7890									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7891									;IN THE SUBTEST) TO LOOP ON ERROR^
  7892
  7893					;**********
  7894
  7895
  7896					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7897					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7898					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7899					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7900			002010		SN=SN+1
  7901			000200			ZZ=ZZ+ZZ
  7902						IFE	ZZ,<ZZ=1>
  7903	034060	200 00 0 00 035343 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7904	034061	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7905						STOP^
  7906	034062	254 04 0 00 034063 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7907	034063	324 00 0 00 034064 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7908									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7909									;IN THE SUBTEST) TO LOOP ON ERROR^
  7910
  7911					;**********
  7912
  7913
  7914					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7915					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7916					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0187

  7917					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7918			002011		SN=SN+1
  7919			000400			ZZ=ZZ+ZZ
  7920						IFE	ZZ,<ZZ=1>
  7921	034064	200 00 0 00 035344 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7922	034065	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7923						STOP^
  7924	034066	254 04 0 00 034067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7925	034067	324 00 0 00 034070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7926									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7927									;IN THE SUBTEST) TO LOOP ON ERROR^
  7928
  7929					;**********
  7930
  7931
  7932					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7933					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7934					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7935					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7936			002012		SN=SN+1
  7937			001000			ZZ=ZZ+ZZ
  7938						IFE	ZZ,<ZZ=1>
  7939	034070	200 00 0 00 035345 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7940	034071	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7941						STOP^
  7942	034072	254 04 0 00 034073 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7943	034073	324 00 0 00 034074 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7944									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7945									;IN THE SUBTEST) TO LOOP ON ERROR^
  7946
  7947					;**********
  7948
  7949
  7950					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7951					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7952					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7953					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7954			002013		SN=SN+1
  7955			002000			ZZ=ZZ+ZZ
  7956						IFE	ZZ,<ZZ=1>
  7957	034074	200 00 0 00 035346 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7958	034075	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7959						STOP^
  7960	034076	254 04 0 00 034077 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7961	034077	324 00 0 00 034100 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7962									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7963									;IN THE SUBTEST) TO LOOP ON ERROR^
  7964
  7965					;**********
  7966
  7967
  7968					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7969					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7970					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7971					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0188

  7972			002014		SN=SN+1
  7973			004000			ZZ=ZZ+ZZ
  7974						IFE	ZZ,<ZZ=1>
  7975	034100	200 00 0 00 035347 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7976	034101	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7977						STOP^
  7978	034102	254 04 0 00 034103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7979	034103	324 00 0 00 034104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7980									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7981									;IN THE SUBTEST) TO LOOP ON ERROR^
  7982
  7983					;**********
  7984
  7985
  7986					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  7987					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  7988					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  7989					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  7990			002015		SN=SN+1
  7991			010000			ZZ=ZZ+ZZ
  7992						IFE	ZZ,<ZZ=1>
  7993	034104	200 00 0 00 035350 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  7994	034105	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  7995						STOP^
  7996	034106	254 04 0 00 034107 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7997	034107	324 00 0 00 034110 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7998									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7999									;IN THE SUBTEST) TO LOOP ON ERROR^
  8000
  8001					;**********
  8002
  8003
  8004					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8005					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8006					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8007					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8008			002016		SN=SN+1
  8009			020000			ZZ=ZZ+ZZ
  8010						IFE	ZZ,<ZZ=1>
  8011	034110	200 00 0 00 035351 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8012	034111	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8013						STOP^
  8014	034112	254 04 0 00 034113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8015	034113	324 00 0 00 034114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8017									;IN THE SUBTEST) TO LOOP ON ERROR^
  8018
  8019					;**********
  8020
  8021
  8022					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8023					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8024					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8025					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8026			002017		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0189

  8027			040000			ZZ=ZZ+ZZ
  8028						IFE	ZZ,<ZZ=1>
  8029	034114	200 00 0 00 035352 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8030	034115	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8031						STOP^
  8032	034116	254 04 0 00 034117 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8033	034117	324 00 0 00 034120 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8034									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8035									;IN THE SUBTEST) TO LOOP ON ERROR^
  8036
  8037					;**********
  8038
  8039
  8040					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8041					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8042					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8043					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8044			002020		SN=SN+1
  8045			100000			ZZ=ZZ+ZZ
  8046						IFE	ZZ,<ZZ=1>
  8047	034120	200 00 0 00 035353 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8048	034121	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8049						STOP^
  8050	034122	254 04 0 00 034123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8051	034123	324 00 0 00 034124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8052									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8053									;IN THE SUBTEST) TO LOOP ON ERROR^
  8054
  8055					;**********
  8056
  8057
  8058					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8059					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8060					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8061					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8062			002021		SN=SN+1
  8063			200000			ZZ=ZZ+ZZ
  8064						IFE	ZZ,<ZZ=1>
  8065	034124	200 00 0 00 035354 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8066	034125	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8067						STOP^
  8068	034126	254 04 0 00 034127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8069	034127	324 00 0 00 034130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8070									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8071									;IN THE SUBTEST) TO LOOP ON ERROR^
  8072
  8073					;**********
  8074
  8075
  8076					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8077					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8078					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8079					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8080			002022		SN=SN+1
  8081			400000			ZZ=ZZ+ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0190

  8082						IFE	ZZ,<ZZ=1>
  8083	034130	200 00 0 00 035355 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8084	034131	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8085						STOP^
  8086	034132	254 04 0 00 034133 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8087	034133	324 00 0 00 034134 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8088									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8089									;IN THE SUBTEST) TO LOOP ON ERROR^
  8090
  8091					;**********
  8092
  8093
  8094					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8095					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8096					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8097					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8098			002023		SN=SN+1
  8099		000001	000000			ZZ=ZZ+ZZ
  8100						IFE	ZZ,<ZZ=1>
  8101	034134	200 00 0 00 035356 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8102	034135	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8103						STOP^
  8104	034136	254 04 0 00 034137 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8105	034137	324 00 0 00 034140 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8106									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8107									;IN THE SUBTEST) TO LOOP ON ERROR^
  8108
  8109					;**********
  8110
  8111
  8112					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8113					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8114					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8115					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8116			002024		SN=SN+1
  8117		000002	000000			ZZ=ZZ+ZZ
  8118						IFE	ZZ,<ZZ=1>
  8119	034140	200 00 0 00 035357 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8120	034141	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8121						STOP^
  8122	034142	254 04 0 00 034143 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8123	034143	324 00 0 00 034144 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8124									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8125									;IN THE SUBTEST) TO LOOP ON ERROR^
  8126
  8127					;**********
  8128
  8129
  8130					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8131					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8132					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8133					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8134			002025		SN=SN+1
  8135		000004	000000			ZZ=ZZ+ZZ
  8136						IFE	ZZ,<ZZ=1>
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0191

  8137	034144	200 00 0 00 035360 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8138	034145	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8139						STOP^
  8140	034146	254 04 0 00 034147 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8141	034147	324 00 0 00 034150 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8142									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8143									;IN THE SUBTEST) TO LOOP ON ERROR^
  8144
  8145					;**********
  8146
  8147
  8148					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8149					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8150					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8151					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8152			002026		SN=SN+1
  8153		000010	000000			ZZ=ZZ+ZZ
  8154						IFE	ZZ,<ZZ=1>
  8155	034150	200 00 0 00 035361 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8156	034151	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8157						STOP^
  8158	034152	254 04 0 00 034153 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8159	034153	324 00 0 00 034154 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8160									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8161									;IN THE SUBTEST) TO LOOP ON ERROR^
  8162
  8163					;**********
  8164
  8165
  8166					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8167					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8168					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8169					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8170			002027		SN=SN+1
  8171		000020	000000			ZZ=ZZ+ZZ
  8172						IFE	ZZ,<ZZ=1>
  8173	034154	200 00 0 00 035362 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8174	034155	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8175						STOP^
  8176	034156	254 04 0 00 034157 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8177	034157	324 00 0 00 034160 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8178									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8179									;IN THE SUBTEST) TO LOOP ON ERROR^
  8180
  8181					;**********
  8182
  8183
  8184					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8185					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8186					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8187					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8188			002030		SN=SN+1
  8189		000040	000000			ZZ=ZZ+ZZ
  8190						IFE	ZZ,<ZZ=1>
  8191	034160	200 00 0 00 035363 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0192

  8192	034161	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8193						STOP^
  8194	034162	254 04 0 00 034163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8195	034163	324 00 0 00 034164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8196									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8197									;IN THE SUBTEST) TO LOOP ON ERROR^
  8198
  8199					;**********
  8200
  8201
  8202					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8203					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8204					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8205					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8206			002031		SN=SN+1
  8207		000100	000000			ZZ=ZZ+ZZ
  8208						IFE	ZZ,<ZZ=1>
  8209	034164	200 00 0 00 035364 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8210	034165	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8211						STOP^
  8212	034166	254 04 0 00 034167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8213	034167	324 00 0 00 034170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8215									;IN THE SUBTEST) TO LOOP ON ERROR^
  8216
  8217					;**********
  8218
  8219
  8220					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8221					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8222					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8223					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8224			002032		SN=SN+1
  8225		000200	000000			ZZ=ZZ+ZZ
  8226						IFE	ZZ,<ZZ=1>
  8227	034170	200 00 0 00 035365 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8228	034171	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8229						STOP^
  8230	034172	254 04 0 00 034173 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8231	034173	324 00 0 00 034174 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8232									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8233									;IN THE SUBTEST) TO LOOP ON ERROR^
  8234
  8235					;**********
  8236
  8237
  8238					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8239					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8240					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8241					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8242			002033		SN=SN+1
  8243		000400	000000			ZZ=ZZ+ZZ
  8244						IFE	ZZ,<ZZ=1>
  8245	034174	200 00 0 00 035366 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8246	034175	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-9
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0193

  8247						STOP^
  8248	034176	254 04 0 00 034177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8249	034177	324 00 0 00 034200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8250									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8251									;IN THE SUBTEST) TO LOOP ON ERROR^
  8252
  8253					;**********
  8254
  8255
  8256					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8257					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8258					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8259					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8260			002034		SN=SN+1
  8261		001000	000000			ZZ=ZZ+ZZ
  8262						IFE	ZZ,<ZZ=1>
  8263	034200	200 00 0 00 035367 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8264	034201	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8265						STOP^
  8266	034202	254 04 0 00 034203 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8267	034203	324 00 0 00 034204 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8268									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8269									;IN THE SUBTEST) TO LOOP ON ERROR^
  8270
  8271					;**********
  8272
  8273
  8274					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8275					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8276					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8277					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8278			002035		SN=SN+1
  8279		002000	000000			ZZ=ZZ+ZZ
  8280						IFE	ZZ,<ZZ=1>
  8281	034204	200 00 0 00 035370 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8282	034205	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8283						STOP^
  8284	034206	254 04 0 00 034207 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8285	034207	324 00 0 00 034210 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8286									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8287									;IN THE SUBTEST) TO LOOP ON ERROR^
  8288
  8289					;**********
  8290
  8291
  8292					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8293					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8294					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8295					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8296			002036		SN=SN+1
  8297		004000	000000			ZZ=ZZ+ZZ
  8298						IFE	ZZ,<ZZ=1>
  8299	034210	200 00 0 00 035371 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8300	034211	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8301						STOP^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-10
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0194

  8302	034212	254 04 0 00 034213 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8303	034213	324 00 0 00 034214 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8305									;IN THE SUBTEST) TO LOOP ON ERROR^
  8306
  8307					;**********
  8308
  8309
  8310					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8311					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8312					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8313					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8314			002037		SN=SN+1
  8315		010000	000000			ZZ=ZZ+ZZ
  8316						IFE	ZZ,<ZZ=1>
  8317	034214	200 00 0 00 035372 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8318	034215	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8319						STOP^
  8320	034216	254 04 0 00 034217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8321	034217	324 00 0 00 034220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8322									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8323									;IN THE SUBTEST) TO LOOP ON ERROR^
  8324
  8325					;**********
  8326
  8327
  8328					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8329					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8330					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8331					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8332			002040		SN=SN+1
  8333		020000	000000			ZZ=ZZ+ZZ
  8334						IFE	ZZ,<ZZ=1>
  8335	034220	200 00 0 00 035373 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8336	034221	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8337						STOP^
  8338	034222	254 04 0 00 034223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8339	034223	324 00 0 00 034224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8340									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8341									;IN THE SUBTEST) TO LOOP ON ERROR^
  8342
  8343					;**********
  8344
  8345
  8346					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8347					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8348					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8349					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8350			002041		SN=SN+1
  8351		040000	000000			ZZ=ZZ+ZZ
  8352						IFE	ZZ,<ZZ=1>
  8353	034224	200 00 0 00 035374 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8354	034225	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8355						STOP^
  8356	034226	254 04 0 00 034227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-11
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0195

  8357	034227	324 00 0 00 034230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8358									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8359									;IN THE SUBTEST) TO LOOP ON ERROR^
  8360
  8361					;**********
  8362
  8363
  8364					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8365					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8366					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8367					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8368			002042		SN=SN+1
  8369		100000	000000			ZZ=ZZ+ZZ
  8370						IFE	ZZ,<ZZ=1>
  8371	034230	200 00 0 00 035375 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8372	034231	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8373						STOP^
  8374	034232	254 04 0 00 034233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8375	034233	324 00 0 00 034234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8376									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8377									;IN THE SUBTEST) TO LOOP ON ERROR^
  8378
  8379					;**********
  8380
  8381
  8382					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8383					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8384					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8385					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8386			002043		SN=SN+1
  8387		200000	000000			ZZ=ZZ+ZZ
  8388						IFE	ZZ,<ZZ=1>
  8389	034234	200 00 0 00 035376 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8390	034235	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8391						STOP^
  8392	034236	254 04 0 00 034237 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8393	034237	324 00 0 00 034240 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8394									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8395									;IN THE SUBTEST) TO LOOP ON ERROR^
  8396
  8397					;**********
  8398
  8399
  8400					;THIS TEST VERIFIES THAT CAMN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN AND
  8401					;ONLY WHEN C(AC) IS NOT EQUAL TO C(E).  HENCE,
  8402					;CAMN SHOULD SKIP;  OTHERWISE THE PROGRAM HALTS.
  8403					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A 1 THRU ALL 36 BITS OF THE AC
  8404			002044		SN=SN+1
  8405		400000	000000			ZZ=ZZ+ZZ
  8406						IFE	ZZ,<ZZ=1>
  8407	034240	200 00 0 00 035377 		MOVE	[ZZ]		;PRELOAD AC WITH A FLOATING 1	
  8408	034241	316 00 0 00 035330 		CAMN	[0]		;*CAMN SHOULD SKIP BECAUSE C(AC) IS NOT EQUAL TO C(E)	
  8409						STOP^
  8410	034242	254 04 0 00 034243 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8411	034243	324 00 0 00 034244 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 26-12
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAMX) INSTRUCTIONS                                                SEQ 0196

  8412									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8413									;IN THE SUBTEST) TO LOOP ON ERROR^
  8414
  8415					;**********
  8416
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0197

  8417					SUBTTL	TEST OF MOVS INSTRUCTION
  8418
  8419					;**********
  8420
  8421			002100		SN=2100
  8422			000000			ZZ=0
  8423
  8424					B2100:	REPEAT	^D18,<
  8425					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8426					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8427					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8428					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8429					
  8430					SN=SN+1
  8431						ZZ=ZZ+ZZ
  8432						IFE	ZZ,<ZZ=1>
  8433						MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8434									;AND MOVE RESULT INTO AC
  8435						CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8436						STOP		
  8437					
  8438					;**********
  8439					>
  8440
  8441					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8442					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8443					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8444					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8445
  8446			002101		SN=SN+1
  8447			000000			ZZ=ZZ+ZZ
  8448			000001			IFE	ZZ,<ZZ=1>
  8449	034244	204 00 0 00 035457 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8450									;AND MOVE RESULT INTO AC
  8451	034245	312 00 0 00 035457 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8452						STOP		^
  8453	034246	254 04 0 00 034247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8454	034247	324 00 0 00 034250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8455									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8456									;IN THE SUBTEST) TO LOOP ON ERROR^
  8457
  8458					;**********
  8459
  8460
  8461					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8462					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8463					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8464					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8465
  8466			002102		SN=SN+1
  8467			000002			ZZ=ZZ+ZZ
  8468						IFE	ZZ,<ZZ=1>
  8469	034250	204 00 0 00 035460 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8470									;AND MOVE RESULT INTO AC
  8471	034251	312 00 0 00 035460 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0198

  8472						STOP		^
  8473	034252	254 04 0 00 034253 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8474	034253	324 00 0 00 034254 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8475									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8476									;IN THE SUBTEST) TO LOOP ON ERROR^
  8477
  8478					;**********
  8479
  8480
  8481					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8482					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8483					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8484					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8485
  8486			002103		SN=SN+1
  8487			000004			ZZ=ZZ+ZZ
  8488						IFE	ZZ,<ZZ=1>
  8489	034254	204 00 0 00 035461 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8490									;AND MOVE RESULT INTO AC
  8491	034255	312 00 0 00 035461 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8492						STOP		^
  8493	034256	254 04 0 00 034257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8494	034257	324 00 0 00 034260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8496									;IN THE SUBTEST) TO LOOP ON ERROR^
  8497
  8498					;**********
  8499
  8500
  8501					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8502					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8503					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8504					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8505
  8506			002104		SN=SN+1
  8507			000010			ZZ=ZZ+ZZ
  8508						IFE	ZZ,<ZZ=1>
  8509	034260	204 00 0 00 035462 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8510									;AND MOVE RESULT INTO AC
  8511	034261	312 00 0 00 035462 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8512						STOP		^
  8513	034262	254 04 0 00 034263 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8514	034263	324 00 0 00 034264 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8515									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8516									;IN THE SUBTEST) TO LOOP ON ERROR^
  8517
  8518					;**********
  8519
  8520
  8521					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8522					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8523					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8524					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8525
  8526			002105		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0199

  8527			000020			ZZ=ZZ+ZZ
  8528						IFE	ZZ,<ZZ=1>
  8529	034264	204 00 0 00 035463 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8530									;AND MOVE RESULT INTO AC
  8531	034265	312 00 0 00 035463 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8532						STOP		^
  8533	034266	254 04 0 00 034267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8534	034267	324 00 0 00 034270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8535									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8536									;IN THE SUBTEST) TO LOOP ON ERROR^
  8537
  8538					;**********
  8539
  8540
  8541					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8542					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8543					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8544					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8545
  8546			002106		SN=SN+1
  8547			000040			ZZ=ZZ+ZZ
  8548						IFE	ZZ,<ZZ=1>
  8549	034270	204 00 0 00 035464 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8550									;AND MOVE RESULT INTO AC
  8551	034271	312 00 0 00 035464 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8552						STOP		^
  8553	034272	254 04 0 00 034273 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8554	034273	324 00 0 00 034274 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8556									;IN THE SUBTEST) TO LOOP ON ERROR^
  8557
  8558					;**********
  8559
  8560
  8561					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8562					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8563					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8564					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8565
  8566			002107		SN=SN+1
  8567			000100			ZZ=ZZ+ZZ
  8568						IFE	ZZ,<ZZ=1>
  8569	034274	204 00 0 00 035465 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8570									;AND MOVE RESULT INTO AC
  8571	034275	312 00 0 00 035465 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8572						STOP		^
  8573	034276	254 04 0 00 034277 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8574	034277	324 00 0 00 034300 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8575									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8576									;IN THE SUBTEST) TO LOOP ON ERROR^
  8577
  8578					;**********
  8579
  8580
  8581					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0200

  8582					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8583					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8584					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8585
  8586			002110		SN=SN+1
  8587			000200			ZZ=ZZ+ZZ
  8588						IFE	ZZ,<ZZ=1>
  8589	034300	204 00 0 00 035466 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8590									;AND MOVE RESULT INTO AC
  8591	034301	312 00 0 00 035466 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8592						STOP		^
  8593	034302	254 04 0 00 034303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8594	034303	324 00 0 00 034304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8595									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8596									;IN THE SUBTEST) TO LOOP ON ERROR^
  8597
  8598					;**********
  8599
  8600
  8601					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8602					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8603					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8604					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8605
  8606			002111		SN=SN+1
  8607			000400			ZZ=ZZ+ZZ
  8608						IFE	ZZ,<ZZ=1>
  8609	034304	204 00 0 00 035467 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8610									;AND MOVE RESULT INTO AC
  8611	034305	312 00 0 00 035467 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8612						STOP		^
  8613	034306	254 04 0 00 034307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8614	034307	324 00 0 00 034310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8615									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8616									;IN THE SUBTEST) TO LOOP ON ERROR^
  8617
  8618					;**********
  8619
  8620
  8621					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8622					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8623					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8624					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8625
  8626			002112		SN=SN+1
  8627			001000			ZZ=ZZ+ZZ
  8628						IFE	ZZ,<ZZ=1>
  8629	034310	204 00 0 00 035470 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8630									;AND MOVE RESULT INTO AC
  8631	034311	312 00 0 00 035470 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8632						STOP		^
  8633	034312	254 04 0 00 034313 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8634	034313	324 00 0 00 034314 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8635									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8636									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0201

  8637
  8638					;**********
  8639
  8640
  8641					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8642					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8643					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8644					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8645
  8646			002113		SN=SN+1
  8647			002000			ZZ=ZZ+ZZ
  8648						IFE	ZZ,<ZZ=1>
  8649	034314	204 00 0 00 035471 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8650									;AND MOVE RESULT INTO AC
  8651	034315	312 00 0 00 035471 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8652						STOP		^
  8653	034316	254 04 0 00 034317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8654	034317	324 00 0 00 034320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8655									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8656									;IN THE SUBTEST) TO LOOP ON ERROR^
  8657
  8658					;**********
  8659
  8660
  8661					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8662					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8663					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8664					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8665
  8666			002114		SN=SN+1
  8667			004000			ZZ=ZZ+ZZ
  8668						IFE	ZZ,<ZZ=1>
  8669	034320	204 00 0 00 035472 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8670									;AND MOVE RESULT INTO AC
  8671	034321	312 00 0 00 035472 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8672						STOP		^
  8673	034322	254 04 0 00 034323 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8674	034323	324 00 0 00 034324 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8675									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8676									;IN THE SUBTEST) TO LOOP ON ERROR^
  8677
  8678					;**********
  8679
  8680
  8681					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8682					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8683					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8684					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8685
  8686			002115		SN=SN+1
  8687			010000			ZZ=ZZ+ZZ
  8688						IFE	ZZ,<ZZ=1>
  8689	034324	204 00 0 00 035473 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8690									;AND MOVE RESULT INTO AC
  8691	034325	312 00 0 00 035473 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0202

  8692						STOP		^
  8693	034326	254 04 0 00 034327 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8694	034327	324 00 0 00 034330 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8695									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8696									;IN THE SUBTEST) TO LOOP ON ERROR^
  8697
  8698					;**********
  8699
  8700
  8701					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8702					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8703					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8704					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8705
  8706			002116		SN=SN+1
  8707			020000			ZZ=ZZ+ZZ
  8708						IFE	ZZ,<ZZ=1>
  8709	034330	204 00 0 00 035474 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8710									;AND MOVE RESULT INTO AC
  8711	034331	312 00 0 00 035474 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8712						STOP		^
  8713	034332	254 04 0 00 034333 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8714	034333	324 00 0 00 034334 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8715									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8716									;IN THE SUBTEST) TO LOOP ON ERROR^
  8717
  8718					;**********
  8719
  8720
  8721					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8722					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8723					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8724					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8725
  8726			002117		SN=SN+1
  8727			040000			ZZ=ZZ+ZZ
  8728						IFE	ZZ,<ZZ=1>
  8729	034334	204 00 0 00 035475 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8730									;AND MOVE RESULT INTO AC
  8731	034335	312 00 0 00 035475 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8732						STOP		^
  8733	034336	254 04 0 00 034337 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8734	034337	324 00 0 00 034340 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8735									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8736									;IN THE SUBTEST) TO LOOP ON ERROR^
  8737
  8738					;**********
  8739
  8740
  8741					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8742					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8743					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8744					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8745
  8746			002120		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 27-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0203

  8747			100000			ZZ=ZZ+ZZ
  8748						IFE	ZZ,<ZZ=1>
  8749	034340	204 00 0 00 035476 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8750									;AND MOVE RESULT INTO AC
  8751	034341	312 00 0 00 035476 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8752						STOP		^
  8753	034342	254 04 0 00 034343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8754	034343	324 00 0 00 034344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8755									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8756									;IN THE SUBTEST) TO LOOP ON ERROR^
  8757
  8758					;**********
  8759
  8760
  8761					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8762					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8763					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8764					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8765
  8766			002121		SN=SN+1
  8767			200000			ZZ=ZZ+ZZ
  8768						IFE	ZZ,<ZZ=1>
  8769	034344	204 00 0 00 035477 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8770									;AND MOVE RESULT INTO AC
  8771	034345	312 00 0 00 035477 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8772						STOP		^
  8773	034346	254 04 0 00 034347 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8774	034347	324 00 0 00 034350 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8775									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8776									;IN THE SUBTEST) TO LOOP ON ERROR^
  8777
  8778					;**********
  8779
  8780
  8781					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8782					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU BOTH HALVES
  8783					;OF E [C(E)=ZZ,,ZZ WHERE ZZ IS A FLOATING 1].  THEN, C(AC) IS CHECKED.
  8784					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF EACH HALF
  8785
  8786			002122		SN=SN+1
  8787			400000			ZZ=ZZ+ZZ
  8788						IFE	ZZ,<ZZ=1>
  8789	034350	204 00 0 00 035500 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8790									;AND MOVE RESULT INTO AC
  8791	034351	312 00 0 00 035500 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF C(AC) CONTAINS ZZ,,ZZ
  8792						STOP		^
  8793	034352	254 04 0 00 034353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8794	034353	324 00 0 00 034354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8795									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8796									;IN THE SUBTEST) TO LOOP ON ERROR^
  8797
  8798					;**********
  8799
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0204

  8800			002200		SN=2200
  8801			000000			ZZ=0
  8802
  8803					B2200:	REPEAT	^D18,<
  8804					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8805					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8806					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8807					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8808					
  8809					SN=SN+1
  8810						ZZ=ZZ+ZZ+1
  8811						IFE	<ZZ-1>,<ZZ=-2>
  8812						MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8813									;AND MOVE RESULT INTO AC
  8814						CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8815						STOP		
  8816					
  8817					;**********
  8818					>
  8819
  8820					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8821					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8822					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8823					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8824
  8825			002201		SN=SN+1
  8826			000001			ZZ=ZZ+ZZ+1
  8827		777777	777776			IFE	<ZZ-1>,<ZZ=-2>
  8828	034354	204 00 0 00 035501 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8829									;AND MOVE RESULT INTO AC
  8830	034355	312 00 0 00 035501 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8831						STOP		^
  8832	034356	254 04 0 00 034357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8833	034357	324 00 0 00 034360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8834									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8835									;IN THE SUBTEST) TO LOOP ON ERROR^
  8836
  8837					;**********
  8838
  8839
  8840					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8841					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8842					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8843					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8844
  8845			002202		SN=SN+1
  8846		777777	777775			ZZ=ZZ+ZZ+1
  8847						IFE	<ZZ-1>,<ZZ=-2>
  8848	034360	204 00 0 00 035502 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8849									;AND MOVE RESULT INTO AC
  8850	034361	312 00 0 00 035502 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8851						STOP		^
  8852	034362	254 04 0 00 034363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8853	034363	324 00 0 00 034364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8854									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0205

  8855									;IN THE SUBTEST) TO LOOP ON ERROR^
  8856
  8857					;**********
  8858
  8859
  8860					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8861					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8862					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8863					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8864
  8865			002203		SN=SN+1
  8866		777777	777773			ZZ=ZZ+ZZ+1
  8867						IFE	<ZZ-1>,<ZZ=-2>
  8868	034364	204 00 0 00 035503 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8869									;AND MOVE RESULT INTO AC
  8870	034365	312 00 0 00 035503 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8871						STOP		^
  8872	034366	254 04 0 00 034367 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8873	034367	324 00 0 00 034370 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8874									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8875									;IN THE SUBTEST) TO LOOP ON ERROR^
  8876
  8877					;**********
  8878
  8879
  8880					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8881					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8882					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8883					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8884
  8885			002204		SN=SN+1
  8886		777777	777767			ZZ=ZZ+ZZ+1
  8887						IFE	<ZZ-1>,<ZZ=-2>
  8888	034370	204 00 0 00 035504 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8889									;AND MOVE RESULT INTO AC
  8890	034371	312 00 0 00 035504 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8891						STOP		^
  8892	034372	254 04 0 00 034373 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8893	034373	324 00 0 00 034374 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8894									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8895									;IN THE SUBTEST) TO LOOP ON ERROR^
  8896
  8897					;**********
  8898
  8899
  8900					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8901					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8902					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8903					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8904
  8905			002205		SN=SN+1
  8906		777777	777757			ZZ=ZZ+ZZ+1
  8907						IFE	<ZZ-1>,<ZZ=-2>
  8908	034374	204 00 0 00 035505 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8909									;AND MOVE RESULT INTO AC
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0206

  8910	034375	312 00 0 00 035505 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8911						STOP		^
  8912	034376	254 04 0 00 034377 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8913	034377	324 00 0 00 034400 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8914									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8915									;IN THE SUBTEST) TO LOOP ON ERROR^
  8916
  8917					;**********
  8918
  8919
  8920					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8921					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8922					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8923					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8924
  8925			002206		SN=SN+1
  8926		777777	777737			ZZ=ZZ+ZZ+1
  8927						IFE	<ZZ-1>,<ZZ=-2>
  8928	034400	204 00 0 00 035506 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8929									;AND MOVE RESULT INTO AC
  8930	034401	312 00 0 00 035506 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8931						STOP		^
  8932	034402	254 04 0 00 034403 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8933	034403	324 00 0 00 034404 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8934									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8935									;IN THE SUBTEST) TO LOOP ON ERROR^
  8936
  8937					;**********
  8938
  8939
  8940					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8941					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8942					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8943					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8944
  8945			002207		SN=SN+1
  8946		777777	777677			ZZ=ZZ+ZZ+1
  8947						IFE	<ZZ-1>,<ZZ=-2>
  8948	034404	204 00 0 00 035507 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8949									;AND MOVE RESULT INTO AC
  8950	034405	312 00 0 00 035507 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8951						STOP		^
  8952	034406	254 04 0 00 034407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8953	034407	324 00 0 00 034410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8955									;IN THE SUBTEST) TO LOOP ON ERROR^
  8956
  8957					;**********
  8958
  8959
  8960					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8961					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8962					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8963					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8964
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0207

  8965			002210		SN=SN+1
  8966		777777	777577			ZZ=ZZ+ZZ+1
  8967						IFE	<ZZ-1>,<ZZ=-2>
  8968	034410	204 00 0 00 035510 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8969									;AND MOVE RESULT INTO AC
  8970	034411	312 00 0 00 035510 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8971						STOP		^
  8972	034412	254 04 0 00 034413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8973	034413	324 00 0 00 034414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8974									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8975									;IN THE SUBTEST) TO LOOP ON ERROR^
  8976
  8977					;**********
  8978
  8979
  8980					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  8981					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  8982					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  8983					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  8984
  8985			002211		SN=SN+1
  8986		777777	777377			ZZ=ZZ+ZZ+1
  8987						IFE	<ZZ-1>,<ZZ=-2>
  8988	034414	204 00 0 00 035511 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  8989									;AND MOVE RESULT INTO AC
  8990	034415	312 00 0 00 035511 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  8991						STOP		^
  8992	034416	254 04 0 00 034417 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8993	034417	324 00 0 00 034420 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8995									;IN THE SUBTEST) TO LOOP ON ERROR^
  8996
  8997					;**********
  8998
  8999
  9000					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9001					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9002					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9003					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9004
  9005			002212		SN=SN+1
  9006		777777	776777			ZZ=ZZ+ZZ+1
  9007						IFE	<ZZ-1>,<ZZ=-2>
  9008	034420	204 00 0 00 035512 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9009									;AND MOVE RESULT INTO AC
  9010	034421	312 00 0 00 035512 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9011						STOP		^
  9012	034422	254 04 0 00 034423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9013	034423	324 00 0 00 034424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9014									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9015									;IN THE SUBTEST) TO LOOP ON ERROR^
  9016
  9017					;**********
  9018
  9019
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0208

  9020					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9021					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9022					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9023					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9024
  9025			002213		SN=SN+1
  9026		777777	775777			ZZ=ZZ+ZZ+1
  9027						IFE	<ZZ-1>,<ZZ=-2>
  9028	034424	204 00 0 00 035513 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9029									;AND MOVE RESULT INTO AC
  9030	034425	312 00 0 00 035513 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9031						STOP		^
  9032	034426	254 04 0 00 034427 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9033	034427	324 00 0 00 034430 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9034									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9035									;IN THE SUBTEST) TO LOOP ON ERROR^
  9036
  9037					;**********
  9038
  9039
  9040					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9041					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9042					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9043					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9044
  9045			002214		SN=SN+1
  9046		777777	773777			ZZ=ZZ+ZZ+1
  9047						IFE	<ZZ-1>,<ZZ=-2>
  9048	034430	204 00 0 00 035514 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9049									;AND MOVE RESULT INTO AC
  9050	034431	312 00 0 00 035514 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9051						STOP		^
  9052	034432	254 04 0 00 034433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9053	034433	324 00 0 00 034434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9054									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9055									;IN THE SUBTEST) TO LOOP ON ERROR^
  9056
  9057					;**********
  9058
  9059
  9060					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9061					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9062					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9063					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9064
  9065			002215		SN=SN+1
  9066		777777	767777			ZZ=ZZ+ZZ+1
  9067						IFE	<ZZ-1>,<ZZ=-2>
  9068	034434	204 00 0 00 035515 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9069									;AND MOVE RESULT INTO AC
  9070	034435	312 00 0 00 035515 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9071						STOP		^
  9072	034436	254 04 0 00 034437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9073	034437	324 00 0 00 034440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9074									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0209

  9075									;IN THE SUBTEST) TO LOOP ON ERROR^
  9076
  9077					;**********
  9078
  9079
  9080					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9081					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9082					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9083					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9084
  9085			002216		SN=SN+1
  9086		777777	757777			ZZ=ZZ+ZZ+1
  9087						IFE	<ZZ-1>,<ZZ=-2>
  9088	034440	204 00 0 00 035516 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9089									;AND MOVE RESULT INTO AC
  9090	034441	312 00 0 00 035516 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9091						STOP		^
  9092	034442	254 04 0 00 034443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9093	034443	324 00 0 00 034444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9094									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9095									;IN THE SUBTEST) TO LOOP ON ERROR^
  9096
  9097					;**********
  9098
  9099
  9100					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9101					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9102					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9103					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9104
  9105			002217		SN=SN+1
  9106		777777	737777			ZZ=ZZ+ZZ+1
  9107						IFE	<ZZ-1>,<ZZ=-2>
  9108	034444	204 00 0 00 035517 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9109									;AND MOVE RESULT INTO AC
  9110	034445	312 00 0 00 035517 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9111						STOP		^
  9112	034446	254 04 0 00 034447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9113	034447	324 00 0 00 034450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9114									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9115									;IN THE SUBTEST) TO LOOP ON ERROR^
  9116
  9117					;**********
  9118
  9119
  9120					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9121					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9122					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9123					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9124
  9125			002220		SN=SN+1
  9126		777777	677777			ZZ=ZZ+ZZ+1
  9127						IFE	<ZZ-1>,<ZZ=-2>
  9128	034450	204 00 0 00 035520 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9129									;AND MOVE RESULT INTO AC
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 28-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0210

  9130	034451	312 00 0 00 035520 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9131						STOP		^
  9132	034452	254 04 0 00 034453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9133	034453	324 00 0 00 034454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9135									;IN THE SUBTEST) TO LOOP ON ERROR^
  9136
  9137					;**********
  9138
  9139
  9140					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9141					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9142					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9143					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9144
  9145			002221		SN=SN+1
  9146		777777	577777			ZZ=ZZ+ZZ+1
  9147						IFE	<ZZ-1>,<ZZ=-2>
  9148	034454	204 00 0 00 035521 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9149									;AND MOVE RESULT INTO AC
  9150	034455	312 00 0 00 035521 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9151						STOP		^
  9152	034456	254 04 0 00 034457 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9153	034457	324 00 0 00 034460 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9154									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9155									;IN THE SUBTEST) TO LOOP ON ERROR^
  9156
  9157					;**********
  9158
  9159
  9160					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9161					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU BOTH HALVES
  9162					;OF E [C(E)=ZZ,,ZZ, WHERE ZZ IS A FLOATING 0].  THEN, C(AC) IS CHECKED.
  9163					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 0 THRU ALL 18 BITS OF EACH HALF
  9164
  9165			002222		SN=SN+1
  9166		777777	377777			ZZ=ZZ+ZZ+1
  9167						IFE	<ZZ-1>,<ZZ=-2>
  9168	034460	204 00 0 00 035522 		MOVS	[XWD ZZ,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9169									;AND MOVE RESULT INTO AC
  9170	034461	312 00 0 00 035522 		CAME	[XWD ZZ,ZZ]	;PASS TEST IF AC CONTAINS ZZ,,ZZ
  9171						STOP		^
  9172	034462	254 04 0 00 034463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9173	034463	324 00 0 00 034464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9174									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9175									;IN THE SUBTEST) TO LOOP ON ERROR^
  9176
  9177					;**********
  9178
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0211

  9179			002300		SN=2300
  9180			000000			ZZ=0
  9181			000000			YY=0
  9182
  9183					B2300:	REPEAT	^D18,<
  9184					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9185					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9186					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9187					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9188					;THEN, C(AC) IS CHECKED.
  9189					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9190					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9191					
  9192					SN=SN+1
  9193						ZZ=ZZ+ZZ
  9194						YY=YY+YY+1
  9195						IFE	ZZ,<ZZ=1>
  9196						IFE	<YY-1>,<YY=-2>
  9197						MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9198									;AND MOVE RESULT INTO AC
  9199						CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9200						STOP		
  9201					
  9202					;**********
  9203					>
  9204
  9205					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9206					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9207					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9208					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9209					;THEN, C(AC) IS CHECKED.
  9210					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9211					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9212
  9213			002301		SN=SN+1
  9214			000000			ZZ=ZZ+ZZ
  9215			000001			YY=YY+YY+1
  9216			000001			IFE	ZZ,<ZZ=1>
  9217		777777	777776			IFE	<YY-1>,<YY=-2>
  9218	034464	204 00 0 00 035523 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9219									;AND MOVE RESULT INTO AC
  9220	034465	312 00 0 00 035524 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9221						STOP		^
  9222	034466	254 04 0 00 034467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9223	034467	324 00 0 00 034470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9224									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9225									;IN THE SUBTEST) TO LOOP ON ERROR^
  9226
  9227					;**********
  9228
  9229
  9230					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9231					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9232					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9233					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0212

  9234					;THEN, C(AC) IS CHECKED.
  9235					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9236					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9237
  9238			002302		SN=SN+1
  9239			000002			ZZ=ZZ+ZZ
  9240		777777	777775			YY=YY+YY+1
  9241						IFE	ZZ,<ZZ=1>
  9242						IFE	<YY-1>,<YY=-2>
  9243	034470	204 00 0 00 035525 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9244									;AND MOVE RESULT INTO AC
  9245	034471	312 00 0 00 035526 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9246						STOP		^
  9247	034472	254 04 0 00 034473 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9248	034473	324 00 0 00 034474 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9249									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9250									;IN THE SUBTEST) TO LOOP ON ERROR^
  9251
  9252					;**********
  9253
  9254
  9255					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9256					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9257					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9258					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9259					;THEN, C(AC) IS CHECKED.
  9260					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9261					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9262
  9263			002303		SN=SN+1
  9264			000004			ZZ=ZZ+ZZ
  9265		777777	777773			YY=YY+YY+1
  9266						IFE	ZZ,<ZZ=1>
  9267						IFE	<YY-1>,<YY=-2>
  9268	034474	204 00 0 00 035527 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9269									;AND MOVE RESULT INTO AC
  9270	034475	312 00 0 00 035530 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9271						STOP		^
  9272	034476	254 04 0 00 034477 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9273	034477	324 00 0 00 034500 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9274									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9275									;IN THE SUBTEST) TO LOOP ON ERROR^
  9276
  9277					;**********
  9278
  9279
  9280					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9281					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9282					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9283					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9284					;THEN, C(AC) IS CHECKED.
  9285					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9286					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9287
  9288			002304		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0213

  9289			000010			ZZ=ZZ+ZZ
  9290		777777	777767			YY=YY+YY+1
  9291						IFE	ZZ,<ZZ=1>
  9292						IFE	<YY-1>,<YY=-2>
  9293	034500	204 00 0 00 035531 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9294									;AND MOVE RESULT INTO AC
  9295	034501	312 00 0 00 035532 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9296						STOP		^
  9297	034502	254 04 0 00 034503 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9298	034503	324 00 0 00 034504 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9299									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9300									;IN THE SUBTEST) TO LOOP ON ERROR^
  9301
  9302					;**********
  9303
  9304
  9305					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9306					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9307					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9308					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9309					;THEN, C(AC) IS CHECKED.
  9310					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9311					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9312
  9313			002305		SN=SN+1
  9314			000020			ZZ=ZZ+ZZ
  9315		777777	777757			YY=YY+YY+1
  9316						IFE	ZZ,<ZZ=1>
  9317						IFE	<YY-1>,<YY=-2>
  9318	034504	204 00 0 00 035533 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9319									;AND MOVE RESULT INTO AC
  9320	034505	312 00 0 00 035534 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9321						STOP		^
  9322	034506	254 04 0 00 034507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9323	034507	324 00 0 00 034510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9324									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9325									;IN THE SUBTEST) TO LOOP ON ERROR^
  9326
  9327					;**********
  9328
  9329
  9330					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9331					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9332					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9333					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9334					;THEN, C(AC) IS CHECKED.
  9335					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9336					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9337
  9338			002306		SN=SN+1
  9339			000040			ZZ=ZZ+ZZ
  9340		777777	777737			YY=YY+YY+1
  9341						IFE	ZZ,<ZZ=1>
  9342						IFE	<YY-1>,<YY=-2>
  9343	034510	204 00 0 00 035535 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0214

  9344									;AND MOVE RESULT INTO AC
  9345	034511	312 00 0 00 035536 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9346						STOP		^
  9347	034512	254 04 0 00 034513 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9348	034513	324 00 0 00 034514 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9349									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9350									;IN THE SUBTEST) TO LOOP ON ERROR^
  9351
  9352					;**********
  9353
  9354
  9355					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9356					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9357					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9358					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9359					;THEN, C(AC) IS CHECKED.
  9360					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9361					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9362
  9363			002307		SN=SN+1
  9364			000100			ZZ=ZZ+ZZ
  9365		777777	777677			YY=YY+YY+1
  9366						IFE	ZZ,<ZZ=1>
  9367						IFE	<YY-1>,<YY=-2>
  9368	034514	204 00 0 00 035537 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9369									;AND MOVE RESULT INTO AC
  9370	034515	312 00 0 00 035540 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9371						STOP		^
  9372	034516	254 04 0 00 034517 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9373	034517	324 00 0 00 034520 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9374									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9375									;IN THE SUBTEST) TO LOOP ON ERROR^
  9376
  9377					;**********
  9378
  9379
  9380					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9381					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9382					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9383					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9384					;THEN, C(AC) IS CHECKED.
  9385					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9386					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9387
  9388			002310		SN=SN+1
  9389			000200			ZZ=ZZ+ZZ
  9390		777777	777577			YY=YY+YY+1
  9391						IFE	ZZ,<ZZ=1>
  9392						IFE	<YY-1>,<YY=-2>
  9393	034520	204 00 0 00 035541 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9394									;AND MOVE RESULT INTO AC
  9395	034521	312 00 0 00 035542 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9396						STOP		^
  9397	034522	254 04 0 00 034523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9398	034523	324 00 0 00 034524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0215

  9399									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9400									;IN THE SUBTEST) TO LOOP ON ERROR^
  9401
  9402					;**********
  9403
  9404
  9405					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9406					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9407					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9408					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9409					;THEN, C(AC) IS CHECKED.
  9410					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9411					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9412
  9413			002311		SN=SN+1
  9414			000400			ZZ=ZZ+ZZ
  9415		777777	777377			YY=YY+YY+1
  9416						IFE	ZZ,<ZZ=1>
  9417						IFE	<YY-1>,<YY=-2>
  9418	034524	204 00 0 00 035543 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9419									;AND MOVE RESULT INTO AC
  9420	034525	312 00 0 00 035544 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9421						STOP		^
  9422	034526	254 04 0 00 034527 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9423	034527	324 00 0 00 034530 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9424									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9425									;IN THE SUBTEST) TO LOOP ON ERROR^
  9426
  9427					;**********
  9428
  9429
  9430					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9431					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9432					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9433					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9434					;THEN, C(AC) IS CHECKED.
  9435					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9436					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9437
  9438			002312		SN=SN+1
  9439			001000			ZZ=ZZ+ZZ
  9440		777777	776777			YY=YY+YY+1
  9441						IFE	ZZ,<ZZ=1>
  9442						IFE	<YY-1>,<YY=-2>
  9443	034530	204 00 0 00 035545 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9444									;AND MOVE RESULT INTO AC
  9445	034531	312 00 0 00 035546 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9446						STOP		^
  9447	034532	254 04 0 00 034533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9448	034533	324 00 0 00 034534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9449									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9450									;IN THE SUBTEST) TO LOOP ON ERROR^
  9451
  9452					;**********
  9453
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0216

  9454
  9455					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9456					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9457					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9458					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9459					;THEN, C(AC) IS CHECKED.
  9460					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9461					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9462
  9463			002313		SN=SN+1
  9464			002000			ZZ=ZZ+ZZ
  9465		777777	775777			YY=YY+YY+1
  9466						IFE	ZZ,<ZZ=1>
  9467						IFE	<YY-1>,<YY=-2>
  9468	034534	204 00 0 00 035547 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9469									;AND MOVE RESULT INTO AC
  9470	034535	312 00 0 00 035550 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9471						STOP		^
  9472	034536	254 04 0 00 034537 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9473	034537	324 00 0 00 034540 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9474									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9475									;IN THE SUBTEST) TO LOOP ON ERROR^
  9476
  9477					;**********
  9478
  9479
  9480					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9481					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9482					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9483					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9484					;THEN, C(AC) IS CHECKED.
  9485					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9486					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9487
  9488			002314		SN=SN+1
  9489			004000			ZZ=ZZ+ZZ
  9490		777777	773777			YY=YY+YY+1
  9491						IFE	ZZ,<ZZ=1>
  9492						IFE	<YY-1>,<YY=-2>
  9493	034540	204 00 0 00 035551 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9494									;AND MOVE RESULT INTO AC
  9495	034541	312 00 0 00 035552 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9496						STOP		^
  9497	034542	254 04 0 00 034543 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9498	034543	324 00 0 00 034544 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9500									;IN THE SUBTEST) TO LOOP ON ERROR^
  9501
  9502					;**********
  9503
  9504
  9505					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9506					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9507					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9508					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0217

  9509					;THEN, C(AC) IS CHECKED.
  9510					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9511					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9512
  9513			002315		SN=SN+1
  9514			010000			ZZ=ZZ+ZZ
  9515		777777	767777			YY=YY+YY+1
  9516						IFE	ZZ,<ZZ=1>
  9517						IFE	<YY-1>,<YY=-2>
  9518	034544	204 00 0 00 035553 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9519									;AND MOVE RESULT INTO AC
  9520	034545	312 00 0 00 035554 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9521						STOP		^
  9522	034546	254 04 0 00 034547 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9523	034547	324 00 0 00 034550 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9524									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9525									;IN THE SUBTEST) TO LOOP ON ERROR^
  9526
  9527					;**********
  9528
  9529
  9530					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9531					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9532					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9533					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9534					;THEN, C(AC) IS CHECKED.
  9535					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9536					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9537
  9538			002316		SN=SN+1
  9539			020000			ZZ=ZZ+ZZ
  9540		777777	757777			YY=YY+YY+1
  9541						IFE	ZZ,<ZZ=1>
  9542						IFE	<YY-1>,<YY=-2>
  9543	034550	204 00 0 00 035555 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9544									;AND MOVE RESULT INTO AC
  9545	034551	312 00 0 00 035556 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9546						STOP		^
  9547	034552	254 04 0 00 034553 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9548	034553	324 00 0 00 034554 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9550									;IN THE SUBTEST) TO LOOP ON ERROR^
  9551
  9552					;**********
  9553
  9554
  9555					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9556					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9557					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9558					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9559					;THEN, C(AC) IS CHECKED.
  9560					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9561					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9562
  9563			002317		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0218

  9564			040000			ZZ=ZZ+ZZ
  9565		777777	737777			YY=YY+YY+1
  9566						IFE	ZZ,<ZZ=1>
  9567						IFE	<YY-1>,<YY=-2>
  9568	034554	204 00 0 00 035557 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9569									;AND MOVE RESULT INTO AC
  9570	034555	312 00 0 00 035560 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9571						STOP		^
  9572	034556	254 04 0 00 034557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9573	034557	324 00 0 00 034560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9574									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9575									;IN THE SUBTEST) TO LOOP ON ERROR^
  9576
  9577					;**********
  9578
  9579
  9580					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9581					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9582					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9583					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9584					;THEN, C(AC) IS CHECKED.
  9585					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9586					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9587
  9588			002320		SN=SN+1
  9589			100000			ZZ=ZZ+ZZ
  9590		777777	677777			YY=YY+YY+1
  9591						IFE	ZZ,<ZZ=1>
  9592						IFE	<YY-1>,<YY=-2>
  9593	034560	204 00 0 00 035561 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9594									;AND MOVE RESULT INTO AC
  9595	034561	312 00 0 00 035562 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9596						STOP		^
  9597	034562	254 04 0 00 034563 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9598	034563	324 00 0 00 034564 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9599									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9600									;IN THE SUBTEST) TO LOOP ON ERROR^
  9601
  9602					;**********
  9603
  9604
  9605					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9606					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9607					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9608					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9609					;THEN, C(AC) IS CHECKED.
  9610					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9611					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9612
  9613			002321		SN=SN+1
  9614			200000			ZZ=ZZ+ZZ
  9615		777777	577777			YY=YY+YY+1
  9616						IFE	ZZ,<ZZ=1>
  9617						IFE	<YY-1>,<YY=-2>
  9618	034564	204 00 0 00 035563 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 29-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0219

  9619									;AND MOVE RESULT INTO AC
  9620	034565	312 00 0 00 035564 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9621						STOP		^
  9622	034566	254 04 0 00 034567 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9623	034567	324 00 0 00 034570 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9624									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9625									;IN THE SUBTEST) TO LOOP ON ERROR^
  9626
  9627					;**********
  9628
  9629
  9630					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9631					;MOVES IT INTO AC.  IN THIS CASE, A 1 IS RIPPLED THRU THE LEFT HALF OF E
  9632					;AND A 0 IS RIPPLED THRU THE RIGHT HALF
  9633					;OF E [C(E)=ZZ,,YY, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9634					;THEN, C(AC) IS CHECKED.
  9635					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9636					;THE LEFT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9637
  9638			002322		SN=SN+1
  9639			400000			ZZ=ZZ+ZZ
  9640		777777	377777			YY=YY+YY+1
  9641						IFE	ZZ,<ZZ=1>
  9642						IFE	<YY-1>,<YY=-2>
  9643	034570	204 00 0 00 035565 		MOVS	[XWD ZZ,YY]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9644									;AND MOVE RESULT INTO AC
  9645	034571	312 00 0 00 035566 		CAME	[XWD YY,ZZ]	;PASS TEST IF AC CONTAINS YY,,ZZ
  9646						STOP		^
  9647	034572	254 04 0 00 034573 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9648	034573	324 00 0 00 034574 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9649									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9650									;IN THE SUBTEST) TO LOOP ON ERROR^
  9651
  9652					;**********
  9653
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0220

  9654			002400		SN=2400
  9655			000000			ZZ=0
  9656			000000			YY=0
  9657
  9658					B2400:	REPEAT	 ^D18,<
  9659					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9660					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9661					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9662					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9663					;THEN, C(AC) IS CHECKED.
  9664					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9665					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9666					
  9667					SN=SN+1
  9668						ZZ=ZZ+ZZ
  9669						YY=YY+YY+1
  9670						IFE	ZZ,<ZZ=1>
  9671						IFE	<YY-1>,<YY=-2>
  9672						MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9673									;AND MOVE RESULT INTO AC
  9674						CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9675						STOP		
  9676					
  9677					;**********
  9678					>
  9679
  9680					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9681					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9682					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9683					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9684					;THEN, C(AC) IS CHECKED.
  9685					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9686					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9687
  9688			002401		SN=SN+1
  9689			000000			ZZ=ZZ+ZZ
  9690			000001			YY=YY+YY+1
  9691			000001			IFE	ZZ,<ZZ=1>
  9692		777777	777776			IFE	<YY-1>,<YY=-2>
  9693	034574	204 00 0 00 035524 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9694									;AND MOVE RESULT INTO AC
  9695	034575	312 00 0 00 035523 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9696						STOP		^
  9697	034576	254 04 0 00 034577 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9698	034577	324 00 0 00 034600 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9699									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9700									;IN THE SUBTEST) TO LOOP ON ERROR^
  9701
  9702					;**********
  9703
  9704
  9705					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9706					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9707					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9708					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0221

  9709					;THEN, C(AC) IS CHECKED.
  9710					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9711					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9712
  9713			002402		SN=SN+1
  9714			000002			ZZ=ZZ+ZZ
  9715		777777	777775			YY=YY+YY+1
  9716						IFE	ZZ,<ZZ=1>
  9717						IFE	<YY-1>,<YY=-2>
  9718	034600	204 00 0 00 035526 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9719									;AND MOVE RESULT INTO AC
  9720	034601	312 00 0 00 035525 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9721						STOP		^
  9722	034602	254 04 0 00 034603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9723	034603	324 00 0 00 034604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9724									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9725									;IN THE SUBTEST) TO LOOP ON ERROR^
  9726
  9727					;**********
  9728
  9729
  9730					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9731					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9732					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9733					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9734					;THEN, C(AC) IS CHECKED.
  9735					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9736					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9737
  9738			002403		SN=SN+1
  9739			000004			ZZ=ZZ+ZZ
  9740		777777	777773			YY=YY+YY+1
  9741						IFE	ZZ,<ZZ=1>
  9742						IFE	<YY-1>,<YY=-2>
  9743	034604	204 00 0 00 035530 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9744									;AND MOVE RESULT INTO AC
  9745	034605	312 00 0 00 035527 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9746						STOP		^
  9747	034606	254 04 0 00 034607 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9748	034607	324 00 0 00 034610 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9749									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9750									;IN THE SUBTEST) TO LOOP ON ERROR^
  9751
  9752					;**********
  9753
  9754
  9755					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9756					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9757					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9758					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9759					;THEN, C(AC) IS CHECKED.
  9760					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9761					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9762
  9763			002404		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-2
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0222

  9764			000010			ZZ=ZZ+ZZ
  9765		777777	777767			YY=YY+YY+1
  9766						IFE	ZZ,<ZZ=1>
  9767						IFE	<YY-1>,<YY=-2>
  9768	034610	204 00 0 00 035532 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9769									;AND MOVE RESULT INTO AC
  9770	034611	312 00 0 00 035531 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9771						STOP		^
  9772	034612	254 04 0 00 034613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9773	034613	324 00 0 00 034614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9774									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9775									;IN THE SUBTEST) TO LOOP ON ERROR^
  9776
  9777					;**********
  9778
  9779
  9780					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9781					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9782					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9783					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9784					;THEN, C(AC) IS CHECKED.
  9785					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9786					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9787
  9788			002405		SN=SN+1
  9789			000020			ZZ=ZZ+ZZ
  9790		777777	777757			YY=YY+YY+1
  9791						IFE	ZZ,<ZZ=1>
  9792						IFE	<YY-1>,<YY=-2>
  9793	034614	204 00 0 00 035534 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9794									;AND MOVE RESULT INTO AC
  9795	034615	312 00 0 00 035533 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9796						STOP		^
  9797	034616	254 04 0 00 034617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9798	034617	324 00 0 00 034620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9799									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9800									;IN THE SUBTEST) TO LOOP ON ERROR^
  9801
  9802					;**********
  9803
  9804
  9805					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9806					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9807					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9808					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9809					;THEN, C(AC) IS CHECKED.
  9810					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9811					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9812
  9813			002406		SN=SN+1
  9814			000040			ZZ=ZZ+ZZ
  9815		777777	777737			YY=YY+YY+1
  9816						IFE	ZZ,<ZZ=1>
  9817						IFE	<YY-1>,<YY=-2>
  9818	034620	204 00 0 00 035536 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-3
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0223

  9819									;AND MOVE RESULT INTO AC
  9820	034621	312 00 0 00 035535 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9821						STOP		^
  9822	034622	254 04 0 00 034623 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9823	034623	324 00 0 00 034624 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9824									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9825									;IN THE SUBTEST) TO LOOP ON ERROR^
  9826
  9827					;**********
  9828
  9829
  9830					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9831					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9832					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9833					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9834					;THEN, C(AC) IS CHECKED.
  9835					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9836					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9837
  9838			002407		SN=SN+1
  9839			000100			ZZ=ZZ+ZZ
  9840		777777	777677			YY=YY+YY+1
  9841						IFE	ZZ,<ZZ=1>
  9842						IFE	<YY-1>,<YY=-2>
  9843	034624	204 00 0 00 035540 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9844									;AND MOVE RESULT INTO AC
  9845	034625	312 00 0 00 035537 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9846						STOP		^
  9847	034626	254 04 0 00 034627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9848	034627	324 00 0 00 034630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9849									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9850									;IN THE SUBTEST) TO LOOP ON ERROR^
  9851
  9852					;**********
  9853
  9854
  9855					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9856					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9857					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9858					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9859					;THEN, C(AC) IS CHECKED.
  9860					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9861					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9862
  9863			002410		SN=SN+1
  9864			000200			ZZ=ZZ+ZZ
  9865		777777	777577			YY=YY+YY+1
  9866						IFE	ZZ,<ZZ=1>
  9867						IFE	<YY-1>,<YY=-2>
  9868	034630	204 00 0 00 035542 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9869									;AND MOVE RESULT INTO AC
  9870	034631	312 00 0 00 035541 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9871						STOP		^
  9872	034632	254 04 0 00 034633 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9873	034633	324 00 0 00 034634 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-4
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0224

  9874									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9875									;IN THE SUBTEST) TO LOOP ON ERROR^
  9876
  9877					;**********
  9878
  9879
  9880					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9881					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9882					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9883					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9884					;THEN, C(AC) IS CHECKED.
  9885					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9886					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9887
  9888			002411		SN=SN+1
  9889			000400			ZZ=ZZ+ZZ
  9890		777777	777377			YY=YY+YY+1
  9891						IFE	ZZ,<ZZ=1>
  9892						IFE	<YY-1>,<YY=-2>
  9893	034634	204 00 0 00 035544 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9894									;AND MOVE RESULT INTO AC
  9895	034635	312 00 0 00 035543 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9896						STOP		^
  9897	034636	254 04 0 00 034637 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9898	034637	324 00 0 00 034640 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9899									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9900									;IN THE SUBTEST) TO LOOP ON ERROR^
  9901
  9902					;**********
  9903
  9904
  9905					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9906					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9907					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9908					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9909					;THEN, C(AC) IS CHECKED.
  9910					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9911					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9912
  9913			002412		SN=SN+1
  9914			001000			ZZ=ZZ+ZZ
  9915		777777	776777			YY=YY+YY+1
  9916						IFE	ZZ,<ZZ=1>
  9917						IFE	<YY-1>,<YY=-2>
  9918	034640	204 00 0 00 035546 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9919									;AND MOVE RESULT INTO AC
  9920	034641	312 00 0 00 035545 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9921						STOP		^
  9922	034642	254 04 0 00 034643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9923	034643	324 00 0 00 034644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9924									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9925									;IN THE SUBTEST) TO LOOP ON ERROR^
  9926
  9927					;**********
  9928
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-5
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0225

  9929
  9930					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9931					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9932					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9933					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9934					;THEN, C(AC) IS CHECKED.
  9935					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9936					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9937
  9938			002413		SN=SN+1
  9939			002000			ZZ=ZZ+ZZ
  9940		777777	775777			YY=YY+YY+1
  9941						IFE	ZZ,<ZZ=1>
  9942						IFE	<YY-1>,<YY=-2>
  9943	034644	204 00 0 00 035550 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9944									;AND MOVE RESULT INTO AC
  9945	034645	312 00 0 00 035547 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9946						STOP		^
  9947	034646	254 04 0 00 034647 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9948	034647	324 00 0 00 034650 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9949									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9950									;IN THE SUBTEST) TO LOOP ON ERROR^
  9951
  9952					;**********
  9953
  9954
  9955					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9956					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9957					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9958					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
  9959					;THEN, C(AC) IS CHECKED.
  9960					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9961					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9962
  9963			002414		SN=SN+1
  9964			004000			ZZ=ZZ+ZZ
  9965		777777	773777			YY=YY+YY+1
  9966						IFE	ZZ,<ZZ=1>
  9967						IFE	<YY-1>,<YY=-2>
  9968	034650	204 00 0 00 035552 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9969									;AND MOVE RESULT INTO AC
  9970	034651	312 00 0 00 035551 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9971						STOP		^
  9972	034652	254 04 0 00 034653 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9973	034653	324 00 0 00 034654 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9974									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9975									;IN THE SUBTEST) TO LOOP ON ERROR^
  9976
  9977					;**********
  9978
  9979
  9980					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
  9981					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
  9982					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
  9983					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-6
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0226

  9984					;THEN, C(AC) IS CHECKED.
  9985					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
  9986					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
  9987
  9988			002415		SN=SN+1
  9989			010000			ZZ=ZZ+ZZ
  9990		777777	767777			YY=YY+YY+1
  9991						IFE	ZZ,<ZZ=1>
  9992						IFE	<YY-1>,<YY=-2>
  9993	034654	204 00 0 00 035554 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
  9994									;AND MOVE RESULT INTO AC
  9995	034655	312 00 0 00 035553 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
  9996						STOP		^
  9997	034656	254 04 0 00 034657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9998	034657	324 00 0 00 034660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10000									;IN THE SUBTEST) TO LOOP ON ERROR^
 10001
 10002					;**********
 10003
 10004
 10005					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
 10006					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
 10007					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
 10008					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
 10009					;THEN, C(AC) IS CHECKED.
 10010					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
 10011					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
 10012
 10013			002416		SN=SN+1
 10014			020000			ZZ=ZZ+ZZ
 10015		777777	757777			YY=YY+YY+1
 10016						IFE	ZZ,<ZZ=1>
 10017						IFE	<YY-1>,<YY=-2>
 10018	034660	204 00 0 00 035556 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
 10019									;AND MOVE RESULT INTO AC
 10020	034661	312 00 0 00 035555 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
 10021						STOP		^
 10022	034662	254 04 0 00 034663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10023	034663	324 00 0 00 034664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10024									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10025									;IN THE SUBTEST) TO LOOP ON ERROR^
 10026
 10027					;**********
 10028
 10029
 10030					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
 10031					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
 10032					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
 10033					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
 10034					;THEN, C(AC) IS CHECKED.
 10035					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
 10036					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
 10037
 10038			002417		SN=SN+1
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-7
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0227

 10039			040000			ZZ=ZZ+ZZ
 10040		777777	737777			YY=YY+YY+1
 10041						IFE	ZZ,<ZZ=1>
 10042						IFE	<YY-1>,<YY=-2>
 10043	034664	204 00 0 00 035560 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
 10044									;AND MOVE RESULT INTO AC
 10045	034665	312 00 0 00 035557 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
 10046						STOP		^
 10047	034666	254 04 0 00 034667 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10048	034667	324 00 0 00 034670 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10049									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10050									;IN THE SUBTEST) TO LOOP ON ERROR^
 10051
 10052					;**********
 10053
 10054
 10055					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
 10056					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
 10057					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
 10058					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
 10059					;THEN, C(AC) IS CHECKED.
 10060					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
 10061					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
 10062
 10063			002420		SN=SN+1
 10064			100000			ZZ=ZZ+ZZ
 10065		777777	677777			YY=YY+YY+1
 10066						IFE	ZZ,<ZZ=1>
 10067						IFE	<YY-1>,<YY=-2>
 10068	034670	204 00 0 00 035562 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
 10069									;AND MOVE RESULT INTO AC
 10070	034671	312 00 0 00 035561 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
 10071						STOP		^
 10072	034672	254 04 0 00 034673 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10073	034673	324 00 0 00 034674 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10074									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10075									;IN THE SUBTEST) TO LOOP ON ERROR^
 10076
 10077					;**********
 10078
 10079
 10080					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
 10081					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
 10082					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
 10083					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
 10084					;THEN, C(AC) IS CHECKED.
 10085					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
 10086					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
 10087
 10088			002421		SN=SN+1
 10089			200000			ZZ=ZZ+ZZ
 10090		777777	577777			YY=YY+YY+1
 10091						IFE	ZZ,<ZZ=1>
 10092						IFE	<YY-1>,<YY=-2>
 10093	034674	204 00 0 00 035564 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 30-8
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVS INSTRUCTION                                                           SEQ 0228

 10094									;AND MOVE RESULT INTO AC
 10095	034675	312 00 0 00 035563 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
 10096						STOP		^
 10097	034676	254 04 0 00 034677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10098	034677	324 00 0 00 034700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10099									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10100									;IN THE SUBTEST) TO LOOP ON ERROR^
 10101
 10102					;**********
 10103
 10104
 10105					;THIS TEST VERIFIES THAT MOVS SWAPS LEFT AND RIGHT HALVES OF E AND
 10106					;MOVES IT INTO AC.  IN THIS CASE, A 0 IS RIPPLED THRU THE LEFT HALF OF E
 10107					;AND A 1 IS RIPPLED THRU THE RIGHT HALF
 10108					;OF E [C(E)=YY,,ZZ, WHERE ZZ IS A FLOATING 1 AND YY IS A FLOATING 0].
 10109					;THEN, C(AC) IS CHECKED.
 10110					;THIS TEST IS REPEATED 18 TIMES TO FLOAT A 1 THRU ALL 18 BITS OF
 10111					;THE RIGHT HALF AND A 0 THRU ALL 18 BITS OF THE RIGHT HALF OF E
 10112
 10113			002422		SN=SN+1
 10114			400000			ZZ=ZZ+ZZ
 10115		777777	377777			YY=YY+YY+1
 10116						IFE	ZZ,<ZZ=1>
 10117						IFE	<YY-1>,<YY=-2>
 10118	034700	204 00 0 00 035566 		MOVS	[XWD YY,ZZ]	;*MOVS SHOULD SWAP HALVES OF C(E)
 10119									;AND MOVE RESULT INTO AC
 10120	034701	312 00 0 00 035565 		CAME	[XWD ZZ,YY]	;PASS TEST IF C(AC)=ZZ,,YY
 10121						STOP		^
 10122	034702	254 04 0 00 034703 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10123	034703	324 00 0 00 034704 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10124									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10125									;IN THE SUBTEST) TO LOOP ON ERROR^
 10126
 10127					;**********
 10128
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 31
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAXX) INSTRUCTIONS                                                SEQ 0229

 10129					SUBTTL	TEST OF COMPARE (CAXX) INSTRUCTIONS
 10130
 10131					;**********
 10132
 10133					;THIS TEST VERIFIES THAT CAIE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
 10134					;AND ONLY WHEN C(AC)=E
 10135					;IN THIS CASE C(AC)=E=0;  HENCE, CAIE SHOULD SKIP
 10136					;OTHERWISE THE PROGRAM HALTS
 10137
 10138	034704	400 00 0 00 000000 	B2500:	SETZ			;PRELOAD AC TO 0		
 10139	034705	302 00 0 00 000000 		CAIE			;*CAIE SHOULD SKIP BECAUSE C(AC)=E
 10140						STOP^
 10141	034706	254 04 0 00 034707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10142	034707	324 00 0 00 034710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10143									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10144									;IN THE SUBTEST) TO LOOP ON ERROR^
 10145
 10146					;*****     FAILURE ANALYSIS     *****
 10147					;C(AC0)		C(AC1)		FAILING SIGNAL
 10148
 10149					;				SW: PC CHANGE
 10150					;				FC: AD FM ; EN
 10151					;				FC: AD CRY 36
 10152					;				FC: AB PC EN
 10153					;				ET0: COND P: PC CLK EN
 10154
 10155					;**********
 10156
 10157					;THIS TEST VERIFIES THAT CAIE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
 10158					;AND ONLY WHEN C(AC)=E
 10159					;IN THIS CASE C(AC)=E=1.  HENCE, CAIE SHOULD SKIP
 10160					;OTHERWISE THE PROGRAM HALTS
 10161
 10162	034710	200 00 0 00 035334 	B2600:	MOVE	[1]		;PRELOAD AC TO 1	
 10163	034711	302 00 0 00 000001 		CAIE	1		;*CAIE SHOULD SKIP BECAUSE C(AC)=E
 10164						STOP^
 10165	034712	254 04 0 00 034713 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10166	034713	324 00 0 00 034714 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10167									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10168									;IN THE SUBTEST) TO LOOP ON ERROR^
 10169
 10170					;*****     FAILURE ANALYSIS     *****
 10171					;C(AC0)		C(AC1)		FAILING SIGNAL
 10172
 10173					;				FC: AD AR - EN
 10174
 10175					;**********
 10176
 10177					;THIS TEST VERIFIES THAT CAME SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
 10178					;AND ONLY WHEN C(AC)=C(E)
 10179					;IN THIS CASE C(AC)=C(E)=1;  HENCE, CAME SHOULD SKIP
 10180					;OTHERWISE THE PROGRAM HALTS
 10181
 10182	034714	201 00 0 00 000001 	B2700:	MOVEI	1		;PRELOAD AC TO 1	
 10183	034715	312 00 0 00 035334 		CAME	[1]		;*CAME SHOULD SKIP BECAUSE C(AC)=C(E)
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 31-1
DSKAB1	MAC	28-Mar-78 12:29		TEST OF COMPARE (CAXX) INSTRUCTIONS                                                SEQ 0230

 10184						STOP^
 10185	034716	254 04 0 00 034717 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10186	034717	324 00 0 00 034720 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10187									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10188									;IN THE SUBTEST) TO LOOP ON ERROR^
 10189
 10190					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 32
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0231

 10191					SUBTTL	TEST OF BOOLEAN INSTRUCTIONS
 10192
 10193					;**********
 10194
 10195					;THIS TEST VERIFIES THAT SETCA IGNORES THE ADDRESS FIELD OF THE INSTUCTION WORD.
 10196					;IN THIS CASE C(AC)=0,,-1;  HENCE, THE RESULT IN THE AC SHOULD BE -1,,0
 10197					;IF THE RESULT IN THE AC IS -1,,0, THE TEST PASSES.
 10198
 10199	034720	201 00 0 00 777777 	B3000:	MOVEI	-1		;PRELOAD AC TO 0,,-1	
 10200	034721	450 00 0 00 035442 		SETCA	[-1]		;*SETCA SHOULD PUT -1,,0 INTO THE AC
 10201	034722	312 00 0 00 035420 		CAME	[-1,,0]		;PASS TEST IF C(AC)=-1,,0
 10202						STOP^
 10203	034723	254 04 0 00 034724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10204	034724	324 00 0 00 034725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10205									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10206									;IN THE SUBTEST) TO LOOP ON ERROR^
 10207
 10208					;**********
 10209
 10210					;THIS TEST VERIFIES THAT SETCA COMPLEMENTS C(AC), THEN PLACES THE
 10211					;RESULT IN THE AC.
 10212					;IN THIS CASE C(AC)=0,,-1;  HENCE, THE RESULT IN THE AC SHOULD BE -1,,0
 10213					;IF THE RESULT IN THE AC IS -1,,0, THE TEST PASSES
 10214
 10215	034725	201 00 0 00 777777 	B3100:	MOVEI	-1		;PRELOAD AC TO 0,,-1
 10216	034726	450 00 0 00 000000 		SETCA			;*SETCA SHOULD PUT -1,,0 INTO THE AC
 10217	034727	312 00 0 00 035420 		CAME	[-1,,0]		;PASS TEST IF C(AC) =-1,,0
 10218						STOP^
 10219	034730	254 04 0 00 034731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10220	034731	324 00 0 00 034732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10221									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10222									;IN THE SUBTEST) TO LOOP ON ERROR^
 10223
 10224					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 33
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0232

 10225					;THIS TEST VERIFIES THAT SETCA COMPLEMENTS C(AC), THEN PLACES THE
 10226					;RESULT IN THE AC,
 10227					;IN THIS CASE C(AC)=0,,0  HENCE, THE RESULT IN THE AC SHOULD BE,-1
 10228					;IF THE RESULT IN THE AC IS -1,,-1, THE TEST PASSES
 10229
 10230	034732	201 00 0 00 000000 	B3200:	MOVEI	0		;PRELOAD AC TO 0,,0
 10231	034733	450 00 0 00 000000 		SETCA			;*SETCA SHOULD PUT -1,,-1 INTO THE AC
 10232	034734	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC) =-1,,-1
 10233						STOP^
 10234	034735	254 04 0 00 034736 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10235	034736	324 00 0 00 034737 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10236									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10237									;IN THE SUBTEST) TO LOOP ON ERROR^
 10238
 10239					;*****     FAILURE ANALYSIS     *****
 10240					;C(AC0)		C(AC1)		FAILING SIGNAL
 10241
 10242					;0				ET2: AR AD EN
 10243
 10244					;**********
 10245
 10246					;THIS TEST VERIFIES THAT SETCA COMPLEMENTS C(AC), THEN PLACES THE
 10247					;RESULT IN THE AC,
 10248					;IN THIS CASE C(AC)=-1,,-1;  HENCE, THE RESULT IN THE AC SHOULD BE 0,,0
 10249					;IF THE RESULT IN THE AC IS ZERO, THE TEST PASSES
 10250
 10251	034737	200 00 0 00 035442 	B3300:	MOVE	[-1]		;PRELOAD AC TO -1,,-1	
 10252	034740	450 00 0 00 000000 		SETCA			;*SETCA SHOULD PUT 0,,0 INTO THE AC
 10253	034741	312 00 0 00 035330 		CAME	[0]		;PASS TEST IF C(AC) IS ZERO
 10254						STOP^
 10255	034742	254 04 0 00 034743 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10256	034743	324 00 0 00 034744 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10257									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10258									;IN THE SUBTEST) TO LOOP ON ERROR^
 10259
 10260					;*****     FAILURE ANALYSIS     *****
 10261					;C(AC0)		C(AC1)		FAILING SIGNAL
 10262
 10263					;-1,,-1				FC: AD FM - EN
 10264
 10265					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 34
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0233

 10266					;THIS TEST VERIFIES THAT SETCM COMPLEMENTS C(E), THEN PLACES THE
 10267					;RESULT IN THE AC.
 10268					;IN THIS CASE AC=E AND C(E)=C(AC)=0,,-1;  HENCE, THE RESULT IN THE AC SHOULD BE -1,,0
 10269					;IF THE RESULT IN THE AC IS -1,,0, THE TEST PASSES
 10270
 10271	034744	201 00 0 00 777777 	B3500:	MOVEI	-1		;PRELOAD AC TO 0,,-1
 10272	034745	460 00 0 00 000000 		SETCM			;*SETCM SHOULD PUT -1,,0 INTO THE AC
 10273	034746	312 00 0 00 035420 		CAME	[-1,,0]		;PASS TEST IF C(AC) =-1,,0
 10274						STOP^
 10275	034747	254 04 0 00 034750 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10276	034750	324 00 0 00 034751 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10277									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10278									;IN THE SUBTEST) TO LOOP ON ERROR^
 10279
 10280					;*****     FAILURE ANALYSIS     *****
 10281					;C(AC0)		C(AC1)		FAILING SIGNAL
 10282
 10283					;-1,,-1				SW: FCE
 10284					;-1,,-1				FC: AD AR - EN
 10285					;0,,-1				ET2: AR AD EN
 10286
 10287					;**********
 10288
 10289					;THIS TEST VERIFIES THAT SETCM COMPLEMENTS C(E), THEN PLACES THE
 10290					;RESULT IN THE AC.
 10291					;IN THIS CASE C(E)=-1,,-1;  HENCE, THE RESULT IN THE AC SHOULD BE 0,,0
 10292					;IF THE RESULT IN THE AC IS ZERO,THE TEST PASSES
 10293
 10294	034751	460 00 0 00 035442 	B3600:	SETCM	[-1]		;*SETCM SHOULD PUT 0 INTO THE AC	
 10295	034752	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC0)=0		
 10296						STOP^
 10297	034753	254 04 0 00 034754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10298	034754	324 00 0 00 034755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10299									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10300									;IN THE SUBTEST) TO LOOP ON ERROR^
 10301
 10302					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 35
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0234

 10303					;THIS TEST VERIFIES THAT SETCM COMPLEMENTS C(E), THEN PLACES THE
 10304					;RESULT IN THE AC.
 10305					;IN THIS CASE C(E)=0,,0;  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1
 10306					;IF THE RESULT IN THE AC IS -1,,-1,THE TEST PASSES
 10307
 10308	034755	460 00 0 00 035330 	B3700:	SETCM	[0]		;*SETCM SHOULD PUT -1,,-1 INTO THE AC	
 10309	034756	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1	
 10310						STOP^
 10311	034757	254 04 0 00 034760 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10312	034760	324 00 0 00 034761 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10313									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10314									;IN THE SUBTEST) TO LOOP ON ERROR^
 10315
 10316					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 36
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0235

 10317					;THIS TEST VERIFIES THAT SETO SETS C(AC) TO -1,,-1.  SETO IGNORES
 10318					;THE ADDRESS FIELD OF THE INSTRUCTION WORD.
 10319					;FIRST C(AC) IS SET TO 0,,0; THEN SETO IS EXECUTED.
 10320					;THE AC IS THEN CHECKED FOR ALL ONES.  IF C(AC) IS ALL ONES,
 10321					;THE TEST PASSES
 10322
 10323	034761	201 00 0 00 000000 	B4300:	MOVEI	0		;PRELOAD AC WITH 0,,0
 10324	034762	474 00 0 00 000000 		SETO			;*SETO SHOULD LOAD THE AC WITH -1,,-1
 10325	034763	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
 10326						STOP^
 10327	034764	254 04 0 00 034765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10328	034765	324 00 0 00 034766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10329									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10330									;IN THE SUBTEST) TO LOOP ON ERROR^
 10331
 10332					;*****     FAILURE ANALYSIS     *****
 10333					;C(AC0)		C(AC1)		FAILING SIGNAL
 10334
 10335					;0				ET2: AR AD EN
 10336
 10337					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 37
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0236

 10338					;THIS TEST VERIFIES THAT ORCM CHANGES C(AC) TO THE LOGICAL
 10339					;INCLUSIVE OR OF C(AC) WITH THE COMPLEMENT OF C(MEMORY).
 10340					;IN THIS CASE AC=MEMORY=AC0 AND C(AC)=C(E)=0.
 10341					;HENCE THE RESULT IN THE AC SHOULD BE ALL ONES.
 10342					;THE AC IS CHECKED FOR ITS FINAL CONTENTS NON-ZERO.
 10343					;IF C(AC) IS NOT=0, THE TEST PASSES
 10344
 10345	034766	201 00 0 00 000000 	B4400:	MOVEI	0		;PRELOAD AC,E WITH 0
 10346	034767	464 00 0 00 000000 		ORCM			;*ORCM SHOULD PUT ALL ONES INTO AC0
 10347	034770	336 00 0 00 000000 		SKIPN			;PASS IF C(AC) IS NON-ZERO
 10348						STOP^
 10349	034771	254 04 0 00 034772 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10350	034772	324 00 0 00 034773 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10352									;IN THE SUBTEST) TO LOOP ON ERROR^
 10353
 10354					;**********
 10355
 10356					;THIS TEST VERIFIES THAT ORCM CHANGES C(AC) TO THE LOGICAL
 10357					;INCLUSIVE OR OF C(AC) WITH COMPLEMENT OF C(MEMORY).
 10358					;IN THIS CASE AC=MEMORY=AC0 AND C(AC)=C(E)=0
 10359					;HENCE THE RESULT IN THE AC SHOULD BE ALL ONES.
 10360					;THE AC IS CHECKED FOR ITS FINAL CONTENTS EQUAL TO -1,,-1
 10361					;IF C(AC0)=-1,,-1, THE TEST PASSES
 10362
 10363	034773	201 00 0 00 000000 	B4500:	MOVEI	0		;PRELOAD AC,E WITH 0
 10364	034774	464 00 0 00 000000 		ORCM			;*ORCM SHOULD PUT ALL ONES INTO AC0
 10365	034775	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10366						STOP^
 10367	034776	254 04 0 00 034777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10368	034777	324 00 0 00 035000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10370									;IN THE SUBTEST) TO LOOP ON ERROR^
 10371
 10372					;*****     FAILURE ANALYSIS     *****
 10373					;C(AC0)		C(AC1)		FAILING SIGNAL
 10374
 10375					;0				SW: ET0
 10376					;0				FC: AD AR + EN
 10377					;0				ET2: AR AD EN
 10378
 10379					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 38
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0237

 10380					;THIS TEST VERIFIES THAT ORCM CHANGES C(AC) TO THE LOGICAL
 10381					;INCLUSIVE OR OF C(AC) WITH COMPLEMENT OF C(MEMORY).
 10382					;IN THIS CASE AC=MEMORY=AC0 AND C(AC)=C(E)=-1,,-1
 10383					;HENCE THE RESULT IN THE AC SHOULD BE ALL ONES.
 10384					;THE AC IS CHECKED FOR ITS FINAL CONTENTS EQUAL TO -1,,-1
 10385					;IF C(AC0)=-1,,-1, THE TEST PASSES
 10386
 10387	035000	200 00 0 00 035442 	B4600:	MOVE	[-1]		;PRELOAD AC,E WITH -1,,-1
 10388	035001	464 00 0 00 000000 		ORCM			;*ORCM SHOULD PUT ALL ONES INTO AC0
 10389	035002	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10390						STOP^
 10391	035003	254 04 0 00 035004 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10392	035004	324 00 0 00 035005 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10393									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10394									;IN THE SUBTEST) TO LOOP ON ERROR^
 10395
 10396					;*****     FAILURE ANALYSIS     *****
 10397					;C(AC0)		C(AC1)		FAILING SIGNAL
 10398
 10399					;0				FC: AD FM - EN
 10400					;0				ET0: AR AD EN
 10401
 10402					;**********
 10403
 10404					;THIS TEST VERIFIES THAT ORCM CHANGES C(AC) TO THE LOGICAL
 10405					;INCLUSIVE OR OF C(AC) WITH COMPLEMENT OF C(MEMORY).
 10406					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1; HENCE, THE RESULT
 10407					;IN THE AC SHOULD BE 0.  THE AC IS CHECKED FOR ITS INAL CONTENTS=0.
 10408					;IF C(AC)=0, THE TEST PASSES
 10409
 10410	035005	201 00 0 00 000000 	B4700:	MOVEI	0		;PRELOAD AC WITH 0
 10411	035006	464 00 0 00 035442 		ORCM	[-1]		;*ORCM SHOULD PLACE ALL ZEROS INTO THE AC
 10412	035007	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0,,0
 10413						STOP^
 10414	035010	254 04 0 00 035011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10415	035011	324 00 0 00 035012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10416									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10417									;IN THE SUBTEST) TO LOOP ON ERROR^
 10418
 10419					;*****     FAILURE ANALYSIS     *****
 10420					;C(AC0)		C(AC1)		FAILING SIGNAL
 10421
 10422					;-E				SW: FCE
 10423
 10424					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 39
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0238

 10425					;THIS TEST VERIFIES THAT IOR CHANGES C(AC) TO THE LOGICAL
 10426					;INCLUSIVE OR OF C(AC) WITH C(E).
 10427					;IN THIS CASE AC=E AND C(AC)=C(E)=0,,0.  HENCE THE
 10428					;RESULT IN THE AC SHOULD BE 0,,0.
 10429					;THE AC IS CHECKED FOR 0,,0.  IF C(AC)=0,,0, THIS TEST PASSES
 10430
 10431	035012	201 00 0 00 000000 	B5000:	MOVEI	0		;PRELOAD AC,E WITH 0,,0
 10432	035013	434 00 0 00 000000 		IOR			;*IOR SHOULD PUT 0 INTO AC
 10433	035014	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0,,0
 10434						STOP^
 10435	035015	254 04 0 00 035016 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10436	035016	324 00 0 00 035017 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10437									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10438									;IN THE SUBTEST) TO LOOP ON ERROR^
 10439
 10440					;*****     FAILURE ANALYSIS     *****
 10441					;C(AC0)		C(AC1)		FAILING SIGNAL
 10442
 10443					;-1,,-1				SW: ET0
 10444					;-1,,-1				ET0: AR AD EN
 10445					;-1,,-1				ET0: AD AR - EN
 10446					;-1,,-1				ET2: AR AD EN
 10447
 10448					;**********
 10449
 10450					;THIS TEST VERIFIES THAT IOR CHANGES C(AC) TO THE LOGICAL
 10451					;INCLUSIVE OR OF C(AC) WITH C(E).
 10452					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE
 10453					;RESULT IN THE AC SHOULD BE -1,,-1.
 10454					;THE AC IS CHECKED FOR -1,,-1
 10455					;IF C(AC) =-1,,-1 THE TEST PASSES.
 10456
 10457	035017	201 00 0 00 000000 	B5100:	MOVEI	0		;PRELOAD AC WITH 0
 10458	035020	434 00 0 00 035442 		IOR	[-1]		;*IOR SHOULD PUT -1,,-1 INTO AC
 10459	035021	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC)  =-1,,-1
 10460						STOP^
 10461	035022	254 04 0 00 035023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10462	035023	324 00 0 00 035024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10463									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10464									;IN THE SUBTEST) TO LOOP ON ERROR^
 10465
 10466					;*****     FAILURE ANALYSIS     *****
 10467					;C(AC0)		C(AC1)		FAILING SIGNAL
 10468
 10469					;E				SW: FCE
 10470					;0				FC: AD AR - EN
 10471
 10472					;*****     FAILURE ANALYSIS     *****
 10473					;C(AC0)		C(AC1)		FAILING SIGNAL
 10474
 10475					;0				FC: AD FM - EN
 10476
 10477	035024				NB5300:;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 40
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0239

 10478					;THIS TEST VERIFIES THAT IOR CHANGES C(AC) TO THE LOGICAL
 10479					;INCLUSIVE OR OF C(AC) WITH C(E).
 10480					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE
 10481					;RESULT IN THE AC SHOULD BE -1,,-1
 10482					;THE AC IS CHECKED FOR ITS CONTENTS = ALL ONES
 10483					;IF C(AC)=-1, THE TEST PASSES
 10484
 10485	035024	474 00 0 00 000000 	B5200:	SETO			;PRELOAD AC WITH -1,,-1
 10486	035025	434 00 0 00 035442 		IOR	[-1]		;*IOR SHOULD PUT -1,,-1 INTO AC
 10487	035026	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
 10488						STOP^
 10489	035027	254 04 0 00 035030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10490	035030	324 00 0 00 035031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10491									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10492									;IN THE SUBTEST) TO LOOP ON ERROR^
 10493
 10494					;**********
 10495
 10496					;THIS TEST VERIFIES THAT IOR CHANGES C(AC) TO THE LOGICAL
 10497					;INCLUSIVE OR OF C(AC) WITH C(E).
 10498					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE
 10499					;RESULT IN THE AC SHOULD BE -1,,-1
 10500					;THE AC IS CHECKED FOR ITS CONTENTS = ALL ONES
 10501					;IF C(AC)=-1,,-1, THE TEST PASSES
 10502
 10503	035031	474 00 0 00 000000 	B5300:	SETO			;PRELOAD AC WITH -1,,-1
 10504	035032	434 00 0 00 035330 		IOR	[0]		;*IOR SHOULD PUT -1,,-1 INTO AC
 10505	035033	312 00 0 00 035442 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
 10506						STOP^
 10507	035034	254 04 0 00 035035 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10508	035035	324 00 0 00 035036 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10509									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10510									;IN THE SUBTEST) TO LOOP ON ERROR^
 10511
 10512					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 41
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0240

 10513					;THIS TEST VERIFIES THAT ANDCM CHANGES C(AC) TO THE LOGICAL AND
 10514					;OF C(AC) AND THE COMPLEMENT OF C(MEMORY).
 10515					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT 
 10516					;IN THE AC SHOULD BE 0,,-1
 10517					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THE TEST PASSES
 10518
 10519	035036	474 00 0 00 000000 	B5500:	SETO			;PRELOAD AC WITH ALL ONES
 10520	035037	420 00 0 00 035420 		ANDCM	[XWD -1,0]	;*ANDCM SHOULD PLACE 0,,-1 IN THE AC
 10521	035040	312 00 0 00 035455 		CAME	[0,,-1]		;IF C(AC)=0,,-1, THE TEST PASSES
 10522						STOP^
 10523	035041	254 04 0 00 035042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10524	035042	324 00 0 00 035043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10526									;IN THE SUBTEST) TO LOOP ON ERROR^
 10527
 10528					;*****     FAILURE ANALYSIS     *****
 10529					;C(AC0)		C(AC1)		FAILING SIGNAL
 10530
 10531					;-E				SW: FCE
 10532					;-1,,-1				FC: AD AR - EN
 10533					;-1,,0				ET2: AR AD EN
 10534
 10535					;**********
 10536
 10537					;THIS TEST VERIFIES THAT ANDCM CHANGES C(AC) TO THE LOGICAL AND
 10538					;OF C(AC) AND THE COMPLEMENT OF C(MEMORY).
 10539					;IN THIS CASE AC=E=AC0 AND C(AC)=C(E)=0.  HENCE,
 10540					;THE RESULT IN THE AC SHOULD BE 0.  THE AC IS CHECKED FOR 0.
 10541					;IF C(AC)=0, THE TEST PASSES.
 10542
 10543	035043	474 00 0 00 000000 	B5600:	SETO			;PRELOAD AC WITH ALL ONES
 10544	035044	420 00 0 00 000000 		ANDCM			;*ANDCM SHOULD PLACE 0 IN THE AC
 10545	035045	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES.
 10546						STOP^
 10547	035046	254 04 0 00 035047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10548	035047	324 00 0 00 035050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10550									;IN THE SUBTEST) TO LOOP ON ERROR^
 10551
 10552					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 42
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0241

 10553					;THIS TEST VERIFIES THAT ANDCM CHANGES C(AC) TO THE LOGICAL AND
 10554					;OF C(AC) AND THE COMPLEMENT OF C(MEMORY).
 10555					;IN THIS CASE C(AC)=-1,,-1, AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10556					;SHOULD BE ALL ONES.  THE AC IS CHECKED FOR -1,,-1.
 10557					;IF C(AC)=-1,,-1, THE TEST PASSES
 10558
 10559	035050	474 00 0 00 000000 	B5700:	SETO			;PRELOAD AC WITH 0		
 10560	035051	420 00 0 00 035330 		ANDCM	[0]		;*ANDCM SHOULD PLACE -1,,-1 IN THE AC
 10561	035052	312 00 0 00 035442 		CAME	[-1]		;IF C(AC)=-1,,-1, THE TEST PASSES
 10562						STOP^
 10563	035053	254 04 0 00 035054 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10564	035054	324 00 0 00 035055 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10565									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10566									;IN THE SUBTEST) TO LOOP ON ERROR^
 10567
 10568					;**********
 10569
 10570					;THIS TEST VERIFIES THAT ANDCM CHANGES C(AC) TO THE LOGICAL AND
 10571					;OF C(AC) AND THE COMPLEMENT OF C(MEMORY).
 10572					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
 10573					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.
 10574					;IF C(AC)=0, THE TEST PASSES
 10575
 10576	035055	201 00 0 00 000000 	B6000:	MOVEI	0		;PRELOAD AC WITH 0	
 10577	035056	420 00 0 00 000000 		ANDCM			;*ANDCM SHOULD PLACE 0 IN THE AC
 10578	035057	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES.
 10579						STOP^
 10580	035060	254 04 0 00 035061 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10581	035061	324 00 0 00 035062 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10582									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10583									;IN THE SUBTEST) TO LOOP ON ERROR^
 10584
 10585					;*****     FAILURE ANALYSIS     *****
 10586					;C(AC0)		C(AC1)		FAILING SIGNAL
 10587
 10588					;-1,,-1				FC: AD FM + EN
 10589
 10590					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 43
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0242

 10591					;THIS TEST VERIFIES THAT ANDCM CHANGES C(AC) TO THE LOGICAL AND
 10592					;OF C(AC) AND THE COMPLEMENT OF C(MEMORY).
 10593					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1. HENCE, THE RESULT IN THE AC
 10594					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.
 10595					;IF C(AC)=0, THE TEST PASSES
 10596
 10597	035062	400 00 0 00 000000 	B6100:	SETZ			;PRELOAD AC WITH 0	
 10598	035063	420 00 0 00 035442 		ANDCM	[-1]		;*ANDCM SHOULD PLACE 0 IN THE AC	
 10599	035064	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES
 10600						STOP^
 10601	035065	254 04 0 00 035066 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10602	035066	324 00 0 00 035067 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10603									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10604									;IN THE SUBTEST) TO LOOP ON ERROR^
 10605
 10606					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 44
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0243

 10607					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10608					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10609					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10610					;SHOULD BE 0.  THE AC IS CHECKED FOR ZERO.  IF C(AC) IS
 10611					;EQUAL TO ZERO, THE TEST PASSES.
 10612
 10613	035067	200 00 0 00 035420 	B6200:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10614	035070	410 00 0 00 035330 		ANDCA	[0]		;*ANDCA SHOULD PLACE 0 IN THE AC
 10615	035071	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES.
 10616						STOP^
 10617	035072	254 04 0 00 035073 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10618	035073	324 00 0 00 035074 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10619									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10620									;IN THE SUBTEST) TO LOOP ON ERROR^
 10621
 10622					;*****     FAILURE ANALYSIS     *****
 10623					;C(AC0)		C(AC1)		FAILING SIGNAL
 10624
 10625					;E				SW: FCE
 10626					;0,,-1				FC: AD AR + EN
 10627
 10628					;**********
 10629
 10630					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10631					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10632					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=707070,,707070.  HENCE, THE
 10633					;RESULT IN THE AC SHOULD BE 0,,707070.  THE AC IS CHECKED
 10634					;FOR 0,,707070.  IF C(AC)=0,,707070, THE TEST PASSES.
 10635
 10636	035074	200 00 0 00 035420 	B6300:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10637	035075	410 00 0 00 035567 		ANDCA	[707070707070]	;*ANDCA SHOULD PLACE 0,,707070 IN THE AC
 10638	035076	312 00 0 00 035570 		CAME	[XWD 0,707070]	;IF C(AC)=0,,707070, THE TEST PASSES
 10639						STOP^
 10640	035077	254 04 0 00 035100 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10641	035100	324 00 0 00 035101 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10642									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10643									;IN THE SUBTEST) TO LOOP ON ERROR^
 10644
 10645					;*****     FAILURE ANALYSIS     *****
 10646					;C(AC0)		C(AC1)		FAILING SIGNAL
 10647
 10648					;707070,,707070			FC: AD FM - EN
 10649					;707070,,707070			ET2: AR AD EN
 10650
 10651					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 45
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0244

 10652					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10653					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10654					;IN THIS CASE AC=E=AC0 AND C(AC)=C(E)=0. HENCE, THE RESULT
 10655					;IN THE AC SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC=0,
 10656					;THE TEST PASSES.
 10657
 10658	035101	400 00 0 00 000000 	B6400:	SETZ			;CLEAR THE AC AND E		
 10659	035102	410 00 0 00 000000 		ANDCA			;*ANDCA SHOULD PLACE 0 IN THE AC
 10660	035103	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES
 10661						STOP^
 10662	035104	254 04 0 00 035105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10663	035105	324 00 0 00 035106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10664									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10665									;IN THE SUBTEST) TO LOOP ON ERROR^
 10666
 10667					;**********
 10668
 10669					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10670					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10671					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 10672					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR ALL ONES.
 10673					;IF C(AC)=-1,,-1, THE TEST PASSES.
 10674
 10675	035106	400 00 0 00 000000 	B6500:	SETZ			;CLEAR THE AC		
 10676	035107	410 00 0 00 035442 		ANDCA	[-1]		;*ANDCA SHOULD PLACE ALL ONES IN THE AC
 10677	035110	312 00 0 00 035442 		CAME	[-1]		;IF C(AC)=ALL ONES, THE TEST PASSES.
 10678						STOP^
 10679	035111	254 04 0 00 035112 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10680	035112	324 00 0 00 035113 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10681									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10682									;IN THE SUBTEST) TO LOOP ON ERROR^
 10683
 10684					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 46
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0245

 10685					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10686					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10687					;IN THIS CASE AC=E=AC0 AND C(AC)=C(E)=-1,,-1. HENCE, THE RESULT
 10688					;IN THE AC SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0,
 10689					;THE TEST PASSES.
 10690
 10691	035113	474 00 0 00 000000 	B6600:	SETO			;PRESET AC TO ALL ONES		
 10692	035114	410 00 0 00 000000 		ANDCA			;*ANDCA SHOULD PLACE 0 IN THE AC
 10693	035115	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES
 10694						STOP^
 10695	035116	254 04 0 00 035117 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10696	035117	324 00 0 00 035120 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10697									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10698									;IN THE SUBTEST) TO LOOP ON ERROR^
 10699
 10700					;**********
 10701
 10702					;THIS TEST VERIFIES THAT ANDCA CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10703					;OF THE COMPLEMENT OF C(AC) AND C(E).
 10704					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10705					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0,
 10706					;THE TEST PASSES.
 10707
 10708	035120	474 00 0 00 000000 	B6700:	SETO			;PRESET AC TO ALL ONES		
 10709	035121	410 00 0 00 035330 		ANDCA	[0]		;*ANDCA SHOULD PLACE 0 IN THE AC
 10710	035122	332 00 0 00 000000 		SKIPE			;IF C(AC)=0, THE TEST PASSES.
 10711						STOP^
 10712	035123	254 04 0 00 035124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10713	035124	324 00 0 00 035125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10714									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10715									;IN THE SUBTEST) TO LOOP ON ERROR^
 10716
 10717					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 47
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0246

 10718					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10719					;OF THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10720					;IN THIS CASE C(AC)=-1,,0 AND C(E)=0; HENCE, THE RESULT IN THE AC
 10721					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1,
 10722					;THIS TEST PASSES.
 10723
 10724	035125	200 00 0 00 035420 	B7000:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10725	035126	440 00 0 00 035330 		ANDCB	[0]		;*ANDCB SHOULD PLACE 0,,-1 IN THE AC
 10726	035127	312 00 0 00 035455 		CAME	[XWD 0,-1]	;PASS IF C(AC)=0,,-1
 10727						STOP^
 10728	035130	254 04 0 00 035131 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10729	035131	324 00 0 00 035132 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10730									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10731									;IN THE SUBTEST) TO LOOP ON ERROR^
 10732
 10733					;*****     FAILURE ANALYSIS     *****
 10734					;C(AC0)		C(AC1)		FAILING SIGNAL
 10735
 10736					;0,,-E				SW: FCE
 10737					;-1,,-1				FC: AD FM - EN
 10738					;0				ET2: AR AD EN
 10739
 10740					;**********
 10741
 10742					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION
 10743					;OF THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10744					;IN THIS CASE C(AC)=-1,,0 AND C(E)=-1,,-1; HENCE, THE RESULT IN THE AC
 10745					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0,
 10746					;THIS TEST PASSES.
 10747
 10748	035132	200 00 0 00 035420 	B7100:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10749	035133	440 00 0 00 035442 		ANDCB	[-1]		;*ANDCB SHOULD PLACE 0 IN AC
 10750	035134	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
 10751						STOP^
 10752	035135	254 04 0 00 035136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10753	035136	324 00 0 00 035137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10754									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10755									;IN THE SUBTEST) TO LOOP ON ERROR^
 10756
 10757					;*****     FAILURE ANALYSIS     *****
 10758					;C(AC0)		C(AC1)		FAILING SIGNAL
 10759
 10760					;0,,-1				FC: AD AR - EN
 10761
 10762					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 48
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0247

 10763
 10764					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION OF
 10765					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10766					;IN THIS CASE AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
 10767					;SHOULD BE ALL ONES.  THE AC IS CHECKED FOR ALL ONES.  IF C(AC)=-1,,-1,
 10768					;THE TEST PASSES.
 10769
 10770	035137	400 00 0 00 000000 	B7200:	SETZ			;PRELOAD AC,E WITH ZEROES
 10771	035140	440 00 0 00 000000 		ANDCB			;*ANDCB SHOULD PLACE ALL ONES IN THE AC
 10772	035141	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC) IS ALL ONES
 10773						STOP^
 10774	035142	254 04 0 00 035143 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10775	035143	324 00 0 00 035144 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10777									;IN THE SUBTEST) TO LOOP ON ERROR^
 10778
 10779					;**********
 10780
 10781					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION OF
 10782					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10783					;IN THIS CASE AC=E AND C(AC)=C(E)=-1,,-1.  HENCE THE RESULT IN THE AC
 10784					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
 10785
 10786	035144	474 00 0 00 000000 	B7300:	SETO			;PRELOAD AC,E WITH ONES
 10787	035145	440 00 0 00 000000 		ANDCB			;*ANDCB SHOULD PLACE ALL ZEROS IN THE AC
 10788	035146	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
 10789						STOP^
 10790	035147	254 04 0 00 035150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10791	035150	324 00 0 00 035151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10792									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10793									;IN THE SUBTEST) TO LOOP ON ERROR^
 10794
 10795					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 49
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0248

 10796					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION OF
 10797					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10798					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 10799					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
 10800
 10801	035151	400 00 0 00 000000 	B7400:	SETZ			;PRELOAD AC WITH 0
 10802	035152	440 00 0 00 035442 		ANDCB	[-1]		;*ANDCB SHOULD PLACE 0 IN THE AC
 10803	035153	302 00 0 00 000000 		CAIE			;PASS IF C(AC)=0
 10804						STOP^
 10805	035154	254 04 0 00 035155 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10806	035155	324 00 0 00 035156 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10807									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10808									;IN THE SUBTEST) TO LOOP ON ERROR^
 10809
 10810					;**********
 10811
 10812					;THIS TEST VERIFIES THAT ANDCB CHANGES C(AC) TO THE LOGICAL AND FUNCTION OF
 10813					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10814					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 10815					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
 10816
 10817	035156	474 00 0 00 000000 	B7500:	SETO			;PRELOAD AC WITH -1,,-1
 10818	035157	440 00 0 00 035330 		ANDCB	[0]		;*ANDCB SHOULD PLACE 0 IN THE AC
 10819	035160	302 00 0 00 000000 		CAIE			;PASS IF C(AC)=0
 10820						STOP^
 10821	035161	254 04 0 00 035162 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10822	035162	324 00 0 00 035163 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10823									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10824									;IN THE SUBTEST) TO LOOP ON ERROR^
 10825
 10826					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 50
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0249

 10827					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10828					;THE COMPLEMENT OF C(AC) AND C(E).
 10829					;IN THIS CASE C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10830					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1,
 10831					;THIS TEST FAILS.
 10832
 10833	035163	200 00 0 00 035420 	B7600:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10834	035164	454 00 0 00 035330 		ORCA	[0]		;*ORCA SHOULD PLACE 0,,-1 IN THE AC
 10835	035165	312 00 0 00 035455 		CAME	[XWD 0,-1]	;PASS IF C(AC)=0,,-1
 10836						STOP^
 10837	035166	254 04 0 00 035167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10838	035167	324 00 0 00 035170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10839									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10840									;IN THE SUBTEST) TO LOOP ON ERROR^
 10841
 10842					;*****     FAILURE ANALYSIS     *****
 10843					;C(AC0)		C(AC1)		FAILING SIGNAL
 10844
 10845					;-1,,0				SW: ET0
 10846					;-1,,0				FC: AD AR - EN
 10847					;0				FC: AD FM + EN
 10848					;-1,,-1				ET0: AR AD EN
 10849					;-1,,-1				ET0: AD AR - EN
 10850					;-1,,0				ET2: AR AD EN
 10851
 10852					;**********
 10853
 10854					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10855					;THE COMPLEMENT OF C(AC) AND C(E).
 10856					;IN THIS CASE C(AC)=-1,,0 AND C(E)=707070,,707070.  HENCE, THE RESULT IN THE AC
 10857					;SHOULD BE 707070,,-1.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0,
 10858					;THIS TEST FAILS.
 10859
 10860	035170	200 00 0 00 035420 	B10000:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
 10861	035171	454 00 0 00 035567 		ORCA	[707070707070]	;*ORCA SHOULD PLACE 707070,,-1 IN THE AC
 10862	035172	312 00 0 00 035571 		CAME	[XWD 707070,-1]	;PASS IF C(AC)=707070,,-1
 10863						STOP^
 10864	035173	254 04 0 00 035174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10865	035174	324 00 0 00 035175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10866									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10867									;IN THE SUBTEST) TO LOOP ON ERROR^
 10868
 10869					;*****     FAILURE ANALYSIS     *****
 10870					;C(AC0)		C(AC1)		FAILING SIGNAL
 10871
 10872					;0,,-1				SW: FCE
 10873
 10874					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 51
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0250

 10875					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10876					;THE COMPLEMENT OF C(AC) AND C(E).
 10877					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
 10878					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
 10879
 10880	035175	400 00 0 00 000000 	B10100:	SETZ			;PRELOAD AC,E WITH 0
 10881	035176	454 00 0 00 000000 		ORCA			;*ORCA SHOULD PLACE -1,,-1 IN THE AC
 10882	035177	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10883						STOP^
 10884	035200	254 04 0 00 035201 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10885	035201	324 00 0 00 035202 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10886									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10887									;IN THE SUBTEST) TO LOOP ON ERROR^
 10888
 10889					;**********
 10890
 10891					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OF FUNCTION OF
 10892					;THE COMPLEMENT OF C(AC) AND C(E).
 10893					;IN THIS CASE, AC=E AND C(AC)=C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 10894					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
 10895
 10896	035202	474 00 0 00 000000 	B10200:	SETO			;PRELOAD AC,E WITH 0
 10897	035203	454 00 0 00 000000 		ORCA			;*ORCA SHOULD PLACE -1,,-1 IN THE AC
 10898	035204	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10899						STOP^
 10900	035205	254 04 0 00 035206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10901	035206	324 00 0 00 035207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10902									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10903									;IN THE SUBTEST) TO LOOP ON ERROR^
 10904
 10905					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 52
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0251

 10906					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10907					;THE COMPLEMENT OF C(AC) AND C(E).
 10908					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESUTL IN THE AC
 10909					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
 10910
 10911	035207	400 00 0 00 000000 	B10300:	SETZ			;PRELOAD AC WITH 0
 10912	035210	454 00 0 00 035442 		ORCA	[-1]		;*ORCA SHOULD PLACE -1,,-1 IN THE AC
 10913	035211	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10914						STOP^
 10915	035212	254 04 0 00 035213 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10916	035213	324 00 0 00 035214 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10917									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10918									;IN THE SUBTEST) TO LOOP ON ERROR^
 10919
 10920					;**********
 10921
 10922					;THIS TEST VERIFIES THAT ORCA CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10923					;THE COMPLEMENT OF C(AC) AND C(E).
 10924					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10925					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
 10926
 10927	035214	474 00 0 00 000000 	B10400:	SETO			;PRELOAD AC WITH -1,,-1
 10928	035215	454 00 0 00 035330 		ORCA	[0]		;*ORCA SHOULD PLACE 0 IN THE AC
 10929	035216	302 00 0 00 000000 		CAIE			;PASS IF C(AC)=0
 10930						STOP^
 10931	035217	254 04 0 00 035220 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10932	035220	324 00 0 00 035221 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10933									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10934									;IN THE SUBTEST) TO LOOP ON ERROR^
 10935
 10936					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 53
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0252

 10937					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10938					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E)
 10939					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=707070,,707070.  HENCE THE RESULT
 10940					;IN THE AC 070707,,-1.  THE AC IS CHECKED FOR 070707,,-1.  IF C(AC)=070707,,-1,
 10941					;THIS TEST PASSES
 10942
 10943	035221	200 00 0 00 035420 	B10500:	MOVE	[XWD -1,0]	;PRELOAD THE AC WITH -1,,0
 10944	035222	470 00 0 00 035567 		ORCB	[707070707070]	;*ORCB SHOULD PLACE 070707,,-1 IN THE AC
 10945	035223	312 00 0 00 035572 		CAME	[XWD 070707,-1]	;PASS IF C(AC)=070707,,-1
 10946						STOP^
 10947	035224	254 04 0 00 035225 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10948	035225	324 00 0 00 035226 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10949									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10950									;IN THE SUBTEST) TO LOOP ON ERROR^
 10951
 10952					;*****     FAILURE ANALYSIS     *****
 10953					;C(AC0)		C(AC1)		FAILING SIGNAL
 10954
 10955					;-1,,-1				SW: FCE
 10956					;707070,,0			SW: ET0
 10957					;0,,-1				FC: AD AR + EN
 10958					;070707,,070707			FC: AD FM + EN
 10959					;070707,,070707			ET0: AR AD EN
 10960					;-1,,-1				ET0: AD AR - EN
 10961					;707070,,0			ET2: AR AD EN
 10962
 10963					;**********
 10964
 10965					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10966					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E)
 10967					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE THE RESULT
 10968					;IN THE AC -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0,
 10969					;THIS TEST PASSES
 10970
 10971	035226	200 00 0 00 035455 	B10700:	MOVE	[XWD 0,-1]	;PRELOAD THE AC WITH 0,,-1
 10972	035227	470 00 0 00 035442 		ORCB	[-1]		;*ORCB SHOULD PLACE -1,,0 IN THE AC
 10973	035230	312 00 0 00 035420 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
 10974						STOP^
 10975	035231	254 04 0 00 035232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10976	035232	324 00 0 00 035233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10977									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10978									;IN THE SUBTEST) TO LOOP ON ERROR^
 10979
 10980					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 54
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0253

 10981					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10982					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10983					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 10984					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)-1,,-1, THE TEST PASSES
 10985
 10986	035233	400 00 0 00 000000 	B11000:	SETZ			;PRELOAD AC WITH 0		
 10987	035234	470 00 0 00 035330 		ORCB	[0]		;*ORCB SHOULD PLACE -1,,-1 IN THE AC
 10988	035235	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 10989						STOP^
 10990	035236	254 04 0 00 035237 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 10991	035237	324 00 0 00 035240 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 10992									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 10993									;IN THE SUBTEST) TO LOOP ON ERROR^
 10994
 10995					;**********
 10996
 10997					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 10998					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 10999					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 11000					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES
 11001
 11002	035240	474 00 0 00 000000 	B11100:	SETO			;PRELOAD AC WITH -1,,-1
 11003	035241	470 00 0 00 035442 		ORCB	[-1]		;*ORCB SHOULD PLACE 0 IN THE AC
 11004	035242	302 00 0 00 000000 		CAIE			;PASS IF C(AC)=0
 11005						STOP^
 11006	035243	254 04 0 00 035244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11007	035244	324 00 0 00 035245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11008									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11009									;IN THE SUBTEST) TO LOOP ON ERROR^
 11010
 11011					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 55
DSKAB1	MAC	28-Mar-78 12:29		TEST OF BOOLEAN INSTRUCTIONS                                                       SEQ 0254

 11012					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 11013					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E)
 11014					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
 11015					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES
 11016
 11017	035245	400 00 0 00 000000 	B11200:	SETZ			;PRELOAD AC WITH 0		
 11018	035246	470 00 0 00 035442 		ORCB	[-1]		;*ORCB SHOULD PLACE -1,,-1 IN THE AC
 11019	035247	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 11020						STOP^
 11021	035250	254 04 0 00 035251 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11022	035251	324 00 0 00 035252 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11023									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11024									;IN THE SUBTEST) TO LOOP ON ERROR^
 11025
 11026					;**********
 11027
 11028					;THIS TEST VERIFIES THAT ORCB CHANGES C(AC) TO THE LOGICAL OR FUNCTION OF
 11029					;THE COMPLEMENT OF C(AC) AND THE COMPLEMENT OF C(E).
 11030					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
 11031					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES
 11032
 11033	035252	474 00 0 00 000000 	B11300:	SETO			;PRELOAD AC WITH -1,,-1		
 11034	035253	470 00 0 00 035330 		ORCB	[0]		;*ORCB SHOULD PLACE -1,,-1 IN THE AC
 11035	035254	312 00 0 00 035442 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
 11036						STOP^
 11037	035255	254 04 0 00 035256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11038	035256	324 00 0 00 035257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11039									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11040									;IN THE SUBTEST) TO LOOP ON ERROR^
 11041
 11042					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 56
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVN INSTRUCTION                                                           SEQ 0255

 11043					SUBTTL	TEST OF MOVN INSTRUCTION
 11044
 11045					;**********
 11046
 11047					;THIS TEST VERIFIES THAT MOVN PLACES THE NEGATIVE OF C(E) INTO THE AC
 11048					;IN THIS CASE C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
 11049					;THE AC IS CHECKED FOR 0, THE NEGATIVE OF 0.  IF C(AC)=0, THIS TEST PASSES
 11050
 11051	035257	474 00 0 00 000000 	B11500:	SETO			;PRELOAD AC WITH -1,,-1		
 11052	035260	210 00 0 00 035330 		MOVN	[0]		;*MOVN SHOULD PLACE 0 INTO THE AC
 11053	035261	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
 11054						STOP^
 11055	035262	254 04 0 00 035263 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11056	035263	324 00 0 00 035264 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11057									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11058									;IN THE SUBTEST) TO LOOP ON ERROR^
 11059
 11060					;*****     FAILURE ANALYSIS     *****
 11061					;C(AC0)		C(AC1)		FAILING SIGNAL
 11062
 11063					;E				SW: FCE
 11064					;-1,,-1				FC: AD FM + EN
 11065					;-1,,-1				FC: AD CRY 36
 11066
 11067					;**********
 11068
 11069					;THIS TEST VERIFIES THAT MOVN PLACES THE NEGATIVE OF C(E) INTO THE AC.
 11070					;IN THIS CASE C(E)=-1,,0.  HENCE, THE RESULT IN THE AC SHOULD BE 1,,0
 11071					;THE AC IS CHECKED FOR 1,,0.  IF C(AC)=1,,0, THE TEST PASSES
 11072
 11073	035264	200 00 0 00 035420 	B11600:	MOVE	[XWD -1,0]	;PRELOAD AC,E WITH -1,,0
 11074	035265	210 00 0 00 000000 		MOVN			;*MOVN SHOULD PLACE 1,,0 INTO THE AC
 11075	035266	312 00 0 00 035356 		CAME	[XWD 1,0]	;PASS IF C(AC)=1,,0
 11076						STOP^
 11077	035267	254 04 0 00 035270 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11078	035270	324 00 0 00 035271 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11079									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11080									;IN THE SUBTEST) TO LOOP ON ERROR^
 11081
 11082					;*****     FAILURE ANALYSIS     *****
 11083					;C(AC0)		C(AC1)		FAILING SIGNAL
 11084
 11085					;0				FC: AD ADD
 11086					;0				FC: AD FM - EN
 11087					;0				FC: AD AR - EN
 11088					;-1,,0				ET2: AR AD EN
 11089
 11090					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 57
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVN INSTRUCTION                                                           SEQ 0256

 11091					;THIS TEST VERIFIES THAT MOVN PLACES THE NEGATIVE OF C(E) INTO THE AC.
 11092					;IN THIS CASE C(E) =707070,,707070.  HENCE, THE RESULT IN THE AC SHOULD BE
 11093					;070707,,070710.  THE AC IS CHECKED FOR 070707,,070710.  IF C(AC)=
 11094					;070707,,070710, THE TEST PASSES
 11095
 11096	035271	400 00 0 00 000000 	B11700:	SETZ			;PRELOAD AC WITH 0		
 11097	035272	210 00 0 00 035567 		MOVN	[707070707070]	;*MOVN SHOULD PLACE 070707,,070710 INTO THE AC
 11098	035273	312 00 0 00 035573 		CAME	[070707070710]	;PASS IF C(AC) 070707,,070710
 11099						STOP^
 11100	035274	254 04 0 00 035275 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11101	035275	324 00 0 00 035276 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11102									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11103									;IN THE SUBTEST) TO LOOP ON ERROR^
 11104
 11105					;**********
 11106
 11107					;THIS TEST VERIFIES THAT MOVN PLACES THE NEGATIVE OF C(E) INTO THE AC
 11108					;IN THIS CASE C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0,,1.
 11109					;THE AC IS CHECKED FOR 0,,1, THE NEGATIVE OF -1,,-1.  IF C(AC)=1, THIS TEST PASSES
 11110
 11111	035276	210 00 0 00 035442 	B12100:	MOVN	[-1]		;*MOVN SHOULD PLACE 0,,1 INTO THE AC	
 11112	035277	302 00 0 00 000001 		CAIE	1		;PASS OF C(AC)=0,,1
 11113						STOP^
 11114	035300	254 04 0 00 035301 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11115	035301	324 00 0 00 035302 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11116									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11117									;IN THE SUBTEST) TO LOOP ON ERROR^
 11118
 11119					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 58
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVM INSTRUCTION                                                           SEQ 0257

 11120					SUBTTL	TEST OF MOVM INSTRUCTION
 11121
 11122					;**********
 11123
 11124					;THIS TEST VERIFIES THAT MOVM PLACES THE MAGNITUDE OF C(E) INTO THE AC.
 11125					;IN THIS CASE, C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
 11126					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
 11127
 11128	035302	474 00 0 00 000000 	B12200:	SETO			;PRELOAD AC WITH -1,,-1		
 11129	035303	214 00 0 00 035330 		MOVM	[0]		;*MOVM SHOULD PLACE 0 INTO THE AC	
 11130	035304	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
 11131						STOP^
 11132	035305	254 04 0 00 035306 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11133	035306	324 00 0 00 035307 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11135									;IN THE SUBTEST) TO LOOP ON ERROR^
 11136
 11137					;*****     FAILURE ANALYSIS     *****
 11138					;C(AC0)		C(AC1)		FAILING SIGNAL
 11139
 11140					;E				SW: FCE
 11141
 11142					;**********
 11143
 11144					;THIS TEST VERIFIES THAT MOVM PLACES THE MAGNITUDE OF C(E) INTO THE AC
 11145					;IN THIS CASE, C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0,,1.
 11146					;THE AC IS CHECKED FOR 0,,1.  IF C(AC)=0,,1, THIS TEST PASSES
 11147
 11148	035307	400 00 0 00 000000 	B12300:	SETZ			;PRELOAD AC WITH 0		
 11149	035310	214 00 0 00 035442 		MOVM	[-1]		;*MOVM SHOULD PLACE 0,,1 INTO THE AC
 11150	035311	302 00 0 00 000001 		CAIE	1		;PASS IF C(AC)=0,,1
 11151						STOP^
 11152	035312	254 04 0 00 035313 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11153	035313	324 00 0 00 035314 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11154									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11155									;IN THE SUBTEST) TO LOOP ON ERROR^
 11156
 11157					;*****     FAILURE ANALYSIS     *****
 11158					;C(AC0)		C(AC1)		FAILING SIGNAL
 11159
 11160					;0				FC: AD FM + EN
 11161					;0				FC: AD ADD
 11162					;0				FC: AD CRY 36
 11163					;0				FC: AD AR - EN
 11164					;-1,,-1				ET2: AR AD EN
 11165
 11166					;**********
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 59
DSKAB1	MAC	28-Mar-78 12:29		TEST OF MOVM INSTRUCTION                                                           SEQ 0258

 11167					;THIS TEST VERIFIES THAT MOVM PLACES THE MAGNITUDE OF C(E) INTO THE AC
 11168					;IN THIS CASE, C(E)=400000,,0.  HENCE, THE RESULT IN THE AC SHOULD BE
 11169					;400000,,0.  THE AC IS CHECKED FOR 400000,,0.
 11170					;IF C(AC)=400000,,0, THIS TEST PASSES.
 11171
 11172	035314	400 00 0 00 000000 	B12400:	SETZ
 11173	035315	214 00 0 00 035377 		MOVM	[XWD 400000,0]	;*MOVM SHOULD PLACE 400000,,0 INTO THE AC
 11174	035316	312 00 0 00 035377 		CAME	[XWD 400000,0]	;PASS IF C(AC)=400000,,0
 11175						STOP^
 11176	035317	254 04 0 00 035320 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11177	035320	324 00 0 00 035321 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11178									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11179									;IN THE SUBTEST) TO LOOP ON ERROR^
 11180
 11181					;**********
 11182
 11183					;THIS TEST VERIFIES THAT MOVM PLACES THE MAGNITUDE OF C(E) INTO THE AC
 11184					;IN THIS CASE, C(E)=377777,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE
 11185					;377777,,-1.  THE AC IS CHECKED FOR 377777,,-1.
 11186					;IF C(AC)=377777,,-1, THIS TEST PASSES.
 11187
 11188	035321	400 00 0 00 000000 	B12500:	SETZ			;PRELOAD AC WITH 0
 11189	035322	214 00 0 00 035456 		MOVM	[XWD 377777,-1]	;*MOVM SHOULD PLACE 377777,,-1 INTO THE AC
 11190	035323	312 00 0 00 035456 		CAME	[XWD 377777,-1]	;PASS IF C(AC)=377777,,-1
 11191						STOP^
 11192	035324	254 04 0 00 035325 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
 11193	035325	324 00 0 00 035326 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
 11194									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
 11195									;IN THE SUBTEST) TO LOOP ON ERROR^
 11196
 11197					;**********
 11198
 11199	035326	402 00 0 00 035575 	ENDIT:	SETZM	TNUMB#
 11200	035327	254 00 0 00 030057 		JRST	BEGEND
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0259

 11201					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
 11202
 11203					;PROGRAM LITERALS
 11204
 11205						XLIST
 11206					IFNDEF	$LPAPER,<LIST>
 11207	035330					LIT
 11208	035330	000000	000000
 11209	035331	123456	765432
 11210	035332	123456	000000
 11211	035333	000000	123456
 11212	035334	000000	000001
 11213	035335	000000	000002
 11214	035336	000000	000004
 11215	035337	000000	000010
 11216	035340	000000	000020
 11217	035341	000000	000040
 11218	035342	000000	000100
 11219	035343	000000	000200
 11220	035344	000000	000400
 11221	035345	000000	001000
 11222	035346	000000	002000
 11223	035347	000000	004000
 11224	035350	000000	010000
 11225	035351	000000	020000
 11226	035352	000000	040000
 11227	035353	000000	100000
 11228	035354	000000	200000
 11229	035355	000000	400000
 11230	035356	000001	000000
 11231	035357	000002	000000
 11232	035360	000004	000000
 11233	035361	000010	000000
 11234	035362	000020	000000
 11235	035363	000040	000000
 11236	035364	000100	000000
 11237	035365	000200	000000
 11238	035366	000400	000000
 11239	035367	001000	000000
 11240	035370	002000	000000
 11241	035371	004000	000000
 11242	035372	010000	000000
 11243	035373	020000	000000
 11244	035374	040000	000000
 11245	035375	100000	000000
 11246	035376	200000	000000
 11247	035377	400000	000000
 11248	035400	600000	000000
 11249	035401	700000	000000
 11250	035402	740000	000000
 11251	035403	760000	000000
 11252	035404	770000	000000
 11253	035405	774000	000000
 11254	035406	776000	000000
 11255	035407	777000	000000
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0260

 11256	035410	777400	000000
 11257	035411	777600	000000
 11258	035412	777700	000000
 11259	035413	777740	000000
 11260	035414	777760	000000
 11261	035415	777770	000000
 11262	035416	777774	000000
 11263	035417	777776	000000
 11264	035420	777777	000000
 11265	035421	777777	400000
 11266	035422	777777	600000
 11267	035423	777777	700000
 11268	035424	777777	740000
 11269	035425	777777	760000
 11270	035426	777777	770000
 11271	035427	777777	774000
 11272	035430	777777	776000
 11273	035431	777777	777000
 11274	035432	777777	777400
 11275	035433	777777	777600
 11276	035434	777777	777700
 11277	035435	777777	777740
 11278	035436	777777	777760
 11279	035437	777777	777770
 11280	035440	777777	777774
 11281	035441	777777	777776
 11282	035442	777777	777777
 11283	035443	777777	777773
 11284	035444	777777	777677
 11285	035445	777777	775777
 11286	035446	777777	737777
 11287	035447	777777	377777
 11288	035450	777767	777777
 11289	035451	777577	777777
 11290	035452	773777	777777
 11291	035453	677777	777777
 11292	035454	577777	777777
 11293	035455	000000	777777
 11294	035456	377777	777777
 11295	035457	000001	000001
 11296	035460	000002	000002
 11297	035461	000004	000004
 11298	035462	000010	000010
 11299	035463	000020	000020
 11300	035464	000040	000040
 11301	035465	000100	000100
 11302	035466	000200	000200
 11303	035467	000400	000400
 11304	035470	001000	001000
 11305	035471	002000	002000
 11306	035472	004000	004000
 11307	035473	010000	010000
 11308	035474	020000	020000
 11309	035475	040000	040000
 11310	035476	100000	100000
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1-2
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0261

 11311	035477	200000	200000
 11312	035500	400000	400000
 11313	035501	777776	777776
 11314	035502	777775	777775
 11315	035503	777773	777773
 11316	035504	777767	777767
 11317	035505	777757	777757
 11318	035506	777737	777737
 11319	035507	777677	777677
 11320	035510	777577	777577
 11321	035511	777377	777377
 11322	035512	776777	776777
 11323	035513	775777	775777
 11324	035514	773777	773777
 11325	035515	767777	767777
 11326	035516	757777	757777
 11327	035517	737777	737777
 11328	035520	677777	677777
 11329	035521	577777	577777
 11330	035522	377777	377777
 11331	035523	000001	777776
 11332	035524	777776	000001
 11333	035525	000002	777775
 11334	035526	777775	000002
 11335	035527	000004	777773
 11336	035530	777773	000004
 11337	035531	000010	777767
 11338	035532	777767	000010
 11339	035533	000020	777757
 11340	035534	777757	000020
 11341	035535	000040	777737
 11342	035536	777737	000040
 11343	035537	000100	777677
 11344	035540	777677	000100
 11345	035541	000200	777577
 11346	035542	777577	000200
 11347	035543	000400	777377
 11348	035544	777377	000400
 11349	035545	001000	776777
 11350	035546	776777	001000
 11351	035547	002000	775777
 11352	035550	775777	002000
 11353	035551	004000	773777
 11354	035552	773777	004000
 11355	035553	010000	767777
 11356	035554	767777	010000
 11357	035555	020000	757777
 11358	035556	757777	020000
 11359	035557	040000	737777
 11360	035560	737777	040000
 11361	035561	100000	677777
 11362	035562	677777	100000
 11363	035563	200000	577777
 11364	035564	577777	200000
 11365	035565	400000	377777
DSKAB DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (2) 0,1	MACRO %53(1020) 13:55 28-Mar-78 Page 1-3
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0262

 11366	035566	377777	400000
 11367	035567	707070	707070
 11368	035570	000000	707070
 11369	035571	707070	777777
 11370	035572	070707	777777
 11371	035573	070707	070710
 11372						LIST
 11373	035574	000000	000000		ENDSLD:	0
 11374
 11375					IFDEF	DEBUG,<
 11376					PATCH:	BLOCK DEBUG		;PATCHING AREA
 11377					>
 11378
 11379					;PROGRAM VARIABLES
 11380	035575					VAR
 11381
 11382					IFDEF	PGMEND,<
 11383	035576	000000	000000		END:	0
 11384			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 035577
CPU TIME USED 00:29.195

22P CORE USED

A10400	   815#
A10500	   838#                                                                                                            SEQ 0263
A10600	   859#
A10700	   881#
A11000	   933#
A11100	  2046#
A11200	  3030#
A11300	  3931#
A11400	  4427#
A11500	  5107#
A11600	  5126#
A11700	  5141#
A12000	  5809#
A12100	  5823#
A12200	  5846#
A12300	  5864#
A12400	  5882#
A13200	  2065#
A13300	   899#
A13400	   917#
A13500	  4924#
A13600	  4941#
A13700	  4958#
A14000	  4974#
A14100	  4991#
A14200	  5008#
A14300	  5024#
A14400	  5041#
A14500	  5058#
A14600	  5074#
A14700	  5091#
ABORT	    92#
AC0	   687#
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
B100	  5905#
B1000	  6045#
B10000	 10860#
B10100	 10880#
B10200	 10896#
B10300	 10911#
B10400	 10927#
B10500	 10943#
B10700	 10971#
B1100	  6061#
B11000	 10986#
B11100	 11002#
B11200	 11017#
B11300	 11033#
B11500	 11051#
B11600	 11073#                                                                                                            SEQ 0264
B11700	 11096#
B1200	  6077#
B12100	 11111#
B12200	 11128#
B12300	 11148#
B12400	 11172#
B12500	 11188#
B1300	  6098#
B1400	  6119#
B1500	  6143#
B1600	  6162#
B1700	  7090#
B200	  5926#
B2000	  7755#
B2100	  8424#
B2200	  8803#
B2300	  9183#
B2400	  9658#
B2500	 10138#
B2600	 10162#
B2700	 10182#
B300	  5951#
B3000	 10199#
B3100	 10215#
B3200	 10230#
B3300	 10251#
B3500	 10271#
B3600	 10294#
B3700	 10308#
B400	  5972#
B4300	 10323#
B4400	 10345#
B4500	 10363#
B4600	 10387#
B4700	 10410#
B500	  5988#
B5000	 10431#
B5100	 10457#
B5200	 10485#
B5300	 10503#
B5500	 10519#
B5600	 10543#
B5700	 10559#
B600	  6008#
B6000	 10576#
B6100	 10597#
B6200	 10613#
B6300	 10636#
B6400	 10658#
B6500	 10675#
B6600	 10691#
B6700	 10708#
B700	  6024#                                                                                                            SEQ 0265
B7000	 10724#
B7100	 10748#
B7200	 10770#
B7300	 10786#
B7400	 10801#
B7500	 10817#
B7600	 10833#
BEGEND	   438#	 11200
BEGIN	   307	   308	   369#	   708	   771	 11384
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#
CCA	   356#
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	 11375
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#                                                                                                            SEQ 0266
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	 11383#
ENDFIX	   684#
ENDIT	 11199#
ENDSLD	 11373#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#                                                                                                            SEQ 0267
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#                                                                                                            SEQ 0268
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500                                                                                                     SEQ 0269
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NB5300	 10477#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#                                                                                                            SEQ 0270
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	 11382
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380                                                                                                     SEQ 0271
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SN	   930#	   970	   970#	  1000	  1000#	  1030	  1030#	  1060	  1060#	  1090	  1090#	  1120	  1120#	  1150
	  1150#	  1180	  1180#	  1210	  1210#	  1240	  1240#	  1270	  1270#	  1300	  1300#	  1330	  1330#	  1360
	  1360#	  1390	  1390#	  1420	  1420#	  1450	  1450#	  1480	  1480#	  1510	  1510#	  1540	  1540#	  1570
	  1570#	  1600	  1600#	  1630	  1630#	  1660	  1660#	  1690	  1690#	  1720	  1720#	  1750	  1750#	  1780
	  1780#	  1810	  1810#	  1840	  1840#	  1870	  1870#	  1900	  1900#	  1930	  1930#	  1960	  1960#	  1990
	  1990#	  2020	  2020#	  2062#	  2098	  2098#	  2124	  2124#	  2150	  2150#	  2176	  2176#	  2202	  2202#
	  2228	  2228#	  2254	  2254#	  2280	  2280#	  2306	  2306#	  2332	  2332#	  2358	  2358#	  2384	  2384#
	  2410	  2410#	  2436	  2436#	  2462	  2462#	  2488	  2488#	  2514	  2514#	  2540	  2540#	  2566	  2566#
	  2592	  2592#	  2618	  2618#	  2644	  2644#	  2670	  2670#	  2696	  2696#	  2722	  2722#	  2748	  2748#
	  2774	  2774#	  2800	  2800#	  2826	  2826#	  2852	  2852#	  2878	  2878#	  2904	  2904#	  2930	  2930#
	  2956	  2956#	  2982	  2982#	  3008	  3008#	  3027#	  3061	  3061#	  3086	  3086#	  3111	  3111#	  3136
	  3136#	  3161	  3161#	  3186	  3186#	  3211	  3211#	  3236	  3236#	  3261	  3261#	  3286	  3286#	  3311
	  3311#	  3336	  3336#	  3361	  3361#	  3386	  3386#	  3411	  3411#	  3436	  3436#	  3461	  3461#	  3486
	  3486#	  3511	  3511#	  3536	  3536#	  3561	  3561#	  3586	  3586#	  3611	  3611#	  3636	  3636#	  3661
	  3661#	  3686	  3686#	  3711	  3711#	  3736	  3736#	  3761	  3761#	  3786	  3786#	  3811	  3811#	  3836
	  3836#	  3861	  3861#	  3886	  3886#	  3911	  3911#	  3927#	  3963	  3963#	  3989	  3989#	  4015	  4015#
	  4041	  4041#	  4067	  4067#	  4093	  4093#	  4119	  4119#	  4145	  4145#	  4171	  4171#	  4197	  4197#
	  4223	  4223#	  4249	  4249#	  4275	  4275#	  4301	  4301#	  4327	  4327#	  4353	  4353#	  4379	  4379#
	  4405	  4405#	  4423#	  4459	  4459#	  4485	  4485#	  4511	  4511#	  4537	  4537#	  4563	  4563#	  4589
	  4589#	  4615	  4615#	  4641	  4641#	  4667	  4667#	  4693	  4693#	  4719	  4719#	  4745	  4745#	  4771
	  4771#	  4797	  4797#	  4823	  4823#	  4849	  4849#	  4875	  4875#	  4901	  4901#	  5138#	  5160	  5160#
	  5178	  5178#	  5196	  5196#	  5214	  5214#	  5232	  5232#	  5250	  5250#	  5268	  5268#	  5286	  5286#
	  5304	  5304#	  5322	  5322#	  5340	  5340#	  5358	  5358#	  5376	  5376#	  5394	  5394#	  5412	  5412#
	  5430	  5430#	  5448	  5448#	  5466	  5466#	  5484	  5484#	  5502	  5502#	  5520	  5520#	  5538	  5538#
	  5556	  5556#	  5574	  5574#	  5592	  5592#	  5610	  5610#	  5628	  5628#	  5646	  5646#	  5664	  5664#
	  5682	  5682#	  5700	  5700#	  5718	  5718#	  5736	  5736#	  5754	  5754#	  5772	  5772#	  5790	  5790#
	  6159#	  6193	  6193#	  6220	  6220#	  6247	  6247#	  6274	  6274#	  6301	  6301#	  6328	  6328#	  6355
	  6355#	  6382	  6382#	  6409	  6409#	  6436	  6436#	  6463	  6463#	  6490	  6490#	  6517	  6517#	  6544
	  6544#	  6571	  6571#	  6598	  6598#	  6625	  6625#	  6652	  6652#	  6699	  6699#	  6721	  6721#	  6743
	  6743#	  6765	  6765#	  6787	  6787#	  6809	  6809#	  6831	  6831#	  6853	  6853#	  6875	  6875#	  6897
	  6897#	  6919	  6919#	  6941	  6941#	  6963	  6963#	  6985	  6985#	  7007	  7007#	  7029	  7029#	  7051
	  7051#	  7073	  7073#	  7087#	  7109	  7109#	  7127	  7127#	  7145	  7145#	  7163	  7163#	  7181	  7181#
	  7199	  7199#	  7217	  7217#	  7235	  7235#	  7253	  7253#	  7271	  7271#	  7289	  7289#	  7307	  7307#
	  7325	  7325#	  7343	  7343#	  7361	  7361#	  7379	  7379#	  7397	  7397#	  7415	  7415#	  7433	  7433#
	  7451	  7451#	  7469	  7469#	  7487	  7487#	  7505	  7505#	  7523	  7523#	  7541	  7541#	  7559	  7559#
	  7577	  7577#	  7595	  7595#	  7613	  7613#	  7631	  7631#	  7649	  7649#	  7667	  7667#	  7685	  7685#
	  7703	  7703#	  7721	  7721#	  7739	  7739#	  7752#	  7774	  7774#	  7792	  7792#	  7810	  7810#	  7828
	  7828#	  7846	  7846#	  7864	  7864#	  7882	  7882#	  7900	  7900#	  7918	  7918#	  7936	  7936#	  7954
	  7954#	  7972	  7972#	  7990	  7990#	  8008	  8008#	  8026	  8026#	  8044	  8044#	  8062	  8062#	  8080
	  8080#	  8098	  8098#	  8116	  8116#	  8134	  8134#	  8152	  8152#	  8170	  8170#	  8188	  8188#	  8206
	  8206#	  8224	  8224#	  8242	  8242#	  8260	  8260#	  8278	  8278#	  8296	  8296#	  8314	  8314#	  8332
	  8332#	  8350	  8350#	  8368	  8368#	  8386	  8386#	  8404	  8404#	  8421#	  8446	  8446#	  8466	  8466#    SEQ 0272
	  8486	  8486#	  8506	  8506#	  8526	  8526#	  8546	  8546#	  8566	  8566#	  8586	  8586#	  8606	  8606#
	  8626	  8626#	  8646	  8646#	  8666	  8666#	  8686	  8686#	  8706	  8706#	  8726	  8726#	  8746	  8746#
	  8766	  8766#	  8786	  8786#	  8800#	  8825	  8825#	  8845	  8845#	  8865	  8865#	  8885	  8885#	  8905
	  8905#	  8925	  8925#	  8945	  8945#	  8965	  8965#	  8985	  8985#	  9005	  9005#	  9025	  9025#	  9045
	  9045#	  9065	  9065#	  9085	  9085#	  9105	  9105#	  9125	  9125#	  9145	  9145#	  9165	  9165#	  9179#
	  9213	  9213#	  9238	  9238#	  9263	  9263#	  9288	  9288#	  9313	  9313#	  9338	  9338#	  9363	  9363#
	  9388	  9388#	  9413	  9413#	  9438	  9438#	  9463	  9463#	  9488	  9488#	  9513	  9513#	  9538	  9538#
	  9563	  9563#	  9588	  9588#	  9613	  9613#	  9638	  9638#	  9654#	  9688	  9688#	  9713	  9713#	  9738
	  9738#	  9763	  9763#	  9788	  9788#	  9813	  9813#	  9838	  9838#	  9863	  9863#	  9888	  9888#	  9913
	  9913#	  9938	  9938#	  9963	  9963#	  9988	  9988#	 10013	 10013#	 10038	 10038#	 10063	 10063#	 10088
	 10088#	 10113	 10113#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	 11199#	 11199
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
YY	  3929#	  3964	  3964#	  3965	  3966	  3966#	  3969	  3990	  3990#	  3991	  3992	  3995	  4016	  4016#
	  4017	  4018	  4021	  4042	  4042#	  4043	  4044	  4047	  4068	  4068#	  4069	  4070	  4073	  4094
	  4094#	  4095	  4096	  4099	  4120	  4120#	  4121	  4122	  4125	  4146	  4146#	  4147	  4148	  4151
	  4172	  4172#	  4173	  4174	  4177	  4198	  4198#	  4199	  4200	  4203	  4224	  4224#	  4225	  4226     SEQ 0273
	  4229	  4250	  4250#	  4251	  4252	  4255	  4276	  4276#	  4277	  4278	  4281	  4302	  4302#	  4303
	  4304	  4307	  4328	  4328#	  4329	  4330	  4333	  4354	  4354#	  4355	  4356	  4359	  4380	  4380#
	  4381	  4382	  4385	  4406	  4406#	  4407	  4408	  4411	  4425#	  4460	  4460#	  4461	  4462	  4462#
	  4466	  4486	  4486#	  4487	  4488	  4492	  4512	  4512#	  4513	  4514	  4518	  4538	  4538#	  4539
	  4540	  4544	  4564	  4564#	  4565	  4566	  4570	  4590	  4590#	  4591	  4592	  4596	  4616	  4616#
	  4617	  4618	  4622	  4642	  4642#	  4643	  4644	  4648	  4668	  4668#	  4669	  4670	  4674	  4694
	  4694#	  4695	  4696	  4700	  4720	  4720#	  4721	  4722	  4726	  4746	  4746#	  4747	  4748	  4752
	  4772	  4772#	  4773	  4774	  4778	  4798	  4798#	  4799	  4800	  4804	  4824	  4824#	  4825	  4826
	  4830	  4850	  4850#	  4851	  4852	  4856	  4876	  4876#	  4877	  4878	  4882	  4902	  4902#	  4903
	  4904	  4908	  9181#	  9215	  9215#	  9217	  9217#	  9218	  9220	  9240	  9240#	  9242	  9243	  9245
	  9265	  9265#	  9267	  9268	  9270	  9290	  9290#	  9292	  9293	  9295	  9315	  9315#	  9317	  9318
	  9320	  9340	  9340#	  9342	  9343	  9345	  9365	  9365#	  9367	  9368	  9370	  9390	  9390#	  9392
	  9393	  9395	  9415	  9415#	  9417	  9418	  9420	  9440	  9440#	  9442	  9443	  9445	  9465	  9465#
	  9467	  9468	  9470	  9490	  9490#	  9492	  9493	  9495	  9515	  9515#	  9517	  9518	  9520	  9540
	  9540#	  9542	  9543	  9545	  9565	  9565#	  9567	  9568	  9570	  9590	  9590#	  9592	  9593	  9595
	  9615	  9615#	  9617	  9618	  9620	  9640	  9640#	  9642	  9643	  9645	  9656#	  9690	  9690#	  9692
	  9692#	  9693	  9695	  9715	  9715#	  9717	  9718	  9720	  9740	  9740#	  9742	  9743	  9745	  9765
	  9765#	  9767	  9768	  9770	  9790	  9790#	  9792	  9793	  9795	  9815	  9815#	  9817	  9818	  9820
	  9840	  9840#	  9842	  9843	  9845	  9865	  9865#	  9867	  9868	  9870	  9890	  9890#	  9892	  9893
	  9895	  9915	  9915#	  9917	  9918	  9920	  9940	  9940#	  9942	  9943	  9945	  9965	  9965#	  9967
	  9968	  9970	  9990	  9990#	  9992	  9993	  9995	 10015	 10015#	 10017	 10018	 10020	 10040	 10040#
	 10042	 10043	 10045	 10065	 10065#	 10067	 10068	 10070	 10090	 10090#	 10092	 10093	 10095	 10115
	 10115#	 10117	 10118	 10120
ZZ	   931#	   971	   971#	   972	   972#	   973	   975	  1001	  1001#	  1002	  1003	  1005	  1031	  1031#
	  1032	  1033	  1035	  1061	  1061#	  1062	  1063	  1065	  1091	  1091#	  1092	  1093	  1095	  1121
	  1121#	  1122	  1123	  1125	  1151	  1151#	  1152	  1153	  1155	  1181	  1181#	  1182	  1183	  1185
	  1211	  1211#	  1212	  1213	  1215	  1241	  1241#	  1242	  1243	  1245	  1271	  1271#	  1272	  1273
	  1275	  1301	  1301#	  1302	  1303	  1305	  1331	  1331#	  1332	  1333	  1335	  1361	  1361#	  1362
	  1363	  1365	  1391	  1391#	  1392	  1393	  1395	  1421	  1421#	  1422	  1423	  1425	  1451	  1451#
	  1452	  1453	  1455	  1481	  1481#	  1482	  1483	  1485	  1511	  1511#	  1512	  1513	  1515	  1541
	  1541#	  1542	  1543	  1545	  1571	  1571#	  1572	  1573	  1575	  1601	  1601#	  1602	  1603	  1605
	  1631	  1631#	  1632	  1633	  1635	  1661	  1661#	  1662	  1663	  1665	  1691	  1691#	  1692	  1693
	  1695	  1721	  1721#	  1722	  1723	  1725	  1751	  1751#	  1752	  1753	  1755	  1781	  1781#	  1782
	  1783	  1785	  1811	  1811#	  1812	  1813	  1815	  1841	  1841#	  1842	  1843	  1845	  1871	  1871#
	  1872	  1873	  1875	  1901	  1901#	  1902	  1903	  1905	  1931	  1931#	  1932	  1933	  1935	  1961
	  1961#	  1962	  1963	  1965	  1991	  1991#	  1992	  1993	  1995	  2021	  2021#	  2022	  2023	  2025
	  2063#	  2099	  2099#	  2100	  2100#	  2102	  2103	  2125	  2125#	  2126	  2128	  2129	  2151	  2151#
	  2152	  2154	  2155	  2177	  2177#	  2178	  2180	  2181	  2203	  2203#	  2204	  2206	  2207	  2229
	  2229#	  2230	  2232	  2233	  2255	  2255#	  2256	  2258	  2259	  2281	  2281#	  2282	  2284	  2285
	  2307	  2307#	  2308	  2310	  2311	  2333	  2333#	  2334	  2336	  2337	  2359	  2359#	  2360	  2362
	  2363	  2385	  2385#	  2386	  2388	  2389	  2411	  2411#	  2412	  2414	  2415	  2437	  2437#	  2438
	  2440	  2441	  2463	  2463#	  2464	  2466	  2467	  2489	  2489#	  2490	  2492	  2493	  2515	  2515#
	  2516	  2518	  2519	  2541	  2541#	  2542	  2544	  2545	  2567	  2567#	  2568	  2570	  2571	  2593
	  2593#	  2594	  2596	  2597	  2619	  2619#	  2620	  2622	  2623	  2645	  2645#	  2646	  2648	  2649
	  2671	  2671#	  2672	  2674	  2675	  2697	  2697#	  2698	  2700	  2701	  2723	  2723#	  2724	  2726
	  2727	  2749	  2749#	  2750	  2752	  2753	  2775	  2775#	  2776	  2778	  2779	  2801	  2801#	  2802
	  2804	  2805	  2827	  2827#	  2828	  2830	  2831	  2853	  2853#	  2854	  2856	  2857	  2879	  2879#
	  2880	  2882	  2883	  2905	  2905#	  2906	  2908	  2909	  2931	  2931#	  2932	  2934	  2935	  2957
	  2957#	  2958	  2960	  2961	  2983	  2983#	  2984	  2986	  2987	  3009	  3009#	  3010	  3012	  3013
	  3028#	  3062	  3062#	  3063	  3063#	  3064	  3065	  3066	  3087	  3087#	  3088	  3089	  3090	  3091
	  3112	  3112#	  3113	  3114	  3115	  3116	  3137	  3137#	  3138	  3139	  3140	  3141	  3162	  3162#
	  3163	  3164	  3165	  3166	  3187	  3187#	  3188	  3189	  3190	  3191	  3212	  3212#	  3213	  3214
	  3215	  3216	  3237	  3237#	  3238	  3239	  3240	  3241	  3262	  3262#	  3263	  3264	  3265	  3266     SEQ 0274
	  3287	  3287#	  3288	  3289	  3290	  3291	  3312	  3312#	  3313	  3314	  3315	  3316	  3337	  3337#
	  3338	  3339	  3340	  3341	  3362	  3362#	  3363	  3364	  3365	  3366	  3387	  3387#	  3388	  3389
	  3390	  3391	  3412	  3412#	  3413	  3414	  3415	  3416	  3437	  3437#	  3438	  3439	  3440	  3441
	  3462	  3462#	  3463	  3464	  3465	  3466	  3487	  3487#	  3488	  3489	  3490	  3491	  3512	  3512#
	  3513	  3514	  3515	  3516	  3537	  3537#	  3538	  3539	  3540	  3541	  3562	  3562#	  3563	  3564
	  3565	  3566	  3587	  3587#	  3588	  3589	  3590	  3591	  3612	  3612#	  3613	  3614	  3615	  3616
	  3637	  3637#	  3638	  3639	  3640	  3641	  3662	  3662#	  3663	  3664	  3665	  3666	  3687	  3687#
	  3688	  3689	  3690	  3691	  3712	  3712#	  3713	  3714	  3715	  3716	  3737	  3737#	  3738	  3739
	  3740	  3741	  3762	  3762#	  3763	  3764	  3765	  3766	  3787	  3787#	  3788	  3789	  3790	  3791
	  3812	  3812#	  3813	  3814	  3815	  3816	  3837	  3837#	  3838	  3839	  3840	  3841	  3862	  3862#
	  3863	  3864	  3865	  3866	  3887	  3887#	  3888	  3889	  3890	  3891	  3912	  3912#	  3913	  3914
	  3915	  3916	  3928#	  3965	  3965#	  3967	  3967#	  3968	  3991	  3991#	  3993	  3994	  4017	  4017#
	  4019	  4020	  4043	  4043#	  4045	  4046	  4069	  4069#	  4071	  4072	  4095	  4095#	  4097	  4098
	  4121	  4121#	  4123	  4124	  4147	  4147#	  4149	  4150	  4173	  4173#	  4175	  4176	  4199	  4199#
	  4201	  4202	  4225	  4225#	  4227	  4228	  4251	  4251#	  4253	  4254	  4277	  4277#	  4279	  4280
	  4303	  4303#	  4305	  4306	  4329	  4329#	  4331	  4332	  4355	  4355#	  4357	  4358	  4381	  4381#
	  4383	  4384	  4407	  4407#	  4409	  4410	  4424#	  4461	  4461#	  4463	  4463#	  4464	  4487	  4487#
	  4489	  4490	  4513	  4513#	  4515	  4516	  4539	  4539#	  4541	  4542	  4565	  4565#	  4567	  4568
	  4591	  4591#	  4593	  4594	  4617	  4617#	  4619	  4620	  4643	  4643#	  4645	  4646	  4669	  4669#
	  4671	  4672	  4695	  4695#	  4697	  4698	  4721	  4721#	  4723	  4724	  4747	  4747#	  4749	  4750
	  4773	  4773#	  4775	  4776	  4799	  4799#	  4801	  4802	  4825	  4825#	  4827	  4828	  4851	  4851#
	  4853	  4854	  4877	  4877#	  4879	  4880	  4903	  4903#	  4905	  4906	  5139#	  5161	  5161#	  5162
	  5162#	  5163	  5164	  5179	  5179#	  5180	  5181	  5182	  5197	  5197#	  5198	  5199	  5200	  5215
	  5215#	  5216	  5217	  5218	  5233	  5233#	  5234	  5235	  5236	  5251	  5251#	  5252	  5253	  5254
	  5269	  5269#	  5270	  5271	  5272	  5287	  5287#	  5288	  5289	  5290	  5305	  5305#	  5306	  5307
	  5308	  5323	  5323#	  5324	  5325	  5326	  5341	  5341#	  5342	  5343	  5344	  5359	  5359#	  5360
	  5361	  5362	  5377	  5377#	  5378	  5379	  5380	  5395	  5395#	  5396	  5397	  5398	  5413	  5413#
	  5414	  5415	  5416	  5431	  5431#	  5432	  5433	  5434	  5449	  5449#	  5450	  5451	  5452	  5467
	  5467#	  5468	  5469	  5470	  5485	  5485#	  5486	  5487	  5488	  5503	  5503#	  5504	  5505	  5506
	  5521	  5521#	  5522	  5523	  5524	  5539	  5539#	  5540	  5541	  5542	  5557	  5557#	  5558	  5559
	  5560	  5575	  5575#	  5576	  5577	  5578	  5593	  5593#	  5594	  5595	  5596	  5611	  5611#	  5612
	  5613	  5614	  5629	  5629#	  5630	  5631	  5632	  5647	  5647#	  5648	  5649	  5650	  5665	  5665#
	  5666	  5667	  5668	  5683	  5683#	  5684	  5685	  5686	  5701	  5701#	  5702	  5703	  5704	  5719
	  5719#	  5720	  5721	  5722	  5737	  5737#	  5738	  5739	  5740	  5755	  5755#	  5756	  5757	  5758
	  5773	  5773#	  5774	  5775	  5776	  5791	  5791#	  5792	  5793	  5794	  6160#	  6194	  6194#	  6195
	  6195#	  6196	  6221	  6221#	  6222	  6223	  6248	  6248#	  6249	  6250	  6275	  6275#	  6276	  6277
	  6302	  6302#	  6303	  6304	  6329	  6329#	  6330	  6331	  6356	  6356#	  6357	  6358	  6383	  6383#
	  6384	  6385	  6410	  6410#	  6411	  6412	  6437	  6437#	  6438	  6439	  6464	  6464#	  6465	  6466
	  6491	  6491#	  6492	  6493	  6518	  6518#	  6519	  6520	  6545	  6545#	  6546	  6547	  6572	  6572#
	  6573	  6574	  6599	  6599#	  6600	  6601	  6626	  6626#	  6627	  6628	  6653	  6653#	  6654	  6655
	  6671#	  6700	  6700#	  6701	  6701#	  6702	  6722	  6722#	  6723	  6724	  6744	  6744#	  6745	  6746
	  6766	  6766#	  6767	  6768	  6788	  6788#	  6789	  6790	  6810	  6810#	  6811	  6812	  6832	  6832#
	  6833	  6834	  6854	  6854#	  6855	  6856	  6876	  6876#	  6877	  6878	  6898	  6898#	  6899	  6900
	  6920	  6920#	  6921	  6922	  6942	  6942#	  6943	  6944	  6964	  6964#	  6965	  6966	  6986	  6986#
	  6987	  6988	  7008	  7008#	  7009	  7010	  7030	  7030#	  7031	  7032	  7052	  7052#	  7053	  7054
	  7074	  7074#	  7075	  7076	  7088#	  7110	  7110#	  7111	  7111#	  7113	  7128	  7128#	  7129	  7131
	  7146	  7146#	  7147	  7149	  7164	  7164#	  7165	  7167	  7182	  7182#	  7183	  7185	  7200	  7200#
	  7201	  7203	  7218	  7218#	  7219	  7221	  7236	  7236#	  7237	  7239	  7254	  7254#	  7255	  7257
	  7272	  7272#	  7273	  7275	  7290	  7290#	  7291	  7293	  7308	  7308#	  7309	  7311	  7326	  7326#
	  7327	  7329	  7344	  7344#	  7345	  7347	  7362	  7362#	  7363	  7365	  7380	  7380#	  7381	  7383
	  7398	  7398#	  7399	  7401	  7416	  7416#	  7417	  7419	  7434	  7434#	  7435	  7437	  7452	  7452#
	  7453	  7455	  7470	  7470#	  7471	  7473	  7488	  7488#	  7489	  7491	  7506	  7506#	  7507	  7509
	  7524	  7524#	  7525	  7527	  7542	  7542#	  7543	  7545	  7560	  7560#	  7561	  7563	  7578	  7578#    SEQ 0275
	  7579	  7581	  7596	  7596#	  7597	  7599	  7614	  7614#	  7615	  7617	  7632	  7632#	  7633	  7635
	  7650	  7650#	  7651	  7653	  7668	  7668#	  7669	  7671	  7686	  7686#	  7687	  7689	  7704	  7704#
	  7705	  7707	  7722	  7722#	  7723	  7725	  7740	  7740#	  7741	  7743	  7753#	  7775	  7775#	  7776
	  7776#	  7777	  7793	  7793#	  7794	  7795	  7811	  7811#	  7812	  7813	  7829	  7829#	  7830	  7831
	  7847	  7847#	  7848	  7849	  7865	  7865#	  7866	  7867	  7883	  7883#	  7884	  7885	  7901	  7901#
	  7902	  7903	  7919	  7919#	  7920	  7921	  7937	  7937#	  7938	  7939	  7955	  7955#	  7956	  7957
	  7973	  7973#	  7974	  7975	  7991	  7991#	  7992	  7993	  8009	  8009#	  8010	  8011	  8027	  8027#
	  8028	  8029	  8045	  8045#	  8046	  8047	  8063	  8063#	  8064	  8065	  8081	  8081#	  8082	  8083
	  8099	  8099#	  8100	  8101	  8117	  8117#	  8118	  8119	  8135	  8135#	  8136	  8137	  8153	  8153#
	  8154	  8155	  8171	  8171#	  8172	  8173	  8189	  8189#	  8190	  8191	  8207	  8207#	  8208	  8209
	  8225	  8225#	  8226	  8227	  8243	  8243#	  8244	  8245	  8261	  8261#	  8262	  8263	  8279	  8279#
	  8280	  8281	  8297	  8297#	  8298	  8299	  8315	  8315#	  8316	  8317	  8333	  8333#	  8334	  8335
	  8351	  8351#	  8352	  8353	  8369	  8369#	  8370	  8371	  8387	  8387#	  8388	  8389	  8405	  8405#
	  8406	  8407	  8422#	  8447	  8447#	  8448	  8448#	  8449	  8451	  8467	  8467#	  8468	  8469	  8471
	  8487	  8487#	  8488	  8489	  8491	  8507	  8507#	  8508	  8509	  8511	  8527	  8527#	  8528	  8529
	  8531	  8547	  8547#	  8548	  8549	  8551	  8567	  8567#	  8568	  8569	  8571	  8587	  8587#	  8588
	  8589	  8591	  8607	  8607#	  8608	  8609	  8611	  8627	  8627#	  8628	  8629	  8631	  8647	  8647#
	  8648	  8649	  8651	  8667	  8667#	  8668	  8669	  8671	  8687	  8687#	  8688	  8689	  8691	  8707
	  8707#	  8708	  8709	  8711	  8727	  8727#	  8728	  8729	  8731	  8747	  8747#	  8748	  8749	  8751
	  8767	  8767#	  8768	  8769	  8771	  8787	  8787#	  8788	  8789	  8791	  8801#	  8826	  8826#	  8827
	  8827#	  8828	  8830	  8846	  8846#	  8847	  8848	  8850	  8866	  8866#	  8867	  8868	  8870	  8886
	  8886#	  8887	  8888	  8890	  8906	  8906#	  8907	  8908	  8910	  8926	  8926#	  8927	  8928	  8930
	  8946	  8946#	  8947	  8948	  8950	  8966	  8966#	  8967	  8968	  8970	  8986	  8986#	  8987	  8988
	  8990	  9006	  9006#	  9007	  9008	  9010	  9026	  9026#	  9027	  9028	  9030	  9046	  9046#	  9047
	  9048	  9050	  9066	  9066#	  9067	  9068	  9070	  9086	  9086#	  9087	  9088	  9090	  9106	  9106#
	  9107	  9108	  9110	  9126	  9126#	  9127	  9128	  9130	  9146	  9146#	  9147	  9148	  9150	  9166
	  9166#	  9167	  9168	  9170	  9180#	  9214	  9214#	  9216	  9216#	  9218	  9220	  9239	  9239#	  9241
	  9243	  9245	  9264	  9264#	  9266	  9268	  9270	  9289	  9289#	  9291	  9293	  9295	  9314	  9314#
	  9316	  9318	  9320	  9339	  9339#	  9341	  9343	  9345	  9364	  9364#	  9366	  9368	  9370	  9389
	  9389#	  9391	  9393	  9395	  9414	  9414#	  9416	  9418	  9420	  9439	  9439#	  9441	  9443	  9445
	  9464	  9464#	  9466	  9468	  9470	  9489	  9489#	  9491	  9493	  9495	  9514	  9514#	  9516	  9518
	  9520	  9539	  9539#	  9541	  9543	  9545	  9564	  9564#	  9566	  9568	  9570	  9589	  9589#	  9591
	  9593	  9595	  9614	  9614#	  9616	  9618	  9620	  9639	  9639#	  9641	  9643	  9645	  9655#	  9689
	  9689#	  9691	  9691#	  9693	  9695	  9714	  9714#	  9716	  9718	  9720	  9739	  9739#	  9741	  9743
	  9745	  9764	  9764#	  9766	  9768	  9770	  9789	  9789#	  9791	  9793	  9795	  9814	  9814#	  9816
	  9818	  9820	  9839	  9839#	  9841	  9843	  9845	  9864	  9864#	  9866	  9868	  9870	  9889	  9889#
	  9891	  9893	  9895	  9914	  9914#	  9916	  9918	  9920	  9939	  9939#	  9941	  9943	  9945	  9964
	  9964#	  9966	  9968	  9970	  9989	  9989#	  9991	  9993	  9995	 10014	 10014#	 10016	 10018	 10020
	 10039	 10039#	 10041	 10043	 10045	 10064	 10064#	 10066	 10068	 10070	 10089	 10089#	 10091	 10093
	 10095	 10114	 10114#	 10116	 10118	 10120
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#                                                                                                            SEQ 0276
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	 11206
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#                                                                                                            SEQ 0277
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0278
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   821	   844	   865	   887	   904	   922
	   979	  1009	  1039	  1069	  1099	  1129	  1159	  1189	  1219	  1249	  1279	  1309	  1339	  1369
	  1399	  1429	  1459	  1489	  1519	  1549	  1579	  1609	  1639	  1669	  1699	  1729	  1759	  1789
	  1819	  1849	  1879	  1909	  1939	  1969	  1999	  2029	  2050	  2107	  2133	  2159	  2185	  2211
	  2237	  2263	  2289	  2315	  2341	  2367	  2393	  2419	  2445	  2471	  2497	  2523	  2549	  2575
	  2601	  2627	  2653	  2679	  2705	  2731	  2757	  2783	  2809	  2835	  2861	  2887	  2913	  2939
	  2965	  2991	  3017	  3070	  3095	  3120	  3145	  3170	  3195	  3220	  3245	  3270	  3295	  3320
	  3345	  3370	  3395	  3420	  3445	  3470	  3495	  3520	  3545	  3570	  3595	  3620	  3645	  3670
	  3695	  3720	  3745	  3770	  3795	  3820	  3845	  3870	  3895	  3920	  3973	  3999	  4025	  4051
	  4077	  4103	  4129	  4155	  4181	  4207	  4233	  4259	  4285	  4311	  4337	  4363	  4389	  4415
	  4469	  4495	  4521	  4547	  4573	  4599	  4625	  4651	  4677	  4703	  4729	  4755	  4781	  4807
	  4833	  4859	  4885	  4911	  4930	  4947	  4964	  4980	  4997	  5014	  5030	  5047	  5064	  5080
	  5095	  5112	  5130	  5167	  5185	  5203	  5221	  5239	  5257	  5275	  5293	  5311	  5329	  5347
	  5365	  5383	  5401	  5419	  5437	  5455	  5473	  5491	  5509	  5527	  5545	  5563	  5581	  5599
	  5617	  5635	  5653	  5671	  5689	  5707	  5725	  5743	  5761	  5779	  5797	  5813	  5827	  5849
	  5867	  5886	  5908	  5931	  5954	  5977	  5991	  6013	  6028	  6050	  6065	  6081	  6101	  6122
	  6147	  6200	  6227	  6254	  6281	  6308	  6335	  6362	  6389	  6416	  6443	  6470	  6497	  6524
	  6551	  6578	  6605	  6632	  6659	  6706	  6728	  6750	  6772	  6794	  6816	  6838	  6860	  6882
	  6904	  6926	  6948	  6970	  6992	  7014	  7036	  7058	  7080	  7115	  7133	  7151	  7169	  7187
	  7205	  7223	  7241	  7259	  7277	  7295	  7313	  7331	  7349	  7367	  7385	  7403	  7421	  7439
	  7457	  7475	  7493	  7511	  7529	  7547	  7565	  7583	  7601	  7619	  7637	  7655	  7673	  7691
	  7709	  7727	  7745	  7780	  7798	  7816	  7834	  7852	  7870	  7888	  7906	  7924	  7942	  7960
	  7978	  7996	  8014	  8032	  8050	  8068	  8086	  8104	  8122	  8140	  8158	  8176	  8194	  8212
	  8230	  8248	  8266	  8284	  8302	  8320	  8338	  8356	  8374	  8392	  8410	  8453	  8473	  8493
	  8513	  8533	  8553	  8573	  8593	  8613	  8633	  8653	  8673	  8693	  8713	  8733	  8753	  8773
	  8793	  8832	  8852	  8872	  8892	  8912	  8932	  8952	  8972	  8992	  9012	  9032	  9052	  9072
	  9092	  9112	  9132	  9152	  9172	  9222	  9247	  9272	  9297	  9322	  9347	  9372	  9397	  9422     SEQ 0279
	  9447	  9472	  9497	  9522	  9547	  9572	  9597	  9622	  9647	  9697	  9722	  9747	  9772	  9797
	  9822	  9847	  9872	  9897	  9922	  9947	  9972	  9997	 10022	 10047	 10072	 10097	 10122	 10141
	 10165	 10185	 10203	 10219	 10234	 10255	 10275	 10297	 10311	 10327	 10349	 10367	 10391	 10414
	 10435	 10461	 10489	 10507	 10523	 10547	 10563	 10580	 10601	 10617	 10640	 10662	 10679	 10695
	 10712	 10728	 10752	 10774	 10790	 10805	 10821	 10837	 10864	 10884	 10900	 10915	 10931	 10947
	 10975	 10990	 11006	 11021	 11037	 11055	 11077	 11100	 11114	 11132	 11152	 11176	 11192
JEN	   160#
JRSTF	   159#
MAPADR	   295#
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#                                                                                                            SEQ 0280
PNTCI	   204#
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#
SIXBTZ	   261#
STOP	    48#	   820	   843	   864	   886	   903	   921	   978	  1008	  1038	  1068	  1098	  1128	  1158
	  1188	  1218	  1248	  1278	  1308	  1338	  1368	  1398	  1428	  1458	  1488	  1518	  1548	  1578
	  1608	  1638	  1668	  1698	  1728	  1758	  1788	  1818	  1848	  1878	  1908	  1938	  1968	  1998
	  2028	  2049	  2106	  2132	  2158	  2184	  2210	  2236	  2262	  2288	  2314	  2340	  2366	  2392     SEQ 0281
	  2418	  2444	  2470	  2496	  2522	  2548	  2574	  2600	  2626	  2652	  2678	  2704	  2730	  2756
	  2782	  2808	  2834	  2860	  2886	  2912	  2938	  2964	  2990	  3016	  3069	  3094	  3119	  3144
	  3169	  3194	  3219	  3244	  3269	  3294	  3319	  3344	  3369	  3394	  3419	  3444	  3469	  3494
	  3519	  3544	  3569	  3594	  3619	  3644	  3669	  3694	  3719	  3744	  3769	  3794	  3819	  3844
	  3869	  3894	  3919	  3972	  3998	  4024	  4050	  4076	  4102	  4128	  4154	  4180	  4206	  4232
	  4258	  4284	  4310	  4336	  4362	  4388	  4414	  4468	  4494	  4520	  4546	  4572	  4598	  4624
	  4650	  4676	  4702	  4728	  4754	  4780	  4806	  4832	  4858	  4884	  4910	  4929	  4946	  4963
	  4979	  4996	  5013	  5029	  5046	  5063	  5079	  5094	  5111	  5129	  5166	  5184	  5202	  5220
	  5238	  5256	  5274	  5292	  5310	  5328	  5346	  5364	  5382	  5400	  5418	  5436	  5454	  5472
	  5490	  5508	  5526	  5544	  5562	  5580	  5598	  5616	  5634	  5652	  5670	  5688	  5706	  5724
	  5742	  5760	  5778	  5796	  5812	  5826	  5848	  5866	  5885	  5907	  5930	  5953	  5976	  5990
	  6012	  6027	  6049	  6064	  6080	  6100	  6121	  6146	  6199	  6226	  6253	  6280	  6307	  6334
	  6361	  6388	  6415	  6442	  6469	  6496	  6523	  6550	  6577	  6604	  6631	  6658	  6705	  6727
	  6749	  6771	  6793	  6815	  6837	  6859	  6881	  6903	  6925	  6947	  6969	  6991	  7013	  7035
	  7057	  7079	  7114	  7132	  7150	  7168	  7186	  7204	  7222	  7240	  7258	  7276	  7294	  7312
	  7330	  7348	  7366	  7384	  7402	  7420	  7438	  7456	  7474	  7492	  7510	  7528	  7546	  7564
	  7582	  7600	  7618	  7636	  7654	  7672	  7690	  7708	  7726	  7744	  7779	  7797	  7815	  7833
	  7851	  7869	  7887	  7905	  7923	  7941	  7959	  7977	  7995	  8013	  8031	  8049	  8067	  8085
	  8103	  8121	  8139	  8157	  8175	  8193	  8211	  8229	  8247	  8265	  8283	  8301	  8319	  8337
	  8355	  8373	  8391	  8409	  8452	  8472	  8492	  8512	  8532	  8552	  8572	  8592	  8612	  8632
	  8652	  8672	  8692	  8712	  8732	  8752	  8772	  8792	  8831	  8851	  8871	  8891	  8911	  8931
	  8951	  8971	  8991	  9011	  9031	  9051	  9071	  9091	  9111	  9131	  9151	  9171	  9221	  9246
	  9271	  9296	  9321	  9346	  9371	  9396	  9421	  9446	  9471	  9496	  9521	  9546	  9571	  9596
	  9621	  9646	  9696	  9721	  9746	  9771	  9796	  9821	  9846	  9871	  9896	  9921	  9946	  9971
	  9996	 10021	 10046	 10071	 10096	 10121	 10140	 10164	 10184	 10202	 10218	 10233	 10254	 10274
	 10296	 10310	 10326	 10348	 10366	 10390	 10413	 10434	 10460	 10488	 10506	 10522	 10546	 10562
	 10579	 10600	 10616	 10639	 10661	 10678	 10694	 10711	 10727	 10751	 10773	 10789	 10804	 10820
	 10836	 10863	 10883	 10899	 10914	 10930	 10946	 10974	 10989	 11005	 11020	 11036	 11054	 11076
	 11099	 11113	 11131	 11151	 11175	 11191
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#                                                                                                            SEQ 0282
WRPI	   356#
WRPUR	   356#
WRSPB	   356#
WRTIM	   356#
WRUBR	   356#

ADD	   816	   839	   860	   882	   900	   918	   974	  1004	  1034	  1064	  1094	  1124	  1154	  1184
	  1214	  1244	  1274	  1304	  1334	  1364	  1394	  1424	  1454	  1484	  1514	  1544	  1574	  1604     SEQ 0283
	  1634	  1664	  1694	  1724	  1754	  1784	  1814	  1844	  1874	  1904	  1934	  1964	  1994	  2024
	  2047	  2102	  2128	  2154	  2180	  2206	  2232	  2258	  2284	  2310	  2336	  2362	  2388	  2414
	  2440	  2466	  2492	  2518	  2544	  2570	  2596	  2622	  2648	  2674	  2700	  2726	  2752	  2778
	  2804	  2830	  2856	  2882	  2908	  2934	  2960	  2986	  3012	  3065	  3090	  3115	  3140	  3165
	  3190	  3215	  3240	  3265	  3290	  3315	  3340	  3365	  3390	  3415	  3440	  3465	  3490	  3515
	  3540	  3565	  3590	  3615	  3640	  3665	  3690	  3715	  3740	  3765	  3790	  3815	  3840	  3865
	  3890	  3915	  3969	  3995	  4021	  4047	  4073	  4099	  4125	  4151	  4177	  4203	  4229	  4255
	  4281	  4307	  4333	  4359	  4385	  4411	  4466	  4492	  4518	  4544	  4570	  4596	  4622	  4648
	  4674	  4700	  4726	  4752	  4778	  4804	  4830	  4856	  4882	  4908	  4925	  4942	  4959	  4975
	  4992	  5009	  5025	  5042	  5059	  5075	  5092
ANDCA	 10614	 10637	 10659	 10676	 10692	 10709
ANDCB	 10725	 10749	 10771	 10787	 10802	 10818
ANDCM	 10520	 10544	 10560	 10577	 10598
AOS	   444	   757
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAIE	 10139	 10163	 10803	 10819	 10929	 11004	 11112	 11150
CAM	  6062
CAMA	  5824
CAME	  5847	  5865	  5883	  6198	  6225	  6252	  6279	  6306	  6333	  6360	  6387	  6414	  6441	  6468
	  6495	  6522	  6549	  6576	  6603	  6630	  6657	  6704	  6726	  6748	  6770	  6792	  6814	  6836
	  6858	  6880	  6902	  6924	  6946	  6968	  6990	  7012	  7034	  7056	  7078	  8451	  8471	  8491
	  8511	  8531	  8551	  8571	  8591	  8611	  8631	  8651	  8671	  8691	  8711	  8731	  8751	  8771
	  8791	  8830	  8850	  8870	  8890	  8910	  8930	  8950	  8970	  8990	  9010	  9030	  9050	  9070
	  9090	  9110	  9130	  9150	  9170	  9220	  9245	  9270	  9295	  9320	  9345	  9370	  9395	  9420
	  9445	  9470	  9495	  9520	  9545	  9570	  9595	  9620	  9645	  9695	  9720	  9745	  9770	  9795
	  9820	  9845	  9870	  9895	  9920	  9945	  9970	  9995	 10020	 10045	 10070	 10095	 10120	 10183
	 10201	 10217	 10232	 10253	 10273	 10309	 10325	 10365	 10389	 10459	 10487	 10505	 10521	 10561
	 10638	 10677	 10726	 10772	 10835	 10862	 10882	 10898	 10913	 10945	 10973	 10988	 11019	 11035
	 11075	 11098	 11174	 11190
CAMGE	  6078	  6099
CAML	  5906	  5927	  5952	  5973	  5989	  6009	  6025	  6046
CAMN	  6120	  6144	  6197	  6224	  6251	  6278	  6305	  6332	  6359	  6386	  6413	  6440	  6467	  6494
	  6521	  6548	  6575	  6602	  6629	  6656	  6703	  6725	  6747	  6769	  6791	  6813	  6835	  6857
	  6879	  6901	  6923	  6945	  6967	  6989	  7011	  7033	  7055	  7077	  7113	  7131	  7149	  7167
	  7185	  7203	  7221	  7239	  7257	  7275	  7293	  7311	  7329	  7347	  7365	  7383	  7401	  7419
	  7437	  7455	  7473	  7491	  7509	  7527	  7545	  7563	  7581	  7599	  7617	  7635	  7653	  7671
	  7689	  7707	  7725	  7743	  7778	  7796	  7814	  7832	  7850	  7868	  7886	  7904	  7922	  7940
	  7958	  7976	  7994	  8012	  8030	  8048	  8066	  8084	  8102	  8120	  8138	  8156	  8174	  8192
	  8210	  8228	  8246	  8264	  8282	  8300	  8318	  8336	  8354	  8372	  8390	  8408
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	 11384
EQV	   975	   976	  1005	  1006	  1035	  1036	  1065	  1066	  1095	  1096	  1125	  1126	  1155	  1156
	  1185	  1186	  1215	  1216	  1245	  1246	  1275	  1276	  1305	  1306	  1335	  1336	  1365	  1366
	  1395	  1396	  1425	  1426	  1455	  1456	  1485	  1486	  1515	  1516	  1545	  1546	  1575	  1576
	  1605	  1606	  1635	  1636	  1665	  1666	  1695	  1696	  1725	  1726	  1755	  1756	  1785	  1786
	  1815	  1816	  1845	  1846	  1875	  1876	  1905	  1906	  1935	  1936	  1965	  1966	  1995	  1996
	  2025	  2026	  2103	  2104	  2129	  2130	  2155	  2156	  2181	  2182	  2207	  2208	  2233	  2234
	  2259	  2260	  2285	  2286	  2311	  2312	  2337	  2338	  2363	  2364	  2389	  2390	  2415	  2416
	  2441	  2442	  2467	  2468	  2493	  2494	  2519	  2520	  2545	  2546	  2571	  2572	  2597	  2598     SEQ 0284
	  2623	  2624	  2649	  2650	  2675	  2676	  2701	  2702	  2727	  2728	  2753	  2754	  2779	  2780
	  2805	  2806	  2831	  2832	  2857	  2858	  2883	  2884	  2909	  2910	  2935	  2936	  2961	  2962
	  2987	  2988	  3013	  3014	  3066	  3067	  3091	  3092	  3116	  3117	  3141	  3142	  3166	  3167
	  3191	  3192	  3216	  3217	  3241	  3242	  3266	  3267	  3291	  3292	  3316	  3317	  3341	  3342
	  3366	  3367	  3391	  3392	  3416	  3417	  3441	  3442	  3466	  3467	  3491	  3492	  3516	  3517
	  3541	  3542	  3566	  3567	  3591	  3592	  3616	  3617	  3641	  3642	  3666	  3667	  3691	  3692
	  3716	  3717	  3741	  3742	  3766	  3767	  3791	  3792	  3816	  3817	  3841	  3842	  3866	  3867
	  3891	  3892	  3916	  3917	  4926	  4927	  4943	  4944	  4960	  4961	  4976	  4977	  4993	  4994
	  5010	  5011	  5026	  5027	  5043	  5044	  5060	  5061	  5076	  5077
IFDEF	   356	   407	   408	   409	   410	 11375	 11382
IFE	   972	  1002	  1032	  1062	  1092	  1122	  1152	  1182	  1212	  1242	  1272	  1302	  1332	  1362
	  1392	  1422	  1452	  1482	  1512	  1542	  1572	  1602	  1632	  1662	  1692	  1722	  1752	  1782
	  1812	  1842	  1872	  1902	  1932	  1962	  1992	  2022	  2100	  2126	  2152	  2178	  2204	  2230
	  2256	  2282	  2308	  2334	  2360	  2386	  2412	  2438	  2464	  2490	  2516	  2542	  2568	  2594
	  2620	  2646	  2672	  2698	  2724	  2750	  2776	  2802	  2828	  2854	  2880	  2906	  2932	  2958
	  2984	  3010	  3063	  3088	  3113	  3138	  3163	  3188	  3213	  3238	  3263	  3288	  3313	  3338
	  3363	  3388	  3413	  3438	  3463	  3488	  3513	  3538	  3563	  3588	  3613	  3638	  3663	  3688
	  3713	  3738	  3763	  3788	  3813	  3838	  3863	  3888	  3913	  3966	  3967	  3992	  3993	  4018
	  4019	  4044	  4045	  4070	  4071	  4096	  4097	  4122	  4123	  4148	  4149	  4174	  4175	  4200
	  4201	  4226	  4227	  4252	  4253	  4278	  4279	  4304	  4305	  4330	  4331	  4356	  4357	  4382
	  4383	  4408	  4409	  4462	  4463	  4488	  4489	  4514	  4515	  4540	  4541	  4566	  4567	  4592
	  4593	  4618	  4619	  4644	  4645	  4670	  4671	  4696	  4697	  4722	  4723	  4748	  4749	  4774
	  4775	  4800	  4801	  4826	  4827	  4852	  4853	  4878	  4879	  4904	  4905	  5162	  5180	  5198
	  5216	  5234	  5252	  5270	  5288	  5306	  5324	  5342	  5360	  5378	  5396	  5414	  5432	  5450
	  5468	  5486	  5504	  5522	  5540	  5558	  5576	  5594	  5612	  5630	  5648	  5666	  5684	  5702
	  5720	  5738	  5756	  5774	  5792	  6195	  6222	  6249	  6276	  6303	  6330	  6357	  6384	  6411
	  6438	  6465	  6492	  6519	  6546	  6573	  6600	  6627	  6654	  6701	  6723	  6745	  6767	  6789
	  6811	  6833	  6855	  6877	  6899	  6921	  6943	  6965	  6987	  7009	  7031	  7053	  7075	  7111
	  7129	  7147	  7165	  7183	  7201	  7219	  7237	  7255	  7273	  7291	  7309	  7327	  7345	  7363
	  7381	  7399	  7417	  7435	  7453	  7471	  7489	  7507	  7525	  7543	  7561	  7579	  7597	  7615
	  7633	  7651	  7669	  7687	  7705	  7723	  7741	  7776	  7794	  7812	  7830	  7848	  7866	  7884
	  7902	  7920	  7938	  7956	  7974	  7992	  8010	  8028	  8046	  8064	  8082	  8100	  8118	  8136
	  8154	  8172	  8190	  8208	  8226	  8244	  8262	  8280	  8298	  8316	  8334	  8352	  8370	  8388
	  8406	  8448	  8468	  8488	  8508	  8528	  8548	  8568	  8588	  8608	  8628	  8648	  8668	  8688
	  8708	  8728	  8748	  8768	  8788	  8827	  8847	  8867	  8887	  8907	  8927	  8947	  8967	  8987
	  9007	  9027	  9047	  9067	  9087	  9107	  9127	  9147	  9167	  9216	  9217	  9241	  9242	  9266
	  9267	  9291	  9292	  9316	  9317	  9341	  9342	  9366	  9367	  9391	  9392	  9416	  9417	  9441
	  9442	  9466	  9467	  9491	  9492	  9516	  9517	  9541	  9542	  9566	  9567	  9591	  9592	  9616
	  9617	  9641	  9642	  9691	  9692	  9716	  9717	  9741	  9742	  9766	  9767	  9791	  9792	  9816
	  9817	  9841	  9842	  9866	  9867	  9891	  9892	  9916	  9917	  9941	  9942	  9966	  9967	  9991
	  9992	 10016	 10017	 10041	 10042	 10066	 10067	 10091	 10092	 10116	 10117
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	 11206
IOR	 10432	 10458	 10486	 10504
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	 11200
JSP	   166	   743	   776
JUMPA	   822	   845	   866	   888	   905	   923	   980	  1010	  1040	  1070	  1100	  1130	  1160	  1190
	  1220	  1250	  1280	  1310	  1340	  1370	  1400	  1430	  1460	  1490	  1520	  1550	  1580	  1610
	  1640	  1670	  1700	  1730	  1760	  1790	  1820	  1850	  1880	  1910	  1940	  1970	  2000	  2030
	  2051	  2108	  2134	  2160	  2186	  2212	  2238	  2264	  2290	  2316	  2342	  2368	  2394	  2420
	  2446	  2472	  2498	  2524	  2550	  2576	  2602	  2628	  2654	  2680	  2706	  2732	  2758	  2784     SEQ 0285
	  2810	  2836	  2862	  2888	  2914	  2940	  2966	  2992	  3018	  3071	  3096	  3121	  3146	  3171
	  3196	  3221	  3246	  3271	  3296	  3321	  3346	  3371	  3396	  3421	  3446	  3471	  3496	  3521
	  3546	  3571	  3596	  3621	  3646	  3671	  3696	  3721	  3746	  3771	  3796	  3821	  3846	  3871
	  3896	  3921	  3974	  4000	  4026	  4052	  4078	  4104	  4130	  4156	  4182	  4208	  4234	  4260
	  4286	  4312	  4338	  4364	  4390	  4416	  4470	  4496	  4522	  4548	  4574	  4600	  4626	  4652
	  4678	  4704	  4730	  4756	  4782	  4808	  4834	  4860	  4886	  4912	  4931	  4948	  4965	  4981
	  4998	  5015	  5031	  5048	  5065	  5081	  5096	  5113	  5131	  5168	  5186	  5204	  5222	  5240
	  5258	  5276	  5294	  5312	  5330	  5348	  5366	  5384	  5402	  5420	  5438	  5456	  5474	  5492
	  5510	  5528	  5546	  5564	  5582	  5600	  5618	  5636	  5654	  5672	  5690	  5708	  5726	  5744
	  5762	  5780	  5798	  5814	  5828	  5850	  5868	  5887	  5909	  5932	  5955	  5978	  5992	  6014
	  6029	  6051	  6066	  6082	  6102	  6123	  6148	  6201	  6228	  6255	  6282	  6309	  6336	  6363
	  6390	  6417	  6444	  6471	  6498	  6525	  6552	  6579	  6606	  6633	  6660	  6707	  6729	  6751
	  6773	  6795	  6817	  6839	  6861	  6883	  6905	  6927	  6949	  6971	  6993	  7015	  7037	  7059
	  7081	  7116	  7134	  7152	  7170	  7188	  7206	  7224	  7242	  7260	  7278	  7296	  7314	  7332
	  7350	  7368	  7386	  7404	  7422	  7440	  7458	  7476	  7494	  7512	  7530	  7548	  7566	  7584
	  7602	  7620	  7638	  7656	  7674	  7692	  7710	  7728	  7746	  7781	  7799	  7817	  7835	  7853
	  7871	  7889	  7907	  7925	  7943	  7961	  7979	  7997	  8015	  8033	  8051	  8069	  8087	  8105
	  8123	  8141	  8159	  8177	  8195	  8213	  8231	  8249	  8267	  8285	  8303	  8321	  8339	  8357
	  8375	  8393	  8411	  8454	  8474	  8494	  8514	  8534	  8554	  8574	  8594	  8614	  8634	  8654
	  8674	  8694	  8714	  8734	  8754	  8774	  8794	  8833	  8853	  8873	  8893	  8913	  8933	  8953
	  8973	  8993	  9013	  9033	  9053	  9073	  9093	  9113	  9133	  9153	  9173	  9223	  9248	  9273
	  9298	  9323	  9348	  9373	  9398	  9423	  9448	  9473	  9498	  9523	  9548	  9573	  9598	  9623
	  9648	  9698	  9723	  9748	  9773	  9798	  9823	  9848	  9873	  9898	  9923	  9948	  9973	  9998
	 10023	 10048	 10073	 10098	 10123	 10142	 10166	 10186	 10204	 10220	 10235	 10256	 10276	 10298
	 10312	 10328	 10350	 10368	 10392	 10415	 10436	 10462	 10490	 10508	 10524	 10548	 10564	 10581
	 10602	 10618	 10641	 10663	 10680	 10696	 10713	 10729	 10753	 10775	 10791	 10806	 10822	 10838
	 10865	 10885	 10901	 10916	 10932	 10948	 10976	 10991	 11007	 11022	 11038	 11056	 11078	 11101
	 11115	 11133	 11153	 11177	 11193
LALL	    10
LIST	     9	   318	   356	   489	 11206	 11372
LIT	 11207
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
MOVE	   815	   838	   859	   881	   899	   917	   973	  1003	  1033	  1063	  1093	  1123	  1153	  1183
	  1213	  1243	  1273	  1303	  1333	  1363	  1393	  1423	  1453	  1483	  1513	  1543	  1573	  1603
	  1633	  1663	  1693	  1723	  1753	  1783	  1813	  1843	  1873	  1903	  1933	  1963	  1993	  2023
	  2046	  2101	  2127	  2153	  2179	  2205	  2231	  2257	  2283	  2309	  2335	  2361	  2387	  2413
	  2439	  2465	  2491	  2517	  2543	  2569	  2595	  2621	  2647	  2673	  2699	  2725	  2751	  2777
	  2803	  2829	  2855	  2881	  2907	  2933	  2959	  2985	  3011	  3064	  3089	  3114	  3139	  3164
	  3189	  3214	  3239	  3264	  3289	  3314	  3339	  3364	  3389	  3414	  3439	  3464	  3489	  3514
	  3539	  3564	  3589	  3614	  3639	  3664	  3689	  3714	  3739	  3764	  3789	  3814	  3839	  3864
	  3889	  3914	  3968	  3994	  4020	  4046	  4072	  4098	  4124	  4150	  4176	  4202	  4228	  4254
	  4280	  4306	  4332	  4358	  4384	  4410	  4464	  4490	  4516	  4542	  4568	  4594	  4620	  4646
	  4672	  4698	  4724	  4750	  4776	  4802	  4828	  4854	  4880	  4906	  4924	  4941	  4958	  4974
	  4991	  5008	  5024	  5041	  5058	  5074	  5091	  5107	  5126	  5163	  5181	  5199	  5217	  5235
	  5253	  5271	  5289	  5307	  5325	  5343	  5361	  5379	  5397	  5415	  5433	  5451	  5469	  5487
	  5505	  5523	  5541	  5559	  5577	  5595	  5613	  5631	  5649	  5667	  5685	  5703	  5721	  5739
	  5757	  5775	  5793	  5809	  5823	  5846	  5864	  5882	  5905	  5926	  5951	  5972	  5988	  6061
	  6077	  6196	  6223	  6250	  6277	  6304	  6331	  6358	  6385	  6412	  6439	  6466	  6493	  6520
	  6547	  6574	  6601	  6628	  6655	  6702	  6724	  6746	  6768	  6790	  6812	  6834	  6856	  6878
	  6900	  6922	  6944	  6966	  6988	  7010	  7032	  7054	  7076	  7777	  7795	  7813	  7831	  7849
	  7867	  7885	  7903	  7921	  7939	  7957	  7975	  7993	  8011	  8029	  8047	  8065	  8083	  8101
	  8119	  8137	  8155	  8173	  8191	  8209	  8227	  8245	  8263	  8281	  8299	  8317	  8335	  8353
	  8371	  8389	  8407	 10162	 10251	 10387	 10613	 10636	 10724	 10748	 10833	 10860	 10943	 10971     SEQ 0286
	 11073
MOVEI	 10182	 10199	 10215	 10230	 10271	 10323	 10345	 10363	 10410	 10431	 10457	 10576
MOVM	 11129	 11149	 11173	 11189
MOVN	 11052	 11074	 11097	 11111
MOVS	  8449	  8469	  8489	  8509	  8529	  8549	  8569	  8589	  8609	  8629	  8649	  8669	  8689	  8709
	  8729	  8749	  8769	  8789	  8828	  8848	  8868	  8888	  8908	  8928	  8948	  8968	  8988	  9008
	  9028	  9048	  9068	  9088	  9108	  9128	  9148	  9168	  9218	  9243	  9268	  9293	  9318	  9343
	  9368	  9393	  9418	  9443	  9468	  9493	  9518	  9543	  9568	  9593	  9618	  9643	  9693	  9718
	  9743	  9768	  9793	  9818	  9843	  9868	  9893	  9918	  9943	  9968	  9993	 10018	 10043	 10068
	 10093	 10118
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
ORCA	 10834	 10861	 10881	 10897	 10912	 10928
ORCB	 10944	 10972	 10987	 11003	 11018	 11034
ORCM	 10346	 10364	 10388	 10411
PAGE	   988	  1018	  1048	  1078	  1108	  1138	  1168	  1198	  1228	  1258	  1288	  1318	  1348	  1378
	  1408	  1438	  1468	  1498	  1528	  1558	  1588	  1618	  1648	  1678	  1708	  1738	  1768	  1798
	  1828	  1858	  1888	  1918	  1948	  1978	  2008	  2038	  3024	  4422	  5137	  5804
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
REPEAT	   933	  2065	  3030	  3931	  4427	  5141	  6162	  6673	  7090	  7755	  8424	  8803	  9183	  9658
SETCA	 10200	 10216	 10231	 10252
SETCM	 10272	 10294	 10308
SETO	 10324	 10485	 10503	 10519	 10543	 10559	 10691	 10708	 10786	 10817	 10896	 10927	 11002	 11033
	 11051	 11128
SETOM	   745	   752	   778
SETZ	  6008	  6024	  6045	  6098	  6119	  6143	  7112	  7130	  7148	  7166	  7184	  7202	  7220	  7238
	  7256	  7274	  7292	  7310	  7328	  7346	  7364	  7382	  7400	  7418	  7436	  7454	  7472	  7490
	  7508	  7526	  7544	  7562	  7580	  7598	  7616	  7634	  7652	  7670	  7688	  7706	  7724	  7742
	 10138	 10597	 10658	 10675	 10770	 10801	 10880	 10911	 10986	 11017	 11096	 11148	 11172	 11188
SETZM	   742	   747	   775	   780	 11199
SIXBIT	    77	    78	   574	   575	   583	   584
SKIPA	  5884	  5929	  5975	  6011	  6026	  6048	  6063	  6079	  6145
SKIPE	   748	   762	   768	   977	  1007	  1037	  1067	  1097	  1127	  1157	  1187	  1217	  1247	  1277
	  1307	  1337	  1367	  1397	  1427	  1457	  1487	  1517	  1547	  1577	  1607	  1637	  1667	  1697
	  1727	  1757	  1787	  1817	  1847	  1877	  1907	  1937	  1967	  1997	  2027	  2048	  2105	  2131
	  2157	  2183	  2209	  2235	  2261	  2287	  2313	  2339	  2365	  2391	  2417	  2443	  2469	  2495
	  2521	  2547	  2573	  2599	  2625	  2651	  2677	  2703	  2729	  2755	  2781	  2807	  2833	  2859
	  2885	  2911	  2937	  2963	  2989	  3015	  3068	  3093	  3118	  3143	  3168	  3193	  3218	  3243
	  3268	  3293	  3318	  3343	  3368	  3393	  3418	  3443	  3468	  3493	  3518	  3543	  3568	  3593
	  3618	  3643	  3668	  3693	  3718	  3743	  3768	  3793	  3818	  3843	  3868	  3893	  3918	  3971
	  3997	  4023	  4049	  4075	  4101	  4127	  4153	  4179	  4205	  4231	  4257	  4283	  4309	  4335
	  4361	  4387	  4413	  4467	  4493	  4519	  4545	  4571	  4597	  4623	  4649	  4675	  4701	  4727
	  4753	  4779	  4805	  4831	  4857	  4883	  4909	  4928	  4945	  4962	  4978	  4995	  5012	  5028     SEQ 0287
	  5045	  5062	  5078	  5093	  5128	  5165	  5183	  5201	  5219	  5237	  5255	  5273	  5291	  5309
	  5327	  5345	  5363	  5381	  5399	  5417	  5435	  5453	  5471	  5489	  5507	  5525	  5543	  5561
	  5579	  5597	  5615	  5633	  5651	  5669	  5687	  5705	  5723	  5741	  5759	  5777	  5795	  5811
	 10295	 10412	 10433	 10545	 10578	 10599	 10615	 10660	 10693	 10710	 10750	 10788	 11053	 11130
SKIPL	   783	  5110
SKIPN	   746	   751	   759	   764	   770	   779	   781	   819	   842	   863	   885	   902	   920	 10347
SOS	   758
SUB	  5108	  5127	  5164	  5182	  5200	  5218	  5236	  5254	  5272	  5290	  5308	  5326	  5344	  5362
	  5380	  5398	  5416	  5434	  5452	  5470	  5488	  5506	  5524	  5542	  5560	  5578	  5596	  5614
	  5632	  5650	  5668	  5686	  5704	  5722	  5740	  5758	  5776	  5794	  5810
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	  4918	  5101	  5896	  8417	 10129
	 10191	 11043	 11120	 11201
TITLE	    14
TLNE	   744	   777
TTCALL	   784
VAR	 11380
XLIST	     8	   317	   355	   488	 11205
XWD	   859	  3968	  3969	  3994	  3995	  4020	  4021	  4046	  4047	  4072	  4073	  4098	  4099	  4124
	  4125	  4150	  4151	  4176	  4177	  4202	  4203	  4228	  4229	  4254	  4255	  4280	  4281	  4306
	  4307	  4332	  4333	  4358	  4359	  4384	  4385	  4410	  4411	  4464	  4490	  4516	  4542	  4568
	  4594	  4620	  4646	  4672	  4698	  4724	  4750	  4776	  4802	  4828	  4854	  4880	  4906	  5108
	  5951	  5952	  5972	  5973	  5988	  6046	  6196	  6223	  6250	  6277	  6304	  6331	  6358	  6385
	  6412	  6439	  6466	  6493	  6520	  6547	  6574	  6601	  6628	  6655	  6702	  6724	  6746	  6768
	  6790	  6812	  6834	  6856	  6878	  6900	  6922	  6944	  6966	  6988	  7010	  7032	  7054	  7076
	  8449	  8451	  8469	  8471	  8489	  8491	  8509	  8511	  8529	  8531	  8549	  8551	  8569	  8571
	  8589	  8591	  8609	  8611	  8629	  8631	  8649	  8651	  8669	  8671	  8689	  8691	  8709	  8711
	  8729	  8731	  8749	  8751	  8769	  8771	  8789	  8791	  8828	  8830	  8848	  8850	  8868	  8870
	  8888	  8890	  8908	  8910	  8928	  8930	  8948	  8950	  8968	  8970	  8988	  8990	  9008	  9010
	  9028	  9030	  9048	  9050	  9068	  9070	  9088	  9090	  9108	  9110	  9128	  9130	  9148	  9150
	  9168	  9170	  9218	  9220	  9243	  9245	  9268	  9270	  9293	  9295	  9318	  9320	  9343	  9345
	  9368	  9370	  9393	  9395	  9418	  9420	  9443	  9445	  9468	  9470	  9493	  9495	  9518	  9520
	  9543	  9545	  9568	  9570	  9593	  9595	  9618	  9620	  9643	  9645	  9693	  9695	  9718	  9720
	  9743	  9745	  9768	  9770	  9793	  9795	  9818	  9820	  9843	  9845	  9868	  9870	  9893	  9895
	  9918	  9920	  9943	  9945	  9968	  9970	  9993	  9995	 10018	 10020	 10043	 10045	 10068	 10070
	 10093	 10095	 10118	 10120	 10520	 10613	 10636	 10638	 10724	 10726	 10748	 10833	 10835	 10860
	 10862	 10943	 10945	 10971	 10973	 11073	 11075	 11173	 11174	 11189	 11190

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0288
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*030662  ADD 	0,035331

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*030663  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*030665  JUMPA	0,030666

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432     E= 000000 030666 
----------

*030666  MOVE 	0,035331

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*030667  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 000000 000000 
FINAL
C(AC)= 123456 765432 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*030670  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*030672  JUMPA	0,030673

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432     E= 000000 030673 
----------

*030673  MOVE 	0,035332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 000000 
FINAL
C(AC)= 123456 000000 
----------

*030674  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 000000 000000 
FINAL
C(AC)= 123456 000000 
----------

*030675  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
FINAL
C(AC)= 123456 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*030677  JUMPA	0,030700

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000     E= 000000 030700 
----------

*030700  MOVE 	0,035333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*030701  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 000000 000000 
FINAL
C(AC)= 000000 123456 
----------

*030702  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*030704  JUMPA	0,030705

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 030705 
----------

*030705  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*030706  ADD 	0,035332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 000000 
FINAL
C(AC)= 123456 000000 
----------

*030707  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
FINAL
C(AC)= 123456 000000 
----------

*030711  JUMPA	0,030712

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000     E= 000000 030712 
----------

*030712  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030713  ADD 	0,035333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*030714  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*030716  JUMPA	0,030717

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 030717 
----------

*030717  MOVE 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*030720  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001 
----------

*030721  EQV 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*030722  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030723  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030725  JUMPA	0,030726

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030726 
----------

*030726  MOVE 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*030727  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*030730  EQV 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 777777 777777 
----------

*030731  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030732  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030734  JUMPA	0,030735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030735 
----------

*030735  MOVE 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*030736  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000004 
----------

*030737  EQV 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 777777 777777 
----------

*030740  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030741  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030743  JUMPA	0,030744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030744 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*030744  MOVE 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*030745  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000010 
----------

*030746  EQV 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 777777 777777 
----------

*030747  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030750  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*030752  JUMPA	0,030753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030753 
----------

*030753  MOVE 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*030754  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000020 
----------

*030755  EQV 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 777777 777777 
----------

*030756  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*030757  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030761  JUMPA	0,030762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030762 
----------

*030762  MOVE 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*030763  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000040 
----------

*030764  EQV 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*030765  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030766  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030770  JUMPA	0,030771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030771 
----------

*030771  MOVE 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*030772  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*030773  EQV 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 777777 777777 
----------

*030774  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030775  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030777  JUMPA	0,031000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031000 
----------

*031000  MOVE 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*031001  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000200 
----------

*031002  EQV 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 777777 777777 
----------

*031003  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031004  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031006  JUMPA	0,031007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031007 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*031007  MOVE 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031010  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000400 
----------

*031011  EQV 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 777777 777777 
----------

*031012  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031013  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*031015  JUMPA	0,031016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031016 
----------

*031016  MOVE 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031017  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 001000 
----------

*031020  EQV 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 777777 777777 
----------

*031021  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*031022  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031024  JUMPA	0,031025

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031025 
----------

*031025  MOVE 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031026  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 002000 
----------

*031027  EQV 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*031030  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031031  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031033  JUMPA	0,031034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031034 
----------

*031034  MOVE 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*031035  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*031036  EQV 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 777777 777777 
----------

*031037  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031040  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031042  JUMPA	0,031043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031043 
----------

*031043  MOVE 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*031044  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 010000 
----------

*031045  EQV 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 777777 777777 
----------

*031046  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031047  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031051  JUMPA	0,031052

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031052 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*031052  MOVE 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031053  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 020000 
----------

*031054  EQV 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 777777 777777 
----------

*031055  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031056  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*031060  JUMPA	0,031061

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031061 
----------

*031061  MOVE 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031062  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 040000 
----------

*031063  EQV 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 777777 777777 
----------

*031064  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*031065  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031067  JUMPA	0,031070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031070 
----------

*031070  MOVE 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031071  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 100000 
----------

*031072  EQV 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*031073  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031074  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031076  JUMPA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031077 
----------

*031077  MOVE 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*031100  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*031101  EQV 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 777777 777777 
----------

*031102  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031103  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031105  JUMPA	0,031106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031106 
----------

*031106  MOVE 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*031107  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 400000 
----------

*031110  EQV 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 777777 777777 
----------

*031111  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031112  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031114  JUMPA	0,031115

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031115 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*031115  MOVE 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031116  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000000 
----------

*031117  EQV 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 777777 777777 
----------

*031120  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031121  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*031123  JUMPA	0,031124

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031124 
----------

*031124  MOVE 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*031125  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000002 000000 
----------

*031126  EQV 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 777777 777777 
----------

*031127  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*031130  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031132  JUMPA	0,031133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031133 
----------

*031133  MOVE 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*031134  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000004 000000 
----------

*031135  EQV 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*031136  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031137  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031141  JUMPA	0,031142

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031142 
----------

*031142  MOVE 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*031143  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*031144  EQV 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 777777 777777 
----------

*031145  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031146  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031150  JUMPA	0,031151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031151 
----------

*031151  MOVE 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*031152  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000020 000000 
----------

*031153  EQV 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 777777 777777 
----------

*031154  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031155  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031157  JUMPA	0,031160

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031160 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*031160  MOVE 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*031161  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000040 000000 
----------

*031162  EQV 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 777777 777777 
----------

*031163  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031164  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*031166  JUMPA	0,031167

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031167 
----------

*031167  MOVE 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*031170  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000100 000000 
----------

*031171  EQV 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 777777 777777 
----------

*031172  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*031173  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031175  JUMPA	0,031176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031176 
----------

*031176  MOVE 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*031177  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000200 000000 
----------

*031200  EQV 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*031201  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031202  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031204  JUMPA	0,031205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031205 
----------

*031205  MOVE 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031206  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*031207  EQV 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 777777 777777 
----------

*031210  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031211  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031213  JUMPA	0,031214

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031214 
----------

*031214  MOVE 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*031215  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 001000 000000 
----------

*031216  EQV 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031217  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031220  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031222  JUMPA	0,031223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031223 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*031223  MOVE 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031224  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031225  EQV 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031226  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031227  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*031231  JUMPA	0,031232

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031232 
----------

*031232  MOVE 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031233  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031234  EQV 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031235  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*031236  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031240  JUMPA	0,031241

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031241 
----------

*031241  MOVE 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031242  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031243  EQV 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*031244  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031245  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031247  JUMPA	0,031250

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031250 
----------

*031250  MOVE 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*031251  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*031252  EQV 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031253  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031254  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031256  JUMPA	0,031257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031257 
----------

*031257  MOVE 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*031260  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 040000 000000 
----------

*031261  EQV 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031262  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031263  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031265  JUMPA	0,031266

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031266 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*031266  MOVE 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031267  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031270  EQV 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031271  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031272  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*031274  JUMPA	0,031275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031275 
----------

*031275  MOVE 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031276  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031277  EQV 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031300  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*031301  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031303  JUMPA	0,031304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031304 
----------

*031304  MOVE 	0,035377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031305  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031306  EQV 	0,035377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*031307  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031310  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031312  JUMPA	0,031313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031313 
----------

*031313  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031314  ADD 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*031315  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031317  JUMPA	0,031320

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031320 
----------

*031320  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031321  ADD 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031322  EQV 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0340

*031323  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031324  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031326  JUMPA	0,031327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031327 
----------

*031327  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031330  ADD 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0341

*031331  EQV 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 777777 777777 
----------

*031332  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031333  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031335  JUMPA	0,031336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031336 
----------

*031336  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0342

*031337  ADD 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031340  EQV 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 777777 777777 
----------

*031341  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031342  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031344  JUMPA	0,031345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031345 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0343

*031345  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031346  ADD 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031347  EQV 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 777777 777777 
----------

*031350  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031351  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0344

*031353  JUMPA	0,031354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031354 
----------

*031354  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031355  ADD 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031356  EQV 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 777777 777777 
----------

*031357  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0345

*031360  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031362  JUMPA	0,031363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031363 
----------

*031363  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031364  ADD 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031365  EQV 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0346

*031366  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031367  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031371  JUMPA	0,031372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031372 
----------

*031372  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031373  ADD 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0347

*031374  EQV 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 777777 777777 
----------

*031375  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031376  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031400  JUMPA	0,031401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031401 
----------

*031401  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0348

*031402  ADD 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031403  EQV 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 777777 777777 
----------

*031404  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031405  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031407  JUMPA	0,031410

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031410 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0349

*031410  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031411  ADD 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031412  EQV 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 777777 777777 
----------

*031413  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031414  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0350

*031416  JUMPA	0,031417

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031417 
----------

*031417  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031420  ADD 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031421  EQV 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 777777 777777 
----------

*031422  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0351

*031423  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031425  JUMPA	0,031426

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031426 
----------

*031426  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031427  ADD 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031430  EQV 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0352

*031431  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031432  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031434  JUMPA	0,031435

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031435 
----------

*031435  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031436  ADD 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0353

*031437  EQV 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 777777 777777 
----------

*031440  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031441  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031443  JUMPA	0,031444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031444 
----------

*031444  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0354

*031445  ADD 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*031446  EQV 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 777777 777777 
----------

*031447  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031450  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031452  JUMPA	0,031453

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031453 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0355

*031453  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031454  ADD 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031455  EQV 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 777777 777777 
----------

*031456  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031457  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0356

*031461  JUMPA	0,031462

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031462 
----------

*031462  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031463  ADD 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031464  EQV 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 777777 777777 
----------

*031465  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0357

*031466  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031470  JUMPA	0,031471

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031471 
----------

*031471  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031472  ADD 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031473  EQV 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0358

*031474  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031475  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031477  JUMPA	0,031500

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031500 
----------

*031500  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031501  ADD 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0359

*031502  EQV 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 777777 777777 
----------

*031503  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031504  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031506  JUMPA	0,031507

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031507 
----------

*031507  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0360

*031510  ADD 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*031511  EQV 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 777777 777777 
----------

*031512  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031513  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031515  JUMPA	0,031516

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031516 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0361

*031516  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031517  ADD 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031520  EQV 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 777777 777777 
----------

*031521  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031522  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0362

*031524  JUMPA	0,031525

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031525 
----------

*031525  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031526  ADD 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*031527  EQV 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 777777 777777 
----------

*031530  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0363

*031531  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031533  JUMPA	0,031534

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031534 
----------

*031534  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031535  ADD 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*031536  EQV 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0364

*031537  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031540  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031542  JUMPA	0,031543

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031543 
----------

*031543  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031544  ADD 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0365

*031545  EQV 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 777777 777777 
----------

*031546  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031547  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031551  JUMPA	0,031552

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031552 
----------

*031552  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0366

*031553  ADD 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*031554  EQV 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 777777 777777 
----------

*031555  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031556  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031560  JUMPA	0,031561

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031561 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0367

*031561  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031562  ADD 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*031563  EQV 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 777777 777777 
----------

*031564  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031565  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0368

*031567  JUMPA	0,031570

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031570 
----------

*031570  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031571  ADD 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*031572  EQV 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 777777 777777 
----------

*031573  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0369

*031574  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031576  JUMPA	0,031577

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031577 
----------

*031577  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031600  ADD 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*031601  EQV 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0370

*031602  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031603  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031605  JUMPA	0,031606

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031606 
----------

*031606  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031607  ADD 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0371

*031610  EQV 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 777777 777777 
----------

*031611  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031612  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031614  JUMPA	0,031615

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031615 
----------

*031615  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0372

*031616  ADD 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*031617  EQV 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031620  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031621  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031623  JUMPA	0,031624

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031624 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0373

*031624  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031625  ADD 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031626  EQV 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031627  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031630  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0374

*031632  JUMPA	0,031633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031633 
----------

*031633  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031634  ADD 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031635  EQV 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031636  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0375

*031637  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031641  JUMPA	0,031642

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031642 
----------

*031642  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031643  ADD 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031644  EQV 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0376

*031645  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031646  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031650  JUMPA	0,031651

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031651 
----------

*031651  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031652  ADD 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0377

*031653  EQV 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031654  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031655  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031657  JUMPA	0,031660

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031660 
----------

*031660  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0378

*031661  ADD 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*031662  EQV 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031663  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031664  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031666  JUMPA	0,031667

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031667 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0379

*031667  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031670  ADD 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031671  EQV 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031672  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031673  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0380

*031675  JUMPA	0,031676

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031676 
----------

*031676  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031677  ADD 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031700  EQV 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031701  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0381

*031702  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031704  JUMPA	0,031705

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031705 
----------

*031705  MOVE 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031706  ADD 	0,035377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031707  EQV 	0,035377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0382

*031710  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031711  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031713  JUMPA	0,031714

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031714 
----------

*031714  MOVE 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031715  ADD 	0,035334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0383

*031716  EQV 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 777777 777777 
----------

*031717  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031720  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031722  JUMPA	0,031723

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031723 
----------

*031723  MOVE 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0384

*031724  ADD 	0,035335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000004 
----------

*031725  EQV 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 777777 777777 
----------

*031726  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031727  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031731  JUMPA	0,031732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031732 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0385

*031732  MOVE 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031733  ADD 	0,035336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000010 
----------

*031734  EQV 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 777777 777777 
----------

*031735  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031736  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0386

*031740  JUMPA	0,031741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031741 
----------

*031741  MOVE 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031742  ADD 	0,035337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000020 
----------

*031743  EQV 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 777777 777777 
----------

*031744  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0387

*031745  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031747  JUMPA	0,031750

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031750 
----------

*031750  MOVE 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031751  ADD 	0,035340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000040 
----------

*031752  EQV 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0388

*031753  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031754  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031756  JUMPA	0,031757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031757 
----------

*031757  MOVE 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031760  ADD 	0,035341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0389

*031761  EQV 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 777777 777777 
----------

*031762  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031763  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031765  JUMPA	0,031766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031766 
----------

*031766  MOVE 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0390

*031767  ADD 	0,035342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000200 
----------

*031770  EQV 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 777777 777777 
----------

*031771  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031772  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031774  JUMPA	0,031775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0391

*031775  MOVE 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031776  ADD 	0,035343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000400 
----------

*031777  EQV 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 777777 777777 
----------

*032000  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032001  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0392

*032003  JUMPA	0,032004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032004 
----------

*032004  MOVE 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*032005  ADD 	0,035344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 001000 
----------

*032006  EQV 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 777777 777777 
----------

*032007  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0393

*032010  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032012  JUMPA	0,032013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032013 
----------

*032013  MOVE 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032014  ADD 	0,035345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 002000 
----------

*032015  EQV 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0394

*032016  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032017  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032021  JUMPA	0,032022

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032022 
----------

*032022  MOVE 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032023  ADD 	0,035346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0395

*032024  EQV 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 777777 777777 
----------

*032025  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032026  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032030  JUMPA	0,032031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032031 
----------

*032031  MOVE 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0396

*032032  ADD 	0,035347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 010000 
----------

*032033  EQV 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 777777 777777 
----------

*032034  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032035  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032037  JUMPA	0,032040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0397

*032040  MOVE 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*032041  ADD 	0,035350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 020000 
----------

*032042  EQV 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 777777 777777 
----------

*032043  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032044  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0398

*032046  JUMPA	0,032047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032047 
----------

*032047  MOVE 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*032050  ADD 	0,035351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 040000 
----------

*032051  EQV 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 777777 777777 
----------

*032052  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0399

*032053  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032055  JUMPA	0,032056

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032056 
----------

*032056  MOVE 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032057  ADD 	0,035352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 100000 
----------

*032060  EQV 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0400

*032061  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032062  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032064  JUMPA	0,032065

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032065 
----------

*032065  MOVE 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*032066  ADD 	0,035353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0401

*032067  EQV 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 777777 777777 
----------

*032070  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032071  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032073  JUMPA	0,032074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032074 
----------

*032074  MOVE 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0402

*032075  ADD 	0,035354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 400000 
----------

*032076  EQV 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 777777 777777 
----------

*032077  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032100  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032102  JUMPA	0,032103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032103 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0403

*032103  MOVE 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*032104  ADD 	0,035355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000001 000000 
----------

*032105  EQV 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 777777 777777 
----------

*032106  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032107  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0404

*032111  JUMPA	0,032112

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032112 
----------

*032112  MOVE 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*032113  ADD 	0,035356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000002 000000 
----------

*032114  EQV 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 777777 777777 
----------

*032115  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0405

*032116  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032120  JUMPA	0,032121

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032121 
----------

*032121  MOVE 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*032122  ADD 	0,035357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000004 000000 
----------

*032123  EQV 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0406

*032124  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032125  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032127  JUMPA	0,032130

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032130 
----------

*032130  MOVE 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*032131  ADD 	0,035360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0407

*032132  EQV 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 777777 777777 
----------

*032133  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032134  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032136  JUMPA	0,032137

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032137 
----------

*032137  MOVE 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0408

*032140  ADD 	0,035361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000020 000000 
----------

*032141  EQV 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 777777 777777 
----------

*032142  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032143  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032145  JUMPA	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032146 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0409

*032146  MOVE 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*032147  ADD 	0,035362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000040 000000 
----------

*032150  EQV 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 777777 777777 
----------

*032151  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032152  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0410

*032154  JUMPA	0,032155

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032155 
----------

*032155  MOVE 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*032156  ADD 	0,035363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000100 000000 
----------

*032157  EQV 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 777777 777777 
----------

*032160  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0411

*032161  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032163  JUMPA	0,032164

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032164 
----------

*032164  MOVE 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*032165  ADD 	0,035364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000200 000000 
----------

*032166  EQV 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0412

*032167  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032170  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032172  JUMPA	0,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032173 
----------

*032173  MOVE 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*032174  ADD 	0,035365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0413

*032175  EQV 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 777777 777777 
----------

*032176  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032177  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032201  JUMPA	0,032202

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032202 
----------

*032202  MOVE 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0414

*032203  ADD 	0,035366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 001000 000000 
----------

*032204  EQV 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032205  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032206  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032210  JUMPA	0,032211

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032211 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0415

*032211  MOVE 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*032212  ADD 	0,035367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 002000 000000 
----------

*032213  EQV 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032214  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032215  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0416

*032217  JUMPA	0,032220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032220 
----------

*032220  MOVE 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*032221  ADD 	0,035370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032222  EQV 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032223  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0417

*032224  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032226  JUMPA	0,032227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032227 
----------

*032227  MOVE 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032230  ADD 	0,035371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032231  EQV 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0418

*032232  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032233  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032235  JUMPA	0,032236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032236 
----------

*032236  MOVE 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032237  ADD 	0,035372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0419

*032240  EQV 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032241  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032242  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032244  JUMPA	0,032245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032245 
----------

*032245  MOVE 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0420

*032246  ADD 	0,035373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 040000 000000 
----------

*032247  EQV 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032250  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032251  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032253  JUMPA	0,032254

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032254 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0421

*032254  MOVE 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*032255  ADD 	0,035374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 100000 000000 
----------

*032256  EQV 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032257  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032260  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0422

*032262  JUMPA	0,032263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032263 
----------

*032263  MOVE 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*032264  ADD 	0,035375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032265  EQV 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032266  EQV 	0,035330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0423

*032267  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032271  JUMPA	0,032272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032272 
----------

*032272  MOVE 	0,035376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032273  ADD 	0,035376

FLAGS - INT/FINAL   000000 500200 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 400000 000000 
----------

*032274  EQV 	0,035377

FLAGS - INT/FINAL   500200 500200 
INITIAL
C(AC)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0424

*032274  JFCL	0,000000

FLAGS - INT/FINAL   500200 500000 
INITIAL
    E= 000000 000000 
----------

*032274  EQV 	0,035377

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032275  EQV 	0,035330

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032276  SKIPE	0,000000

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032300  JUMPA	0,032301

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 000000 000000     E= 000000 032301 
----------

*032301  MOVE 	0,035377

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0425

*032302  ADD 	0,035377

FLAGS - INT/FINAL   500000 700200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032303  SKIPE	0,000000

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032303  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

*032303  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032305  JUMPA	0,032306

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032306 
----------

*032306  MOVE 	0,035400

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 600000 000000 
FINAL
C(AC)= 600000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0426

*032307  ADD 	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 600000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032310  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032312  JUMPA	0,032313

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032313 
----------

*032313  MOVE 	0,035401

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 700000 000000 
FINAL
C(AC)= 700000 000000 
----------

*032314  ADD 	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 700000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0427

*032315  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032317  JUMPA	0,032320

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032320 
----------

*032320  MOVE 	0,035402

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 740000 000000 
FINAL
C(AC)= 740000 000000 
----------

*032321  ADD 	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 740000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032322  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0428

*032324  JUMPA	0,032325

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032325 
----------

*032325  MOVE 	0,035403

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 760000 000000 
FINAL
C(AC)= 760000 000000 
----------

*032326  ADD 	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 760000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032327  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032331  JUMPA	0,032332

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032332 
----------

*032332  MOVE 	0,035404

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 770000 000000 
FINAL
C(AC)= 770000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0429

*032333  ADD 	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 770000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032334  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032336  JUMPA	0,032337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032337 
----------

*032337  MOVE 	0,035405

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 774000 000000 
FINAL
C(AC)= 774000 000000 
----------

*032340  ADD 	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 774000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0430

*032341  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032343  JUMPA	0,032344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032344 
----------

*032344  MOVE 	0,035406

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 776000 000000 
FINAL
C(AC)= 776000 000000 
----------

*032345  ADD 	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032346  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0431

*032350  JUMPA	0,032351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032351 
----------

*032351  MOVE 	0,035407

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777000 000000 
FINAL
C(AC)= 777000 000000 
----------

*032352  ADD 	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032353  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032355  JUMPA	0,032356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032356 
----------

*032356  MOVE 	0,035410

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777400 000000 
FINAL
C(AC)= 777400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0432

*032357  ADD 	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000000 000000 
----------

*032360  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032362  JUMPA	0,032363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032363 
----------

*032363  MOVE 	0,035411

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777600 000000 
FINAL
C(AC)= 777600 000000 
----------

*032364  ADD 	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777600 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0433

*032365  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032367  JUMPA	0,032370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032370 
----------

*032370  MOVE 	0,035412

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777700 000000 
FINAL
C(AC)= 777700 000000 
----------

*032371  ADD 	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777700 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000000 000000 
----------

*032372  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0434

*032374  JUMPA	0,032375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032375 
----------

*032375  MOVE 	0,035413

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777740 000000 
FINAL
C(AC)= 777740 000000 
----------

*032376  ADD 	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777740 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000000 000000 
----------

*032377  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032401  JUMPA	0,032402

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032402 
----------

*032402  MOVE 	0,035414

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777760 000000 
FINAL
C(AC)= 777760 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0435

*032403  ADD 	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777760 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000000 000000 
----------

*032404  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032406  JUMPA	0,032407

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032407 
----------

*032407  MOVE 	0,035415

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777770 000000 
FINAL
C(AC)= 777770 000000 
----------

*032410  ADD 	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777770 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0436

*032411  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032413  JUMPA	0,032414

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032414 
----------

*032414  MOVE 	0,035416

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777774 000000 
FINAL
C(AC)= 777774 000000 
----------

*032415  ADD 	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777774 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000000 000000 
----------

*032416  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0437

*032420  JUMPA	0,032421

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032421 
----------

*032421  MOVE 	0,035417

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777776 000000 
FINAL
C(AC)= 777776 000000 
----------

*032422  ADD 	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000000 000000 
----------

*032423  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032425  JUMPA	0,032426

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032426 
----------

*032426  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0438

*032427  ADD 	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000000 000000 
----------

*032430  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032432  JUMPA	0,032433

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032433 
----------

*032433  MOVE 	0,035421

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 400000 
FINAL
C(AC)= 777777 400000 
----------

*032434  ADD 	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0439

*032435  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032437  JUMPA	0,032440

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032440 
----------

*032440  MOVE 	0,035422

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 600000 
FINAL
C(AC)= 777777 600000 
----------

*032441  ADD 	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 600000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 000000 
----------

*032442  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0440

*032444  JUMPA	0,032445

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032445 
----------

*032445  MOVE 	0,035423

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 700000 
FINAL
C(AC)= 777777 700000 
----------

*032446  ADD 	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 700000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 000000 
----------

*032447  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032451  JUMPA	0,032452

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032452 
----------

*032452  MOVE 	0,035424

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 740000 
FINAL
C(AC)= 777777 740000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0441

*032453  ADD 	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 740000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 000000 
----------

*032454  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032456  JUMPA	0,032457

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032457 
----------

*032457  MOVE 	0,035425

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 760000 
FINAL
C(AC)= 777777 760000 
----------

*032460  ADD 	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 760000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0442

*032461  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032463  JUMPA	0,032464

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032464 
----------

*032464  MOVE 	0,035426

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 770000 
FINAL
C(AC)= 777777 770000 
----------

*032465  ADD 	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 770000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 000000 
----------

*032466  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0443

*032470  JUMPA	0,032471

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032471 
----------

*032471  MOVE 	0,035427

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 774000 
FINAL
C(AC)= 777777 774000 
----------

*032472  ADD 	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 774000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 000000 
----------

*032473  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032475  JUMPA	0,032476

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032476 
----------

*032476  MOVE 	0,035430

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 776000 
FINAL
C(AC)= 777777 776000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0444

*032477  ADD 	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 000000 
----------

*032500  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032502  JUMPA	0,032503

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032503 
----------

*032503  MOVE 	0,035431

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777000 
FINAL
C(AC)= 777777 777000 
----------

*032504  ADD 	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0445

*032505  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032507  JUMPA	0,032510

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032510 
----------

*032510  MOVE 	0,035432

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777400 
FINAL
C(AC)= 777777 777400 
----------

*032511  ADD 	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000000 
----------

*032512  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0446

*032514  JUMPA	0,032515

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032515 
----------

*032515  MOVE 	0,035433

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777600 
FINAL
C(AC)= 777777 777600 
----------

*032516  ADD 	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777600  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000000 
----------

*032517  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032521  JUMPA	0,032522

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032522 
----------

*032522  MOVE 	0,035434

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777700 
FINAL
C(AC)= 777777 777700 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0447

*032523  ADD 	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777700  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000000 
----------

*032524  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032526  JUMPA	0,032527

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032527 
----------

*032527  MOVE 	0,035435

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777740 
FINAL
C(AC)= 777777 777740 
----------

*032530  ADD 	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777740  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0448

*032531  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032533  JUMPA	0,032534

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032534 
----------

*032534  MOVE 	0,035436

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777760 
FINAL
C(AC)= 777777 777760 
----------

*032535  ADD 	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777760  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000000 
----------

*032536  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0449

*032540  JUMPA	0,032541

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032541 
----------

*032541  MOVE 	0,035437

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777770 
FINAL
C(AC)= 777777 777770 
----------

*032542  ADD 	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777770  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000000 
----------

*032543  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032545  JUMPA	0,032546

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032546 
----------

*032546  MOVE 	0,035440

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777774 
FINAL
C(AC)= 777777 777774 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0450

*032547  ADD 	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777774  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000000 
----------

*032550  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032552  JUMPA	0,032553

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032553 
----------

*032553  MOVE 	0,035441

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*032554  ADD 	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0451

*032555  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032557  JUMPA	0,032560

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032560 
----------

*032560  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032561  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032562  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0452

*032564  JUMPA	0,032565

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032565 
----------

*032565  MOVE 	0,035443

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777773 
FINAL
C(AC)= 777777 777773 
----------

*032566  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777773  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777774 
----------

*032567  EQV 	0,035440

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777774  C(E)= 777777 777774 
FINAL
C(AC)= 777777 777777 
----------

*032570  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0453

*032571  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032573  JUMPA	0,032574

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032574 
----------

*032574  MOVE 	0,035444

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777677 
FINAL
C(AC)= 777777 777677 
----------

*032575  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777677  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777700 
----------

*032576  EQV 	0,035434

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777700  C(E)= 777777 777700 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0454

*032577  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032600  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032602  JUMPA	0,032603

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032603 
----------

*032603  MOVE 	0,035445

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 775777 
FINAL
C(AC)= 777777 775777 
----------

*032604  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 775777  C(E)= 000000 000001 
FINAL
C(AC)= 777777 776000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0455

*032605  EQV 	0,035430

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776000  C(E)= 777777 776000 
FINAL
C(AC)= 777777 777777 
----------

*032606  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032607  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032611  JUMPA	0,032612

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032612 
----------

*032612  MOVE 	0,035446

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 737777 
FINAL
C(AC)= 777777 737777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0456

*032613  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 737777  C(E)= 000000 000001 
FINAL
C(AC)= 777777 740000 
----------

*032614  EQV 	0,035424

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 740000  C(E)= 777777 740000 
FINAL
C(AC)= 777777 777777 
----------

*032615  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032616  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032620  JUMPA	0,032621

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032621 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0457

*032621  MOVE 	0,035447

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 377777 
FINAL
C(AC)= 777777 377777 
----------

*032622  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 377777  C(E)= 000000 000001 
FINAL
C(AC)= 777777 400000 
----------

*032623  EQV 	0,035421

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 400000  C(E)= 777777 400000 
FINAL
C(AC)= 777777 777777 
----------

*032624  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032625  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0458

*032627  JUMPA	0,032630

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032630 
----------

*032630  MOVE 	0,035450

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777767 777777 
FINAL
C(AC)= 777767 777777 
----------

*032631  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777777  C(E)= 000000 000001 
FINAL
C(AC)= 777770 000000 
----------

*032632  EQV 	0,035415

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777770 000000  C(E)= 777770 000000 
FINAL
C(AC)= 777777 777777 
----------

*032633  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0459

*032634  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032636  JUMPA	0,032637

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032637 
----------

*032637  MOVE 	0,035451

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777577 777777 
FINAL
C(AC)= 777577 777777 
----------

*032640  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777777  C(E)= 000000 000001 
FINAL
C(AC)= 777600 000000 
----------

*032641  EQV 	0,035411

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777600 000000  C(E)= 777600 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0460

*032642  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032643  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032645  JUMPA	0,032646

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032646 
----------

*032646  MOVE 	0,035452

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 773777 777777 
FINAL
C(AC)= 773777 777777 
----------

*032647  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 774000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0461

*032650  EQV 	0,035405

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 774000 000000  C(E)= 774000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032651  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032652  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032654  JUMPA	0,032655

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032655 
----------

*032655  MOVE 	0,035453

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 677777 777777 
FINAL
C(AC)= 677777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0462

*032656  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 700000 000000 
----------

*032657  EQV 	0,035401

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 700000 000000  C(E)= 700000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032660  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032661  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032663  JUMPA	0,032664

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032664 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0463

*032664  MOVE 	0,035454

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 577777 777777 
FINAL
C(AC)= 577777 777777 
----------

*032665  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 600000 000000 
----------

*032666  EQV 	0,035400

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 600000 000000  C(E)= 600000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032667  EQV 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032670  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0464

*032672  JUMPA	0,032673

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032673 
----------

*032673  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032674  ADD 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032675  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032677  JUMPA	0,032700

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032700 
----------

*032700  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 178
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0465

*032701  SUB 	0,035455

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000001 
----------

*032702  SKIPL	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000001  C(E)= 777777 000001 
FINAL
C(AC)= 777777 000001 
----------

*032704  JUMPA	0,032705

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000001     E= 000000 032705 
----------

*032705  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032706  SUB 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 179
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0466

*032707  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032711  JUMPA	0,032712

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032712 
----------

*032712  MOVE 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032713  SUB 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032714  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 180
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0467

*032716  JUMPA	0,032717

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032717 
----------

*032717  MOVE 	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032720  SUB 	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000000 
----------

*032721  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032723  JUMPA	0,032724

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032724 
----------

*032724  MOVE 	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 181
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0468

*032725  SUB 	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000000 
----------

*032726  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032730  JUMPA	0,032731

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032731 
----------

*032731  MOVE 	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032732  SUB 	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 182
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0469

*032733  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032735  JUMPA	0,032736

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032736 
----------

*032736  MOVE 	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*032737  SUB 	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000000 
----------

*032740  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 183
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0470

*032742  JUMPA	0,032743

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032743 
----------

*032743  MOVE 	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*032744  SUB 	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000000 
----------

*032745  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032747  JUMPA	0,032750

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032750 
----------

*032750  MOVE 	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 184
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0471

*032751  SUB 	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000000 
----------

*032752  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032754  JUMPA	0,032755

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032755 
----------

*032755  MOVE 	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*032756  SUB 	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 185
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0472

*032757  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032761  JUMPA	0,032762

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032762 
----------

*032762  MOVE 	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*032763  SUB 	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000000 
----------

*032764  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 186
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0473

*032766  JUMPA	0,032767

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032767 
----------

*032767  MOVE 	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032770  SUB 	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 000000 
----------

*032771  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032773  JUMPA	0,032774

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 032774 
----------

*032774  MOVE 	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 187
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0474

*032775  SUB 	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 000000 
----------

*032776  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033000  JUMPA	0,033001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033001 
----------

*033001  MOVE 	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033002  SUB 	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 188
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0475

*033003  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033005  JUMPA	0,033006

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033006 
----------

*033006  MOVE 	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033007  SUB 	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 000000 
----------

*033010  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 189
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0476

*033012  JUMPA	0,033013

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033013 
----------

*033013  MOVE 	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033014  SUB 	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 000000 
----------

*033015  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033017  JUMPA	0,033020

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033020 
----------

*033020  MOVE 	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 190
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0477

*033021  SUB 	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 000000 
----------

*033022  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033024  JUMPA	0,033025

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033025 
----------

*033025  MOVE 	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033026  SUB 	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 191
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0478

*033027  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033031  JUMPA	0,033032

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033032 
----------

*033032  MOVE 	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*033033  SUB 	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 000000 
----------

*033034  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 192
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0479

*033036  JUMPA	0,033037

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033037 
----------

*033037  MOVE 	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033040  SUB 	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 000000 
----------

*033041  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033043  JUMPA	0,033044

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033044 
----------

*033044  MOVE 	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 193
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0480

*033045  SUB 	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000000 000000 
----------

*033046  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033050  JUMPA	0,033051

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033051 
----------

*033051  MOVE 	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*033052  SUB 	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 194
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0481

*033053  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033055  JUMPA	0,033056

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033056 
----------

*033056  MOVE 	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*033057  SUB 	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000000 000000 
----------

*033060  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 195
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0482

*033062  JUMPA	0,033063

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033063 
----------

*033063  MOVE 	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033064  SUB 	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000000 000000 
----------

*033065  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033067  JUMPA	0,033070

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033070 
----------

*033070  MOVE 	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 196
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0483

*033071  SUB 	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000000 000000 
----------

*033072  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033074  JUMPA	0,033075

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033075 
----------

*033075  MOVE 	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033076  SUB 	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 197
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0484

*033077  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033101  JUMPA	0,033102

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033102 
----------

*033102  MOVE 	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*033103  SUB 	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000000 000000 
----------

*033104  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 198
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0485

*033106  JUMPA	0,033107

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033107 
----------

*033107  MOVE 	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*033110  SUB 	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000000 000000 
----------

*033111  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033113  JUMPA	0,033114

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033114 
----------

*033114  MOVE 	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 199
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0486

*033115  SUB 	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000000 000000 
----------

*033116  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033120  JUMPA	0,033121

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033121 
----------

*033121  MOVE 	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*033122  SUB 	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 200
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0487

*033123  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033125  JUMPA	0,033126

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033126 
----------

*033126  MOVE 	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*033127  SUB 	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033130  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 201
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0488

*033132  JUMPA	0,033133

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033133 
----------

*033133  MOVE 	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033134  SUB 	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033135  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033137  JUMPA	0,033140

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033140 
----------

*033140  MOVE 	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 202
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0489

*033141  SUB 	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033142  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033144  JUMPA	0,033145

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033145 
----------

*033145  MOVE 	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*033146  SUB 	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 203
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0490

*033147  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033151  JUMPA	0,033152

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033152 
----------

*033152  MOVE 	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033153  SUB 	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033154  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 204
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0491

*033156  JUMPA	0,033157

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033157 
----------

*033157  MOVE 	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033160  SUB 	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033161  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033163  JUMPA	0,033164

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033164 
----------

*033164  MOVE 	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 205
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0492

*033165  SUB 	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033166  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033170  JUMPA	0,033171

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033171 
----------

*033171  MOVE 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033172  SUB 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 206
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0493

*033173  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033175  JUMPA	0,033176

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033176 
----------

*033176  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033177  SUB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033200  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 207
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0494

*033202  JUMPA	0,033203

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033203 
----------

*033203  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033204  CAMA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033206  JUMPA	0,033207

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033207 
----------

*033207  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033210  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 208
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0495

*033212  JUMPA	0,033213

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033213 
----------

*033213  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033214  CAME	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033216  JUMPA	0,033217

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033217 
----------

*033217  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033220  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 209
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0496

*033221  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033223  JUMPA	0,033224

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033224 
----------

*033224  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033225  CAML	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*033227  JUMPA	0,033230

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 033230 
----------

*033230  MOVE 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 210
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0497

*033231  CAML	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*033232  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033234  JUMPA	0,033235

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033235 
----------

*033235  MOVE 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033236  CAML	0,035456

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 377777 777777 
----------

*033240  JUMPA	0,033241

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 033241 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 211
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0498

*033241  MOVE 	0,035456

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033242  CAML	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 400000 000000 
----------

*033243  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033245  JUMPA	0,033246

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777     E= 000000 033246 
----------

*033246  MOVE 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033247  CAML	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 212
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0499

*033251  JUMPA	0,033252

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 033252 
----------

*033252  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033253  CAML	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*033254  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033256  JUMPA	0,033257

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033257 
----------

*033257  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 213
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0500

*033260  CAML	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033261  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033263  JUMPA	0,033264

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033264 
----------

*033264  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033265  CAML	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
----------

*033266  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 214
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0501

*033270  JUMPA	0,033271

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033271 
----------

*033271  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033272  CAM 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*033273  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033275  JUMPA	0,033276

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 033276 
----------

*033276  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 215
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0502

*033277  CAMGE	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*033300  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033302  JUMPA	0,033303

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 033303 
----------

*033303  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033304  CAMGE	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*033306  JUMPA	0,033307

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033307 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 216
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0503

*033307  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033310  CAMN	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*033312  JUMPA	0,033313

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033313 
----------

*033313  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033314  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033315  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 217
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0504

*033317  JUMPA	0,033320

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033320 
----------

*033320  MOVE 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033321  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033322  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033324  JUMPA	0,033325

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 033325 
----------

*033325  MOVE 	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 218
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0505

*033326  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
----------

*033327  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
----------

*033331  JUMPA	0,033332

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002     E= 000000 033332 
----------

*033332  MOVE 	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*033333  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
----------

*033334  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 219
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0506

*033336  JUMPA	0,033337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004     E= 000000 033337 
----------

*033337  MOVE 	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033340  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
----------

*033341  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
----------

*033343  JUMPA	0,033344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010     E= 000000 033344 
----------

*033344  MOVE 	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 220
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0507

*033345  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
----------

*033346  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
----------

*033350  JUMPA	0,033351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020     E= 000000 033351 
----------

*033351  MOVE 	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033352  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
----------

*033353  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 221
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0508

*033355  JUMPA	0,033356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040     E= 000000 033356 
----------

*033356  MOVE 	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*033357  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
----------

*033360  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
----------

*033362  JUMPA	0,033363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100     E= 000000 033363 
----------

*033363  MOVE 	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 222
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0509

*033364  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
----------

*033365  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
----------

*033367  JUMPA	0,033370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200     E= 000000 033370 
----------

*033370  MOVE 	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*033371  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
----------

*033372  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 223
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0510

*033374  JUMPA	0,033375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400     E= 000000 033375 
----------

*033375  MOVE 	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033376  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
----------

*033377  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
----------

*033401  JUMPA	0,033402

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000     E= 000000 033402 
----------

*033402  MOVE 	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 224
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0511

*033403  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
----------

*033404  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
----------

*033406  JUMPA	0,033407

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000     E= 000000 033407 
----------

*033407  MOVE 	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033410  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
----------

*033411  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 225
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0512

*033413  JUMPA	0,033414

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000     E= 000000 033414 
----------

*033414  MOVE 	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033415  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
----------

*033416  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
----------

*033420  JUMPA	0,033421

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000     E= 000000 033421 
----------

*033421  MOVE 	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 226
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0513

*033422  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
----------

*033423  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
----------

*033425  JUMPA	0,033426

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000     E= 000000 033426 
----------

*033426  MOVE 	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*033427  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
----------

*033430  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 227
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0514

*033432  JUMPA	0,033433

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000     E= 000000 033433 
----------

*033433  MOVE 	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033434  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
----------

*033435  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
----------

*033437  JUMPA	0,033440

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000     E= 000000 033440 
----------

*033440  MOVE 	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 228
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0515

*033441  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
----------

*033442  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
----------

*033444  JUMPA	0,033445

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000     E= 000000 033445 
----------

*033445  MOVE 	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033446  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
----------

*033447  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 229
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0516

*033451  JUMPA	0,033452

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000     E= 000000 033452 
----------

*033452  MOVE 	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*033453  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*033454  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*033456  JUMPA	0,033457

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000     E= 000000 033457 
----------

*033457  MOVE 	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 230
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0517

*033460  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
----------

*033461  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
----------

*033463  JUMPA	0,033464

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000     E= 000000 033464 
----------

*033464  MOVE 	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*033465  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
----------

*033466  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 231
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0518

*033470  JUMPA	0,033471

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000     E= 000000 033471 
----------

*033471  MOVE 	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033472  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
----------

*033473  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
----------

*033475  JUMPA	0,033476

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000     E= 000000 033476 
----------

*033476  MOVE 	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 232
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0519

*033477  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
----------

*033500  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
----------

*033502  JUMPA	0,033503

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000     E= 000000 033503 
----------

*033503  MOVE 	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033504  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
----------

*033505  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 233
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0520

*033507  JUMPA	0,033510

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000     E= 000000 033510 
----------

*033510  MOVE 	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*033511  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
----------

*033512  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
----------

*033514  JUMPA	0,033515

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000     E= 000000 033515 
----------

*033515  MOVE 	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 234
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0521

*033516  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
----------

*033517  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
----------

*033521  JUMPA	0,033522

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000     E= 000000 033522 
----------

*033522  MOVE 	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*033523  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
----------

*033524  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 235
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0522

*033526  JUMPA	0,033527

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000     E= 000000 033527 
----------

*033527  MOVE 	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*033530  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
----------

*033531  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
----------

*033533  JUMPA	0,033534

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000     E= 000000 033534 
----------

*033534  MOVE 	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 236
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0523

*033535  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
----------

*033536  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
----------

*033540  JUMPA	0,033541

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000     E= 000000 033541 
----------

*033541  MOVE 	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033542  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
----------

*033543  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 237
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0524

*033545  JUMPA	0,033546

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000     E= 000000 033546 
----------

*033546  MOVE 	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033547  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
----------

*033550  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
----------

*033552  JUMPA	0,033553

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000     E= 000000 033553 
----------

*033553  MOVE 	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 238
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0525

*033554  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
----------

*033555  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
----------

*033557  JUMPA	0,033560

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000     E= 000000 033560 
----------

*033560  MOVE 	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033561  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
----------

*033562  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 239
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0526

*033564  JUMPA	0,033565

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000     E= 000000 033565 
----------

*033565  MOVE 	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033566  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
----------

*033567  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
----------

*033571  JUMPA	0,033572

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000     E= 000000 033572 
----------

*033572  MOVE 	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 240
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0527

*033573  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
----------

*033574  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
----------

*033576  JUMPA	0,033577

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000     E= 000000 033577 
----------

*033577  MOVE 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033600  CAMN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

*033601  CAME	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 241
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0528

*033603  JUMPA	0,033604

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 033604 
----------

*033604  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033605  CAMN	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
----------

*033607  JUMPA	0,033610

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033610 
----------

*033610  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033611  CAMN	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 242
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0529

*033613  JUMPA	0,033614

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033614 
----------

*033614  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033615  CAMN	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
----------

*033617  JUMPA	0,033620

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033620 
----------

*033620  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033621  CAMN	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 243
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0530

*033623  JUMPA	0,033624

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033624 
----------

*033624  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033625  CAMN	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
----------

*033627  JUMPA	0,033630

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033630 
----------

*033630  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033631  CAMN	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 244
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0531

*033633  JUMPA	0,033634

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033634 
----------

*033634  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033635  CAMN	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
----------

*033637  JUMPA	0,033640

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033640 
----------

*033640  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033641  CAMN	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 245
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0532

*033643  JUMPA	0,033644

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033644 
----------

*033644  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033645  CAMN	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
----------

*033647  JUMPA	0,033650

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033650 
----------

*033650  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033651  CAMN	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 246
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0533

*033653  JUMPA	0,033654

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033654 
----------

*033654  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033655  CAMN	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
----------

*033657  JUMPA	0,033660

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033660 
----------

*033660  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033661  CAMN	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 247
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0534

*033663  JUMPA	0,033664

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033664 
----------

*033664  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033665  CAMN	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
----------

*033667  JUMPA	0,033670

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033670 
----------

*033670  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033671  CAMN	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 248
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0535

*033673  JUMPA	0,033674

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033674 
----------

*033674  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033675  CAMN	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
----------

*033677  JUMPA	0,033700

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033700 
----------

*033700  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033701  CAMN	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 249
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0536

*033703  JUMPA	0,033704

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033704 
----------

*033704  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033705  CAMN	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
----------

*033707  JUMPA	0,033710

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033710 
----------

*033710  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033711  CAMN	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 250
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0537

*033713  JUMPA	0,033714

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033714 
----------

*033714  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033715  CAMN	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
----------

*033717  JUMPA	0,033720

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033720 
----------

*033720  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033721  CAMN	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 251
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0538

*033723  JUMPA	0,033724

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033724 
----------

*033724  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033725  CAMN	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
----------

*033727  JUMPA	0,033730

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033730 
----------

*033730  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033731  CAMN	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 252
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0539

*033733  JUMPA	0,033734

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033734 
----------

*033734  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033735  CAMN	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
----------

*033737  JUMPA	0,033740

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033740 
----------

*033740  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033741  CAMN	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 253
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0540

*033743  JUMPA	0,033744

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033744 
----------

*033744  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033745  CAMN	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
----------

*033747  JUMPA	0,033750

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033750 
----------

*033750  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033751  CAMN	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 254
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0541

*033753  JUMPA	0,033754

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033754 
----------

*033754  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033755  CAMN	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
----------

*033757  JUMPA	0,033760

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033760 
----------

*033760  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033761  CAMN	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 255
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0542

*033763  JUMPA	0,033764

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033764 
----------

*033764  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033765  CAMN	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
----------

*033767  JUMPA	0,033770

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033770 
----------

*033770  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033771  CAMN	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 256
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0543

*033773  JUMPA	0,033774

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033774 
----------

*033774  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033775  CAMN	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
----------

*033777  JUMPA	0,034000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034000 
----------

*034000  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034001  CAMN	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 257
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0544

*034003  JUMPA	0,034004

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034004 
----------

*034004  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034005  CAMN	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
----------

*034007  JUMPA	0,034010

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034010 
----------

*034010  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034011  CAMN	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 258
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0545

*034013  JUMPA	0,034014

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034014 
----------

*034014  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034015  CAMN	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
----------

*034017  JUMPA	0,034020

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034020 
----------

*034020  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034021  CAMN	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 259
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0546

*034023  JUMPA	0,034024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034024 
----------

*034024  MOVE 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034025  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
----------

*034027  JUMPA	0,034030

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 034030 
----------

*034030  MOVE 	0,035335

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*034031  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 260
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0547

*034033  JUMPA	0,034034

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002     E= 000000 034034 
----------

*034034  MOVE 	0,035336

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*034035  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
----------

*034037  JUMPA	0,034040

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004     E= 000000 034040 
----------

*034040  MOVE 	0,035337

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*034041  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 261
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0548

*034043  JUMPA	0,034044

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010     E= 000000 034044 
----------

*034044  MOVE 	0,035340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*034045  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
----------

*034047  JUMPA	0,034050

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020     E= 000000 034050 
----------

*034050  MOVE 	0,035341

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*034051  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 262
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0549

*034053  JUMPA	0,034054

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040     E= 000000 034054 
----------

*034054  MOVE 	0,035342

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*034055  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
----------

*034057  JUMPA	0,034060

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100     E= 000000 034060 
----------

*034060  MOVE 	0,035343

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*034061  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 263
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0550

*034063  JUMPA	0,034064

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200     E= 000000 034064 
----------

*034064  MOVE 	0,035344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*034065  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
----------

*034067  JUMPA	0,034070

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400     E= 000000 034070 
----------

*034070  MOVE 	0,035345

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*034071  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 264
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0551

*034073  JUMPA	0,034074

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000     E= 000000 034074 
----------

*034074  MOVE 	0,035346

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*034075  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
----------

*034077  JUMPA	0,034100

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000     E= 000000 034100 
----------

*034100  MOVE 	0,035347

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*034101  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 265
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0552

*034103  JUMPA	0,034104

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000     E= 000000 034104 
----------

*034104  MOVE 	0,035350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*034105  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
----------

*034107  JUMPA	0,034110

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000     E= 000000 034110 
----------

*034110  MOVE 	0,035351

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*034111  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 266
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0553

*034113  JUMPA	0,034114

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000     E= 000000 034114 
----------

*034114  MOVE 	0,035352

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*034115  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
----------

*034117  JUMPA	0,034120

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000     E= 000000 034120 
----------

*034120  MOVE 	0,035353

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*034121  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 267
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0554

*034123  JUMPA	0,034124

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000     E= 000000 034124 
----------

*034124  MOVE 	0,035354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*034125  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
----------

*034127  JUMPA	0,034130

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000     E= 000000 034130 
----------

*034130  MOVE 	0,035355

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*034131  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 268
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0555

*034133  JUMPA	0,034134

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000     E= 000000 034134 
----------

*034134  MOVE 	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 400000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*034135  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
----------

*034137  JUMPA	0,034140

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000     E= 000000 034140 
----------

*034140  MOVE 	0,035357

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*034141  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 269
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0556

*034143  JUMPA	0,034144

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000     E= 000000 034144 
----------

*034144  MOVE 	0,035360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*034145  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
----------

*034147  JUMPA	0,034150

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000     E= 000000 034150 
----------

*034150  MOVE 	0,035361

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*034151  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 270
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0557

*034153  JUMPA	0,034154

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000     E= 000000 034154 
----------

*034154  MOVE 	0,035362

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*034155  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
----------

*034157  JUMPA	0,034160

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000     E= 000000 034160 
----------

*034160  MOVE 	0,035363

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*034161  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 271
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0558

*034163  JUMPA	0,034164

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000     E= 000000 034164 
----------

*034164  MOVE 	0,035364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*034165  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
----------

*034167  JUMPA	0,034170

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000     E= 000000 034170 
----------

*034170  MOVE 	0,035365

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*034171  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 272
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0559

*034173  JUMPA	0,034174

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000     E= 000000 034174 
----------

*034174  MOVE 	0,035366

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*034175  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
----------

*034177  JUMPA	0,034200

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000     E= 000000 034200 
----------

*034200  MOVE 	0,035367

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*034201  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 273
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0560

*034203  JUMPA	0,034204

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000     E= 000000 034204 
----------

*034204  MOVE 	0,035370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*034205  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
----------

*034207  JUMPA	0,034210

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000     E= 000000 034210 
----------

*034210  MOVE 	0,035371

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*034211  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 274
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0561

*034213  JUMPA	0,034214

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000     E= 000000 034214 
----------

*034214  MOVE 	0,035372

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*034215  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
----------

*034217  JUMPA	0,034220

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000     E= 000000 034220 
----------

*034220  MOVE 	0,035373

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*034221  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 275
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0562

*034223  JUMPA	0,034224

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000     E= 000000 034224 
----------

*034224  MOVE 	0,035374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*034225  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
----------

*034227  JUMPA	0,034230

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000     E= 000000 034230 
----------

*034230  MOVE 	0,035375

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*034231  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 276
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0563

*034233  JUMPA	0,034234

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000     E= 000000 034234 
----------

*034234  MOVE 	0,035376

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*034235  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
----------

*034237  JUMPA	0,034240

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000     E= 000000 034240 
----------

*034240  MOVE 	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*034241  CAMN	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 277
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0564

*034243  JUMPA	0,034244

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 034244 
----------

*034244  MOVS 	0,035457

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*034245  CAME	0,035457

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*034247  JUMPA	0,034250

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000001     E= 000000 034250 
----------

*034250  MOVS 	0,035460

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

*034251  CAME	0,035460

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000002  C(E)= 000002 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 278
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0565

*034253  JUMPA	0,034254

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000002     E= 000000 034254 
----------

*034254  MOVS 	0,035461

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 000002  C(E)= 000004 000004 
FINAL
C(AC)= 000004 000004 
----------

*034255  CAME	0,035461

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000004  C(E)= 000004 000004 
----------

*034257  JUMPA	0,034260

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000004     E= 000000 034260 
----------

*034260  MOVS 	0,035462

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 000004  C(E)= 000010 000010 
FINAL
C(AC)= 000010 000010 
----------

*034261  CAME	0,035462

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000010  C(E)= 000010 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 279
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0566

*034263  JUMPA	0,034264

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000010     E= 000000 034264 
----------

*034264  MOVS 	0,035463

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 000010  C(E)= 000020 000020 
FINAL
C(AC)= 000020 000020 
----------

*034265  CAME	0,035463

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000020  C(E)= 000020 000020 
----------

*034267  JUMPA	0,034270

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000020     E= 000000 034270 
----------

*034270  MOVS 	0,035464

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 000020  C(E)= 000040 000040 
FINAL
C(AC)= 000040 000040 
----------

*034271  CAME	0,035464

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000040  C(E)= 000040 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 280
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0567

*034273  JUMPA	0,034274

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000040     E= 000000 034274 
----------

*034274  MOVS 	0,035465

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 000040  C(E)= 000100 000100 
FINAL
C(AC)= 000100 000100 
----------

*034275  CAME	0,035465

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000100  C(E)= 000100 000100 
----------

*034277  JUMPA	0,034300

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000100     E= 000000 034300 
----------

*034300  MOVS 	0,035466

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 000100  C(E)= 000200 000200 
FINAL
C(AC)= 000200 000200 
----------

*034301  CAME	0,035466

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000200  C(E)= 000200 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 281
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0568

*034303  JUMPA	0,034304

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000200     E= 000000 034304 
----------

*034304  MOVS 	0,035467

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 000200  C(E)= 000400 000400 
FINAL
C(AC)= 000400 000400 
----------

*034305  CAME	0,035467

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000400  C(E)= 000400 000400 
----------

*034307  JUMPA	0,034310

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000400     E= 000000 034310 
----------

*034310  MOVS 	0,035470

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 000400  C(E)= 001000 001000 
FINAL
C(AC)= 001000 001000 
----------

*034311  CAME	0,035470

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 001000  C(E)= 001000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 282
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0569

*034313  JUMPA	0,034314

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 001000     E= 000000 034314 
----------

*034314  MOVS 	0,035471

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 001000  C(E)= 002000 002000 
FINAL
C(AC)= 002000 002000 
----------

*034315  CAME	0,035471

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 002000  C(E)= 002000 002000 
----------

*034317  JUMPA	0,034320

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 002000     E= 000000 034320 
----------

*034320  MOVS 	0,035472

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 002000  C(E)= 004000 004000 
FINAL
C(AC)= 004000 004000 
----------

*034321  CAME	0,035472

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 004000  C(E)= 004000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 283
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0570

*034323  JUMPA	0,034324

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 004000     E= 000000 034324 
----------

*034324  MOVS 	0,035473

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 004000  C(E)= 010000 010000 
FINAL
C(AC)= 010000 010000 
----------

*034325  CAME	0,035473

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 010000  C(E)= 010000 010000 
----------

*034327  JUMPA	0,034330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 010000     E= 000000 034330 
----------

*034330  MOVS 	0,035474

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 010000  C(E)= 020000 020000 
FINAL
C(AC)= 020000 020000 
----------

*034331  CAME	0,035474

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 020000  C(E)= 020000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 284
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0571

*034333  JUMPA	0,034334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 020000     E= 000000 034334 
----------

*034334  MOVS 	0,035475

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 020000  C(E)= 040000 040000 
FINAL
C(AC)= 040000 040000 
----------

*034335  CAME	0,035475

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 040000  C(E)= 040000 040000 
----------

*034337  JUMPA	0,034340

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 040000     E= 000000 034340 
----------

*034340  MOVS 	0,035476

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 040000  C(E)= 100000 100000 
FINAL
C(AC)= 100000 100000 
----------

*034341  CAME	0,035476

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 100000  C(E)= 100000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 285
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0572

*034343  JUMPA	0,034344

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 100000     E= 000000 034344 
----------

*034344  MOVS 	0,035477

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 100000  C(E)= 200000 200000 
FINAL
C(AC)= 200000 200000 
----------

*034345  CAME	0,035477

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 200000  C(E)= 200000 200000 
----------

*034347  JUMPA	0,034350

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 200000     E= 000000 034350 
----------

*034350  MOVS 	0,035500

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 200000  C(E)= 400000 400000 
FINAL
C(AC)= 400000 400000 
----------

*034351  CAME	0,035500

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 400000  C(E)= 400000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 286
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0573

*034353  JUMPA	0,034354

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 400000     E= 000000 034354 
----------

*034354  MOVS 	0,035501

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 400000  C(E)= 777776 777776 
FINAL
C(AC)= 777776 777776 
----------

*034355  CAME	0,035501

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776  C(E)= 777776 777776 
----------

*034357  JUMPA	0,034360

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776     E= 000000 034360 
----------

*034360  MOVS 	0,035502

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776  C(E)= 777775 777775 
FINAL
C(AC)= 777775 777775 
----------

*034361  CAME	0,035502

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777775  C(E)= 777775 777775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 287
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0574

*034363  JUMPA	0,034364

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777775     E= 000000 034364 
----------

*034364  MOVS 	0,035503

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777775  C(E)= 777773 777773 
FINAL
C(AC)= 777773 777773 
----------

*034365  CAME	0,035503

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777773  C(E)= 777773 777773 
----------

*034367  JUMPA	0,034370

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777773     E= 000000 034370 
----------

*034370  MOVS 	0,035504

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777773  C(E)= 777767 777767 
FINAL
C(AC)= 777767 777767 
----------

*034371  CAME	0,035504

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777767  C(E)= 777767 777767 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 288
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0575

*034373  JUMPA	0,034374

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777767     E= 000000 034374 
----------

*034374  MOVS 	0,035505

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777767  C(E)= 777757 777757 
FINAL
C(AC)= 777757 777757 
----------

*034375  CAME	0,035505

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777757  C(E)= 777757 777757 
----------

*034377  JUMPA	0,034400

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777757     E= 000000 034400 
----------

*034400  MOVS 	0,035506

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777757  C(E)= 777737 777737 
FINAL
C(AC)= 777737 777737 
----------

*034401  CAME	0,035506

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777737  C(E)= 777737 777737 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 289
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0576

*034403  JUMPA	0,034404

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777737     E= 000000 034404 
----------

*034404  MOVS 	0,035507

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777737  C(E)= 777677 777677 
FINAL
C(AC)= 777677 777677 
----------

*034405  CAME	0,035507

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777677  C(E)= 777677 777677 
----------

*034407  JUMPA	0,034410

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777677     E= 000000 034410 
----------

*034410  MOVS 	0,035510

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777677  C(E)= 777577 777577 
FINAL
C(AC)= 777577 777577 
----------

*034411  CAME	0,035510

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777577  C(E)= 777577 777577 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 290
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0577

*034413  JUMPA	0,034414

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777577     E= 000000 034414 
----------

*034414  MOVS 	0,035511

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777577  C(E)= 777377 777377 
FINAL
C(AC)= 777377 777377 
----------

*034415  CAME	0,035511

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777377  C(E)= 777377 777377 
----------

*034417  JUMPA	0,034420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777377     E= 000000 034420 
----------

*034420  MOVS 	0,035512

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777377  C(E)= 776777 776777 
FINAL
C(AC)= 776777 776777 
----------

*034421  CAME	0,035512

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 776777  C(E)= 776777 776777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 291
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0578

*034423  JUMPA	0,034424

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 776777     E= 000000 034424 
----------

*034424  MOVS 	0,035513

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 776777  C(E)= 775777 775777 
FINAL
C(AC)= 775777 775777 
----------

*034425  CAME	0,035513

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 775777  C(E)= 775777 775777 
----------

*034427  JUMPA	0,034430

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 775777     E= 000000 034430 
----------

*034430  MOVS 	0,035514

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 775777  C(E)= 773777 773777 
FINAL
C(AC)= 773777 773777 
----------

*034431  CAME	0,035514

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 773777  C(E)= 773777 773777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 292
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0579

*034433  JUMPA	0,034434

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 773777     E= 000000 034434 
----------

*034434  MOVS 	0,035515

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 773777  C(E)= 767777 767777 
FINAL
C(AC)= 767777 767777 
----------

*034435  CAME	0,035515

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 767777  C(E)= 767777 767777 
----------

*034437  JUMPA	0,034440

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 767777     E= 000000 034440 
----------

*034440  MOVS 	0,035516

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 767777  C(E)= 757777 757777 
FINAL
C(AC)= 757777 757777 
----------

*034441  CAME	0,035516

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 757777  C(E)= 757777 757777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 293
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0580

*034443  JUMPA	0,034444

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 757777     E= 000000 034444 
----------

*034444  MOVS 	0,035517

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 757777  C(E)= 737777 737777 
FINAL
C(AC)= 737777 737777 
----------

*034445  CAME	0,035517

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 737777  C(E)= 737777 737777 
----------

*034447  JUMPA	0,034450

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 737777     E= 000000 034450 
----------

*034450  MOVS 	0,035520

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 737777  C(E)= 677777 677777 
FINAL
C(AC)= 677777 677777 
----------

*034451  CAME	0,035520

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 677777  C(E)= 677777 677777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 294
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0581

*034453  JUMPA	0,034454

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 677777     E= 000000 034454 
----------

*034454  MOVS 	0,035521

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 677777  C(E)= 577777 577777 
FINAL
C(AC)= 577777 577777 
----------

*034455  CAME	0,035521

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 577777  C(E)= 577777 577777 
----------

*034457  JUMPA	0,034460

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 577777     E= 000000 034460 
----------

*034460  MOVS 	0,035522

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 577777  C(E)= 377777 377777 
FINAL
C(AC)= 377777 377777 
----------

*034461  CAME	0,035522

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 377777  C(E)= 377777 377777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 295
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0582

*034463  JUMPA	0,034464

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 377777     E= 000000 034464 
----------

*034464  MOVS 	0,035523

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 377777  C(E)= 000001 777776 
FINAL
C(AC)= 777776 000001 
----------

*034465  CAME	0,035524

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 000001  C(E)= 777776 000001 
----------

*034467  JUMPA	0,034470

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 000001     E= 000000 034470 
----------

*034470  MOVS 	0,035525

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 000001  C(E)= 000002 777775 
FINAL
C(AC)= 777775 000002 
----------

*034471  CAME	0,035526

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 000002  C(E)= 777775 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 296
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0583

*034473  JUMPA	0,034474

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 000002     E= 000000 034474 
----------

*034474  MOVS 	0,035527

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 000002  C(E)= 000004 777773 
FINAL
C(AC)= 777773 000004 
----------

*034475  CAME	0,035530

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 000004  C(E)= 777773 000004 
----------

*034477  JUMPA	0,034500

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 000004     E= 000000 034500 
----------

*034500  MOVS 	0,035531

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 000004  C(E)= 000010 777767 
FINAL
C(AC)= 777767 000010 
----------

*034501  CAME	0,035532

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 000010  C(E)= 777767 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 297
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0584

*034503  JUMPA	0,034504

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 000010     E= 000000 034504 
----------

*034504  MOVS 	0,035533

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 000010  C(E)= 000020 777757 
FINAL
C(AC)= 777757 000020 
----------

*034505  CAME	0,035534

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 000020  C(E)= 777757 000020 
----------

*034507  JUMPA	0,034510

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 000020     E= 000000 034510 
----------

*034510  MOVS 	0,035535

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 000020  C(E)= 000040 777737 
FINAL
C(AC)= 777737 000040 
----------

*034511  CAME	0,035536

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 000040  C(E)= 777737 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 298
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0585

*034513  JUMPA	0,034514

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 000040     E= 000000 034514 
----------

*034514  MOVS 	0,035537

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 000040  C(E)= 000100 777677 
FINAL
C(AC)= 777677 000100 
----------

*034515  CAME	0,035540

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 000100  C(E)= 777677 000100 
----------

*034517  JUMPA	0,034520

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 000100     E= 000000 034520 
----------

*034520  MOVS 	0,035541

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 000100  C(E)= 000200 777577 
FINAL
C(AC)= 777577 000200 
----------

*034521  CAME	0,035542

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 000200  C(E)= 777577 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 299
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0586

*034523  JUMPA	0,034524

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 000200     E= 000000 034524 
----------

*034524  MOVS 	0,035543

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 000200  C(E)= 000400 777377 
FINAL
C(AC)= 777377 000400 
----------

*034525  CAME	0,035544

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 000400  C(E)= 777377 000400 
----------

*034527  JUMPA	0,034530

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 000400     E= 000000 034530 
----------

*034530  MOVS 	0,035545

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 000400  C(E)= 001000 776777 
FINAL
C(AC)= 776777 001000 
----------

*034531  CAME	0,035546

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 001000  C(E)= 776777 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 300
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0587

*034533  JUMPA	0,034534

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 001000     E= 000000 034534 
----------

*034534  MOVS 	0,035547

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 001000  C(E)= 002000 775777 
FINAL
C(AC)= 775777 002000 
----------

*034535  CAME	0,035550

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 002000  C(E)= 775777 002000 
----------

*034537  JUMPA	0,034540

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 002000     E= 000000 034540 
----------

*034540  MOVS 	0,035551

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 002000  C(E)= 004000 773777 
FINAL
C(AC)= 773777 004000 
----------

*034541  CAME	0,035552

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 004000  C(E)= 773777 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 301
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0588

*034543  JUMPA	0,034544

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 004000     E= 000000 034544 
----------

*034544  MOVS 	0,035553

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 004000  C(E)= 010000 767777 
FINAL
C(AC)= 767777 010000 
----------

*034545  CAME	0,035554

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 010000  C(E)= 767777 010000 
----------

*034547  JUMPA	0,034550

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 010000     E= 000000 034550 
----------

*034550  MOVS 	0,035555

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 010000  C(E)= 020000 757777 
FINAL
C(AC)= 757777 020000 
----------

*034551  CAME	0,035556

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 020000  C(E)= 757777 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 302
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0589

*034553  JUMPA	0,034554

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 020000     E= 000000 034554 
----------

*034554  MOVS 	0,035557

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 020000  C(E)= 040000 737777 
FINAL
C(AC)= 737777 040000 
----------

*034555  CAME	0,035560

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 040000  C(E)= 737777 040000 
----------

*034557  JUMPA	0,034560

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 040000     E= 000000 034560 
----------

*034560  MOVS 	0,035561

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 040000  C(E)= 100000 677777 
FINAL
C(AC)= 677777 100000 
----------

*034561  CAME	0,035562

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 100000  C(E)= 677777 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 303
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0590

*034563  JUMPA	0,034564

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 100000     E= 000000 034564 
----------

*034564  MOVS 	0,035563

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 100000  C(E)= 200000 577777 
FINAL
C(AC)= 577777 200000 
----------

*034565  CAME	0,035564

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 200000  C(E)= 577777 200000 
----------

*034567  JUMPA	0,034570

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 200000     E= 000000 034570 
----------

*034570  MOVS 	0,035565

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 200000  C(E)= 400000 377777 
FINAL
C(AC)= 377777 400000 
----------

*034571  CAME	0,035566

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 400000  C(E)= 377777 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 304
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0591

*034573  JUMPA	0,034574

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 400000     E= 000000 034574 
----------

*034574  MOVS 	0,035524

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 400000  C(E)= 777776 000001 
FINAL
C(AC)= 000001 777776 
----------

*034575  CAME	0,035523

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 777776  C(E)= 000001 777776 
----------

*034577  JUMPA	0,034600

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 777776     E= 000000 034600 
----------

*034600  MOVS 	0,035526

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 777776  C(E)= 777775 000002 
FINAL
C(AC)= 000002 777775 
----------

*034601  CAME	0,035525

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 777775  C(E)= 000002 777775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 305
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0592

*034603  JUMPA	0,034604

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 777775     E= 000000 034604 
----------

*034604  MOVS 	0,035530

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000002 777775  C(E)= 777773 000004 
FINAL
C(AC)= 000004 777773 
----------

*034605  CAME	0,035527

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 777773  C(E)= 000004 777773 
----------

*034607  JUMPA	0,034610

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 777773     E= 000000 034610 
----------

*034610  MOVS 	0,035532

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000004 777773  C(E)= 777767 000010 
FINAL
C(AC)= 000010 777767 
----------

*034611  CAME	0,035531

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 777767  C(E)= 000010 777767 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 306
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0593

*034613  JUMPA	0,034614

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 777767     E= 000000 034614 
----------

*034614  MOVS 	0,035534

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000010 777767  C(E)= 777757 000020 
FINAL
C(AC)= 000020 777757 
----------

*034615  CAME	0,035533

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 777757  C(E)= 000020 777757 
----------

*034617  JUMPA	0,034620

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 777757     E= 000000 034620 
----------

*034620  MOVS 	0,035536

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000020 777757  C(E)= 777737 000040 
FINAL
C(AC)= 000040 777737 
----------

*034621  CAME	0,035535

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 777737  C(E)= 000040 777737 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 307
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0594

*034623  JUMPA	0,034624

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 777737     E= 000000 034624 
----------

*034624  MOVS 	0,035540

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000040 777737  C(E)= 777677 000100 
FINAL
C(AC)= 000100 777677 
----------

*034625  CAME	0,035537

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 777677  C(E)= 000100 777677 
----------

*034627  JUMPA	0,034630

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 777677     E= 000000 034630 
----------

*034630  MOVS 	0,035542

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000100 777677  C(E)= 777577 000200 
FINAL
C(AC)= 000200 777577 
----------

*034631  CAME	0,035541

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 777577  C(E)= 000200 777577 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 308
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0595

*034633  JUMPA	0,034634

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 777577     E= 000000 034634 
----------

*034634  MOVS 	0,035544

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000200 777577  C(E)= 777377 000400 
FINAL
C(AC)= 000400 777377 
----------

*034635  CAME	0,035543

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 777377  C(E)= 000400 777377 
----------

*034637  JUMPA	0,034640

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 777377     E= 000000 034640 
----------

*034640  MOVS 	0,035546

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000400 777377  C(E)= 776777 001000 
FINAL
C(AC)= 001000 776777 
----------

*034641  CAME	0,035545

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 776777  C(E)= 001000 776777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 309
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0596

*034643  JUMPA	0,034644

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 776777     E= 000000 034644 
----------

*034644  MOVS 	0,035550

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 001000 776777  C(E)= 775777 002000 
FINAL
C(AC)= 002000 775777 
----------

*034645  CAME	0,035547

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 775777  C(E)= 002000 775777 
----------

*034647  JUMPA	0,034650

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 775777     E= 000000 034650 
----------

*034650  MOVS 	0,035552

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 002000 775777  C(E)= 773777 004000 
FINAL
C(AC)= 004000 773777 
----------

*034651  CAME	0,035551

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 773777  C(E)= 004000 773777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 310
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0597

*034653  JUMPA	0,034654

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 773777     E= 000000 034654 
----------

*034654  MOVS 	0,035554

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 004000 773777  C(E)= 767777 010000 
FINAL
C(AC)= 010000 767777 
----------

*034655  CAME	0,035553

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 767777  C(E)= 010000 767777 
----------

*034657  JUMPA	0,034660

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 767777     E= 000000 034660 
----------

*034660  MOVS 	0,035556

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 010000 767777  C(E)= 757777 020000 
FINAL
C(AC)= 020000 757777 
----------

*034661  CAME	0,035555

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 757777  C(E)= 020000 757777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 311
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0598

*034663  JUMPA	0,034664

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 757777     E= 000000 034664 
----------

*034664  MOVS 	0,035560

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 020000 757777  C(E)= 737777 040000 
FINAL
C(AC)= 040000 737777 
----------

*034665  CAME	0,035557

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 737777  C(E)= 040000 737777 
----------

*034667  JUMPA	0,034670

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 737777     E= 000000 034670 
----------

*034670  MOVS 	0,035562

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 040000 737777  C(E)= 677777 100000 
FINAL
C(AC)= 100000 677777 
----------

*034671  CAME	0,035561

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 677777  C(E)= 100000 677777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 312
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0599

*034673  JUMPA	0,034674

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 677777     E= 000000 034674 
----------

*034674  MOVS 	0,035564

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 100000 677777  C(E)= 577777 200000 
FINAL
C(AC)= 200000 577777 
----------

*034675  CAME	0,035563

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 577777  C(E)= 200000 577777 
----------

*034677  JUMPA	0,034700

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 577777     E= 000000 034700 
----------

*034700  MOVS 	0,035566

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 200000 577777  C(E)= 377777 400000 
FINAL
C(AC)= 400000 377777 
----------

*034701  CAME	0,035565

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 377777  C(E)= 400000 377777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 313
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0600

*034703  JUMPA	0,034704

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 377777     E= 000000 034704 
----------

*034704  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 377777  C(E)= 400000 377777 
FINAL
C(AC)= 000000 000000 
----------

*034705  CAIE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*034707  JUMPA	0,034710

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034710 
----------

*034710  MOVE 	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034711  CAIE	0,000001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 314
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0601

*034713  JUMPA	0,034714

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 034714 
----------

*034714  MOVEI	0,000001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034715  CAME	0,035334

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*034717  JUMPA	0,034720

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 034720 
----------

*034720  MOVEI	0,777777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034721  SETCA 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 315
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0602

*034722  CAME	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*034724  JUMPA	0,034725

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 034725 
----------

*034725  MOVEI	0,777777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034726  SETCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*034727  CAME	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*034731  JUMPA	0,034732

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 034732 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 316
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0603

*034732  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034733  SETCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034734  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034736  JUMPA	0,034737

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 034737 
----------

*034737  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034740  SETCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 317
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0604

*034741  CAME	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034743  JUMPA	0,034744

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034744 
----------

*034744  MOVEI	0,777777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034745  SETCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*034746  CAME	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*034750  JUMPA	0,034751

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 034751 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 318
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0605

*034751  SETCM 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*034752  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034754  JUMPA	0,034755

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 034755 
----------

*034755  SETCM 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034756  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034760  JUMPA	0,034761

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 034761 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 319
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0606

*034761  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034762  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034763  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034765  JUMPA	0,034766

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 034766 
----------

*034766  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034767  ORCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 320
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0607

*034770  SKIPN	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034772  JUMPA	0,034773

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 034773 
----------

*034773  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034774  ORCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034775  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034777  JUMPA	0,035000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 321
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0608

*035000  MOVE 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035001  ORCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035002  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035004  JUMPA	0,035005

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035005 
----------

*035005  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035006  ORCM 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 322
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0609

*035007  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035011  JUMPA	0,035012

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035012 
----------

*035012  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035013  IOR 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035014  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 323
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0610

*035016  JUMPA	0,035017

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035017 
----------

*035017  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035020  IOR 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035021  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035023  JUMPA	0,035024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035024 
----------

*035024  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 324
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0611

*035025  IOR 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035026  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035030  JUMPA	0,035031

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035031 
----------

*035031  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035032  IOR 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*035033  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 325
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0612

*035035  JUMPA	0,035036

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035036 
----------

*035036  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035037  ANDCM 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*035040  CAME	0,035455

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*035042  JUMPA	0,035043

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777     E= 000000 035043 
----------

*035043  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 326
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0613

*035044  ANDCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035045  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035047  JUMPA	0,035050

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035050 
----------

*035050  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*035051  ANDCM 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 327
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0614

*035052  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035054  JUMPA	0,035055

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035055 
----------

*035055  MOVEI	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035056  ANDCM 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035057  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035061  JUMPA	0,035062

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035062 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 328
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0615

*035062  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035063  ANDCM 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035064  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035066  JUMPA	0,035067

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035067 
----------

*035067  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 329
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0616

*035070  ANDCA 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035071  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035073  JUMPA	0,035074

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035074 
----------

*035074  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035075  ANDCA 	0,035567

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 707070 707070 
FINAL
C(AC)= 000000 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 330
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0617

*035076  CAME	0,035570

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 707070  C(E)= 000000 707070 
----------

*035100  JUMPA	0,035101

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 707070     E= 000000 035101 
----------

*035101  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 707070  C(E)= 000000 707070 
FINAL
C(AC)= 000000 000000 
----------

*035102  ANDCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035103  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035105  JUMPA	0,035106

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035106 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 331
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0618

*035106  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035107  ANDCA 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035110  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035112  JUMPA	0,035113

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035113 
----------

*035113  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035114  ANDCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 332
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0619

*035115  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035117  JUMPA	0,035120

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035120 
----------

*035120  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*035121  ANDCA 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035122  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 333
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0620

*035124  JUMPA	0,035125

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035125 
----------

*035125  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035126  ANDCB 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*035127  CAME	0,035455

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*035131  JUMPA	0,035132

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777     E= 000000 035132 
----------

*035132  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 334
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0621

*035133  ANDCB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035134  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035136  JUMPA	0,035137

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035137 
----------

*035137  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035140  ANDCB 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 335
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0622

*035141  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035143  JUMPA	0,035144

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035144 
----------

*035144  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035145  ANDCB 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035146  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035150  JUMPA	0,035151

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035151 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 336
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0623

*035151  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035152  ANDCB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035153  CAIE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*035155  JUMPA	0,035156

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035156 
----------

*035156  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*035157  ANDCB 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 337
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0624

*035160  CAIE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*035162  JUMPA	0,035163

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035163 
----------

*035163  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035164  ORCA 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*035165  CAME	0,035455

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*035167  JUMPA	0,035170

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777     E= 000000 035170 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 338
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0625

*035170  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035171  ORCA 	0,035567

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 777777 
----------

*035172  CAME	0,035571

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 707070 777777  C(E)= 707070 777777 
----------

*035174  JUMPA	0,035175

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 707070 777777     E= 000000 035175 
----------

*035175  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 707070 777777  C(E)= 707070 777777 
FINAL
C(AC)= 000000 000000 
----------

*035176  ORCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 339
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0626

*035177  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035201  JUMPA	0,035202

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035202 
----------

*035202  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035203  ORCA 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035204  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035206  JUMPA	0,035207

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035207 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 340
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0627

*035207  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035210  ORCA 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035211  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035213  JUMPA	0,035214

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035214 
----------

*035214  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035215  ORCA 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 341
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0628

*035216  CAIE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*035220  JUMPA	0,035221

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035221 
----------

*035221  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035222  ORCB 	0,035567

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 707070 707070 
FINAL
C(AC)= 070707 777777 
----------

*035223  CAME	0,035572

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 777777  C(E)= 070707 777777 
----------

*035225  JUMPA	0,035226

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 777777     E= 000000 035226 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 342
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0629

*035226  MOVE 	0,035455

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*035227  ORCB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

*035230  CAME	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*035232  JUMPA	0,035233

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000     E= 000000 035233 
----------

*035233  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*035234  ORCB 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 343
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0630

*035235  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035237  JUMPA	0,035240

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035240 
----------

*035240  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035241  ORCB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*035242  CAIE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*035244  JUMPA	0,035245

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035245 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 344
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0631

*035245  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035246  ORCB 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035247  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035251  JUMPA	0,035252

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035252 
----------

*035252  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035253  ORCB 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 345
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0632

*035254  CAME	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*035256  JUMPA	0,035257

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 035257 
----------

*035257  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*035260  MOVN 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035261  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035263  JUMPA	0,035264

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035264 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 346
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0633

*035264  MOVE 	0,035420

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*035265  MOVN 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000001 000000 
----------

*035266  CAME	0,035356

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*035270  JUMPA	0,035271

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000     E= 000000 035271 
----------

*035271  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000000 000000 
----------

*035272  MOVN 	0,035567

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 070707 070710 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 347
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0634

*035273  CAME	0,035573

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 070710  C(E)= 070707 070710 
----------

*035275  JUMPA	0,035276

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 070710     E= 000000 035276 
----------

*035276  MOVN 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 070707 070710  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000001 
----------

*035277  CAIE	0,000001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*035301  JUMPA	0,035302

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 035302 
----------

*035302  SETO 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 348
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0635

*035303  MOVM 	0,035330

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035304  SKIPE	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035306  JUMPA	0,035307

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 035307 
----------

*035307  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035310  MOVM 	0,035442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 349
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0636

*035311  CAIE	0,000001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*035313  JUMPA	0,035314

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001     E= 000000 035314 
----------

*035314  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*035315  MOVM 	0,035377

FLAGS - INT/FINAL   700000 700200 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*035316  CAME	0,035377

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 400000 000000 
----------

*035316  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 350
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0637

*035316  CAME	0,035377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

*035320  JUMPA	0,035321

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 035321 
----------

*035321  SETZ 	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*035322  MOVM 	0,035456

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*035323  CAME	0,035456

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
----------

*035325  JUMPA	0,035326

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777     E= 000000 035326 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 351
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0638

*035326  SETZM	0,035575

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*035327  JRST	0,030057

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 377777 777777  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 377777 777777  C(E)= 000000 000000 
----------

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 377777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 352
DSKAB	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0639

*030616  JRST	0,030624

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 377777 777777 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 377777 777777 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 431110 
----------

