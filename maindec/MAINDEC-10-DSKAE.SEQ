;DSKAE







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E305A-DD

	DIAGNOSTIC CODE:	DSKAE

	PRODUCT NAME:	 	DSKAEA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (5)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAE.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAE.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE FIFTH IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS THE FWT, ADD/SUB, PC
	CHANGE AND COMPARE INSTRUCTIONS.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAE.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAE.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAE                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAE

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (5)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
DSKAET	MAC	28-Mar-78 13:59		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAE
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 2
DSKAET	MAC	28-Mar-78 13:59		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 3
DSKAET	MAC	28-Mar-78 13:59		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414500		PAREA3=SIXBIT/DSKAE/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414500		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
DSKAE1	MAC	28-Mar-78 13:59		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) [DSKAE]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 065 051 040 
   798	030656	133 104 123 113 101 
   799	030657	105 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (5)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 2
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSR INSTRUCTION                                                            SEQ 0029

   807					SUBTTL	TEST OF JSR INSTRUCTION
   808
   809					;**********
   810
   811					;THIS TEST VERIFIES THAT JSR STORES THE FLAGS AND PC IN LOCATION E.
   812					;IN THIS CASE, E IS CLEARED, CRY0 IS SET AND JSR IS EXECUTED.
   813					;NEXT, E IS CHECKED FOR ITS CONTENTS NON-ZERO.  IF C(E) IS NON-ZERO,
   814					;THIS TEST PASSES.
   815
   816	030661				C23000:	SFLAG	CRY0		^;SET CRY0 FLAG
   817
   818	030661	205 01 0 00 200000 		MOVSI	1,CRY0
   819	030662	255 17 0 00 030663 		JFCL	17,.+1	;RESET ALL FLAGS
   820	030663	254 02 0 01 030664 		JRST	2,.+1(1)		;SET CRY0 FLAG
   821	030664	402 00 0 00 030666 		SETZM	.+2		;PRELOAD E WITH 0
   822	030665	264 00 0 00 030666 		JSR	.+1		;*JSR SHOULD PLACE FLAGS AND PC INTO AC
   823	030666	000000	000000			0			;E: PRESET TO 0, SHOULD RECEIVE FLAGS AND PC FROM JSR
   824	030667	336 00 0 00 030666 		SKIPN	.-1		;PASS IF C(E) IS NON-ZERO.
   825						STOP^
   826	030670	254 04 0 00 030671 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   827	030671	324 00 0 00 030672 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   828									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   829									;IN THE SUBTEST) TO LOOP ON ERROR^
   830
   831					;**********
   832
   833					;THIS TEST VERIFIES THAT JSR IGNORES THE AC FIELD;
   834					;HENCE, IT DOES NOT MODIFY THE SPECIFIED AC.
   835					;IN THIS CASE, CRY0 IS SET.  THE AC IS PRELOADED WITH -1,,-1 AND JSR IS EXECUTED.
   836					;THE AC IS THEN CHECKED.  IF C(AC)=-1,,-1, THIS TEST PASSES.
   837
   838	030672				C23100:	SFLAG	CRY0		^;SET CRY0
   839
   840	030672	205 01 0 00 200000 		MOVSI	1,CRY0
   841	030673	255 17 0 00 030674 		JFCL	17,.+1	;RESET ALL FLAGS
   842	030674	254 02 0 01 030675 		JRST	2,.+1(1)		;SET CRY0 FLAG
   843	030675	474 01 0 00 000000 		SETO	1,		;PRELOAD AC WITH -1,,-1
   844	030676	264 01 0 00 030677 		JSR	1,.+1		;*JSR SHOULD NOT MODIFY THE AC
   845	030677	000000	000000			0			;STORE PC + FLAGS HERE
   846	030700	312 01 0 00 033412 		CAME	1,[-1]		;PASS IF C(AC)=-1,,-1
   847						STOP^
   848	030701	254 04 0 00 030702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   849	030702	324 00 0 00 030703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   850									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   851									;IN THE SUBTEST) TO LOOP ON ERROR^
   852
   853					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 3
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSR INSTRUCTION                                                            SEQ 0030

   854					;THIS TEST VERIFIES THAT JSR STORES THE FLAGS IN E-LEFT HALF.
   855					;IN THIS TEST, CRY0 IS SET, E IS CLEARED AND JSR IS EXECUTED.
   856					;NEXT, C(E-LEFT) ARE PLACED INTO AC0 AND AC0 IS CHECKED FOR ITS CONTENTS NON-ZERO.
   857					;IF C(AC0) ARE NON-ZERO, THIS TEST PASSES.
   858
   859	030703				C23200:	SFLAG	CRY0		^;SET CRY0
   860
   861	030703	205 01 0 00 200000 		MOVSI	1,CRY0
   862	030704	255 17 0 00 030705 		JFCL	17,.+1	;RESET ALL FLAGS
   863	030705	254 02 0 01 030706 		JRST	2,.+1(1)		;SET CRY0 FLAG
   864	030706	402 00 0 00 030710 		SETZM	.+2		;CLEAR E
   865	030707	264 00 0 00 030710 		JSR	.+1		;*JSR SHOULD STORE FLAGS IN E
   866	030710	000000	000000			0			;STORE FLAGS HERE (CRY0 MAKES THIS A MOVE INST)
   867	030711	510 00 0 00 030710 		HLLZ	.-1		;PUT FLAGS INTO AC0
   868	030712	336 00 0 00 000000 		SKIPN			;PASS IF C(AC0) NON-ZERO
   869						STOP^
   870	030713	254 04 0 00 030714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   871	030714	324 00 0 00 030715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   872									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   873									;IN THE SUBTEST) TO LOOP ON ERROR^
   874
   875					;**********
   876
   877					;THIS TEST VERIFIES THAT JSR TRANSFERS CONTROL TO E+1.
   878					;IN THIS CASE, CRY0 IS SET AND E  AND AC0 CLEARED; THEN, JSR IS EXECUTED.
   879					;IF JSR RESUMES CONTROL AT E INSTEAD OF E+1, AC0 WILL BE MODIFIED;
   880					;HENCE, THE TEST WILL FAIL WHEN AC0 IS CHECKED FOR 0 BECAUSE
   881					;C(E) IS DECODED AS A MOVE INSTRUCTION.
   882
   883	030715				C23300:	SFLAG	CRY0		^;SET CRY0
   884
   885	030715	205 01 0 00 200000 		MOVSI	1,CRY0
   886	030716	255 17 0 00 030717 		JFCL	17,.+1	;RESET ALL FLAGS
   887	030717	254 02 0 01 030720 		JRST	2,.+1(1)		;SET CRY0 FLAG
   888	030720	403 00 0 00 030722 		SETZB	.+2		;CLEAR AC0 AND E
   889	030721	264 00 0 00 030722 		JSR	.+1		;*JSR SHOULD RESUME CONTROL AT E+1
   890	030722	000000	000000			0			;STORE FLAGS HERE (CRY0 MAKES THIS A MOVE INST)
   891	030723	332 00 0 00 000000 		SKIPE	0		;PASS IF C(AC0)=0
   892						STOP^
   893	030724	254 04 0 00 030725 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   894	030725	324 00 0 00 030726 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   895									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   896									;IN THE SUBTEST) TO LOOP ON ERROR^
   897
   898					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 4
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSR INSTRUCTION                                                            SEQ 0031

   899					;THIS TEST VERIFIES THAT JSR JUMPS TO E+1
   900					;IN THIS CASE, AC0 IS CLEARED AND CRY0 IS SET; THEN, JSR .+2 IS EXECUTED.
   901					;IF JSR DID NOT JUMP, ONES ARE LOADED WITH AC0; AND THE TEST FAILS.
   902					;OTHERWISE, AC0 REMAINS CLEAR AND THE TEST PASSES
   903
   904	030726				C23400:	SFLAG	CRY0		^;SET CRY0
   905
   906	030726	205 01 0 00 200000 		MOVSI	1,CRY0
   907	030727	255 17 0 00 030730 		JFCL	17,.+1	;RESET ALL FLAGS
   908	030730	254 02 0 01 030731 		JRST	2,.+1(1)		;SET CRY0 FLAG
   909	030731	400 00 0 00 000000 		SETZ			;CLEAR AC0
   910	030732	264 00 0 00 030734 		JSR	.+2		;*JSR SHOULD JUMP
   911	030733	474 00 0 00 000000 		SETO			;LOAD AC0 WITH ONES IF JSR FAILED TO JUMP
   912	030734	000000	000000			0			;STORE FLAGS HERE
   913	030735	332 00 0 00 000000 		SKIPE			;PASS  IF JSR JUMPED CORRECTLY
   914						STOP^
   915	030736	254 04 0 00 030737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   916	030737	324 00 0 00 030740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   917									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   918									;IN THE SUBTEST) TO LOOP ON ERROR^
   919
   920					;**********
   921
   922					;THIS TEST VERIFIES THAT JSR STORES THE PC IN E - RIGHT HALF.  THE PC
   923					;IS ONE GREATER THAN THE LOCATION OF THE JSR INSTRUCTION.
   924					;THIS TEST WILL FAIL IF JSR STORES E INSTEAD OF PC IN E - RIGHT HALF.
   925					;IN CASE OF FAILURE, AR PC EN AT ET2 WAS FAULTY.
   926
   927	030740				C23500:	SFLAG	0		^;CLEAR ALL FLAGS
   928
   929	030740	205 01 0 00 000000 		MOVSI	1,0
   930	030741	255 17 0 00 030742 		JFCL	17,.+1	;RESET ALL FLAGS
   931	030742	254 02 0 01 030743 		JRST	2,.+1(1)		;SET 0 FLAG
   932	030743	264 00 0 00 030745 		JSR	.+2		;*JSR SHOULD STORE PC+1 IN E - RIGHT
   933	030744	254 04 0 00 030744 		HALT	.		;JSR SHOULD SKIP OVER THIS HALT
   934	030745	000000	000000			0			;STORE FLAGS AND PC HERE
   935	030746	550 00 0 00 030745 		HRRZ	.-1		;PUT STORED CONTENTS OF E - RIGHT INTO AC0
   936	030747	306 00 0 00 030745 		CAIN	.-2		;FAIL IF C(AC0)=E
   937						STOP^
   938	030750	254 04 0 00 030751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   939	030751	324 00 0 00 030752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   940									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   941									;IN THE SUBTEST) TO LOOP ON ERROR^
   942
   943					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 5
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSR INSTRUCTION                                                            SEQ 0032

   944					;THIS TEST VERIFIES THAT JSR STORES THE PC IN E - RIGHT HALF.  THE PC
   945					;IS ONE GREATER THAN THE LOCATION OF THE JSR INSTRUCTION.
   946					;THIS TEST WILL PASS IF JSR STORES PC IN E - RIGHT HALF.
   947
   948	030752	264 00 0 00 030754 	C23600:	JSR	.+2		;*JSR SHOULD STORE PC+1 IN E - RIGHT
   949	030753	254 04 0 00 030753 		HALT	.		;JSR SHOULD SKIP OVER THIS HALT
   950	030754	000000	000000			0			;STORE FLAGS AND PC HERE
   951	030755	550 00 0 00 030754 		HRRZ	.-1		;PUT STORED CONTENTS OF E - RIGHT INTO AC0
   952	030756	302 00 0 00 030753 		CAIE	C23600+1	;PASS IF C(AC0)=C23600+1 [PC]
   953						STOP^
   954	030757	254 04 0 00 030760 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   955	030760	324 00 0 00 030761 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   956									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   957									;IN THE SUBTEST) TO LOOP ON ERROR^
   958
   959					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 6
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0033

   960					SUBTTL	TEST OF JSA INSTRUCTION
   961
   962					;**********
   963
   964					;THIS TEST VERIFIES THAT JSA JUMPS TO LOCATION E+1.
   965					;IN THIS TEST, AC1 IS CLEARED AND A CAM 0,0 IS LOADED
   966					;INTO THE AC OF THE JSA INSTRUCTION.
   967					;IF JSA DOES NOT JUMP, AC1 WILL BE LOADED WITH ONES.  AC1 IS CHECKED FOR ZEROS.
   968					;IF C(AC1)=0, THE TEST PASSES; OTHERWISE, THIS TEST FAILS BECAUSE JSA DID NOT JUMP.
   969
   970	030761	400 01 0 00 000000 	C23700:	SETZ	1,		;CLEAR AC1
   971	030762	200 00 0 00 033413 		MOVE	[CAM]		;LOAD CAM INTO AC0
   972	030763	266 00 0 00 030765 		JSA	.+2		;*JSA SHOULD JUMP TO E+1
   973	030764	474 00 0 00 000001 		SETO	1		;JSA SHOULD JUMP OVER THIS INSTRUCTION
   974	030765	000000	000000			0			;PASS IF JSA JUMPED
   975	030766	332 00 0 00 000001 		SKIPE	1
   976						STOP^
   977	030767	254 04 0 00 030770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   978	030770	324 00 0 00 030771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   979									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   980									;IN THE SUBTEST) TO LOOP ON ERROR^
   981
   982					;**********
   983
   984					;THIS TEST VERIFIES THAT JSA JUMPS TO LOCATION E+1.
   985					;IN THIS TEST, AC1 IS CLEARED AND A MOVEI 1,1234 IS LOADED
   986					;INTO THE AC OF THE JSA INSTRUCTION.
   987					;IF JSA DOES NOT JUMP, AC1 WILL BE LOADED WITH 0,,1234.  AC1 IS CHECKED FOR ZEROS.
   988					;IF C(AC1)=0, THE TEST PASSES; OTHERWISE, THIS TEST FAILS BECAUSE JSA DID NOT JUMP.
   989
   990	030771	400 01 0 00 000000 	C24000:	SETZ	1,		;CLEAR AC1
   991	030772	200 00 0 00 033414 		MOVE	[MOVEI 1,1234]	;LOAD MOVEI 1,1234 INTO AC
   992	030773	266 00 0 00 030774 		JSA	.+1		;*JSA SHOULD JUMP TO E+1
   993	030774	000000	000000			0			;JSA SHOULD JUMP OVER THIS LOCATION
   994	030775	306 01 0 00 001234 		CAIN	1,1234		;FAIL IF JSA DID NOT JUMP OVER PREVIOUS INSTRUCTION
   995						STOP^
   996	030776	254 04 0 00 030777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   997	030777	324 00 0 00 031000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   998									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   999									;IN THE SUBTEST) TO LOOP ON ERROR^
  1000
  1001					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 7
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0034

  1002					;THIS TEST VERIFIES THAT JSA LOADS PC OF LOC OF JSA+1 INTO AC RIGHT. 
  1003					;THIS TEST WILL FAIL IF JSA LOADS E INTO AC RIGHT INSTEAD OF PC.
  1004
  1005	031000	266 00 0 00 031002 	C24100:	JSA	.+2		;*JSA SHOULD LOAD PC INTO AC RIGHT
  1006	031001	254 04 0 00 031001 		HALT	.		;JSA SHOULD JUMP OVER THIS LOCATION
  1007	031002	000000	000000			0			;JSA SHOULD JUMP OVER THIS LOCATION
  1008	031003	552 00 0 00 000001 		HRRZM	1		;PUT C(AC-RIGHT) INTO AC1
  1009	031004	306 01 0 00 031002 		CAIN	1,.-2		;FAIL IF E WAS LOADED INTO AC-RIGHT INSTEAD OF PC
  1010						STOP^
  1011	031005	254 04 0 00 031006 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1012	031006	324 00 0 00 031007 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1013									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1014									;IN THE SUBTEST) TO LOOP ON ERROR^
  1015
  1016					;**********
  1017
  1018					;THIS TEST VERIFIES THAT JSA PLACES C(AC) INTO E
  1019					;THIS TEST WILL FAIL IF EITHER 0,,E OR 0,,PC IS LOADED
  1020					;INTO E INSTEAD OF C(AC)
  1021
  1022	031007	403 00 0 00 031011 	C24200:	SETZB	.+2		;CLEAR AC,E
  1023	031010	266 00 0 00 031011 		JSA	.+1		;*JSA SHOULD LOAD C(AC) [ZEROS] INTO E
  1024	031011	000000	000000			0			;JSA SHOULD PLACE ZEROS HERE
  1025	031012	200 01 0 00 031011 		MOVE	1,.-1		;SAVE C(AC)
  1026	031013	306 01 0 00 031011 		CAIN	1,.-2		;FAIL IF JSA LOADED 0,,E OR 0,,PC INTO E
  1027						STOP^
  1028	031014	254 04 0 00 031015 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1029	031015	324 00 0 00 031016 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1030									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1031									;IN THE SUBTEST) TO LOOP ON ERROR^
  1032
  1033					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 8
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0035

  1034					;THIS TEST VERIFIES THAT JSA PLACES PC INTO AC-RIGHT
  1035					;THIS TEST WILL FAIL IF PC IS NOT LOADED INTO AC-RIGHT
  1036
  1037	031016	201 00 0 00 777777 	C24300:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  1038	031017	266 00 0 00 031020 		JSA	.+1		;*JSA SHOULD PLACE E,,PC INTO THE AC
  1039	031020	000000	000000			0			;JSA SHOULD PLACE C(AC) HERE
  1040	031021	606 00 0 00 777777 		TRNN	-1		;FAIL IF AR LT AR RT EN FAILED
  1041						STOP^
  1042	031022	254 04 0 00 031023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1043	031023	324 00 0 00 031024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1045									;IN THE SUBTEST) TO LOOP ON ERROR^
  1046
  1047					;**********
  1048
  1049					;THIS TEST VERIFIES THAT JSA PLACES THE PC OF THE LOCATION OF JSA+1 IN AC-RIGHT
  1050					;THIS TEST FAILS IF A PC WAS NOT LOADED INTO AC RIGHT
  1051
  1052	031024	400 00 0 00 000000 	C24400:	SETZ			;CLEAR AC
  1053	031025	266 00 0 00 031026 		JSA	.+1		;*JSA SHOULD LOAD PC INTO AC - RIGHT
  1054	031026	000000	000000			0			;JSA SHOULD PLACE C(AC) HERE
  1055	031027	606 00 0 00 777777 		TRNN	-1		;PASS IF AC - RIGHT IS NON-ZERO
  1056						STOP^
  1057	031030	254 04 0 00 031031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1058	031031	324 00 0 00 031032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1059									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1060									;IN THE SUBTEST) TO LOOP ON ERROR^
  1061
  1062					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 9
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0036

  1063					;THIS TEST VERIFIES THAT JSA PLACES IN AC-LEFT
  1064					;THIS TEST FAILS IF JSA LOADS PC INSTEAD OF E INTO AC-LEFT
  1065
  1066	031032	266 00 0 00 031034 	C24500:	JSA	.+2		;*JSA SHOULD LOAD E INTO AC-LEFT
  1067	031033	254 04 0 00 031033 		HALT	.		;JSA SHOULD JUMP OVER THIS INSTRUCTION
  1068	031034	000000	000000			0			;E:
  1069	031035	556 00 0 00 000001 		HLRZM	1		;SAVE C(AC - LEFT)
  1070	031036	306 01 0 00 031033 		CAIN	1,.-3		;FAIL IF JSA LOADED PC INSTEAD OF E INTO AC-LEFT
  1071						STOP^
  1072	031037	254 04 0 00 031040 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1073	031040	324 00 0 00 031041 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1074									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1075									;IN THE SUBTEST) TO LOOP ON ERROR^
  1076
  1077					;**********
  1078
  1079					;THIS TEST VERIFIES THAT JSA LOADS E,,PC INTO THE AC
  1080					;FIRST, THE AC IS PRELOADED WITH -1,,-1; THEN, JSA IS EXECUTED.
  1081					;THE AC IS CHECKED FOR E,,PC.  IF C(AC)=E,,PC, THIS TEST PASSES
  1082
  1083	031041	474 00 0 00 000000 	C24600:	SETO			;PRELOAD AC WITH -1,,-1
  1084	031042	266 00 0 00 031044 		JSA	.+2		;*JSA SHOULD PLACE E,,PC INTO THE AC
  1085	031043	254 04 0 00 031043 		HALT	.		;JSA SHOULD JUMP OVER HERE, PC:
  1086	031044	000000	000000			0			;JSA SHOULD STORE C(AC) HERE, E:
  1087	031045	312 00 0 00 033415 		CAME	[XWD .-1,.-2]	;PASS IF C(AC)=E,,PC
  1088						STOP^
  1089	031046	254 04 0 00 031047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1090	031047	324 00 0 00 031050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1091									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1092									;IN THE SUBTEST) TO LOOP ON ERROR^
  1093
  1094					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 10
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0037

  1095					;THIS TEST VERIFIES THAT JSA LOADS E,,PC INTO THE AC
  1096					;FIRST, THE AC IS PRELOADED WITH 0 JSA IS EXECUTED.
  1097					;THE AC IS CHECKED FOR E,,PC.  IF C(AC)=E,,PC, THIS TEST PASSES
  1098
  1099	031050	400 00 0 00 000000 	C24700:	SETZ			;PRELOAD AC WITH 0
  1100	031051	266 00 0 00 031053 		JSA	.+2		;*JSA SHOULD PLACE E,,PC INTO THE AC
  1101	031052	254 04 0 00 031052 		HALT	.		;JSA SHOULD JUMP OVER HERE, PC:
  1102	031053	000000	000000			0			;JSA SHOULD STORE C(AC) HERE, E:
  1103	031054	312 00 0 00 033416 		CAME	[XWD .-1,.-2]	;PASS IF C(AC)=E,,PC
  1104						STOP^
  1105	031055	254 04 0 00 031056 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1106	031056	324 00 0 00 031057 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1107									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1108									;IN THE SUBTEST) TO LOOP ON ERROR^
  1109
  1110					;**********
  1111
  1112					;THIS TEST VERIFIES THAT JSA LOADS C(AC) INTO E.
  1113					;AC IS FIRST CLEARED AND E IS PRELOADED WITH ONES;
  1114					;THEN JSA IS EXECUTED.  E IS CHECKED FOR ZEROS.  IF C(E)=0,
  1115					;THIS TEST PASSES.
  1116
  1117	031057	400 00 0 00 000000 	C25000:	SETZ			;CLEAR AC
  1118	031060	476 00 0 00 031062 		SETOM	.+2		;PRELOAD E WITH -1,,-1
  1119	031061	266 00 0 00 031062 		JSA	.+1		;*JSA SHOULD PLACE C(AC) INTO E
  1120	031062	000000	000000			0			;E: SHOULD GET C(AC) FROM JSA
  1121	031063	332 00 0 00 031062 		SKIPE	.-1		;PASS IF C(E)=0
  1122						STOP^
  1123	031064	254 04 0 00 031065 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1124	031065	324 00 0 00 031066 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1125									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1126									;IN THE SUBTEST) TO LOOP ON ERROR^
  1127
  1128					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 11
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0038

  1129					;THIS TEST VERIFIES THAT JSA LOADS C(AC) INTO E.
  1130					;AC IS FIRST PRELOADED WITH -1,,-1 AND E IS CLEARED;
  1131					;THEN, JSA IS EXECUTED.  E IS CHECKED FOR -1,,-1.  IF C(E)=-1,,-1,
  1132					;THIS TEST PASSES.
  1133
  1134	031066	477 00 0 00 000001 	C25100:	SETOB	1		;PRELOAD AC -1,,-1
  1135	031067	402 00 0 00 031071 		SETZM	.+2		;PRELOAD E WITH 0
  1136	031070	266 00 0 00 031071 		JSA	.+1		;*JSA SHOULD PLACE C(AC) INTO E
  1137	031071	000000	000000			0			;E: SHOULD GET C(AC) FROM JSA
  1138	031072	312 01 0 00 031071 		CAME	1,.-1		;PASS IF C(E)=-1,,-1
  1139						STOP^
  1140	031073	254 04 0 00 031074 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1141	031074	324 00 0 00 031075 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1142									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1143									;IN THE SUBTEST) TO LOOP ON ERROR^
  1144
  1145					;**********
  1146
  1147					;THIS TEST VERIFIES THAT JSA LOADS C(AC) INTO E.
  1148					;AC IS FIRST CLEARED AND E IS PRELOADED WITH ONES;
  1149					;THEN JSA IS EXECUTED.  E IS CHECKED FOR ZEROS.  IF C(E)=0,
  1150					;THIS TEST PASSES.
  1151
  1152	031075	201 00 0 00 777777 	C25200:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  1153	031076	266 00 0 00 031077 		JSA	.+1		;*JSA SHOULD PLACE C(AC) INTO E
  1154	031077	000000	000000			0			;E: SHOULD GET C(AC) FROM JSA
  1155	031100	200 01 0 00 031077 		MOVE	1,.-1		;PASS IF C(E)=0,,-1
  1156	031101	302 01 0 00 777777 		CAIE	1,-1
  1157						STOP^
  1158	031102	254 04 0 00 031103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1159	031103	324 00 0 00 031104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1160									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1161									;IN THE SUBTEST) TO LOOP ON ERROR^
  1162
  1163					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 12
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JSA INSTRUCTION                                                            SEQ 0039

  1164					;THIS TEST VERIFIES THAT JSA DOES NOT MODIFY AC+1
  1165					;IN THIS TEST, AC+1 IS PRELOADED WITH -1,,-1; THEN JSA IS EXECUTED
  1166					;AC+1 IS THEN CHECKED FOR ITS ORIGINAL CONTENTS, -1,,-1.
  1167					;IF C(AC+1)=-1,,-1, THIS TEST PASSES
  1168
  1169	031104	476 00 0 00 000001 	C25300:	SETOM	1		;PRELOAD AC+1 WITH -1,,-1
  1170	031105	266 00 0 00 031106 		JSA	.+1		;*JSA SHOULD NOT MODIFY AC+1
  1171	031106	310 00 0 00 000000 		CAM			;JSA SHOULD JUMP OVER THIS, E:PC:
  1172	031107	312 01 0 00 033412 		CAME	1,[-1]		;PASS IF AC+1 WAS NOT MODIFIED BY JSA
  1173						STOP^
  1174	031110	254 04 0 00 031111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1175	031111	324 00 0 00 031112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1176									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1177									;IN THE SUBTEST) TO LOOP ON ERROR^
  1178
  1179					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 13
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JRA INSTRUCTION                                                            SEQ 0040

  1180					SUBTTL	TEST OF JRA INSTRUCTION
  1181
  1182					;**********
  1183
  1184					;THIS TEST VERIFIES THAT JRA TRANSFERS CONTROL TO LOCATION E
  1185					;THIS TEST FAILS IF JRA DOES NOT JUMP TO E.
  1186
  1187	031112	200 00 0 00 033417 	C25400:	MOVE	[JRST .+4]	;PRELOAD AC0 WITH JRST .+4
  1188	031113	205 01 0 00 031115 		MOVSI	1,.+2		;PRELOAD AC WITH E,,0
  1189	031114	267 01 0 00 031115 		JRA	1,.+1		;*JRA SHOULD JUMP TO NEXT INSTRUCTION
  1190	031115	334 00 0 00 000000 		SKIPA			;PASS IF JRA JUMPS TO E
  1191						STOP^
  1192	031116	254 04 0 00 031117 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1193	031117	324 00 0 00 031120 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1194									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1195									;IN THE SUBTEST) TO LOOP ON ERROR^
  1196
  1197					;**********
  1198
  1199					;THIS TEST VERIFIES THAT JRA TRANSFERS CONTROL TO LOCATION E
  1200					;THIS TEST FAILS IF JRA DOES NOT JUMP TO E.
  1201
  1202	031120	205 00 0 00 031123 	C25500:	MOVSI	.+3		;PRELOAD AC WITH E+1
  1203	031121	267 00 0 00 031122 		JRA	.+1		;*JRA SHOULD JUMP TO NEXT SEQUENTIAL INSTRUCTION
  1204	031122	334 00 0 00 000000 		SKIPA			;PASS IF JRA JUMPS TO E
  1205						STOP^
  1206	031123	254 04 0 00 031124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1207	031124	324 00 0 00 031125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1208									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1209									;IN THE SUBTEST) TO LOOP ON ERROR^
  1210
  1211					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 14
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JRA INSTRUCTION                                                            SEQ 0041

  1212					;THIS TEST VERIFIES THAT JRA TRANSFERS CONTROL TO LOCATION E
  1213					;THIS TEST FAILS IF JRA DOES NOT JUMP TO E.
  1214
  1215	031125	403 00 0 00 000001 	C25600:	SETZB	1		;PRELOAD AC0, AC1 WITH ZEROS
  1216	031126	267 00 0 00 031130 		JRA	.+2		;*JRA SHOULD JUMP OVER NEXT SEQUENTIAL INSTRUCTION
  1217	031127	474 01 0 00 000000 		SETO	1,		;LOAD AC1 WITH ONES IF JRA DOES NOT JUMP
  1218	031130	332 00 0 00 000001 		SKIPE	1		;PASS IF JRA JUMPED
  1219						STOP^
  1220	031131	254 04 0 00 031132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1221	031132	324 00 0 00 031133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1223									;IN THE SUBTEST) TO LOOP ON ERROR^
  1224
  1225					;**********
  1226
  1227					;THIS TEST VERIFIES THAT JRA PLACES C(C(AC-LEFT)) INTO THE AC AND JUMPS TO E
  1228					;THIS TEST FAILS IF JRA JUMPS TO E+1 OR DOES NOT LOAD THE AC CORRECTLY.
  1229
  1230	031133	400 00 0 00 000000 	C25700:	SETZ			;CLEAR AC
  1231	031134	267 00 0 00 031135 		JRA	.+1		;*JRA SHOULD PLACE 0 INTO THE AC AND JUMP .+1
  1232	031135	332 00 0 00 000000 		SKIPE			;PASS IF AC WAS LOADED CORRECTLY
  1233									;AND JRA JUMPED CORRECTLY.
  1234						STOP^
  1235	031136	254 04 0 00 031137 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1236	031137	324 00 0 00 031140 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1237									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1238									;IN THE SUBTEST) TO LOOP ON ERROR^
  1239
  1240					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 15
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JRA INSTRUCTION                                                            SEQ 0042

  1241					;THIS TEST VERIFIES THAT JRA PLACES C(C(AC-LEFT)) INTO THE AC
  1242					;FIRST, THE AC IS PRELOADED WITH 1,,2 AND AC1 AND AC2 ARE
  1243					;INITIALIZED WITH THEIR RESPECTIVE ADDRESSES; JRA IS EXECUTED, AND
  1244					;THE AC IS CHECKED FOR 0,,1, THE ORIGINAL C(C(AC-LEFT)). IF C(AC)=0,,1,
  1245					;THIS TEST PASSES
  1246
  1247	031140	200 00 0 00 033420 	C26200:	MOVE	[XWD 1,2]	;PRELOAD AC WITH 1,,2
  1248	031141	201 01 0 00 000001 		MOVEI	1,1		;INITIALIZE AC1 WITH 0,,1
  1249	031142	201 02 0 00 000002 		MOVEI	2,2		;INITIALIZE AC2 WITH 0,,2
  1250	031143	267 00 0 00 031144 		JRA	.+1		;*JRA SHOULD PLACE 0,,1 INTO THE AC
  1251	031144	302 00 0 00 000001 		CAIE	1		;PASS IF C(AC)=0,,1
  1252						STOP^
  1253	031145	254 04 0 00 031146 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1254	031146	324 00 0 00 031147 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1255									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1256									;IN THE SUBTEST) TO LOOP ON ERROR^
  1257
  1258					;**********
  1259
  1260					;THIS TEST VERIFIES THAT JRA CAN RESTORE AC0 FROM AC0 WHEN AC0 IS THE
  1261					;SPECIFIED AC AND C(AC0-LEFT)=0.
  1262					;FIRST, AC0 IS PRELOADED AND JRA IS EXECUTED.  THEN, AC0 IS CHECKED FOR
  1263					;ITS INITIAL CONTENTS.  IF THE RESULT IN AC0, IS CORRECT, THIS TEST PASSES.
  1264
  1265	031147	551 00 0 00 033421 	C26300:	HRRZI	[135531,,246642]	;PRELOAD AC0 WITH 0,, LITERAL ADDRESS
  1266	031150	267 00 0 00 031151 		JRA	.+1		;*JRA SHOULD PLACE C(AC0) INTO AC0
  1267	031151	302 00 0 00 033421 		CAIE	[135531,,246642] ;PASS IF JRA PLACED C(AC0) INTO AC0
  1268						STOP^
  1269	031152	254 04 0 00 031153 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1270	031153	324 00 0 00 031154 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1271									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1272									;IN THE SUBTEST) TO LOOP ON ERROR^
  1273
  1274					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 16
DSKAE1	MAC	28-Mar-78 13:59		TEST OF JRA INSTRUCTION                                                            SEQ 0043

  1275					;THIS TEST VERIFIES THAT JRA CAN RESOTRE AC0 FROM MEMORY WHEN AC0 IS THE
  1276					;SPECIFIED AC.
  1277					;FIRST, AC0 IS PRELOADED WITH [LITERAL ADDRESS ,,0] AND JRA IS EXECUTED.  THEN,
  1278					;AC0 IS CHECKED FOR THE SPECIFIED LITERAL, 135246,,246135.  IF 
  1279					;C(AC0)=135246,,246135, THE TEST PASSES.
  1280
  1281	031154	515 00 0 00 033422 	C26400:	HRLZI	[135246,,246135] ;PRELOAD AC0 WITH [LITERAL ADDRESS ,,0]
  1282	031155	267 00 0 00 031156 		JRA	.+1		;*JRA SHOULD PLACE 135246,,246135 INTO AC0
  1283	031156	312 00 0 00 033422 		CAME	[135246,,246135];PASS IF C(AC0)=135246,,246135
  1284						STOP^
  1285	031157	254 04 0 00 031160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1286	031160	324 00 0 00 031161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1287									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1288									;IN THE SUBTEST) TO LOOP ON ERROR^
  1289
  1290					;**********
  1291
  1292					;THIS TEST VERIFIES THAT JRA CAN RESOTRE AC0 FROM MEMORY WHEN AC0 IS THE
  1293					;SPECIFIED AC.
  1294					;FIRST, AC0 IS PRELOADED WITH [-1,, ADDRESS OF JCA INSTRUCTION] AND JRA IS EXECUTED.
  1295					;THEN, AC0 IS CHECKED FOR THE JRA INSTRUCTION.  IF 
  1296					;C(AC0)= THE JRA INSTRUCTION, THE TEST PASSES.
  1297
  1298	031161	525 00 0 00 031162 	C26500:	HRLOI	.+1		;PRELOAD AC WITH -1,, ADDRESS OF JRA INSTRUCTION
  1299	031162	267 00 0 00 031163 		JRA	.+1		;*JRA SHOULD PLACE ITSELF INTO AC0
  1300	031163	312 00 0 00 031162 		CAME	.-1		;PASS IF AC CONTAINS JRA INSTRUCTION
  1301						STOP^
  1302	031164	254 04 0 00 031165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1303	031165	324 00 0 00 031166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1305									;IN THE SUBTEST) TO LOOP ON ERROR^
  1306
  1307					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 17
DSKAE1	MAC	28-Mar-78 13:59		TESTS OF BIS FLAG                                                                  SEQ 0044

  1308					SUBTTL	TESTS OF BIS FLAG
  1309
  1310					;**********
  1311
  1312					;THIS TEST VERIFIES THAT JRST 2, CAN CLEAR BIS
  1313					;FIRST, BIS IS SET VIA JRST 2, ;THEN, BIS IS CLEARED VIA JRST 2,.
  1314					;THE FLAGS ARE SAVED AND BIS IS CHECKED.  THIS TEST PASSES IF BIS IS RESET;
  1315					;OTHERWISE JRST 2, FAILED TO RESET BIS.
  1316
  1317	031166				C26600:	SFLAG	BIS		^;SET BIS FLAG
  1318
  1319	031166	205 01 0 00 020000 		MOVSI	1,BIS
  1320	031167	255 17 0 00 031170 		JFCL	17,.+1	;RESET ALL FLAGS
  1321	031170	254 02 0 01 031171 		JRST	2,.+1(1)		;SET BIS FLAG
  1322						SFLAG			^;*RESET BIS FLAG
  1323
  1324	031171	205 01 0 00 000000 		MOVSI	1,
  1325	031172	255 17 0 00 031173 		JFCL	17,.+1	;RESET ALL FLAGS
  1326	031173	254 02 0 01 031174 		JRST	2,.+1(1)		;SET  FLAG
  1327	031174	265 00 0 00 031175 		JSP	.+1		;SAVE FLAGS
  1328	031175	603 00 0 00 020037 		TLNE	BIS+37		;PASS IF BIS FLAG IS RESET
  1329						STOP^
  1330	031176	254 04 0 00 031177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1331	031177	324 00 0 00 031200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1333									;IN THE SUBTEST) TO LOOP ON ERROR^
  1334
  1335					;**********
  1336
  1337					;THIS TEST VERIFIES THAT JRST 2, CAN SET BIS.
  1338					;FIRST, BIS IS SET VIA JRST 2, AND THE FLAGS ARE SAVED.
  1339					;BIS IS THEN CHECKED.  IF BIS IS SET, THIS TEST PASSES.
  1340
  1341	031200				C26700:	SFLAG	BIS		^;*SET BIS FLAG VIA JRST
  1342
  1343	031200	205 01 0 00 020000 		MOVSI	1,BIS
  1344	031201	255 17 0 00 031202 		JFCL	17,.+1	;RESET ALL FLAGS
  1345	031202	254 02 0 01 031203 		JRST	2,.+1(1)		;SET BIS FLAG
  1346	031203	265 00 0 00 031204 		JSP	.+1		;SAVE FLAGS
  1347	031204	607 00 0 00 020000 		TLNN	BIS		;PASS IF BIS FLAG IS SET
  1348						STOP^
  1349	031205	254 04 0 00 031206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1350	031206	324 00 0 00 031207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1352									;IN THE SUBTEST) TO LOOP ON ERROR^
  1353
  1354					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 18
DSKAE1	MAC	28-Mar-78 13:59		TESTS OF BIS FLAG                                                                  SEQ 0045

  1355					;THIS TEST VERIFIES THAT JSR ALWAYS RESETS BIS.
  1356					;FIRST BIS IS SET; THEN JSR IS EXECUTED.  THE FLAGS ARE
  1357					;THEN SAVED AND CHECKED.  IF BIS WAS RESET VIA JSR, THIS TEST PASSES.
  1358
  1359	031207				C27000:	SFLAG	BIS		^;SET BIS
  1360
  1361	031207	205 01 0 00 020000 		MOVSI	1,BIS
  1362	031210	255 17 0 00 031211 		JFCL	17,.+1	;RESET ALL FLAGS
  1363	031211	254 02 0 01 031212 		JRST	2,.+1(1)		;SET BIS FLAG
  1364	031212	264 00 0 00 031213 		JSR	.+1		;*JSR SHOULD RESET BIS
  1365	031213	000000	000000			0			;JSR SAVES FLAGS HERE
  1366	031214	265 00 0 00 031215 		JSP	.+1		;SAVE FLAGS
  1367	031215	603 00 0 00 020000 		TLNE	BIS		;PASS IF BIS FLAG IS RESET
  1368						STOP^
  1369	031216	254 04 0 00 031217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1370	031217	324 00 0 00 031220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1371									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1372									;IN THE SUBTEST) TO LOOP ON ERROR^
  1373
  1374					;**********
  1375
  1376					;THIS TEST VERIFIES THAT JSP ALWAYS RESETS BIS.
  1377					;FIRST BIS IS SET; THEN JSP IS EXECUTED.  THE FLAGS ARE
  1378					;THEN SAVED AND CHECKED.  IF BIS WAS RESET VIA JSP, THIS TEST PASSES.
  1379
  1380	031220				C27001:	SFLAG	BIS		^;SET BIS
  1381
  1382	031220	205 01 0 00 020000 		MOVSI	1,BIS
  1383	031221	255 17 0 00 031222 		JFCL	17,.+1	;RESET ALL FLAGS
  1384	031222	254 02 0 01 031223 		JRST	2,.+1(1)		;SET BIS FLAG
  1385	031223	265 00 0 00 031224 		JSP	.+1		;*JSP SHOULD RESET BIS
  1386	031224	265 00 0 00 031225 		JSP	.+1		;SAVE FLAGS
  1387	031225	603 00 0 00 020000 		TLNE	BIS		;PASS IF BIS FLAG IS RESET
  1388						STOP^
  1389	031226	254 04 0 00 031227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1390	031227	324 00 0 00 031230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1391									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1392									;IN THE SUBTEST) TO LOOP ON ERROR^
  1393
  1394					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 19
DSKAE1	MAC	28-Mar-78 13:59		TESTS OF BIS FLAG                                                                  SEQ 0046

  1395					;THIS TEST VERIFIES THAT THE BITS IN POSITIONS 8, 9 AND 10 ARE CLEARABLE.
  1396					;FIRST, THE ARITHMETIC FLAGS ARE CLEARED;
  1397					;THEN, BITS 8, 9 AND 10 OF THE PC-WORD IS EXAMINED.
  1398					;IF ANY OF THESE BITS ARE SET, THIS TEST FAILS BECAUSE THEY SHOULD BE CLEAR.
  1399
  1400	031230				C27100:	SFLAG			^;CLEAR ARITHMETIC FLAGS
  1401
  1402	031230	205 01 0 00 000000 		MOVSI	1,
  1403	031231	255 17 0 00 031232 		JFCL	17,.+1	;RESET ALL FLAGS
  1404	031232	254 02 0 01 031233 		JRST	2,.+1(1)		;SET  FLAG
  1405	031233	265 00 0 00 031234 		JSP	.+1		;SAVE FLAGS
  1406	031234	603 00 0 00 001600 		TLNE	1600		;PASS IF THESE BITS ARE CLEAR
  1407						STOP^
  1408	031235	254 04 0 00 031236 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1409	031236	324 00 0 00 031237 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1410									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1411									;IN THE SUBTEST) TO LOOP ON ERROR^
  1412
  1413					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 20
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0047

  1414					SUBTTL	TEST OF MSCL FWT INSTRUCTIONS
  1415
  1416					;**********
  1417
  1418					;THIS TEST VERIFIES THAT MOVEM PLACES C(AC) INTO E AND DOES
  1419					;NOT MODIFY C(AC).
  1420					;IN THIS CASE, C(AC)=252525,,252525 ANS C(E)=707070,,707070.
  1421					;HENCE, THE RESULT IN E SHOULD BE 252525,,252525.
  1422					;THE AC IS CHECKED FOR 252525,,252525.  IF ANY OTHER NUMBER IS
  1423					;FOUND IN THE AC, IT WAS CLOBBERED BY MOVEM, AND THIS TEST FAILS.
  1424					;E IS CHECKED FOR 252525,,252525.  IF ANY OTHER NUMBER IS FOUND
  1425					;IN E, IT WAS UPDATED INCORRECTLY BY MOVEM.
  1426
  1427	031237	200 00 0 00 033423 	C50000:	MOVE	[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  1428	031240	200 01 0 00 033424 		MOVE	1,[707070,,707070]	;PRELOAD E WITH 707070,,707070
  1429	031241	202 00 0 00 000001 		MOVEM	0,1			;*MOVEM SHOULD PLACE 252525,,252525
  1430										;INTO E AND NOT AFFECT THE AC
  1431	031242	312 00 0 00 033423 		CAME	0,[252525,,252525]	;PASS IF C(AC) IS NOT CLOBBERED
  1432						STOP^
  1433	031243	254 04 0 00 031244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1434	031244	324 00 0 00 031245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1436									;IN THE SUBTEST) TO LOOP ON ERROR^
  1437	031245	312 01 0 00 033423 		CAME	1,[252525,,252525]	;PASS IF E WAS UPDATED CORRECTLY
  1438						STOP^
  1439	031246	254 04 0 00 031247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1440	031247	324 00 0 00 031250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1441									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1442									;IN THE SUBTEST) TO LOOP ON ERROR^
  1443
  1444					;**********
  1445
  1446					;THIS TEST VERIFIES THAT MOVES PLACES C(E) INTO THE AC IF AC IS NON-ZERO.
  1447					;IN THIS CASE, C(AC)=707070,,707070 AND C(E)=123456,,123456.  HENCE, BOTH
  1448					;THE AC AND E SHOULD CONTAIN 123456,,123456 AFTER MOVES IS EXECUTED.
  1449					;BOTH AC AND E ARE CHECKED FOR 123456,,123456.  IF EITHER AC OR E
  1450					;CONTAIN A DIFFERENT RESULT, THIS TEST FAILS
  1451
  1452	031250	200 02 0 00 033424 	C50100:	MOVE	2,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  1453	031251	200 01 0 00 033425 		MOVE	1,[123456,,123456]	;PRELOAD E WITH 123456,,123456
  1454	031252	203 02 0 00 000001 		MOVES	2,1			;*MOVES SHOULD PLACE 123456,,123456
  1455										;INTO BOTH AC AND E
  1456	031253	312 02 0 00 033425 		CAME	2,[123456,,123456]	;PASS IF C(AC)=123456,,123456
  1457						STOP^
  1458	031254	254 04 0 00 031255 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1459	031255	324 00 0 00 031256 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1460									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1461									;IN THE SUBTEST) TO LOOP ON ERROR^
  1462	031256	312 01 0 00 033425 		CAME	1,[123456,,123456]	;PASS IF C(E)=123456,,123456
  1463						STOP^
  1464	031257	254 04 0 00 031260 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1465	031260	324 00 0 00 031261 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1466									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1467									;IN THE SUBTEST) TO LOOP ON ERROR^
  1468
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 20-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0048

  1469					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 21
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0049

  1470					;THIS TEST VERIFIES THAT MOVES IS A NO-OP IF AC=0
  1471					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=707070,,707070
  1472					;AFTER MOVES IS EXECUTED, AC AND E ARE CHECKED FOR THEIR ORIGINAL DATA.
  1473					;IF EITHER C(AC) OR C(E) CHANGED AS A RESULT OF MOVES, THIS TEST FAILS.
  1474
  1475	031261	200 01 0 00 033424 	C50110:	MOVE	1,[707070,,707070]	;PRELOAD E WITH 707070,,707070
  1476	031262	474 00 0 00 000000 		SETO				;PRELOAD AC WITH -1,,-1
  1477	031263	203 00 0 00 000001 		MOVES	0,1			;*MOVES SHOULD FUNCTION AS A NO-OP
  1478	031264	312 00 0 00 033412 		CAME	0,[-1,,-1]		;PASS IF C(AC) WAS NOT MODIFIED
  1479						STOP^
  1480	031265	254 04 0 00 031266 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1481	031266	324 00 0 00 031267 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1482									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1483									;IN THE SUBTEST) TO LOOP ON ERROR^
  1484	031267	312 01 0 00 033424 		CAME	1,[707070,,707070]	;PASS IF C(E) WAS NOT MODIFIED
  1485						STOP^
  1486	031270	254 04 0 00 031271 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1487	031271	324 00 0 00 031272 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1488									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1489									;IN THE SUBTEST) TO LOOP ON ERROR^
  1490
  1491					;**********
  1492
  1493					;THIS TEST VERIFIES THAT MOVSI LOADS THE WORD E,0 INTO THE AC.
  1494					;IN THIS CASE, C(AC)=707070,,707070 AND E=0,,-1.
  1495					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,0.
  1496					;THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  1497
  1498	031272	200 01 0 00 033424 	C50200:	MOVE	1,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  1499	031273	205 01 0 00 777777 		MOVSI	1,-1			;*MOVSI SHOULD PLACE -1,,0 INTO THE AC
  1500	031274	312 01 0 00 033426 		CAME	1,[-1,,0]		;PASS IF C(AC)=1,,0
  1501						STOP^
  1502	031275	254 04 0 00 031276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1503	031276	324 00 0 00 031277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1504									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1505									;IN THE SUBTEST) TO LOOP ON ERROR^
  1506
  1507					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 22
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0050

  1508					;THIS TEST VERIFIES THAT MOVNM PLACES THE NEGATIVE OF C(AC)
  1509					;INTO E.  IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-3.
  1510					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1 AND THE RESULT
  1511					;IN E SHOULD BE 0,,1
  1512
  1513	031277	474 01 0 00 000000 	C50300:	SETO	1,			;PRELOAD AC WITH -1,,-1
  1514	031300	200 02 0 00 033427 		MOVE	2,[-1,,-3]		;PRELOAD E WITH -1,,-3
  1515	031301	212 01 0 00 000002 		MOVNM	1,2			;*MOVNM SHOULD PLACE 0,,1 INTO E
  1516										;AND NOT AFFTECT C(AC)
  1517	031302	312 01 0 00 033412 		CAME	1,[-1]			;PASS IF C(AC)=-1,,-1
  1518						STOP^
  1519	031303	254 04 0 00 031304 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1520	031304	324 00 0 00 031305 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1521									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1522									;IN THE SUBTEST) TO LOOP ON ERROR^
  1523	031305	302 02 0 00 000001 		CAIE	2,1			;PASS IF C(E)=0,,1
  1524						STOP^
  1525	031306	254 04 0 00 031307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1526	031307	324 00 0 00 031310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1527									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1528									;IN THE SUBTEST) TO LOOP ON ERROR^
  1529
  1530					;**********
  1531
  1532					;THIS TEST VERIFIES THAT MOVNM PLACES THE NEGATIVE OF C(AC)
  1533					;INTO E.  IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-3.
  1534					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1 AND THE RESULT
  1535					;IN E SHOULD BE 0,,1
  1536
  1537	031310	474 01 0 00 000000 	C50301:	SETO	1,			;PRELOAD AC WITH -1,,-1
  1538	031311	200 02 0 00 033427 		MOVE	2,[-1,,-3]		;PRELOAD E WITH -1,,-3
  1539	031312	202 02 0 00 031324 		MOVEM	2,E50301
  1540	031313	212 01 0 00 031324 		MOVNM	1,E50301		;*MOVNM SHOULD PLACE 0,,1 INTO E
  1541										;AND NOT AFFTECT C(AC)
  1542	031314	312 01 0 00 033412 		CAME	1,[-1]			;PASS IF C(AC)=-1,,-1
  1543						STOP^
  1544	031315	254 04 0 00 031316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1545	031316	324 00 0 00 031317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1546									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1547									;IN THE SUBTEST) TO LOOP ON ERROR^
  1548	031317	200 02 0 00 031324 		MOVE	2,E50301
  1549	031320	302 02 0 00 000001 		CAIE	2,1			;PASS IF C(E)=0,,1
  1550						STOP^
  1551	031321	254 04 0 00 031322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1552	031322	324 00 0 00 031323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1553									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1554									;IN THE SUBTEST) TO LOOP ON ERROR^
  1555
  1556	031323	334 00 0 00 000000 		SKIPA				;GO TO NEXT TEST
  1557	031324	000000	000000		E50301:	0				;TESTED MEMORY LOCATION
  1558
  1559					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 23
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0051

  1560					;THIS TEST VERIFIES THAT MOVNS PLACES THE NEGATIVE OF C(E) INTO E
  1561					;AND INTO THE AC IF THE AC IS NON-ZERO.  IN THIS CASE, AC=0,
  1562					;C(AC)=0 AND C(E)=0,,1
  1563					;HENCE, THE RESULT IN THE AC SHOULD BE 0
  1564					;AND THE RESULT IN E SHOULD BE -1,,-1
  1565
  1566	031325	400 00 0 00 000000 	C50400:	SETZ				;CLEAR AC
  1567	031326	201 02 0 00 000001 		MOVEI	2,1			;PRELOAD E WITH 0,,1
  1568	031327	213 00 0 00 000002 		MOVNS	0,2			;*MOVNS SHOULD PLACE -1,,-1 INTO E
  1569										;AND SHOULD NOT AFFECT THE AC
  1570	031330	332 00 0 00 000000 		SKIPE				;PASS IF THE AC IS UNALTERED
  1571						STOP^
  1572	031331	254 04 0 00 031332 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1573	031332	324 00 0 00 031333 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1574									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1575									;IN THE SUBTEST) TO LOOP ON ERROR^
  1576	031333	312 02 0 00 033412 		CAME	2,[-1]			;PASS IF C(E)=-1,,-1
  1577						STOP^
  1578	031334	254 04 0 00 031335 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1579	031335	324 00 0 00 031336 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1580									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1581									;IN THE SUBTEST) TO LOOP ON ERROR^
  1582
  1583					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 24
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0052

  1584					;THIS TEST VERIFIES THAT MOVNS PLACES THE NEGATIVE OF C(E) INTO E
  1585					;AND INTO THE AC IF THE AC IS NON-ZO.  IN THIS CASE, AC=0,
  1586					;C(AC)=0 AND C(E)=0,,1
  1587					;HENCE, THE RESULT IN THE AC SHOULD BE 0
  1588					;AND THE RESULT IN E SHOULD BE -1,,-1
  1589
  1590	031336	400 00 0 00 000000 	C50401:	SETZ				;CLEAR AC
  1591	031337	201 02 0 00 000001 		MOVEI	2,1			;PRELOAD E WITH 0,,1
  1592	031340	202 02 0 00 031352 		MOVEM	2,E50401
  1593	031341	213 00 0 00 031352 		MOVNS	0,E50401		;*MOVNS SHOULD PLACE -1,,-1 INTO E
  1594										;AND SHOULD NOT AFFECT THE AC
  1595	031342	332 00 0 00 000000 		SKIPE				;PASS IF THE AC IS UNALTERED
  1596						STOP^
  1597	031343	254 04 0 00 031344 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1598	031344	324 00 0 00 031345 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1599									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1600									;IN THE SUBTEST) TO LOOP ON ERROR^
  1601	031345	200 02 0 00 031352 		MOVE	2,E50401
  1602	031346	312 02 0 00 033412 		CAME	2,[-1]			;PASS IF C(E)=-1,,-1
  1603						STOP^
  1604	031347	254 04 0 00 031350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1605	031350	324 00 0 00 031351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1606									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1607									;IN THE SUBTEST) TO LOOP ON ERROR^
  1608
  1609	031351	334 00 0 00 000000 		SKIPA				;GO TO NEXT TEST
  1610	031352	000000	000000		E50401:	0				;TESTED MEMORY LOCATION
  1611
  1612					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 25
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0053

  1613					;THIS TEST VERIFIES THAT MOVNS PLACES THE NEGATIVE OF C(E) INTO E
  1614					;AND INTO THE AC IF THE AC IS NON-ZERO.  IN THIS CASE, AC=1,
  1615					;C(AC=0 AND C(E)=3
  1616					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,3
  1617					;AND THE RESULT IN E SHOULD BE -1,,3.
  1618
  1619	031353	400 01 0 00 000000 	C50410:	SETZ	1,			;CLEAR AC
  1620	031354	201 02 0 00 000003 		MOVEI	2,3			;PRELOAD WITH 0,,3
  1621	031355	213 01 0 00 000002 		MOVNS	1,2			;*MOVNS SHOULD PLACE -1,,-3 INTO E
  1622										;AND -1,,-3 INTO THE AC
  1623	031356	312 01 0 00 033427 		CAME	1,[-1,,-3]		;PASS IF C(AC)=-1,,-3
  1624						STOP^
  1625	031357	254 04 0 00 031360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1626	031360	324 00 0 00 031361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1627									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1628									;IN THE SUBTEST) TO LOOP ON ERROR^
  1629	031361	312 02 0 00 033427 		CAME	2,[-1,,-3]		;PASS IF C(E)=-1,,-3
  1630						STOP^
  1631	031362	254 04 0 00 031363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1632	031363	324 00 0 00 031364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1633									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1634									;IN THE SUBTEST) TO LOOP ON ERROR^
  1635
  1636					;**********
  1637
  1638					;THIS TEST VERIFIES THAT MOVMI MOVES THE WORD 0,,E INTO THE AC.
  1639					;IN THIS CASE, C(AC)=0 AND E=0,,-2.  HENCE, THE RESULT IN THE AC
  1640					;SHOULD BE 0,,-2.
  1641
  1642	031364	400 01 0 00 000000 	C50500:	SETZ	1,			;CLEAR AC
  1643	031365	215 01 0 00 777776 		MOVMI	1,-2			;*MOVMI SHOULD PLACE 0,,-2 INTO AC
  1644	031366	302 01 0 00 777776 		CAIE	1,-2			;PASS IF C(AC)=0,,-2
  1645						STOP^
  1646	031367	254 04 0 00 031370 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1647	031370	324 00 0 00 031371 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1648									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1649									;IN THE SUBTEST) TO LOOP ON ERROR^
  1650
  1651					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 26
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0054

  1652					;THIS TEST VERIFIES THAT MOVM MOVES THE MAGNITUDE OF C(E) NTO THE AC.
  1653					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-2.  HENCE, THE RESULT IN THE AC
  1654					;SHOULD BE 0,,2.
  1655
  1656	031371	400 01 0 00 000000 	C50501:	SETZ	1,			;CLEAR AC
  1657	031372	200 03 0 00 033430 		MOVE	3,[-2]			;PRELOAD E WITH -1,,-2
  1658	031373	214 01 0 00 000003 		MOVM	1,3			;*MOVM SHOULD PLACE 0,,2 INTO AC
  1659	031374	302 01 0 00 000002 		CAIE	1,2			;PASS IF C(AC)=0,,2
  1660						STOP^
  1661	031375	254 04 0 00 031376 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1662	031376	324 00 0 00 031377 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1663									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1664									;IN THE SUBTEST) TO LOOP ON ERROR^
  1665
  1666					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 27
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0055

  1667					;THIS TEST VERIFIES THAT MOVMM PLACES THE MAGNITUDE OF C(AC)
  1668					;INTO E.  IN THIS CASE, C(AC)=-1,,-2 AND C(E)=0.  HENCE, THE
  1669					;RESULT IN E SHOULD BE 0,,2 AND C(AC) SHOULD REMAIN UNCHANGED.
  1670
  1671	031377	200 01 0 00 033430 	C50600:	MOVE	1,[-1,,-2]		;PRELOAD AC WITH -1,,-2
  1672	031400	400 02 0 00 000000 		SETZ	2,			;CLEAR E
  1673	031401	216 01 0 00 000002 		MOVMM	1,2			;*MOVMM SHOULD PLACE 0,,2 INTO E
  1674										;AND SHOULD NOT CHANGE C(AC)
  1675	031402	312 01 0 00 033430 		CAME	1,[-1,,-2]		;PASS IF C(AC) IS NOT ALTERED
  1676						STOP^
  1677	031403	254 04 0 00 031404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1678	031404	324 00 0 00 031405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1679									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1680									;IN THE SUBTEST) TO LOOP ON ERROR^
  1681	031405	302 02 0 00 000002 		CAIE	2,2			;PASS IF C(E)=0,,2
  1682						STOP^
  1683	031406	254 04 0 00 031407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1684	031407	324 00 0 00 031410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1685									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1686									;IN THE SUBTEST) TO LOOP ON ERROR^
  1687
  1688					;**********
  1689
  1690					;THIS TEST VERIFIES THAT MONMS PLACES THE MAGNITUDE OF C(E) INTO E
  1691					;AND INTO THE AC IF THE AC IS NON-ZERO.  IN THIS CASE, AC=0, C(AC)=0
  1692					;AND C(E)=-1,,-2.
  1693					;HENCE, THE RESULT IN THE AC SHOULD BE 0 AND THE RESULT IN
  1694					;E SHOULD BE 0,,2.
  1695
  1696	031410	400 00 0 00 000000 	C50700:	SETZ			;CLEAR AC
  1697	031411	200 02 0 00 033430 		MOVE	2,[-1,,-2]		;PRELOAD E WITH -1,,-1
  1698	031412	217 00 0 00 000002 		MOVMS	0,2			;*MOVMS	SHOULD PLACE 0,,1 INTO E
  1699										;AND SHOULD NOT CHANGE C(AC)
  1700	031413	332 00 0 00 000000 		SKIPE				;PASS IF C(AC) IS UNALTERED
  1701						STOP^
  1702	031414	254 04 0 00 031415 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1703	031415	324 00 0 00 031416 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1704									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1705									;IN THE SUBTEST) TO LOOP ON ERROR^
  1706	031416	302 02 0 00 000002 		CAIE	2,2			;PASS IF C(E)=0,,2
  1707						STOP^
  1708	031417	254 04 0 00 031420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1709	031420	324 00 0 00 031421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1710									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1711									;IN THE SUBTEST) TO LOOP ON ERROR^
  1712
  1713					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 28
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL FWT INSTRUCTIONS                                                      SEQ 0056

  1714					;THIS TEST VERIFIES THAT MOVMS PLACES THE MAGNITUDE OF C(E) INTO E
  1715					;AND INTO THE AC IF THE AC IS NON-ZERO.  IN THIS CASE, AC=1, C(AC)=-1,,-1
  1716					;AND C(E)=-1,,-2.
  1717					;HENCE, THE RESULT IN THE AC SHOULD BE 0,,2 AND THE RESULT
  1718					;IN E SHOULD BE 0,,2.
  1719
  1720	031421	474 01 0 00 000000 	C50710:	SETO	1,			;PRELOAD AC WITH -1,,-1
  1721	031422	200 02 0 00 033430 		MOVE	2,[-1,,-2]		;PRELOAD E WITH -1,,-2
  1722	031423	217 01 0 00 000002 		MOVMS	1,2			;*MOVMS SHOULD PLACE 0,,2 INTO E
  1723										;AND SHOULD PLACE 0,,2 INTO THE AC
  1724	031424	302 01 0 00 000002 		CAIE	1,2			;PASS IF C(AC)=0,,2
  1725						STOP^
  1726	031425	254 04 0 00 031426 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1727	031426	324 00 0 00 031427 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1728									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1729									;IN THE SUBTEST) TO LOOP ON ERROR^
  1730	031427	302 02 0 00 000002 		CAIE	2,2			;PASS IF C(E)=0,,2
  1731						STOP^
  1732	031430	254 04 0 00 031431 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1733	031431	324 00 0 00 031432 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1734									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1735									;IN THE SUBTEST) TO LOOP ON ERROR^
  1736
  1737					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 29
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL ADD/SUB INSTRUCTIONS                                                  SEQ 0057

  1738					SUBTTL	TEST OF MSCL ADD/SUB INSTRUCTIONS
  1739
  1740					;**********
  1741
  1742					;THIS TEST VERIFIES THAT SUBI SUBTRACTS THE WORD 0,,E FROM C(AC)
  1743					;AND PLACES THE RESULT INTO THE AC.  IN THIS CASE, C(AC)=70 AND
  1744					;E=0,,2.  HENCE, THE RESULT IN THE AC SHOULD BE 66.
  1745
  1746	031432	201 01 0 00 000070 	C51000:	MOVEI	1,70			;PRELOAD AC WITH 70
  1747	031433	275 01 0 00 000002 		SUBI	1,2			;*SUBI SHOULD PLACE 66 INTO AC
  1748	031434	302 01 0 00 000066 		CAIE	1,66			;PASS IF C(AC)=66
  1749						STOP^
  1750	031435	254 04 0 00 031436 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1751	031436	324 00 0 00 031437 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1752									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1753									;IN THE SUBTEST) TO LOOP ON ERROR^
  1754
  1755					;**********
  1756
  1757					;THIS TEST VERIFIES THAT SUBM SUBTRACTS C(E) FROM C(AC) AND
  1758					;PLACES THE RESULT INTO E.  THE AC IS UNAFFECTED.  IN THIS CASE,
  1759					;C(AC)=100 AND C(E)=37.  HENCE, THE RESULTS IN AC AND
  1760					;E SHOULD BE 0,,100 AND 0,,41 RESPECTIVELY.
  1761
  1762	031437	201 01 0 00 000100 	C51100:	MOVEI	1,100			;PRELOAD AC WITH 0,,100
  1763	031440	201 02 0 00 000037 		MOVEI	2,37			;PRELOAD E WITH 0,,37
  1764	031441	276 01 0 00 000002 		SUBM	1,2			;*SUBM SHOULD PLACE
  1765										;0,,41 INTO E AND NOT CHANGE C(AC)
  1766	031442	302 01 0 00 000100 		CAIE	1,100			;PASS IF C(AC) IS UNCHANGED
  1767						STOP^
  1768	031443	254 04 0 00 031444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1769	031444	324 00 0 00 031445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1770									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1771									;IN THE SUBTEST) TO LOOP ON ERROR^
  1772	031445	302 02 0 00 000041 		CAIE	2,41			;PASS IF C(E)=0,,41
  1773						STOP^
  1774	031446	254 04 0 00 031447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1775	031447	324 00 0 00 031450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1777									;IN THE SUBTEST) TO LOOP ON ERROR^
  1778
  1779					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 30
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL ADD/SUB INSTRUCTIONS                                                  SEQ 0058

  1780					;THIS TEST VERIFIES THAT SUBM SUBTRACTS C(E) FROM C(AC) AND
  1781					;PLACES THE RESULT INTO E.  THE AC IS UNAFFECTED.  IN THIS CASE,
  1782					;C(AC)=100 AND C(E)=37.  HENCE, THE RESULTS IN AC AND
  1783					;E SHOULD BE 0,,100 AND 0,,41 RESPECTIVELY.
  1784
  1785	031450	201 01 0 00 000100 	C51101:	MOVEI	1,100			;PRELOAD AC WITH 0,,100
  1786	031451	201 02 0 00 000037 		MOVEI	2,37			;PRELOAD E WITH 0,,37
  1787	031452	202 02 0 00 031464 		MOVEM	2,E51101
  1788	031453	276 01 0 00 031464 		SUBM	1,E51101		;*SUBM SHOULD PLACE
  1789										;0,,41 INTO E AND NOT CHANGE C(AC)
  1790	031454	302 01 0 00 000100 		CAIE	1,100			;PASS IF C(AC) IS UNCHANGED
  1791						STOP^
  1792	031455	254 04 0 00 031456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1793	031456	324 00 0 00 031457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1794									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1795									;IN THE SUBTEST) TO LOOP ON ERROR^
  1796	031457	200 02 0 00 031464 		MOVE	2,E51101
  1797	031460	302 02 0 00 000041 		CAIE	2,41			;PASS IF C(E)=0,,41
  1798						STOP^
  1799	031461	254 04 0 00 031462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1800	031462	324 00 0 00 031463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1801									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1802									;IN THE SUBTEST) TO LOOP ON ERROR^
  1803
  1804	031463	334 00 0 00 000000 		SKIPA				;GO TO NEXT TEST
  1805	031464	000000	000000		E51101:	0				;TEST WORD MEMORY
  1806
  1807					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 31
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL ADD/SUB INSTRUCTIONS                                                  SEQ 0059

  1808					;THIS TEST VERIFIES THAT SUBB SUBTRACTS C(E) FROM C(AC) AND
  1809					;PLACES THE RESULT INTO BOTH AC AND E.  IN THIS CASE,
  1810					;C(AC)=0,,100 AND C(E)=0,,37.  HENCE, THE RESULT IN BOTH
  1811					;AC AND E SHOULD BE 0,,41.
  1812
  1813	031465	201 01 0 00 000100 	C51200:	MOVEI	1,100			;PRELOAD AC WITH 0,,100
  1814	031466	201 02 0 00 000037 		MOVEI	2,37			;PRELOAD E WITH O,,37
  1815	031467	277 01 0 00 000002 		SUBB	1,2			;*SUBB SHOULD PLACE 0,,41 INTO BOTH AC  AND E
  1816	031470	302 01 0 00 000041 		CAIE	1,41			;PASS IF C(AC)=0,,41
  1817						STOP^
  1818	031471	254 04 0 00 031472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1819	031472	324 00 0 00 031473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1820									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1821									;IN THE SUBTEST) TO LOOP ON ERROR^
  1822	031473	302 02 0 00 000041 		CAIE	2,41			;PASS IF C(E)=0,,41
  1823						STOP^
  1824	031474	254 04 0 00 031475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1825	031475	324 00 0 00 031476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1826									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1827									;IN THE SUBTEST) TO LOOP ON ERROR^
  1828
  1829					;**********
  1830
  1831					;THIS TEST VERIFIES THAT SUBB SUBTRACTS C(E) FROM C(AC) AND
  1832					;PLACES THE RESULT INTO BOTH AC AND E.  IN THIS CASE,
  1833					;C(AC)=0,,100 AND C(E)=0,,37.  HENCE, THE RESULT IN BOTH
  1834					;AC AND E SHOULD BE 0,,41.
  1835
  1836	031476	201 01 0 00 000100 	C51201:	MOVEI	1,100			;PRELOAD AC WITH 0,,100
  1837	031477	201 02 0 00 000037 		MOVEI	2,37			;PRELOAD E WITH O,,37
  1838	031500	202 02 0 00 031512 		MOVEM	2,E51201
  1839	031501	277 01 0 00 031512 		SUBB	1,E51201		;*SUBB SHOULD PLACE 0,,41 INTO BOTH AC  AND E
  1840	031502	302 01 0 00 000041 		CAIE	1,41			;PASS IF C(AC)=0,,41
  1841						STOP^
  1842	031503	254 04 0 00 031504 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1843	031504	324 00 0 00 031505 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1844									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1845									;IN THE SUBTEST) TO LOOP ON ERROR^
  1846	031505	200 02 0 00 031512 		MOVE	2,E51201
  1847	031506	302 02 0 00 000041 		CAIE	2,41			;PASS IF C(E)=0,,41
  1848						STOP^
  1849	031507	254 04 0 00 031510 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1850	031510	324 00 0 00 031511 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1851									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1852									;IN THE SUBTEST) TO LOOP ON ERROR^
  1853
  1854	031511	334 00 0 00 000000 		SKIPA				;GO TO NEXT TEST
  1855	031512	000000	000000		E51201:	0				;TEST WORD MEMORY
  1856
  1857					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 32
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0060

  1858					SUBTTL	TEST OF MSCL CAIX INSTRUCTIONS
  1859
  1860					;**********
  1861
  1862					;THIS TEST VERIFIES THAT CAIL COMPARES C(AC) WITH E AND
  1863					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN E.
  1864					;IN THIS CASE, C(AC)=0,,1 AND E=0,,2
  1865					;HENCE, CAIL SHOULD SKIP THE NEXT INSTRUCTION.
  1866					;IF CAIL SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  1867
  1868	031513	201 01 0 00 000001 	C51300:	MOVEI	1,1			;PRELOAD AC WITH 0,,1
  1869	031514	301 01 0 00 000002 		CAIL	1,2			;*CAIL SHOULD SKIP THE NEXT INSTRUCTION
  1870						STOP^
  1871	031515	254 04 0 00 031516 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1872	031516	324 00 0 00 031517 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1873									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1874									;IN THE SUBTEST) TO LOOP ON ERROR^
  1875
  1876					;**********
  1877
  1878					;THIS TEST VERIFIES THAT CAIL COMPARES C(AC) WITH E AND
  1879					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN E.
  1880					;IN THIS CASE, C(AC)=0,,2 AND E=0,,2.
  1881					;HENCE, CAIL SHOULD NOT SKIP THE NEXT INSTRUCTION.
  1882					;IF CAIL DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES.
  1883
  1884	031517	201 01 0 00 000002 	C51310:	MOVEI	1,2			;PRELOAD AC WITH 0,,2
  1885	031520	301 01 0 00 000002 		CAIL	1,2			;*CAIL SHOULD NOT SKIP THE NEXT INSTRUCTION
  1886	031521	334 00 0 00 000000 		SKIPA				;PASS IF CAIL DOES NOT SKIP
  1887						STOP^
  1888	031522	254 04 0 00 031523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1889	031523	324 00 0 00 031524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1890									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1891									;IN THE SUBTEST) TO LOOP ON ERROR^
  1892
  1893					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 33
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0061

  1894					;THIS TEST VERIFIES THAT CAIL COMPARES C(AC) WITH E AND
  1895					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN E
  1896					;IN THIS CASE, C(AC)=0,,3 AND E=0,,2
  1897					;HENCE, CAIL SHOULD NOT SKIP THE NEXT INSTRUCTION.
  1898					;IF CAIL DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES.
  1899
  1900	031524	201 01 0 00 000003 	C51320:	MOVEI	1,3			;PRELOAD AC WITH 0,,3
  1901	031525	301 01 0 00 000002 		CAIL	1,2			;*CAIL SHOULD SKIP THE NEXT INSTRUCTION
  1902	031526	334 00 0 00 000000 		SKIPA				;PASS IF CAIL DOES NOT SKIP
  1903						STOP^
  1904	031527	254 04 0 00 031530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1905	031530	324 00 0 00 031531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1907									;IN THE SUBTEST) TO LOOP ON ERROR^
  1908
  1909					;**********
  1910
  1911					;THIS TEST VERIFIES THAT CAILE COMPARES C(AC) WITH E AND
  1912					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN OR EQUAL TO E
  1913					;IN THIS CASE, C(AC)=-1,,-1 AND E=0
  1914					;HENCE, CAILE SHOULD SKIP THE NEXT INSTRUCTION
  1915					;IF CAILE SKIPS THE NEXT INSTRUCTION, THE TEST PASSES
  1916
  1917	031531	474 01 0 00 000000 	C51400:	SETO	1,			;PRELOAD AC WITH -1,,-1
  1918	031532	303 01 0 00 000000 		CAILE	1,0			;*CAILE SHOULD SKIP THE NEXT INSTRUCTION
  1919						STOP^
  1920	031533	254 04 0 00 031534 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1921	031534	324 00 0 00 031535 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1922									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1923									;IN THE SUBTEST) TO LOOP ON ERROR^
  1924
  1925					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 34
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0062

  1926					;THIS TEST VERIFIES THAT CAILE COMPARES C(AC) WITH E AND
  1927					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN OR EQUAL TO E
  1928					;IN THIS CASE, C(AC)=0	AND E=0
  1929					;HENCE, CAILE SHOULD SKIP THE NEXT INSTRUCTION.
  1930					;IF CAILE SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  1931
  1932	031535	400 01 0 00 000000 	C51410:	SETZ	1,			;PRELOAD AC WITH 0
  1933	031536	303 01 0 00 000000 		CAILE	1,0			;*CAILE SHOULD SKIP THE NEXT INSTRUCTION.
  1934						STOP^
  1935	031537	254 04 0 00 031540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1936	031540	324 00 0 00 031541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1937									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1938									;IN THE SUBTEST) TO LOOP ON ERROR^
  1939
  1940					;**********
  1941
  1942					;THIS TEST VERIFIES THAT CAILE COMPARES C(AC) WITH E AND
  1943					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN OR EQUAL TO E 
  1944					;IN THIS CASE, C(AC)=0,,1 AND E=0
  1945					;HENCE, CAILE SHOULD NOT SKIP THE NEXT INSTRUCTION.
  1946					;IF CAILE DOES NOT SKIP THE NEXT INSTRUCTION, THE TEST PASSES
  1947
  1948	031541	201 01 0 00 000001 	C51420:	MOVEI	1,1			;PRELOAD AC WITH 0,,1
  1949	031542	303 01 0 00 000000 		CAILE	1,0			;*CAILE SHOULD NOT SKIP THE NEXT INSTRUCTION
  1950	031543	334 00 0 00 000000 		SKIPA				;PASS IF CAILE DOES NOT SKIP
  1951						STOP^
  1952	031544	254 04 0 00 031545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1953	031545	324 00 0 00 031546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1955									;IN THE SUBTEST) TO LOOP ON ERROR^
  1956
  1957					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 35
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0063

  1958					;THIS TEST VERIFIES THAT CAIA COMPARES C(AC) WITH E AND ALWAYS
  1959					;SKIPS THE NEXT INSTRUCTION
  1960					;IN THIS CASE, C(AC)=-1,,-1 AND E=0
  1961					;HENCE, CAIA SHOULD SKIP THE NEXT INSTRUCTION
  1962					;IF CAIA SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  1963
  1964	031546	474 01 0 00 000000 	C51500:	SETO	1,			;PRELOAD AC WITH -1,,-1
  1965	031547	304 01 0 00 000000 		CAIA	1,0			;*CAIA SHOULD SKIP THE NEXT INSTRUCTION
  1966						STOP^
  1967	031550	254 04 0 00 031551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1968	031551	324 00 0 00 031552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1969									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1970									;IN THE SUBTEST) TO LOOP ON ERROR^
  1971
  1972					;**********
  1973
  1974					;THIS TEST VERIFIES THAT CAIA COMPARES C(AC) WITH E AND ALWAYS
  1975					;SKIPS THE NEXT INSTRUCTION
  1976					;IN THIS CASE, C(AC)=0 AND E=0
  1977					;HENCE, CAIA SHOULD SKIP THE NEXT INSTRUCTION.
  1978					;IF CAIA SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  1979
  1980	031552	400 01 0 00 000000 	C51510:	SETZ	1,			;PRELOAD AC WITH 0
  1981	031553	304 01 0 00 000000 		CAIA	1,0			;*CAIA SHOULD SKIP THE NEXT INSTRUCTION
  1982						STOP^
  1983	031554	254 04 0 00 031555 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1984	031555	324 00 0 00 031556 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1985									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1986									;IN THE SUBTEST) TO LOOP ON ERROR^
  1987
  1988					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 36
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0064

  1989					;THIS TEST VERIFIES THAT CAIA COMPARES C(AC) WITH E AND ALWAYS
  1990					;SKIPS THE NEXT INSTRUCTION
  1991					;IN THIS CASE, C(AC)=0,,1 AND E=0
  1992					;HENCE, CAIA SHOULD SKIP THE NEXT INSTRUCTION.
  1993					;IF CAIA SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  1994
  1995	031556	201 01 0 00 000001 	C51520:	MOVEI	1,1			;PRELOAD AC WITH 0,,1
  1996	031557	304 01 0 00 000000 		CAIA	1,0			;*CAIA SHOULD SKIP THE NEXT INSTRUCTION
  1997						STOP^
  1998	031560	254 04 0 00 031561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1999	031561	324 00 0 00 031562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2000									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2001									;IN THE SUBTEST) TO LOOP ON ERROR^
  2002
  2003					;**********
  2004
  2005					;THIS TEST VERIFIES THAT CAIGE COMPARES C(AC) WITH E AND
  2006					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN OR EQUAL TO E.
  2007					;IN THIS CASE, C(AC)=0,,5 AND E=0,,6
  2008					;HENCE, CAIGE SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2009					;IF CAIGE DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES
  2010
  2011	031562	201 02 0 00 000005 	C51600:	MOVEI	2,5			;PRELOAD AC WITH 0,,5
  2012	031563	305 02 0 00 000006 		CAIGE	2,6			;*CAIGE SHOULD NOT SKIP THE NEXT INSTRUCTION
  2013	031564	334 00 0 00 000000 		SKIPA				;PASS IF CAIGE DOES NOT SKIP
  2014						STOP^
  2015	031565	254 04 0 00 031566 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2016	031566	324 00 0 00 031567 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2017									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2018									;IN THE SUBTEST) TO LOOP ON ERROR^
  2019
  2020					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 37
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0065

  2021					;THIS TEST VERIFIES THAT CAIGE COMPARES C(AC) WITH E AND
  2022					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN OR EQUAL TO E
  2023					;IN THIS CASE, C(AC)=0,,6 AND E=0,,6
  2024					;HENCE, CAIGE SHOULD SKIP THE NEXT INSTRUCTION.
  2025					;IF CAIGE SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  2026
  2027	031567	201 02 0 00 000006 	C51610:	MOVEI	2,6			;PRELOAD AC WITH 0,,6
  2028	031570	305 00 0 00 000000 		CAIGE				;*CAIGE SHOULD SKIP THE NEXT INSTRUCTION
  2029						STOP^
  2030	031571	254 04 0 00 031572 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2031	031572	324 00 0 00 031573 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2032									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2033									;IN THE SUBTEST) TO LOOP ON ERROR^
  2034
  2035					;**********
  2036
  2037					;THIS TEST VERIFIES THAT CAIGE COMPARES C(AC) WITH E AND
  2038					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN OR EQUAL TO E.
  2039					;IN THIS CASE, C(AC)=0,,7 AND E=0,,6
  2040					;HENCE, CAIGE SHOULD SKIP THE NEXT INSTRUCTION.
  2041					;IF CAIGE SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  2042
  2043	031573	201 02 0 00 000007 	C51620:	MOVEI	2,7		;PRELOAD AC WITH 0,,7
  2044	031574	305 02 0 00 000006 		CAIGE	2,6		;*CAIGE SHOULD SKIP THE NEXT INSTRUCTION
  2045						STOP^
  2046	031575	254 04 0 00 031576 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2047	031576	324 00 0 00 031577 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2048									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2049									;IN THE SUBTEST) TO LOOP ON ERROR^
  2050
  2051					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 38
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0066

  2052					;THIS TEST VERIRIES THAT CAIN COMPARES C(AC) WITH E AND
  2053					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS NOT EQUAL TO E.
  2054					;IN THIS CASE, C(AC)=0 AND E=0,,1
  2055					;HENCE, CAIN SHOULD SKIP THE NEXT INSTRUCTION.
  2056					;IF CAIN SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  2057
  2058	031577	400 06 0 00 000000 	C51700:	SETZ	6,		;PRELOAD AC WITH 0
  2059	031600	306 06 0 00 000001 		CAIN	6,1		;*CAIN SHOULD SKIP THE NEXT INSTRUCTION
  2060						STOP^
  2061	031601	254 04 0 00 031602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2062	031602	324 00 0 00 031603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2063									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2064									;IN THE SUBTEST) TO LOOP ON ERROR^
  2065
  2066					;**********
  2067
  2068					;THIS TEST VERIFIES THAT CAIN COMPARES C(AC) WITH E AND
  2069					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS NOT EQUAL TO E.
  2070					;IN THIS CASE, C(AC)=0,,1 AND E=0,,1
  2071					;HENCE, CAIN SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2072					;IF CAIN DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES
  2073
  2074	031603	200 06 0 00 000001 	C51710:	MOVE	6,1		;PRELOAD AC WITH 0,,1
  2075	031604	306 06 0 00 000001 		CAIN	6,1		;*CAIN SHOULD NOT SKIP THE NEXT INSTRUCTION
  2076	031605	334 00 0 00 000000 		SKIPA			;PASS IF CAIN SKIPS
  2077						STOP^
  2078	031606	254 04 0 00 031607 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2079	031607	324 00 0 00 031610 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2080									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2081									;IN THE SUBTEST) TO LOOP ON ERROR^
  2082
  2083					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 39
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0067

  2084					;THIS TEST VERIFIES THAT CAIN COMPARES C(AC) WITH E AND
  2085					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS NOT EQUAL TO E.
  2086					;IN THIS CASE, C(AC)=0,,2 AND E=0,,1
  2087					;HENCE, CAIN SHOULD SKIP THE NEXT INSTRUCTION.
  2088					;IF CAIN SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  2089
  2090	031610	201 06 0 00 000002 	C51720:	MOVEI	6,2		;PRELOAD AC WITH
  2091	031611	306 06 0 00 000001 		CAIN	6,1		;*CAIN SHOULD SKIP THE NEXT INSTRUCTION
  2092						STOP^
  2093	031612	254 04 0 00 031613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2094	031613	324 00 0 00 031614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2095									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2096									;IN THE SUBTEST) TO LOOP ON ERROR^
  2097
  2098					;**********
  2099
  2100					;THIS TEST VERIFIES THAT CAIG COMPARES C(AC) WITH E AND
  2101					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN E.
  2102					;IN THIS CASE, C(AC)=0,,2 AND E=0,,3.
  2103					;HENCE, CAIG SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2104					;IF CAIG DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES
  2105
  2106	031614	201 11 0 00 000002 	C52000:	MOVEI	11,2		;PRELOAD AC WITH 0,,2
  2107	031615	307 11 0 00 000003 		CAIG	11,3		;*CAIG SHOULD NOT SKIP THE NEXT INSTRUCTION
  2108	031616	334 00 0 00 000000 		SKIPA			;PASS IF CAIG DID NOT SKIP
  2109						STOP^
  2110	031617	254 04 0 00 031620 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2111	031620	324 00 0 00 031621 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2112									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2113									;IN THE SUBTEST) TO LOOP ON ERROR^
  2114
  2115					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 40
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAIX INSTRUCTIONS                                                     SEQ 0068

  2116					;THIS TEST VERIFIES THAT CAIG COMPARES C(AC) WITH E AND
  2117					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN E.
  2118					;IN THIS CASE, C(AC)=0,,3 AND E=0,,3.
  2119					;HENCE, CAIG SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2120					;IF CAIG DOES NOT SKIP THE NEXT INSTRUCTION, THE TEST PASSES.
  2121
  2122	031621	201 11 0 00 000003 	C52010:	MOVEI	11,3		;PRELOAD AC WITH 0,,3
  2123	031622	307 11 0 00 000003 		CAIG	11,3		;*CAIG SHOULD NOT SKIP THE NEXT INSTRUCTION
  2124	031623	334 00 0 00 000000 		SKIPA			;PASS IF CAIG DID NOT SKIP
  2125						STOP^
  2126	031624	254 04 0 00 031625 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2127	031625	324 00 0 00 031626 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2128									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2129									;IN THE SUBTEST) TO LOOP ON ERROR^
  2130
  2131					;**********
  2132
  2133					;THIS TEST VERIFIES THAT CAIG COMPARES C(AC) WITH E AND
  2134					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN E.
  2135					;IN THIS CASE, C(AC)=0,,4 AND E=0,,3.
  2136					;HENCE, CAIG SHOULD SKIP THE NEXT INSTRUCTION.
  2137					;IF CAIG SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  2138
  2139	031626	201 11 0 00 000004 	C52020:	MOVEI	11,4		;PRELOAD AC WITH 0,,4
  2140	031627	307 11 0 00 000003 		CAIG	11,3		;*CAIG SHOULD SKIP THE NEXT INSTRUCTION
  2141						STOP^
  2142	031630	254 04 0 00 031631 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2143	031631	324 00 0 00 031632 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2144									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2145									;IN THE SUBTEST) TO LOOP ON ERROR^
  2146
  2147					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 41
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAMX INSTRUCTIONS                                                     SEQ 0069

  2148					SUBTTL	TEST OF MSCL CAMX INSTRUCTIONS
  2149
  2150					;**********
  2151
  2152					;THIS TEST VERIFIES THAT CAMLE COMPARES C(AC) WITH C(E) AND
  2153					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAT OR EQUAL TO C(E).
  2154					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0
  2155					;HENCE, CAMLE SHOULD SKIP THE NEXT INSTRUCTION.
  2156					;IF CAMLE SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  2157
  2158	031632	474 01 0 00 000000 	C52100:	SETO	1,		;PRELOAD AC WITH -1,,-1
  2159	031633	400 02 0 00 000000 		SETZ	2,		;PRELOAD E WITH 0
  2160	031634	313 01 0 00 000002 		CAMLE	1,2		;*CAMLE SHOULD SKIP THE NEXT INSTRUCTION
  2161						STOP^
  2162	031635	254 04 0 00 031636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2163	031636	324 00 0 00 031637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2164									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2165									;IN THE SUBTEST) TO LOOP ON ERROR^
  2166
  2167					;**********
  2168
  2169					;THIS TEST VERIFIES THAT CAMLE COMPARES C(AC) WITH C(E) AND
  2170					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN OR EQUAL TO C(E).
  2171					;IN THIS CASE, C(AC)=0 AND C(E)=0
  2172					;HENCE, CAMLE SHOULD SKIP THE NEXT INSTRUCTION.
  2173					;IF CAMLE SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES
  2174
  2175	031637	400 01 0 00 000000 	C52110:	SETZ	1,		;CLEAR AC
  2176	031640	313 01 0 00 033431 		CAMLE	1,[0]		;*CAMLE SHOULD SKIP THE NEXT INSTRUCTION
  2177						STOP^
  2178	031641	254 04 0 00 031642 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2179	031642	324 00 0 00 031643 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2180									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2181									;IN THE SUBTEST) TO LOOP ON ERROR^
  2182
  2183					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 42
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAMX INSTRUCTIONS                                                     SEQ 0070

  2184					;THIS TEST VERIFIES THAT CAMLE COMPARES C(AC) WITH C(E) AND
  2185					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS LESS THAN OR EQUAL TO C(E).
  2186					;IN THIS CASE, C(AC)=0,,1 AND C(E)=0
  2187					;HENCE, CAMLE SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2188					;IF CAMLE DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES.
  2189
  2190	031643	201 01 0 00 000001 	C52120:	MOVEI	1,1		;PRELOAD AC WITH 0,,1
  2191	031644	400 02 0 00 000000 		SETZ	2,		;PRELOAD E WITH 0
  2192	031645	313 01 0 00 000002 		CAMLE	1,2		;*CAMLE SHOULD NOT SKIP THE NEXT INSTRUCTION
  2193	031646	334 00 0 00 000000 		SKIPA			;PASS IF CAMLE DOES NOT SKIP
  2194						STOP^
  2195	031647	254 04 0 00 031650 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2196	031650	324 00 0 00 031651 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2197									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2198									;IN THE SUBTEST) TO LOOP ON ERROR^
  2199
  2200					;**********
  2201
  2202					;THIS TEST VERIFIES THAT CAMG COMPARES C(AC) WITH C(E) AND
  2203					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN C(E).
  2204					;IN THIS CASE, C(AC)=-1,,-2 AND C(E)=-1,,-2.
  2205					;HENCE, CAMG SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2206					;IF CAMG DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES.
  2207
  2208	031651	561 10 0 00 777776 	C52200:	HRROI	10,-2		;PRELOAD AC WITH -1,,-2
  2209	031652	317 10 0 00 033412 		CAMG	10,[-1,,-1]	;*CAMG SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2210	031653	334 00 0 00 000000 		SKIPA			;PASS IF CAMG DOES NOT SKIP
  2211						STOP^
  2212	031654	254 04 0 00 031655 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2213	031655	324 00 0 00 031656 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2215									;IN THE SUBTEST) TO LOOP ON ERROR^
  2216
  2217					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 43
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL CAMX INSTRUCTIONS                                                     SEQ 0071

  2218					;THIS TEST VERIFIES THAT CAMG COMPARES C(AC) WITH C(E) AND
  2219					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN C(E).
  2220					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-1.
  2221					;HENCE, CAMG SHOULD NOT SKIP THE NEXT INSTRUCTION.
  2222					;IF CAMG DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES.
  2223	031656	474 10 0 00 000000 	C52210:	SETO	10,		;PRELOAD AC WITH -1,,-1.
  2224	031657	317 10 0 00 033412 		CAMG	10,[-1,,-1]	;*CAMG SHOULD NOT SKIP THE NEXT INSTRUCTION
  2225	031660	334 00 0 00 000000 		SKIPA			;PASS IF CAMG DOES NOT SKIP
  2226						STOP^
  2227	031661	254 04 0 00 031662 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2228	031662	324 00 0 00 031663 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2229									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2230									;IN THE SUBTEST) TO LOOP ON ERROR^
  2231
  2232					;**********
  2233
  2234					;THIS TEST VERIFIES THAT CAMG COMPARES C(AC) WITH C(E) AND
  2235					;SKIPS THE NEXT INSTRUCTION IF C(AC) IS GREATER THAN C(E).
  2236					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.
  2237					;HENCE, CAMG SHOULD SKIP THE NEXT INSTRUCTION.
  2238					;IF CAMG SKIPS THE NEXT INSTRUCTION, THIS TEST PASSES.
  2239
  2240	031663	400 10 0 00 000000 	C52220:	SETZ	10,		;PRELOAD AC WITH 0
  2241	031664	317 10 0 00 033412 		CAMG	10,[-1,,-1]	;*CAMG SHOULD SKIP THE NEXT INSTRUCTION
  2242						STOP^
  2243	031665	254 04 0 00 031666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2244	031666	324 00 0 00 031667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2245									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2246									;IN THE SUBTEST) TO LOOP ON ERROR^
  2247
  2248					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 44
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL JUMPX INSTRUCTIONS                                                    SEQ 0072

  2249					SUBTTL	TEST OF MSCL JUMPX INSTRUCTIONS
  2250
  2251					;**********
  2252
  2253					;THIS TEST VERIFIES THAT JUMPLE COMPARES C(AC) WITH 0 AND
  2254					;JUMPS TO THE LOCATION SPECIFIED BY E IF C(AC) IS LESS THAN OR
  2255					;EQUAL TO 0.  IN THIS CASE, C(AC)=-1,,-1.  HENCE, JUMPLE SHOULD JUMP.
  2256
  2257	031667	474 17 0 00 000000 	C52300:	SETO	17,		;PRELOAD AC WITH -1,,-1
  2258	031670	323 17 0 00 031672 		JUMPLE	17,.+2		;*JUMPLE SHOULD JUMP
  2259						STOP^
  2260	031671	254 04 0 00 031672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2261	031672	324 00 0 00 031673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2262									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2263									;IN THE SUBTEST) TO LOOP ON ERROR^
  2264
  2265					;**********
  2266
  2267					;THIS TEST VERIFIES THAT JUMPLE COMPARES C(AC) WITH 0 AND
  2268					;JUMPS TO THE LOCATION SPECIFIED BY E IF C(AC) IS LESS THAN OR
  2269					;EQUAL TO 0.  IN THIS CASE, C(AC)=0.  HENCE, JUMPLE SHOULD JUMP.
  2270
  2271	031673	400 17 0 00 000000 	C52310:	SETZ	17,		;PRELOAD AC WITH 0
  2272	031674	323 17 0 00 031676 		JUMPLE	17,.+2		;*JUMPLE SHOULD JUMP
  2273						STOP^
  2274	031675	254 04 0 00 031676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2275	031676	324 00 0 00 031677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2276									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2277									;IN THE SUBTEST) TO LOOP ON ERROR^
  2278
  2279					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 45
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL JUMPX INSTRUCTIONS                                                    SEQ 0073

  2280					;THIS TEST VERIFIES THAT JUMPLE COMPARES C(AC) WITH 0 AND JUMPS
  2281					;TO THE LOCATION SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO
  2282					;0.  IN THIS CASE, C(AC)=0,,1.  HENCE, JUMPLE SHOULD NOT JUMP.
  2283
  2284	031677	201 17 0 00 000001 	C52320:	MOVEI	17,1		;PRELOAD AC WITH 0,,1
  2285	031700	320 17 0 00 031702 		JUMP	17,.+2		;*JUMPLE SHOULD NOT JUMP
  2286	031701	334 00 0 00 000000 		SKIPA			;PASS IF JUMPLE DOES NOT JUMP
  2287						STOP^
  2288	031702	254 04 0 00 031703 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2289	031703	324 00 0 00 031704 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2290									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2291									;IN THE SUBTEST) TO LOOP ON ERROR^
  2292
  2293					;**********
  2294
  2295					;THIS TEST VERIFIES THAT JUMPGE COMPARES C(AC) WITH 0 AND JUMPS TO
  2296					;THE LOCATION SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0.
  2297					;IN THIS CASE, C(AC)=-1,,-1.  HENCE, JUMPGE SHOULD NOT JUMP.
  2298
  2299	031704	474 16 0 00 000000 	C52400:	SETO	16,		;PRELOAD AC WITH -1,,-1
  2300	031705	325 16 0 00 031707 		JUMPGE	16,.+2		;*JUMPGE SHOULD NOT JUMP
  2301	031706	334 00 0 00 000000 		SKIPA			;PASS IF JUMPGE DOES NOT JUMP
  2302						STOP^
  2303	031707	254 04 0 00 031710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2304	031710	324 00 0 00 031711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2305									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2306									;IN THE SUBTEST) TO LOOP ON ERROR^
  2307
  2308					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 46
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL JUMPX INSTRUCTIONS                                                    SEQ 0074

  2309					;THIS TEST VERIFIES THAT JUMPGE COMPARES C(AC) WITH O AND JUMPS TO
  2310					;THE LOCATION SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0.
  2311					;IN THIS CASE, C(AC)=0.  HENCE, JUMPGE SHOULD JUMP.
  2312
  2313	031711	400 16 0 00 000000 	C52410:	SETZ	16,		;PRELOAD AC WITH 0
  2314	031712	325 16 0 00 031714 		JUMPGE	16,.+2		;*JUMPGE SHOULD JUMP
  2315						STOP^
  2316	031713	254 04 0 00 031714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2317	031714	324 00 0 00 031715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2318									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2319									;IN THE SUBTEST) TO LOOP ON ERROR^
  2320
  2321					;**********
  2322
  2323					;THIS TEST VERIFIES THAT JUMPGE COMPARES C(AC) WITH 0 AND JUMPS TO
  2324					;THE LOCATION SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0.
  2325					;IN THIS CASE, C(AC)=0,,1.  HENCE, JUMPGE SHOULD JUMP.
  2326
  2327	031715	201 16 0 00 000001 	C52420:	MOVEI	16,1		;PRELOAD AC WITH 0,,1
  2328	031716	325 16 0 00 031720 		JUMPGE	16,.+2		;*JUMPGE SHOULD JUMP
  2329						STOP^
  2330	031717	254 04 0 00 031720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2331	031720	324 00 0 00 031721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2333									;IN THE SUBTEST) TO LOOP ON ERROR^
  2334
  2335					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 47
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0075

  2336					SUBTTL	TEST OF MSCL AOJX INSTRUCTIONS
  2337
  2338					;**********
  2339
  2340					;THIS TEST VERIFIES THAT AOJL INCREMENTS C(AC) BY 0,,1 AND PLACES
  2341					;THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS COMPARED
  2342					;TO 0 AND THE PROGRAM JUMPS TO THE LOCATION SPECIFIED BY E IF C(AC)
  2343					;IS LESS THAN 0.  IN THIS CASE, C(AC)=-1,,-2 BEFORE INCREMENTING.
  2344					;HENCE, AOJL SHOULD JUMP.
  2345
  2346	031721	561 15 0 00 777776 	C52500:	HRROI	15,-2		;PRELOAD AC WITH -1,,-2
  2347	031722	341 15 0 00 031724 		AOJL	15,.+2		;*AOJL SHOULD ADD 0,,1 TO C(AC) AND JUMP
  2348						STOP^
  2349	031723	254 04 0 00 031724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2350	031724	324 00 0 00 031725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2352									;IN THE SUBTEST) TO LOOP ON ERROR^
  2353	031725	312 15 0 00 033412 		CAME	15,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2354						STOP^
  2355	031726	254 04 0 00 031727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2356	031727	324 00 0 00 031730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2357									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2358									;IN THE SUBTEST) TO LOOP ON ERROR^
  2359
  2360					;**********
  2361
  2362					;THIS TEST VERIFIES THAT AOJL INCREMENTS C(AC) BY 0,,1 AND
  2363					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2364					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2365					;SPECIFIED BY E IF C(AC) IS LESS THAN 0.
  2366					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2367					;HENCE, AOJ SHOULD NOT JUMP
  2368
  2369	031730	474 15 0 00 000000 	C52510:	SETO	15,		;PRELOAD AC WITH
  2370	031731	341 15 0 00 031733 		AOJL	15,.+2		;*AOJL SHOULD ADD 0,,1 TO C(AC)
  2371									;AND NOT JUMP
  2372	031732	334 00 0 00 000000 		SKIPA			;PASS IF AOJL DID NOT JUMP
  2373						STOP^
  2374	031733	254 04 0 00 031734 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2375	031734	324 00 0 00 031735 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2376									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2377									;IN THE SUBTEST) TO LOOP ON ERROR^
  2378	031735	302 15 0 00 000000 		CAIE	15,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2379						STOP^
  2380	031736	254 04 0 00 031737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2381	031737	324 00 0 00 031740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2382									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2383									;IN THE SUBTEST) TO LOOP ON ERROR^
  2384
  2385					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 48
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0076

  2386					;THIS TEST VERIFIES THAT AOJL INCREMENTS C(AC) BY 0,,1 AND
  2387					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2388					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2389					;SPECIFIED BY E IF C(AC) IS 0 BEFORE INCREMENTING
  2390					;HENCE, AOJL SHOULD NOT JUMP
  2391
  2392	031740	400 15 0 00 000000 	C52520:	SETZ	15,		;PRELOAD AC WITH 0
  2393	031741	341 15 0 00 031743 		AOJL	15,.+2		;*AOJL SHOULD ADD 0,,1 TO C(AC)
  2394									;AND NOT JUMP
  2395	031742	334 00 0 00 000000 		SKIPA			;PASS IF AOJL DID NOT JUMP
  2396						STOP^
  2397	031743	254 04 0 00 031744 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2398	031744	324 00 0 00 031745 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2399									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2400									;IN THE SUBTEST) TO LOOP ON ERROR^
  2401	031745	302 15 0 00 000001 		CAIE	15,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2402						STOP^
  2403	031746	254 04 0 00 031747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2404	031747	324 00 0 00 031750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2405									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2406									;IN THE SUBTEST) TO LOOP ON ERROR^
  2407
  2408					;**********
  2409
  2410					;THIS TEST VERIFIES THAT AOJE INCREMENTS C(AC) BY 0,,1 AND
  2411					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2412					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2413					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0
  2414					;IN THIS CASE, C(AC) IS -1,,-2 BEFORE INCREMENTING
  2415					;HENCE, AOJE SHOULD NOT JUMP
  2416
  2417	031750	561 14 0 00 777776 	C52600:	HRROI	14,-2		;PRELOAD AC WITH -1,,-2
  2418	031751	342 14 0 00 031753 		AOJE	14,.+2		;*AOJE SHOULD ADD 0,,1 TO C(AC)
  2419									;AND NOT JUMP
  2420	031752	334 00 0 00 000000 		SKIPA			;PASS IF AOJE DID NOT JUMP
  2421						STOP^
  2422	031753	254 04 0 00 031754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2423	031754	324 00 0 00 031755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2424									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2425									;IN THE SUBTEST) TO LOOP ON ERROR^
  2426	031755	312 14 0 00 033412 		CAME	14,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2427						STOP^
  2428	031756	254 04 0 00 031757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2429	031757	324 00 0 00 031760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2430									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2431									;IN THE SUBTEST) TO LOOP ON ERROR^
  2432
  2433					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 49
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0077

  2434					;THIS TEST VERIFIES THAT AOJE INCREMENTS C(AC) BY 0,,1 AND
  2435					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2436					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2437					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0.
  2438					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING.
  2439					;HENCE, AOJE SHOULD JUMP
  2440
  2441	031760	474 14 0 00 000000 	C52610:	SETO	14,		;PRELOAD AC WITH -1,,-1
  2442	031761	342 14 0 00 031763 		AOJE	14,.+2		;*AOJ SHOULD ADD 0,,1 TO C(AC)
  2443									;AND JUMP
  2444						STOP^
  2445	031762	254 04 0 00 031763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2446	031763	324 00 0 00 031764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2447									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2448									;IN THE SUBTEST) TO LOOP ON ERROR^
  2449	031764	302 14 0 00 000000 		CAIE	14,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2450						STOP^
  2451	031765	254 04 0 00 031766 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2452	031766	324 00 0 00 031767 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2453									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2454									;IN THE SUBTEST) TO LOOP ON ERROR^
  2455
  2456					;**********
  2457
  2458					;THIS TEST VERIFIES THAT AOJE INCREMENTS C(AC) BY 0,,1 AND
  2459					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2460					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2461					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0.
  2462					;IN THIS CASE, C(AC) IS 0 BEFORE INCREMENTING
  2463					;HENCE, AOJE SHOULD NOT JUMP
  2464
  2465	031767	400 14 0 00 000000 	C52620:	SETZ	14,		;PRELOAD AC WITH 0
  2466	031770	342 14 0 00 031772 		AOJE	14,.+2		;*AOJE SHOULD ADD 0,11 TO C(AC)
  2467									;AND NOT JUMP
  2468	031771	334 00 0 00 000000 		SKIPA			;PASS IF AOJE DID NOT JUMP
  2469						STOP^
  2470	031772	254 04 0 00 031773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2471	031773	324 00 0 00 031774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2472									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2473									;IN THE SUBTEST) TO LOOP ON ERROR^
  2474	031774	302 14 0 00 000001 		CAIE	14,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2475						STOP^
  2476	031775	254 04 0 00 031776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2477	031776	324 00 0 00 031777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2478									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2479									;IN THE SUBTEST) TO LOOP ON ERROR^
  2480
  2481					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 50
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0078

  2482					;THIS TEST VERIFIES THAT AOJLE INCREMENTS C(AC) BY 0,,1 AND
  2483					;PLACES THE RESULT BACK INTO TLE$EC.  THE RESULT IN THE AC IS
  2484					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2485					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO 0.
  2486					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2487					;HENCE, AOJLE SHOULD
  2488
  2489	031777	561 13 0 00 777776 	C52700:	HRROI	13,-2		;PRELOAD AC WITH -1,,-2
  2490	032000	343 13 0 00 032002 		AOJLE	13,.+2		;*AOJLE SHOULD ADD 0,,1 TO C(AC)
  2491									;AND JUMP
  2492						STOP^
  2493	032001	254 04 0 00 032002 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2494	032002	324 00 0 00 032003 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2496									;IN THE SUBTEST) TO LOOP ON ERROR^
  2497	032003	312 13 0 00 033412 		CAME	13,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2498						STOP^
  2499	032004	254 04 0 00 032005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2500	032005	324 00 0 00 032006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2501									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2502									;IN THE SUBTEST) TO LOOP ON ERROR^
  2503
  2504					;**********
  2505
  2506					;THIS TEST VERIFIES THAT AOJLE INCREMENTS C(AC) BY 0,,1 AND
  2507					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2508					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2509					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO 0
  2510					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2511					;HENCE, AOJLE SHOULD JUMP.
  2512
  2513	032006	474 13 0 00 000000 	C52710:	SETO	13,		;PRELOAD AC WITH -1,,-1
  2514	032007	343 13 0 00 032011 		AOJLE	13,.+2		;*AOJLE SHOULD ADD 0,,1 TO C(AC)
  2515									;AND JUMP
  2516						STOP^
  2517	032010	254 04 0 00 032011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2518	032011	324 00 0 00 032012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2519									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2520									;IN THE SUBTEST) TO LOOP ON ERROR^
  2521	032012	302 13 0 00 000000 		CAIE	13,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2522						STOP^
  2523	032013	254 04 0 00 032014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2524	032014	324 00 0 00 032015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2526									;IN THE SUBTEST) TO LOOP ON ERROR^
  2527
  2528					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 51
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0079

  2529					;THIS TEST VERIFIES THAT AOJLE INCREMENTS C(AC) BY 0,,1 AND
  2530					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2531					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2532					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO 0.
  2533					;IN THIS CASE, C(AC) IS 0
  2534					;HENCE, AOJLE SHOULD NOT JUMP.
  2535
  2536	032015	400 13 0 00 000000 	C52720:	SETZ	13,		;PRELOAD AC WITH 0
  2537	032016	343 13 0 00 032020 		AOJLE	13,.+2		;*AOJLE SHOULD ADD 0,,1 TO C(AC)
  2538									;AND NOT JUMP
  2539	032017	334 00 0 00 000000 		SKIPA			;PASS IF AOJLE DID NOT JUMP
  2540						STOP^
  2541	032020	254 04 0 00 032021 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2542	032021	324 00 0 00 032022 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2543									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2544									;IN THE SUBTEST) TO LOOP ON ERROR^
  2545	032022	302 13 0 00 000001 		CAIE	13,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2546						STOP^
  2547	032023	254 04 0 00 032024 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2548	032024	324 00 0 00 032025 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2550									;IN THE SUBTEST) TO LOOP ON ERROR^
  2551
  2552					;**********
  2553
  2554					;THIS TEST VERIFIES THAT AOJA INCREMENTS C(AC) BY 0,,1 AND
  2555					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2556					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  2557					;SPECIFIED BY E.
  2558					;IN THIS CASE, C(AC) IS -1,,-2 BEFORE INCREMENTING
  2559					;HENCE, AOJA SHOULD JUMP
  2560
  2561	032025	561 12 0 00 777776 	C53000:	HRROI	12,-2		;PRELOAD AC WITH -1,,-2
  2562	032026	344 12 0 00 032030 		AOJA	12,.+2		;*AOJA SHOULD ADD 0,,1 TO C(AC)
  2563									;AND JUMP
  2564						STOP^
  2565	032027	254 04 0 00 032030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2566	032030	324 00 0 00 032031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2567									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2568									;IN THE SUBTEST) TO LOOP ON ERROR^
  2569	032031	312 12 0 00 033412 		CAME	12,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2570						STOP^
  2571	032032	254 04 0 00 032033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2572	032033	324 00 0 00 032034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2573									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2574									;IN THE SUBTEST) TO LOOP ON ERROR^
  2575
  2576					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 52
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0080

  2577					;THIS TEST VERIFIES THAT AOJA INCREMENTS C(AC) BY 0,,1 AND
  2578					;PLACES THE RESULT BACK INTO AC.  THE RESULT IN THE AC IS
  2579					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  2580					;SPECIFIED BY E.
  2581					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2582					;HENCE, AOJA SHOULD JUMP
  2583
  2584	032034	474 12 0 00 000000 	C53010:	SETO	12,		;PRELOAD AC WITH -1,,-1
  2585	032035	344 12 0 00 032037 		AOJA	12,.+2		;*AOJA SHOULD ADD 0,,1 TO C(AC)
  2586									;AND JUMP
  2587						STOP^
  2588	032036	254 04 0 00 032037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2589	032037	324 00 0 00 032040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2590									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2591									;IN THE SUBTEST) TO LOOP ON ERROR^
  2592	032040	302 12 0 00 000000 		CAIE	12,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2593						STOP^
  2594	032041	254 04 0 00 032042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2595	032042	324 00 0 00 032043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2596									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2597									;IN THE SUBTEST) TO LOOP ON ERROR^
  2598
  2599					;**********
  2600
  2601					;THIS TEST VERIFIES THAT AOJA INCREMENTS C(AC) BY 0,,1 AND
  2602					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2603					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  2604					;SPECIFIED BY E.
  2605					;IN THIS CASE, C(AC) IS 0 BEFORE INCREMENTING
  2606					;HENCE, AOJA SHOULD JUMP
  2607
  2608	032043	400 12 0 00 000000 	C53020:	SETZ	12,		;PRELOAD AC WITH 0
  2609	032044	344 12 0 00 032046 		AOJA	12,.+2		;*AOJA SHOULD ADD 0,,1 TO C(AC)
  2610									;AND JUMP
  2611						STOP^
  2612	032045	254 04 0 00 032046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2613	032046	324 00 0 00 032047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2614									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2615									;IN THE SUBTEST) TO LOOP ON ERROR^
  2616	032047	302 12 0 00 000001 		CAIE	12,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2617						STOP^
  2618	032050	254 04 0 00 032051 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2619	032051	324 00 0 00 032052 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2620									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2621									;IN THE SUBTEST) TO LOOP ON ERROR^
  2622
  2623					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 53
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0081

  2624					;THIS TEST VERIFIES THAT AOJGE INCREMENTS C(AC) BY 0,,1 AND
  2625					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2626					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2627					;SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0
  2628					;IN THIS CASE, C(AC) IS -1,,-2 BEFORE INCREMENTING
  2629					;HENCE, AOJGE SHOULD NOT JUMP
  2630
  2631	032052	561 11 0 00 777776 	C53100:	HRROI	11,-2		;PRELOAD AC WITH -1,,-2
  2632	032053	345 11 0 00 032055 		AOJGE	11,.+2		;*AOJGE SHOULD ADD 0,,1 TO C(AC)
  2633									;AND NOT JUMP
  2634	032054	334 00 0 00 000000 		SKIPA			;PASS IF AOJGE DID NOT JUMP
  2635						STOP^
  2636	032055	254 04 0 00 032056 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2637	032056	324 00 0 00 032057 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2638									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2639									;IN THE SUBTEST) TO LOOP ON ERROR^
  2640	032057	312 11 0 00 033412 		CAME	11,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2641						STOP^
  2642	032060	254 04 0 00 032061 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2643	032061	324 00 0 00 032062 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2644									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2645									;IN THE SUBTEST) TO LOOP ON ERROR^
  2646
  2647					;**********
  2648
  2649					;THIS TEST VERIFIES THAT AOJGE INCREMENTS C(AC) BY 0,,1 AND
  2650					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2651					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2652					;SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0.
  2653					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2654					;HENCE, AOJ SHOULD JUMP
  2655
  2656	032062	474 11 0 00 000000 	C53110:	SETO	11,		;PRELOAD AC WITH -1,,-1
  2657	032063	345 11 0 00 032065 		AOJGE	11,.+2		;*AOJGE SHOULD ADD 0,,1 TO C(AC)
  2658									;AND JUMP
  2659						STOP^
  2660	032064	254 04 0 00 032065 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2661	032065	324 00 0 00 032066 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2662									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2663									;IN THE SUBTEST) TO LOOP ON ERROR^
  2664	032066	302 11 0 00 000000 		CAIE	11,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2665						STOP^
  2666	032067	254 04 0 00 032070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2667	032070	324 00 0 00 032071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2668									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2669									;IN THE SUBTEST) TO LOOP ON ERROR^
  2670
  2671					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 54
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0082

  2672					;THIS TEST VERIFIES THAT AOJGE INCREMENTS C(AC) BY 0,,1 AND
  2673					;PLACES THE RESULT BACK INTO AC.  THE RESULT IN THE AC IS
  2674					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2675					;SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0
  2676					;IN THIS CASE, C(AC) IS 0 BEFORE INCREMENTING
  2677					;HENCE, AOJGE SHOULD JUMP
  2678
  2679	032071	400 11 0 00 000000 	C53120:	SETZ	11,		;PRELOAD AC WITH 0
  2680	032072	345 11 0 00 032074 		AOJGE	11,.+2		;*AOJGE SHOULD ADD 0,,1 TO C(AC)
  2681									;AND JUMP
  2682						STOP^
  2683	032073	254 04 0 00 032074 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2684	032074	324 00 0 00 032075 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2685									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2686									;IN THE SUBTEST) TO LOOP ON ERROR^
  2687	032075	302 11 0 00 000001 		CAIE	11,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2688						STOP^
  2689	032076	254 04 0 00 032077 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2690	032077	324 00 0 00 032100 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2691									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2692									;IN THE SUBTEST) TO LOOP ON ERROR^
  2693
  2694					;**********
  2695
  2696					;THIS TEST VERIFIES THAT AOJN INCREMENTS C(AC) BY 0,,1 AND
  2697					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2698					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2699					;SPECIFIED BY E IF C(AC) IS NOT EQUAL TO 0.
  2700					;IN THIS CASE, C(AC) IS -1,,-2 BEFORE INCREMENTING
  2701					;HENCE, AOJN SHOULD JUMP
  2702
  2703	032100	561 10 0 00 777776 	C53200:	HRROI	10,-2		;PRELOAD AC WITH -1,,-2
  2704	032101	346 10 0 00 032103 		AOJN	10,.+2		;*AOJN SHOULD ADD 0,,1 TO C(AC)
  2705									;AND JUMP
  2706						STOP^
  2707	032102	254 04 0 00 032103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2708	032103	324 00 0 00 032104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2709									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2710									;IN THE SUBTEST) TO LOOP ON ERROR^
  2711	032104	312 10 0 00 033412 		CAME	10,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2712						STOP^
  2713	032105	254 04 0 00 032106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2714	032106	324 00 0 00 032107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2715									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2716									;IN THE SUBTEST) TO LOOP ON ERROR^
  2717
  2718					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 55
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0083

  2719					;THIS TEST VERIFIES THAT AOJN INCREMENTS C(AC) BY 0,,1 AND
  2720					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2721					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2722					;SPECIFIED BY E IF C(AC) IS NOT EQUAL TO 0.
  2723					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2724					;HENCE, AOJ SHOULD NOT JUMP.
  2725
  2726	032107	474 10 0 00 000000 	C53210:	SETO	10,		;PRELOAD AC WITH -1,,-1
  2727	032110	346 10 0 00 032112 		AOJN	10,.+2		;*AOJN SHOULD ADD 0,,1 TO C(AC)
  2728									;AND NOT JUMP
  2729	032111	334 00 0 00 000000 		SKIPA			;PASS IF AOJN DID NOT JUMP
  2730						STOP^
  2731	032112	254 04 0 00 032113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2732	032113	324 00 0 00 032114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2733									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2734									;IN THE SUBTEST) TO LOOP ON ERROR^
  2735	032114	302 10 0 00 000000 		CAIE	10,0		;PASS IF C(AC) INCREMENTED CORRRECTLY
  2736						STOP^
  2737	032115	254 04 0 00 032116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2738	032116	324 00 0 00 032117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2739									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2740									;IN THE SUBTEST) TO LOOP ON ERROR^
  2741
  2742					;**********
  2743
  2744					;THIS TEST VERIFIES THAT AOJN INCREMENTS C(AC) BY 0,,1 AND
  2745					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2746					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2747					;SPECIFIED BY E IF C(AC) IS NOT EQUAL TO 0.
  2748					;IN THIS CASE, C(AC) IS 0 BEFORE INCREMENTING
  2749					;HENCE, AOJN SHOULD JUMP.
  2750
  2751	032117	400 10 0 00 000000 	C53220:	SETZ	10,		;PRELOAD AC WITH 0
  2752	032120	346 10 0 00 032122 		AOJN	10,.+2		;*AOJN SHOULD ADD 0,,1 TO C(AC)
  2753									;AND JUMP
  2754						STOP^
  2755	032121	254 04 0 00 032122 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2756	032122	324 00 0 00 032123 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2757									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2758									;IN THE SUBTEST) TO LOOP ON ERROR^
  2759	032123	302 10 0 00 000001 		CAIE	10,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2760						STOP^
  2761	032124	254 04 0 00 032125 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2762	032125	324 00 0 00 032126 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2763									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2764									;IN THE SUBTEST) TO LOOP ON ERROR^
  2765
  2766					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 56
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0084

  2767					;THIS TEST VERIFIES THAT AOJG INCREMENTS C(AC) BY 0,,1 AND
  2768					;PLACES THE RESULT BACK INTO THE AC.  THE REAULT IN THE AC IS
  2769					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2770					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0
  2771					;IN THIS CASE, C(AC) IS -1,,-2 BEFORE INC
  2772					;HENCE, AOJG SHOULD NOT JUMP
  2773
  2774	032126	561 07 0 00 777776 	C53300:	HRROI	7,-2		;PRELOAD AC WITH -1,,-2
  2775	032127	347 07 0 00 032131 		AOJG	7,.+2		;*AOJG SHOULD ADD 0,11 TO C(AC)
  2776									;AND NOT JUMP
  2777	032130	334 00 0 00 000000 		SKIPA			;PASS IF AOJG DID NOT JUMP
  2778						STOP^
  2779	032131	254 04 0 00 032132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2780	032132	324 00 0 00 032133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2781									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2782									;IN THE SUBTEST) TO LOOP ON ERROR^
  2783	032133	312 07 0 00 033412 		CAME	7,[-1]		;PASS IF C(AC) INCREMENTED CORRECTLY
  2784						STOP^
  2785	032134	254 04 0 00 032135 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2786	032135	324 00 0 00 032136 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2787									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2788									;IN THE SUBTEST) TO LOOP ON ERROR^
  2789
  2790					;**********
  2791
  2792					;THIS TEST VERIFIES THAT AOJG INCREMENTS C(AC) BY 0,,1 AND
  2793					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2794					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2795					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0.
  2796					;IN THIS CASE, C(AC) IS -1,,-1 BEFORE INCREMENTING
  2797					;HENCE, AOJG SHOULD NOT JUMP.
  2798
  2799	032136	474 07 0 00 000000 	C53310:	SETO	7,		;PRELOAD AC WITH -1,,-1
  2800	032137	347 07 0 00 032141 		AOJG	7,.+2		;*AOJG SHOULD ADD 0,,1 TO C(AC)
  2801									;AND NOT JUMP
  2802	032140	334 00 0 00 000000 		SKIPA			;PASS IF AOJG DID NOT JUMP
  2803						STOP^
  2804	032141	254 04 0 00 032142 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2805	032142	324 00 0 00 032143 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2806									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2807									;IN THE SUBTEST) TO LOOP ON ERROR^
  2808	032143	302 07 0 00 000000 		CAIE	7,0		;PASS IF C(AC) INCREMENTED CORRECTLY
  2809						STOP^
  2810	032144	254 04 0 00 032145 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2811	032145	324 00 0 00 032146 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2812									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2813									;IN THE SUBTEST) TO LOOP ON ERROR^
  2814
  2815					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 57
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOJX INSTRUCTIONS                                                     SEQ 0085

  2816					;THIS TEST VERIFIES THAT AOJG INCREMENTS C(AC) BY 0,,1 AND
  2817					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  2818					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  2819					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0.
  2820					;IN THIS CASE, C(AC) IS 0 BEFORE INCREMENTING
  2821					;HENCE, AOJG SHOULD JUMP
  2822
  2823	032146	400 07 0 00 000000 	C53320:	SETZ	7,		;PRELOAD AC WITH 0
  2824	032147	347 07 0 00 032151 		AOJG	7,.+2		;*AOJG SHOULD ADD 0,,1 TO C(AC)
  2825									;AND JUMP
  2826						STOP^
  2827	032150	254 04 0 00 032151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2828	032151	324 00 0 00 032152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2829									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2830									;IN THE SUBTEST) TO LOOP ON ERROR^
  2831	032152	302 07 0 00 000001 		CAIE	7,1		;PASS IF C(AC) INCREMENTED CORRECTLY
  2832						STOP^
  2833	032153	254 04 0 00 032154 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2834	032154	324 00 0 00 032155 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2835									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2836									;IN THE SUBTEST) TO LOOP ON ERROR^
  2837
  2838					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 58
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0086

  2839					SUBTTL	TEST OF MSCL AOSX INSTRUCTIONS
  2840
  2841					;**********
  2842
  2843					;THIS TEST VERIFIES THAT AOSL INCREMENTS C(E) BY 0,,1 AND PLACES
  2844					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  2845					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0
  2846					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  2847					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=-1,,-2
  2848					;BEFORE INCREMENTING.  HENCE, AOSL SHOULD SKIP ; AND THE
  2849					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  2850					;RESPECTIVELY.
  2851
  2852	032155	200 06 0 00 033424 	C53400:	MOVE	6,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  2853	032156	561 07 0 00 777776 		HRROI	7,-2		;PRELOAD E WITH -1,,-2
  2854	032157	351 06 0 00 000007 		AOSL	6,7		;*AOSL SHOULD ADD 0,,1 TO C(E),
  2855									;UPDATE AC AND SKIP
  2856						STOP^
  2857	032160	254 04 0 00 032161 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2858	032161	324 00 0 00 032162 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2859									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2860									;IN THE SUBTEST) TO LOOP ON ERROR^
  2861	032162	312 07 0 00 033412 		CAME	7,[-1]		;PASS IF E INCREMENTED CORRECTLY
  2862						STOP^
  2863	032163	254 04 0 00 032164 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2864	032164	324 00 0 00 032165 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2865									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2866									;IN THE SUBTEST) TO LOOP ON ERROR^
  2867	032165	312 06 0 00 033412 		CAME	6,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  2868						STOP^
  2869	032166	254 04 0 00 032167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2870	032167	324 00 0 00 032170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2871									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2872									;IN THE SUBTEST) TO LOOP ON ERROR^
  2873
  2874					;**********
  2875
  2876					;THIS TEST VERIFIES THAT AOSL INCREMENTS C(E) BY 0,,1 AND PLACES
  2877					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  2878					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0
  2879					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  2880					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=-1,,-2
  2881					;BEFORE INCREMENTING.  HENCE, AOSL SHOULD SKIP ; AND THE
  2882					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  2883					;RESPECTIVELY.
  2884
  2885	032170	200 06 0 00 033424 	C53401:	MOVE	6,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  2886	032171	561 07 0 00 777776 		HRROI	7,-2		;PRELOAD E WITH -1,,-2
  2887	032172	202 07 0 00 032206 		MOVEM	7,E53401
  2888	032173	351 06 0 00 032206 		AOSL	6,E53401	;*AOSL SHOULD ADD 0,,1 TO C(E),
  2889									;UPDATE AC AND SKIP
  2890						STOP^
  2891	032174	254 04 0 00 032175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2892	032175	324 00 0 00 032176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2893									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 58-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0087

  2894									;IN THE SUBTEST) TO LOOP ON ERROR^
  2895	032176	200 07 0 00 032206 		MOVE	7,E53401
  2896	032177	312 07 0 00 033412 		CAME	7,[-1]		;PASS IF E INCREMENTED CORRECTLY
  2897						STOP^
  2898	032200	254 04 0 00 032201 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2899	032201	324 00 0 00 032202 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2900									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2901									;IN THE SUBTEST) TO LOOP ON ERROR^
  2902	032202	312 06 0 00 033412 		CAME	6,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  2903						STOP^
  2904	032203	254 04 0 00 032204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2905	032204	324 00 0 00 032205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2907									;IN THE SUBTEST) TO LOOP ON ERROR^
  2908
  2909	032205	334 00 0 00 000000 		SKIPA			;GO TO NEXT TEST
  2910	032206	000000	000000		E53401:	0			;TEST WORD MEMORY
  2911
  2912					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 59
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0088

  2913					;THIS TEST VERIFIES THAT AOSL INCREMENTS C(E) BY 0,,1 AND PLACES
  2914					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  2915					;THE NEXT INSTRUCTION IF C(E) ISLESS THAN 0
  2916					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  2917					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=-1,,-1
  2918					;BEFORE INCREMENTING.  HENCE, AOSL SHOULD NOT SKIP; AND THE
  2919					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  2920					;RESPECTIVELY.
  2921
  2922	032207	200 06 0 00 033424 	C53410:	MOVE	6,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  2923	032210	474 07 0 00 000000 		SETO	7,		;PRELOAD E WITH -1,,-1
  2924	032211	351 06 0 00 000007 		AOSL	6,7		;*AOSL SHOULD ADD 00,1 TO C(E)
  2925									;UPDATE AC AND NOT SKIP
  2926	032212	334 00 0 00 000000 		SKIPA			;PASS IF AOSL DID NOT SKIP
  2927						STOP^
  2928	032213	254 04 0 00 032214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2929	032214	324 00 0 00 032215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2930									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2931									;IN THE SUBTEST) TO LOOP ON ERROR^
  2932	032215	312 07 0 00 033431 		CAME	7,[0]		;PASS IF E INCREMENTED CORRECTLY
  2933						STOP^
  2934	032216	254 04 0 00 032217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2935	032217	324 00 0 00 032220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2936									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2937									;IN THE SUBTEST) TO LOOP ON ERROR^
  2938	032220	312 06 0 00 033431 		CAME	6,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  2939						STOP^
  2940	032221	254 04 0 00 032222 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2941	032222	324 00 0 00 032223 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2942									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2943									;IN THE SUBTEST) TO LOOP ON ERROR^
  2944
  2945					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 60
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0089

  2946					;THIS TEST VERIFIES THAT AOSL INCREMENTS C(E) BY 0,,1 AND PLACES
  2947					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  2948					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0.
  2949					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  2950					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=0
  2951					;BEFORE INCREMENTING.  HENCE, AOSL SHOULD NOT SKIP; AND THE
  2952					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  2953					;RESPECTIVELY
  2954
  2955	032223	200 06 0 00 033424 	C53420:	MOVE	6,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  2956	032224	400 07 0 00 000000 		SETZ	7,		;PRELOAD E WITH 0
  2957	032225	351 06 0 00 000007 		AOSL	6,7		;*AOSL SHOULD ADD 0,,1 TO C(E).
  2958									;UPDATE AC AND NOT SKIP
  2959	032226	334 00 0 00 000000 		SKIPA			;PASS IF AOSL DID NOT SKIP
  2960						STOP^
  2961	032227	254 04 0 00 032230 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2962	032230	324 00 0 00 032231 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2963									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2964									;IN THE SUBTEST) TO LOOP ON ERROR^
  2965	032231	312 07 0 00 033432 		CAME	7,[1]		;PASS IF E INCREMENTED CORRECTLY
  2966						STOP^
  2967	032232	254 04 0 00 032233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2968	032233	324 00 0 00 032234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2969									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2970									;IN THE SUBTEST) TO LOOP ON ERROR^
  2971	032234	312 06 0 00 033432 		CAME	6,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  2972						STOP^
  2973	032235	254 04 0 00 032236 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2974	032236	324 00 0 00 032237 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2975									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2976									;IN THE SUBTEST) TO LOOP ON ERROR^
  2977
  2978					;**********
  2979
  2980					;THIS TEST VERIFIES THAT AOSE INCREMENTS C(E) BY 0,,1 AND PLACES
  2981					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  2982					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0.
  2983					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  2984					;IN THIS CASE, AC=5, C(AC)=707070,,707070AND C(E)=-1,,-2
  2985					;BEFORE INCREMENTING.  HENCE, AOSE SHOULD NOT SKIP; AND THE
  2986					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  2987					;RESPECTIVELY.
  2988
  2989	032237	200 05 0 00 033424 	C53500:	MOVE	5,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  2990	032240	561 06 0 00 777776 		HRROI	6,-2		;PRELOAD E WITH -1,,-2
  2991	032241	352 05 0 00 000006 		AOSE	5,6		;*AOSE SHOULD ADD 0,,1 TO C(E),
  2992									;UPDATE AC AND NOT SKIP
  2993	032242	334 00 0 00 000000 		SKIPA			;PASS IF AOSE DID NOT SKIP
  2994						STOP^
  2995	032243	254 04 0 00 032244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2996	032244	324 00 0 00 032245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2997									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2998									;IN THE SUBTEST) TO LOOP ON ERROR^
  2999	032245	312 06 0 00 033412 		CAME	6,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3000						STOP^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 60-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0090

  3001	032246	254 04 0 00 032247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3002	032247	324 00 0 00 032250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3003									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3004									;IN THE SUBTEST) TO LOOP ON ERROR^
  3005	032250	312 05 0 00 033412 		CAME	5,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3006						STOP^
  3007	032251	254 04 0 00 032252 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3008	032252	324 00 0 00 032253 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3009									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3010									;IN THE SUBTEST) TO LOOP ON ERROR^
  3011
  3012					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 61
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0091

  3013					;THIS TEST VERIFIES THAT AOSE INCREMENTS C(E) BY 0,,1 AND PLACES
  3014					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3015					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0
  3016					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3017					;IN THIS CASE, AC=5, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3018					;BEFORE INCREMENTING.  HENCE, AOSE SHOULD SKIP; AND THE
  3019					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  3020					;RESPECTIVELY.
  3021
  3022	032253	200 05 0 00 033424 	C53510:	MOVE	5,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  3023	032254	474 06 0 00 000000 		SETO	6,		;PRELOAD E WITH -1,,-1
  3024	032255	352 05 0 00 000006 		AOSE	5,6		;*AOSE SHOULD ADD 0,,1 TO C(E),
  3025									;UPDATE AC AND SKIP
  3026						STOP^
  3027	032256	254 04 0 00 032257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3028	032257	324 00 0 00 032260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3029									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3030									;IN THE SUBTEST) TO LOOP ON ERROR^
  3031	032260	312 06 0 00 033431 		CAME	6,[0]		;PASS IF E INCREMENTED CORRECTLY
  3032						STOP^
  3033	032261	254 04 0 00 032262 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3034	032262	324 00 0 00 032263 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3035									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3036									;IN THE SUBTEST) TO LOOP ON ERROR^
  3037	032263	312 05 0 00 033431 		CAME	5,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3038						STOP^
  3039	032264	254 04 0 00 032265 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3040	032265	324 00 0 00 032266 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3041									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3042									;IN THE SUBTEST) TO LOOP ON ERROR^
  3043
  3044					;**********
  3045
  3046					;THIS TEST VERIFIES THAT AOSE INCREMENTS C(E) BY 0,,1 AND PLACES
  3047					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3048					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0
  3049					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3050					;IN THIS CASE, AC=5, C(AC)=707070,,707070 AND C(AC)=0
  3051					;BEFORE INCREMENTING.  HENCE, AOSE SHOULD NOT SKIP; AND THE
  3052					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  3053					;RESPECTIVELY.
  3054
  3055	032266	200 05 0 00 033424 	C53520:	MOVE	5,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  3056	032267	400 06 0 00 000000 		SETZ	6,		;PRELOAD E WITH 0
  3057	032270	352 05 0 00 000006 		AOSE	5,6		;*AOSE SHOULD ADD 0,,1 TO C(E),
  3058									;UPDATE AC AND NOT SKIP
  3059	032271	334 00 0 00 000000 		SKIPA			;PASS IF AOSE DID NOT SKIP
  3060						STOP^
  3061	032272	254 04 0 00 032273 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3062	032273	324 00 0 00 032274 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3063									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3064									;IN THE SUBTEST) TO LOOP ON ERROR^
  3065	032274	312 06 0 00 033432 		CAME	6,[1]		;PASS IF E INCREMENTED CORRECTLY
  3066						STOP^
  3067	032275	254 04 0 00 032276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 61-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0092

  3068	032276	324 00 0 00 032277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3069									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3070									;IN THE SUBTEST) TO LOOP ON ERROR^
  3071	032277	312 05 0 00 033432 		CAME	5,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3072						STOP^
  3073	032300	254 04 0 00 032301 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3074	032301	324 00 0 00 032302 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3075									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3076									;IN THE SUBTEST) TO LOOP ON ERROR^
  3077
  3078					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 62
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0093

  3079					;THIS TEST VERIFIES THAT AOSLE INCREMENTS C(E) BY 0,,1 AND PLACES
  3080					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3081					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO0
  3082					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3083					;IN THIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=-1,,-2
  3084					;BEFORE INCREMENTING.  HENCE, AOSLE SHOULD SKIP; AND THE
  3085					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  3086					;RESPECTIVELY.
  3087
  3088	032302	200 04 0 00 033424 	C53600:	MOVE	4,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  3089	032303	561 05 0 00 777776 		HRROI	5,-2		;PRELOAD E WITH -1,,-2
  3090	032304	353 04 0 00 000005 		AOSLE	4,5		;*AOSLE SHOULD ADD 0,,1 TO C(E),
  3091									;UPDATE AC AND SKIP ZERO
  3092						STOP^
  3093	032305	254 04 0 00 032306 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3094	032306	324 00 0 00 032307 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3095									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3096									;IN THE SUBTEST) TO LOOP ON ERROR^
  3097	032307	312 05 0 00 033412 		CAME	5,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3098						STOP^
  3099	032310	254 04 0 00 032311 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3100	032311	324 00 0 00 032312 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3101									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3102									;IN THE SUBTEST) TO LOOP ON ERROR^
  3103	032312	312 04 0 00 033412 		CAME	4,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3104						STOP^
  3105	032313	254 04 0 00 032314 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3106	032314	324 00 0 00 032315 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3107									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3108									;IN THE SUBTEST) TO LOOP ON ERROR^
  3109
  3110					;**********
  3111
  3112					;THIS TEST VERIFIES THAT AOSLE INCREMENTS C(E) BY 0,,1 AND PLACES
  3113					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3114					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO 0.
  3115					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3116					;IN THIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3117					;BEFORE INCREMENTING.  HENCE, AOSLE SHOULD SKIP; AND THE
  3118					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  3119					;RESPECTIVELY.
  3120
  3121	032315	200 04 0 00 033424 	C53610:	MOVE	4,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  3122	032316	476 05 0 00 000000 		SETOM	5,		;PRELOAD E WITH -1,,-1
  3123	032317	353 04 0 00 000005 		AOSLE	4,5		;*AOSLE SHOULD ADD 0,,1 TO C(E)
  3124									;UPDATE AC AND SKIP
  3125						STOP^
  3126	032320	254 04 0 00 032321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3127	032321	324 00 0 00 032322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3128									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3129									;IN THE SUBTEST) TO LOOP ON ERROR^
  3130	032322	312 05 0 00 033431 		CAME	5,[0]		;PASS IF E INCREMENTED CORRECTLY
  3131						STOP^
  3132	032323	254 04 0 00 032324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3133	032324	324 00 0 00 032325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 62-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0094

  3134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3135									;IN THE SUBTEST) TO LOOP ON ERROR^
  3136	032325	312 04 0 00 033431 		CAME	4,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3137						STOP^
  3138	032326	254 04 0 00 032327 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3139	032327	324 00 0 00 032330 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3140									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3141									;IN THE SUBTEST) TO LOOP ON ERROR^
  3142
  3143					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 63
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0095

  3144					;THIS TEST VERIFIES THAT AOSLE INCREMENTS C(E) BY 0,,1 AND PLACES
  3145					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3146					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO 0
  3147					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3148					;IN THIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=0
  3149					;BEFORE INCREMENTING.  HENCE, AOSLE SHOULD NOT SKIP ; AND THE
  3150					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  3151					;RESPECTIVELY.
  3152
  3153	032330	200 04 0 00 033424 	C53620:	MOVE	4,[707070,,707070]	;PRELOAD AC WITH 707070,,707070
  3154	032331	400 00 0 00 000005 		SETZ	5		;PRELOAD E WITH 0
  3155	032332	353 04 0 00 000005 		AOSLE	4,5		;*AOSLE SHOULD ADD 0,,1 TO C(E)
  3156									;UPDATE AC AND NOT SKIP
  3157	032333	334 00 0 00 000000 		SKIPA			;PASS IF AOSLE DID NOT SKIP
  3158						STOP^
  3159	032334	254 04 0 00 032335 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3160	032335	324 00 0 00 032336 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3161									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3162									;IN THE SUBTEST) TO LOOP ON ERROR^
  3163	032336	312 05 0 00 033432 		CAME	5,[1]		;PASS IF E INCREMENTED CORRECTLY
  3164						STOP^
  3165	032337	254 04 0 00 032340 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3166	032340	324 00 0 00 032341 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3167									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3168									;IN THE SUBTEST) TO LOOP ON ERROR^
  3169	032341	312 04 0 00 033432 		CAME	4,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3170						STOP^
  3171	032342	254 04 0 00 032343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3172	032343	324 00 0 00 032344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3173									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3174									;IN THE SUBTEST) TO LOOP ON ERROR^
  3175
  3176					;**********
  3177
  3178					;THIS TEST VERIFIES THAT AOSA INCREMENTS C(E) BY 0,,1 AND PLACES
  3179					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  3180					;THE NEXT INSTRUCTION.
  3181					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3182					;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=-1,,-2
  3183					;BEFORE INCREMENTING.  HENCE, AOSA SHOULD SKIP ; AND THE
  3184					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  3185					;RESPECTIVELY.
  3186
  3187	032344	200 03 0 00 033424 	C53700:	MOVE	3,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3188	032345	561 04 0 00 777776 		HRROI	4,-2		;PRELOAD E WITH -1,,-2
  3189	032346	354 03 0 00 000004 		AOSA	3,4		;*AOSA SHOULD ADD 0,,1 TO C(E),
  3190									;UPDATE AC AND SKIP
  3191						STOP^
  3192	032347	254 04 0 00 032350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3193	032350	324 00 0 00 032351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3194									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3195									;IN THE SUBTEST) TO LOOP ON ERROR^
  3196	032351	312 04 0 00 033412 		CAME	4,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3197						STOP^
  3198	032352	254 04 0 00 032353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 63-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0096

  3199	032353	324 00 0 00 032354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3200									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3201									;IN THE SUBTEST) TO LOOP ON ERROR^
  3202	032354	312 03 0 00 033412 		CAME	3,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3203						STOP^
  3204	032355	254 04 0 00 032356 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3205	032356	324 00 0 00 032357 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3206									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3207									;IN THE SUBTEST) TO LOOP ON ERROR^
  3208
  3209					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 64
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0097

  3210					;THIS TEST VERIFIES THAT AOSA INCREMENTS C(E) BY 0,,1 AND PLACES
  3211					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  3212					;THE NEXT INSTRUCTION.
  3213					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3214					;;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3215					;BEFORE INCREMENTING.  HENCE, AOSA SHOULD SKIP AND THE
  3216					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  3217					;RESPECTIVELY
  3218
  3219	032357	200 03 0 00 033424 	C53710:	MOVE	3,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3220	032360	474 04 0 00 000000 		SETO	4,		;PRELOAD E WITH -1,,-1
  3221	032361	354 03 0 00 000004 		AOSA	3,4		;*AOSA SHOULD ADD 0,,1 TO C(E),
  3222									;UPDATE AC AND SKIP
  3223						STOP^
  3224	032362	254 04 0 00 032363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3225	032363	324 00 0 00 032364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3226									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3227									;IN THE SUBTEST) TO LOOP ON ERROR^
  3228	032364	312 04 0 00 033431 		CAME	4,[0]		;PASS IF E INCREMENTED CORRECTLY
  3229						STOP^
  3230	032365	254 04 0 00 032366 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3231	032366	324 00 0 00 032367 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3232									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3233									;IN THE SUBTEST) TO LOOP ON ERROR^
  3234	032367	312 03 0 00 033431 		CAME	3,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3235						STOP^
  3236	032370	254 04 0 00 032371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3237	032371	324 00 0 00 032372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3238									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3239									;IN THE SUBTEST) TO LOOP ON ERROR^
  3240
  3241					;**********
  3242
  3243					;THIS TEST VERIFIES THAT AOS INCREMENTS C(E) BY 0,,1 AND PLACES
  3244					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  3245					;THE NEXT INSTRUCTION.
  3246					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3247					;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=0
  3248					;BEFORE INCREMENTING.  HENCE, AOSA SHOULD SKIP ; AND THE
  3249					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  3250					;RESPECTIVELY
  3251
  3252	032372	200 03 0 00 033424 	C53720:	MOVE	3,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3253	032373	400 04 0 00 000000 		SETZ	4,		;PRELOAD E WITH 0
  3254	032374	354 03 0 00 000004 		AOSA	3,4		;*AOSA SHOULD ADD 0,,1 TO C(E),
  3255									;UPDATE AC AND SKIP
  3256						STOP^
  3257	032375	254 04 0 00 032376 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3258	032376	324 00 0 00 032377 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3259									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3260									;IN THE SUBTEST) TO LOOP ON ERROR^
  3261	032377	312 04 0 00 033432 		CAME	4,[1]		;PASS IF E INCREMENTED CORRECTLY
  3262						STOP^
  3263	032400	254 04 0 00 032401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3264	032401	324 00 0 00 032402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 64-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0098

  3265									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3266									;IN THE SUBTEST) TO LOOP ON ERROR^
  3267	032402	312 03 0 00 033432 		CAME	3,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3268						STOP^
  3269	032403	254 04 0 00 032404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3270	032404	324 00 0 00 032405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3271									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3272									;IN THE SUBTEST) TO LOOP ON ERROR^
  3273
  3274					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 65
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0099

  3275					;THIS TEST VERIFIES THAT AOSGE INCREMENTS C(E) BY 0,,1 AND PLACES
  3276					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3277					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0
  3278					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3279					;IN THIS CASE, AC=2, C(AC)=707070,,707070 AND C(E)=-1,,-2
  3280					;BEFORE INCREMENTING.  HENCE, AOSGE SHOULD NOT SKIP; AND THE
  3281					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  3282					;RESPECTIVELY
  3283
  3284	032405	200 02 0 00 033424 	C54000:	MOVE	2,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3285	032406	561 03 0 00 777776 		HRROI	3,-2		;PRELOAD E WITH -1,,-2
  3286	032407	355 02 0 00 000003 		AOSGE	2,3		;*AOSGE SHOULD ADD 0,,1 TO C(E),
  3287									;UPDATE AC AND NOT SKIP
  3288	032410	334 00 0 00 000000 		SKIPA			;PASS IF AOSGE DID NOT SKIP
  3289						STOP^
  3290	032411	254 04 0 00 032412 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3291	032412	324 00 0 00 032413 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3292									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3293									;IN THE SUBTEST) TO LOOP ON ERROR^
  3294	032413	312 03 0 00 033412 		CAME	3,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3295						STOP^
  3296	032414	254 04 0 00 032415 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3297	032415	324 00 0 00 032416 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3298									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3299									;IN THE SUBTEST) TO LOOP ON ERROR^
  3300	032416	312 02 0 00 033412 		CAME	2,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3301						STOP^
  3302	032417	254 04 0 00 032420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3303	032420	324 00 0 00 032421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3305									;IN THE SUBTEST) TO LOOP ON ERROR^
  3306
  3307					;**********
  3308
  3309					;THIS TEST VERIFIES THAT AOSGE INCREMENTS C(E) BY 0,,1 AND PLACES
  3310					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3311					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0
  3312					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3313					;IN THIS CASE, AC=2, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3314					;BEFORE INCREMENTING.  HENCE, AOSGE SHOULD SKIP; AND THE
  3315					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  3316					;RESPECTIVELY
  3317
  3318	032421	200 02 0 00 033424 	C54010:	MOVE	2,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3319	032422	474 03 0 00 000000 		SETO	3,		;PRELOAD E WITH 0
  3320	032423	355 02 0 00 000003 		AOSGE	2,3		;*AOSGE SHOULD ADD 0,,1 TO C(E),
  3321									;UPDATE AC AND SKIP
  3322						STOP^
  3323	032424	254 04 0 00 032425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3324	032425	324 00 0 00 032426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3325									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3326									;IN THE SUBTEST) TO LOOP ON ERROR^
  3327	032426	312 03 0 00 033431 		CAME	3,[0]		;PASS IF E INCREMENTED CORRECTLY
  3328						STOP^
  3329	032427	254 04 0 00 032430 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 65-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0100

  3330	032430	324 00 0 00 032431 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3331									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3332									;IN THE SUBTEST) TO LOOP ON ERROR^
  3333	032431	312 02 0 00 033431 		CAME	2,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3334						STOP^
  3335	032432	254 04 0 00 032433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3336	032433	324 00 0 00 032434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3337									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3338									;IN THE SUBTEST) TO LOOP ON ERROR^
  3339
  3340					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 66
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0101

  3341					;THIS TEST VERIFIES THAT AOSGE INCREMENTS C(E) BY 0,,1 AND PLACES
  3342					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3343					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0
  3344					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3345					;IN THIS CASE, AC=2, C(AC)=707070,,707070 AND C(E)=0
  3346					;BEFORE INCREMENTING.  HENCE, AOSGE SHOULD SKIP; AND THE
  3347					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  3348					;RESPECTIVELY
  3349
  3350	032434	200 02 0 00 033424 	C54020:	MOVE	2,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3351	032435	400 03 0 00 000000 		SETZ	3,		;PRELOAD E WITH 0
  3352	032436	355 02 0 00 000003 		AOSGE	2,3		;*AOSGE SHOULD ADD 0,,1 TO C(E),
  3353									;UPDATE AC AND SKIP
  3354						STOP^
  3355	032437	254 04 0 00 032440 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3356	032440	324 00 0 00 032441 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3357									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3358									;IN THE SUBTEST) TO LOOP ON ERROR^
  3359	032441	312 03 0 00 033432 		CAME	3,[1]		;PASS IF E INCREMENTED CORRECTLY
  3360						STOP^
  3361	032442	254 04 0 00 032443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3362	032443	324 00 0 00 032444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3363									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3364									;IN THE SUBTEST) TO LOOP ON ERROR^
  3365	032444	312 02 0 00 033432 		CAME	2,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3366						STOP^
  3367	032445	254 04 0 00 032446 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3368	032446	324 00 0 00 032447 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3370									;IN THE SUBTEST) TO LOOP ON ERROR^
  3371
  3372					;**********
  3373
  3374					;THIS TEST VERIFIES THAT AOSN INCREMENTS C(E) BY 0,,1 AND PLACES
  3375					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3376					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO.
  3377					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3378					;IN THIS CASE, AC=1, C(AC)=707070,,707070 AND C(E)=-1,,-2
  3379					;BEFORE INCREMENTING.  HENCE, AOSN SHOULD NOT SKIP; AND THE
  3380					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  3381					;RESPECTIVELY
  3382
  3383	032447	200 01 0 00 033424 	C54100:	MOVE	1,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3384	032450	561 02 0 00 777776 		HRROI	2,-2		;PRELOAD E WITH -1,,-2
  3385	032451	356 01 0 00 000002 		AOSN	1,2		;*AOSN SHOULD ADD 0,,1 TO C(E),
  3386									;UPDATE AC AND SKIP
  3387						STOP^
  3388	032452	254 04 0 00 032453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3389	032453	324 00 0 00 032454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3391									;IN THE SUBTEST) TO LOOP ON ERROR^
  3392	032454	312 02 0 00 033412 		CAME	2,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3393						STOP^
  3394	032455	254 04 0 00 032456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3395	032456	324 00 0 00 032457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 66-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0102

  3396									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3397									;IN THE SUBTEST) TO LOOP ON ERROR^
  3398	032457	312 01 0 00 033412 		CAME	1,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3399						STOP^
  3400	032460	254 04 0 00 032461 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3401	032461	324 00 0 00 032462 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3402									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3403									;IN THE SUBTEST) TO LOOP ON ERROR^
  3404
  3405					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 67
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0103

  3406					;THIS TEST VERIFIES THAT AOSN INCREMENTS C(E) BY 0,,1 AND PLACES
  3407					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3408					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO
  3409					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3410					;IN THIS CASE, AC=1, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3411					;BEFORE INCREMENTING.  HENCE, AOSN SHOULD NOT SKIP; AND THE
  3412					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  3413					;RESPECTIVELY
  3414
  3415	032462	200 01 0 00 033424 	C54110:	MOVE	1,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3416	032463	474 02 0 00 000000 		SETO	2,		;PRELOAD E WITH -1,,-1
  3417	032464	356 01 0 00 000002 		AOSN	1,2		;*AOSN SHOULD ADD 0,,1 TO C(E),
  3418									;UPDATE AC AND NOT SKIP
  3419	032465	334 00 0 00 000000 		SKIPA			;PASS IF AOSN DID NOT SKIP
  3420						STOP^
  3421	032466	254 04 0 00 032467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3422	032467	324 00 0 00 032470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3423									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3424									;IN THE SUBTEST) TO LOOP ON ERROR^
  3425	032470	312 02 0 00 033431 		CAME	2,[0]		;PASS IF E INCREMENTED CORRECTLY
  3426						STOP^
  3427	032471	254 04 0 00 032472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3428	032472	324 00 0 00 032473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3430									;IN THE SUBTEST) TO LOOP ON ERROR^
  3431	032473	312 01 0 00 033431 		CAME	1,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3432						STOP^
  3433	032474	254 04 0 00 032475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3434	032475	324 00 0 00 032476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3436									;IN THE SUBTEST) TO LOOP ON ERROR^
  3437
  3438					;**********
  3439
  3440					;THIS TEST VERIFIES THAT AOSN INCREMENTS C(E) BY 0,,1 AND PLACES
  3441					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3442					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO
  3443					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3444					;IN THIS CASE, AC=1, C(AC)=707070,,707070 AND C(E)=0
  3445					;BEFORE INCREMENTING.  HENCE, AOSN SHOULD SKIP; AND THE
  3446					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  3447					;RESPECTIVELY
  3448
  3449	032476	200 01 0 00 033424 	C54120:	MOVE	1,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3450	032477	400 02 0 00 000000 		SETZ	2,		;PRELOAD E WITH 0
  3451	032500	356 01 0 00 000002 		AOSN	1,2		;*AOSN SHOULD ADD 0,,1 TO C(E),
  3452									;UPDATE AC AND SKIP
  3453						STOP^
  3454	032501	254 04 0 00 032502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3455	032502	324 00 0 00 032503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3456									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3457									;IN THE SUBTEST) TO LOOP ON ERROR^
  3458	032503	312 02 0 00 033432 		CAME	2,[1]		;PASS IF E INCREMENTED CORRECTLY
  3459						STOP^
  3460	032504	254 04 0 00 032505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 67-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0104

  3461	032505	324 00 0 00 032506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3462									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3463									;IN THE SUBTEST) TO LOOP ON ERROR^
  3464	032506	312 01 0 00 033432 		CAME	1,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  3465						STOP^
  3466	032507	254 04 0 00 032510 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3467	032510	324 00 0 00 032511 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3468									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3469									;IN THE SUBTEST) TO LOOP ON ERROR^
  3470
  3471					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 68
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0105

  3472					;THIS TEST VERIFIES THAT AOSG INCREMENTS C(E) BY 0,,1 AND PLACES
  3473					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3474					;THE NEST INSTRUCTION IF C(E) IS GREATER THAN 0
  3475					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3476					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=-1,,-2
  3477					;BEFORE INCREMENTING.  HENCE, AOSG SHOULD NOT SKIP; AND THE
  3478					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND -1,,-1
  3479					;RESPECTIVELY
  3480
  3481	032511	200 00 0 00 033424 	C54200:	MOVE	0,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3482	032512	561 01 0 00 777776 		HRROI	1,-2		;PRELOAD E WITH -1,,-2
  3483	032513	357 00 0 00 000001 		AOSG	0,1		;*AOSG SHOULD ADD 0,,1 TO C(E),
  3484									;AND NOT SKIP
  3485	032514	334 00 0 00 000000 		SKIPA			;PASS IF AOSG DID NOT SKIP
  3486						STOP^
  3487	032515	254 04 0 00 032516 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3488	032516	324 00 0 00 032517 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3489									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3490									;IN THE SUBTEST) TO LOOP ON ERROR^
  3491	032517	312 01 0 00 033412 		CAME	1,[-1]		;PASS IF E INCREMENTED CORRECTLY
  3492						STOP^
  3493	032520	254 04 0 00 032521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3494	032521	324 00 0 00 032522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3496									;IN THE SUBTEST) TO LOOP ON ERROR^
  3497	032522	312 00 0 00 033424 		CAME	0,[707070,,707070] ;PASS IF C(AC) WAS NOT MODIFIED
  3498						STOP^
  3499	032523	254 04 0 00 032524 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3500	032524	324 00 0 00 032525 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3501									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3502									;IN THE SUBTEST) TO LOOP ON ERROR^
  3503
  3504					;**********
  3505
  3506					;THIS TEST VERIFIES THAT AOSG INCREMENTS C(E) BY 0,,1 AND PLACES
  3507					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3508					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN 0
  3509					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3510					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=-1,,-1
  3511					;BEFORE INCREMENTING.  HENCE, AOSG SHOULD NOT SKIP; AND THE
  3512					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0
  3513					;RESPECTIVELY
  3514
  3515	032525	200 00 0 00 033424 	C54210:	MOVE	0,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3516	032526	474 01 0 00 000000 		SETO	1,		;PRELOAD E WITH -1,,-1
  3517	032527	357 00 0 00 000001 		AOSG	0,1		;*AOSG SHOULD ADD 0,,1 TO C(E),
  3518									;AND NOT SKIP
  3519	032530	334 00 0 00 000000 		SKIPA			;PASS IF AOSG DID NOT SKIP
  3520						STOP^
  3521	032531	254 04 0 00 032532 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3522	032532	324 00 0 00 032533 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3523									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3524									;IN THE SUBTEST) TO LOOP ON ERROR^
  3525	032533	312 01 0 00 033431 		CAME	1,[0]		;PASS IF E INCREMENTED CORRECTLY
  3526						STOP^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 68-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0106

  3527	032534	254 04 0 00 032535 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3528	032535	324 00 0 00 032536 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3529									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3530									;IN THE SUBTEST) TO LOOP ON ERROR^
  3531	032536	312 00 0 00 033424 		CAME	0,[707070,,707070] ;PASS IF C(AC) WAS NOT MODIFIED
  3532						STOP^
  3533	032537	254 04 0 00 032540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3534	032540	324 00 0 00 032541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3535									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3536									;IN THE SUBTEST) TO LOOP ON ERROR^
  3537
  3538					;***********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 69
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL AOSX INSTRUCTIONS                                                     SEQ 0107

  3539					;THIS TEST VERIFIES THAT AOSG INCREMENTS C(E) BY 0,,1 AND PLACES
  3540					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  3541					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN 0
  3542					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  3543					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=0
  3544					;BEFORE INCREMENTING.  HENCE, AOSG SHOULD SKIP; AND THE
  3545					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0,,1
  3546					;RESPECTIVELY
  3547
  3548	032541	200 00 0 00 033424 	C54220:	MOVE	0,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  3549	032542	400 01 0 00 000000 		SETZ	1,		;PRELOAD E WITH 0
  3550	032543	357 00 0 00 000001 		AOSG	0,1		;*AOSG SHOULD ADD 0,,1 TO C(E),
  3551									;AND SKIP
  3552						STOP^
  3553	032544	254 04 0 00 032545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3554	032545	324 00 0 00 032546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3556									;IN THE SUBTEST) TO LOOP ON ERROR^
  3557	032546	312 01 0 00 033432 		CAME	1,[1]		;PASS IF E INCREMENTED CORRECTLY
  3558						STOP^
  3559	032547	254 04 0 00 032550 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3560	032550	324 00 0 00 032551 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3561									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3562									;IN THE SUBTEST) TO LOOP ON ERROR^
  3563	032551	312 00 0 00 033424 		CAME	0,[707070,,707070] ;PASS IF C(AC) WAS NOT MODIFIED
  3564						STOP^
  3565	032552	254 04 0 00 032553 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3566	032553	324 00 0 00 032554 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3567									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3568									;IN THE SUBTEST) TO LOOP ON ERROR^
  3569
  3570					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 70
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0108

  3571					SUBTTL	TEST OF MSCL SOJX INSTRUCTIONS
  3572
  3573					;**********
  3574
  3575					;THIS TEST VERIFIES THAT SOJL DECREMENTS C(AC) BY 0,,1 AND
  3576					;PLACES THE RESTULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3577					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3578					;SPECIFIED BY E IF C(AC) IS LESS THAN 0.
  3579					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE, SOJL
  3580					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1
  3581
  3582	032554	201 17 0 00 000000 	C54300:	MOVEI	17,0		;PRELOAD AC WITH 0
  3583	032555	361 17 0 00 032557 		SOJL	17,.+2		;*SOJL SHOULD SUBTRACT 0,,1 FROM C(AC)
  3584									;AND JUMP
  3585						STOP^
  3586	032556	254 04 0 00 032557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3587	032557	324 00 0 00 032560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3588									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3589									;IN THE SUBTEST) TO LOOP ON ERROR^
  3590	032560	312 17 0 00 033412 		CAME	17,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3591						STOP^
  3592	032561	254 04 0 00 032562 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3593	032562	324 00 0 00 032563 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3594									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3595									;IN THE SUBTEST) TO LOOP ON ERROR^
  3596
  3597					;***********
  3598
  3599					;THIS TEST VERIFIES THAT SOJL DECREMENTS C(AC) BY 0,,1 AND
  3600					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3601					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3602					;SPECIFIED BY E IF C(AC) IS LESS THAN 0.
  3603					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJL
  3604					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE 0.
  3605
  3606	032563	201 17 0 00 000001 	C54310:	MOVEI	17,1		;PRELOAD AC WITH 0,,1
  3607	032564	361 17 0 00 032566 		SOJL	17,.+2			;*SOJL SHOULD SUBTRACT 0,,1 FROM C(AC)
  3608	032565	334 00 0 00 000000 		SKIPA			;PASS IF SOJL DID NOT JUMP
  3609						STOP^
  3610	032566	254 04 0 00 032567 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3611	032567	324 00 0 00 032570 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3612									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3613									;IN THE SUBTEST) TO LOOP ON ERROR^
  3614	032570	312 17 0 00 033431 		CAME	17,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3615						STOP^
  3616	032571	254 04 0 00 032572 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3617	032572	324 00 0 00 032573 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3618									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3619									;IN THE SUBTEST) TO LOOP ON ERROR^
  3620
  3621					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 71
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0109

  3622					;THIS TEST VERIFIES THAT SOJL DECREMENTS C(AC) BY 0,,1 AND
  3623					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3624					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3625					;SPECIFIED BY E IF C(AC) IS LESS THAN 0
  3626					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJ
  3627					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1
  3628
  3629	032573	201 17 0 00 000002 	C54320:	MOVEI	17,2		;PRELOAD AC WITH 0,,2
  3630	032574	361 17 0 00 032576 		SOJL	17,.+2		;*SOJ SHOULD SUBTRACT 0,,1 FROM C(AC)
  3631									;AND NOT JUMP.
  3632	032575	334 00 0 00 000000 		SKIPA			;PASS IF SOJL DID NOT JUMP
  3633						STOP^
  3634	032576	254 04 0 00 032577 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3635	032577	324 00 0 00 032600 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3636									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3637									;IN THE SUBTEST) TO LOOP ON ERROR^
  3638	032600	312 17 0 00 033432 		CAME	17,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3639						STOP^
  3640	032601	254 04 0 00 032602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3641	032602	324 00 0 00 032603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3642									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3643									;IN THE SUBTEST) TO LOOP ON ERROR^
  3644
  3645					;**********
  3646
  3647					;THIS TEST VERIFIES THAT SOJE DECREMENTS C(AC) BY 0,,1 AND
  3648					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3649					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3650					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0.
  3651					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE, SOJE
  3652					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1
  3653
  3654	032603	201 16 0 00 000000 	C54400:	MOVEI	16,0		;PRELOAD AC WITH 0
  3655	032604	362 16 0 00 032606 		SOJE	16,.+2		;*SOJE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3656									;AND NOT JUMP.
  3657	032605	334 00 0 00 000000 		SKIPA			;PASS IF SOJE DID NOT JUMP
  3658						STOP^
  3659	032606	254 04 0 00 032607 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3660	032607	324 00 0 00 032610 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3661									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3662									;IN THE SUBTEST) TO LOOP ON ERROR^
  3663	032610	312 16 0 00 033412 		CAME	16,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3664						STOP^
  3665	032611	254 04 0 00 032612 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3666	032612	324 00 0 00 032613 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3667									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3668									;IN THE SUBTEST) TO LOOP ON ERROR^
  3669
  3670					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 72
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0110

  3671					;THIS TEST VERIFIES THAT SOJE DECREMENTS C(AC) BY 0,,1 AND
  3672					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3673					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3674					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0
  3675					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJ
  3676					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0
  3677
  3678	032613	201 16 0 00 000001 	C54410:	MOVEI	16,1		;PRELOAD AC WITH 0,,1
  3679	032614	362 16 0 00 032616 		SOJE	16,.+2		;*SOJE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3680									;AND JUMP
  3681						STOP^
  3682	032615	254 04 0 00 032616 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3683	032616	324 00 0 00 032617 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3684									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3685									;IN THE SUBTEST) TO LOOP ON ERROR^
  3686	032617	312 16 0 00 033431 		CAME	16,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3687						STOP^
  3688	032620	254 04 0 00 032621 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3689	032621	324 00 0 00 032622 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3690									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3691									;IN THE SUBTEST) TO LOOP ON ERROR^
  3692
  3693					;**********
  3694
  3695					;THIS TEST VERIFIES THAT SOJE DECREMENTS C(AC) BY 0,,1 AND
  3696					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3697					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3698					;SPECIFIED BY E IF C(AC) IS EQUAL TO 0.
  3699					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJE
  3700					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1
  3701
  3702	032622	201 16 0 00 000002 	C54420:	MOVEI	16,2		;PRELOAD AC WITH 0,,2
  3703	032623	362 16 0 00 032625 		SOJE	16,.+2		;*SOJ SHOULD SUBTRACT 0,,1 FROM C(AC)
  3704									;AND NOT JUMP.
  3705	032624	334 00 0 00 000000 		SKIPA			;PASS IF SOJE DID NOT JUMP
  3706						STOP^
  3707	032625	254 04 0 00 032626 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3708	032626	324 00 0 00 032627 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3709									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3710									;IN THE SUBTEST) TO LOOP ON ERROR^
  3711	032627	312 16 0 00 033432 		CAME	16,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3712						STOP^
  3713	032630	254 04 0 00 032631 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3714	032631	324 00 0 00 032632 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3715									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3716									;IN THE SUBTEST) TO LOOP ON ERROR^
  3717
  3718					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 73
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0111

  3719					;THIS TEST VERIFIES THAT SOJLE DECREMENTS C(AC) BY 0,,1 AND
  3720					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3721					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3722					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO 0
  3723					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE, SOJLE
  3724					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1
  3725
  3726	032632	201 15 0 00 000000 	C54500:	MOVEI	15,0		;PRELOAD AC WITH 0
  3727	032633	363 15 0 00 032635 		SOJLE	15,.+2		;*SOJLE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3728									;AND JUMP
  3729						STOP^
  3730	032634	254 04 0 00 032635 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3731	032635	324 00 0 00 032636 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3732									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3733									;IN THE SUBTEST) TO LOOP ON ERROR^
  3734	032636	312 15 0 00 033412 		CAME	15,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3735						STOP^
  3736	032637	254 04 0 00 032640 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3737	032640	324 00 0 00 032641 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3738									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3739									;IN THE SUBTEST) TO LOOP ON ERROR^
  3740
  3741					;**********
  3742
  3743					;THIS TEST VERIFIES THAT SOJLE DECREMENTS C(AC) BY 0,,1 AND
  3744					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3745					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3746					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUALTO 0.
  3747					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJLE
  3748					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0
  3749
  3750	032641	201 15 0 00 000001 	C54510:	MOVEI	15,1		;PRELOAD AC WITH 0,,1
  3751	032642	363 15 0 00 032644 		SOJLE	15,.+2		;*SOJLE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3752									;AND JUMP
  3753						STOP^
  3754	032643	254 04 0 00 032644 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3755	032644	324 00 0 00 032645 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3756									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3757									;IN THE SUBTEST) TO LOOP ON ERROR^
  3758	032645	312 15 0 00 033431 		CAME	15,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3759						STOP^
  3760	032646	254 04 0 00 032647 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3761	032647	324 00 0 00 032650 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3762									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3763									;IN THE SUBTEST) TO LOOP ON ERROR^
  3764
  3765					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 74
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0112

  3766					;THIS TEST VERIFIES THAT SOJLE DECREMENTS C(AC) BY 0,,1 AND
  3767					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3768					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3769					;SPECIFIED BY E IF C(AC) IS LESS THAN OR EQUAL TO 0.
  3770					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJLE
  3771					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1
  3772
  3773	032650	201 15 0 00 000002 	C54520:	MOVEI	15,2		;PRELOAD AC WITH 0,,2
  3774	032651	363 15 0 00 032653 		SOJLE	15,.+2		;*SOJLE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3775									;AND NOT JUMP
  3776	032652	334 00 0 00 000000 		SKIPA			;PASS IF SOJLE DID NOT JUMP
  3777						STOP^
  3778	032653	254 04 0 00 032654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3779	032654	324 00 0 00 032655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3780									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3781									;IN THE SUBTEST) TO LOOP ON ERROR^
  3782	032655	312 15 0 00 033432 		CAME	15,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3783						STOP^
  3784	032656	254 04 0 00 032657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3785	032657	324 00 0 00 032660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3786									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3787									;IN THE SUBTEST) TO LOOP ON ERROR^
  3788
  3789					;**********
  3790
  3791					;THIS TEST VERIFIES THAT SOJA DECREMENTS C(AC) BY 0,,1 AND
  3792					;PLACES THE RESULT INTO THE AC.  THE RESULT IN THE AC IS
  3793					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  3794					;SPECIFIED BY E
  3795					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE, SOJA
  3796					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1
  3797
  3798	032660	201 14 0 00 000000 	C54600:	MOVEI	14,0		;PRELOAD AC WITH 0
  3799	032661	364 14 0 00 032663 		SOJA	14,.+2		;*SOJ SHOULD SUBTRACT 0,,1 FROM C(AC)
  3800									;AND JUMP
  3801						STOP^
  3802	032662	254 04 0 00 032663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3803	032663	324 00 0 00 032664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3804									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3805									;IN THE SUBTEST) TO LOOP ON ERROR^
  3806	032664	312 14 0 00 033412 		CAME	14,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3807						STOP^
  3808	032665	254 04 0 00 032666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3809	032666	324 00 0 00 032667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3810									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3811									;IN THE SUBTEST) TO LOOP ON ERROR^
  3812
  3813					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 75
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0113

  3814					;THIS TEST VERIFIES THAT SOJA DECREMENTS C(AC) BY 0,,1 AND
  3815					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3816					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  3817					;SPECIFIED BY E
  3818					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJA
  3819					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0
  3820
  3821	032667	201 14 0 00 000001 	C54610:	MOVEI	14,1		;PRELOAD AC WITH 0,,1
  3822	032670	364 14 0 00 032672 		SOJA	14,.+2		;*SOJA SHOULD SUBTRACT 0,,1 FROM C(AC)
  3823									;AND JUMP
  3824						STOP^
  3825	032671	254 04 0 00 032672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3826	032672	324 00 0 00 032673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3827									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3828									;IN THE SUBTEST) TO LOOP ON ERROR^
  3829	032673	312 14 0 00 033431 		CAME	14,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3830						STOP^
  3831	032674	254 04 0 00 032675 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3832	032675	324 00 0 00 032676 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3833									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3834									;IN THE SUBTEST) TO LOOP ON ERROR^
  3835
  3836					;**********
  3837
  3838					;THIS TEST VERIFIES THAT SOJA DECREMENTS C(AC) BY 0,,1 AND
  3839					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3840					;COMPARED TO 0 AND THE PROGRAM ALWAYS JUMPS TO THE LOCATION
  3841					;SPECIFIED BY E
  3842					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJA
  3843					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1
  3844
  3845	032676	201 14 0 00 000002 	C54620:	MOVEI	14,2		;PRELOAD AC WITH 0,,2
  3846	032677	364 14 0 00 032701 		SOJA	14,.+2		;*SOJA SHOULD SUBTRACT 0,,1 FROM C(AC)
  3847									;AND JUMP
  3848						STOP^
  3849	032700	254 04 0 00 032701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3850	032701	324 00 0 00 032702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3851									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3852									;IN THE SUBTEST) TO LOOP ON ERROR^
  3853	032702	312 14 0 00 033432 		CAME	14,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3854						STOP^
  3855	032703	254 04 0 00 032704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3856	032704	324 00 0 00 032705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3857									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3858									;IN THE SUBTEST) TO LOOP ON ERROR^
  3859
  3860					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 76
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0114

  3861					;THIS TEST VERIFIES THAT SOJGE DECREMENTS C(AC) BY 0,,1 AND
  3862					;PLACES THE RESULT BACK INTO THE AC.  THE  RESULT IN THE AC IS
  3863					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3864					;SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0
  3865					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE, SOJGE
  3866					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1
  3867
  3868	032705	201 13 0 00 000000 	C54700:	MOVEI	13,0		;PRELOAD A C WITH 0
  3869	032706	365 13 0 00 032710 		SOJGE	13,.+2		;*SOJGE SHOULD SUBTRACT 0,,1 FROM C(AC)
  3870									;AND NOT JUMP
  3871	032707	334 00 0 00 000000 		SKIPA			;PASS IF SOJGE DID NOT JUMP
  3872						STOP^
  3873	032710	254 04 0 00 032711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3874	032711	324 00 0 00 032712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3875									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3876									;IN THE SUBTEST) TO LOOP ON ERROR^
  3877	032712	312 13 0 00 033412 		CAME	13,[-1]	;PASS IF C(AC) DECREMENTED CORRECTLY
  3878						STOP^
  3879	032713	254 04 0 00 032714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3880	032714	324 00 0 00 032715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3882									;IN THE SUBTEST) TO LOOP ON ERROR^
  3883
  3884					;**********
  3885
  3886					;THIS TEST VERIFIES THAT SOJGE DECREMENTS C(AC) BY 0,,1 AND
  3887					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3888					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3889					;SPECIFIED BY E IF C(AC) IS GREATER THAN OR EQUAL TO 0
  3890					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJGE
  3891					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0
  3892
  3893	032715	201 13 0 00 000001 	C54710:	MOVEI	13,1		;PRELOAD AC WITH 0,,1
  3894	032716	365 13 0 00 032720 		SOJGE	13,.+2		;*SOJ SHOULD SUBTRACT 0,,1 FROM C(AC)
  3895									;AND JUMP
  3896						STOP^
  3897	032717	254 04 0 00 032720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3898	032720	324 00 0 00 032721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3899									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3900									;IN THE SUBTEST) TO LOOP ON ERROR^
  3901	032721	312 13 0 00 033431 		CAME	13,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3902						STOP^
  3903	032722	254 04 0 00 032723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3904	032723	324 00 0 00 032724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3906									;IN THE SUBTEST) TO LOOP ON ERROR^
  3907
  3908					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 77
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0115

  3909					;THIS TEST VERIRIES THAT SOJGE DECREMENTS C(AC) BY 0,,1 AND PLACES THE
  3910					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS COMPARED
  3911					;TO 0 AND THE PROGRAM JUMPS TO THE LOCATION SPECIFIED BY E IF C(AC IS
  3912					;GREATER THAN OR EQUAL TO 0.  IN THIS CASE, C(AC = 0,,2 BEFORE
  3913					;DECREMENTING.  HENCE, SOJGE SHOULD JUMP AND THE RESULT IN THE AC SHOULD
  3914					;BE 0,,1.
  3915
  3916	032724	201 13 0 00 000002 	C54720:	MOVEI	13,2		;PRELOAD AC WITH 0,,2
  3917	032725	365 13 0 00 032727 		SOJGE	13,.+2		;*SOJGE SHOULD SUBTRACT0,,1 FROM C(AC)
  3918									;AND JUMP.
  3919						STOP^
  3920	032726	254 04 0 00 032727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3921	032727	324 00 0 00 032730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3922									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3923									;IN THE SUBTEST) TO LOOP ON ERROR^
  3924	032730	312 13 0 00 033432 		CAME	13,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3925						STOP^
  3926	032731	254 04 0 00 032732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3927	032732	324 00 0 00 032733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3928									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3929									;IN THE SUBTEST) TO LOOP ON ERROR^
  3930
  3931					;**********
  3932
  3933					;THIS TEST VERIFIES THAT SOJN DECREMENTS C(AC) BY 0,,1 AND
  3934					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3935					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION 
  3936					;SPECIFIED BY E IF C(AC) IS NON-ZERO.
  3937					;IN THIS CASE, C(AC)=0 BEFORE DECREMENTING.  HENCE,SOJN
  3938					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1.
  3939
  3940	032733	201 12 0 00 000000 	C55000:	MOVEI	12,0		;PRELOAD AC WITH 0
  3941	032734	366 12 0 00 032736 		SOJN	12,.+2		;*SOJN SHOULD SUBTRACT 0,,1 FROM C(AC)
  3942									;AND JUMP.
  3943						STOP^
  3944	032735	254 04 0 00 032736 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3945	032736	324 00 0 00 032737 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3946									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3947									;IN THE SUBTEST) TO LOOP ON ERROR^
  3948	032737	312 12 0 00 033412 		CAME	12,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3949						STOP^
  3950	032740	254 04 0 00 032741 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3951	032741	324 00 0 00 032742 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3952									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3953									;IN THE SUBTEST) TO LOOP ON ERROR^
  3954
  3955					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 78
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0116

  3956					;THIS TEST VERIRIES THAT SOJN DECREMENTS C(AC) BY 0,,1 AND
  3957					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3958					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION SPECIFIED
  3959					;BY E IF C(AC) IS NON-ZERO.
  3960					;IN THIS CASE, C(AC) = 0,,1 BEFORE DECREMENTING.  HENCE, SOJN
  3961					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE 0.
  3962
  3963	032742	201 12 0 00 000001 	C55010:	MOVEI	12,1		;PRELOAD AC WITH 0,,1
  3964	032743	366 12 0 00 032745 		SOJN	12,.+2		;*SOJN SHOULD SUBTRACT 0,,1 FROM C(AC)
  3965									;AND NOT JUMP.
  3966	032744	334 00 0 00 000000 		SKIPA			;PASS IF SOJN DID NOT JUMP
  3967						STOP^
  3968	032745	254 04 0 00 032746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3969	032746	324 00 0 00 032747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3970									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3971									;IN THE SUBTEST) TO LOOP ON ERROR^
  3972	032747	312 12 0 00 033431 		CAME	12,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3973						STOP^
  3974	032750	254 04 0 00 032751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3975	032751	324 00 0 00 032752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3976									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3977									;IN THE SUBTEST) TO LOOP ON ERROR^
  3978
  3979					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 79
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0117

  3980					;THIS TEST VERIFIES THAT SOJN DECREMENTS C(AC) BY 0,,1 AND
  3981					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  3982					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  3983					;SPECIFIED BY E IF C(AC) IS NON-ZERO.
  3984					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJN
  3985					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1.
  3986
  3987	032752	201 12 0 00 000002 	C55020:	MOVEI	12,2		;PRELOAD AC WITH 0,,2
  3988	032753	366 12 0 00 032755 		SOJN	12,.+2		;*SOJN SHOULD SUBTRACT 0,,1 FROM C(AC)
  3989									;AND JUMP.
  3990						STOP^
  3991	032754	254 04 0 00 032755 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3992	032755	324 00 0 00 032756 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3993									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3994									;IN THE SUBTEST) TO LOOP ON ERROR^
  3995	032756	312 12 0 00 033432 		CAME	12,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  3996						STOP^
  3997	032757	254 04 0 00 032760 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3998	032760	324 00 0 00 032761 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4000									;IN THE SUBTEST) TO LOOP ON ERROR^
  4001
  4002					;**********
  4003
  4004					;THIS TEST VERIFIES THAT SOJG DECREMENTS C(AC) BY 0,,1 AND
  4005					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  4006					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  4007					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0.
  4008					;IN THIS CASE, C(AC) = 0 BEFORE DECREMENTING.  HENCE, SOJG
  4009					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE -1,,-1.
  4010
  4011	032761	201 11 0 00 000000 	C55100:	MOVEI	11,0		;PRELOAD AC WITH 0
  4012	032762	367 11 0 00 032764 		SOJG	11,.+2		;*SOJG SHOULD SUBTRACT 0,,1 FROM C(AC)
  4013									;AND NOT JUMP.
  4014	032763	334 00 0 00 000000 		SKIPA			;PASS IF SOJG DID NOT JUMP
  4015						STOP^
  4016	032764	254 04 0 00 032765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4017	032765	324 00 0 00 032766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4018									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4019									;IN THE SUBTEST) TO LOOP ON ERROR^
  4020	032766	312 11 0 00 033412 		CAME	11,[-1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  4021						STOP^
  4022	032767	254 04 0 00 032770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4023	032770	324 00 0 00 032771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4024									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4025									;IN THE SUBTEST) TO LOOP ON ERROR^
  4026
  4027					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 80
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOJX INSTRUCTIONS                                                     SEQ 0118

  4028					;THIS TEST VERIRIES THAT SOJG DECREMENTS C(AC) BY 0,,1 AND
  4029					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  4030					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  4031					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0.
  4032					;IN THIS CASE, C(AC)=0,,1 BEFORE DECREMENTING.  HENCE, SOJG
  4033					;SHOULD NOT JUMP AND THE RESULT IN THE AC SHOULD BE 0.
  4034
  4035	032771	201 11 0 00 000001 	C55110:	MOVEI	11,1		;PRELOAD AC WITH 0,,1
  4036	032772	367 11 0 00 032774 		SOJG	11,.+2		;*SOJG SHOULD SUBTRACT 0,,1 FROM C(AC)
  4037									;AND NOT JUMP.
  4038	032773	334 00 0 00 000000 		SKIPA			;PASS IF SOJG DID NOT JUMP
  4039						STOP^
  4040	032774	254 04 0 00 032775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4041	032775	324 00 0 00 032776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4042									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4043									;IN THE SUBTEST) TO LOOP ON ERROR^
  4044	032776	312 11 0 00 033431 		CAME	11,[0]		;PASS IF C(AC) DECREMENTED CORRECTLY
  4045						STOP^
  4046	032777	254 04 0 00 033000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4047	033000	324 00 0 00 033001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4048									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4049									;IN THE SUBTEST) TO LOOP ON ERROR^
  4050
  4051					;**********
  4052
  4053					;THIS TEST VERIFIES THAT SOJG DECREMENTS C(AC) BY 0,,1 AND
  4054					;PLACES THE RESULT BACK INTO THE AC.  THE RESULT IN THE AC IS
  4055					;COMPARED TO 0 AND THE PROGRAM JUMPS TO THE LOCATION
  4056					;SPECIFIED BY E IF C(AC) IS GREATER THAN 0.
  4057					;IN THIS CASE, C(AC)=0,,2 BEFORE DECREMENTING.  HENCE, SOJG
  4058					;SHOULD JUMP AND THE RESULT IN THE AC SHOULD BE 0,,1.
  4059
  4060	033001	201 11 0 00 000002 	C55120:	MOVEI	11,2		;PRELOAD AC WITH 0,,2
  4061	033002	367 11 0 00 033004 		SOJG	11,.+2		;*SOJG SHOULD SUBTRACT O,,1 FROM C(AC)
  4062									;AND JUMP.
  4063						STOP^
  4064	033003	254 04 0 00 033004 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4065	033004	324 00 0 00 033005 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4066									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4067									;IN THE SUBTEST) TO LOOP ON ERROR^
  4068	033005	312 11 0 00 033432 		CAME	11,[1]		;PASS IF C(AC) DECREMENTED CORRECTLY
  4069						STOP^
  4070	033006	254 04 0 00 033007 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4071	033007	324 00 0 00 033010 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4072									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4073									;IN THE SUBTEST) TO LOOP ON ERROR^
  4074
  4075					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 81
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0119

  4076					SUBTTL	TEST OF MSCL SOSX INSTRUCTIONS
  4077
  4078					;**********
  4079
  4080					;THIS TEST VERIFIES THAT SOSL DECREMENTS C(E) BY 0,,1 AND PLACES
  4081					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4082					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0.
  4083					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4084					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=0
  4085					;BEFORE INCREMENTING.  HENCE, SOSL SHOULD SKIP; AND THE
  4086					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND -1,,-1
  4087					;RESPECTIVELY.
  4088
  4089	033010	200 00 0 00 033424 	C55200:	MOVE	0,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4090	033011	201 01 0 00 000000 		MOVEI	1,0		;PRELOAD E WITH 0
  4091	033012	371 00 0 00 000001 		SOSL	0,1		;*SOSL SHOULD SUBTRACT 0,,1 FROM C(E)
  4092									;AND SKIP
  4093						STOP^
  4094	033013	254 04 0 00 033014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4095	033014	324 00 0 00 033015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4096									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4097									;IN THE SUBTEST) TO LOOP ON ERROR^
  4098	033015	312 01 0 00 033412 		CAME	1,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4099						STOP^
  4100	033016	254 04 0 00 033017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4101	033017	324 00 0 00 033020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4102									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4103									;IN THE SUBTEST) TO LOOP ON ERROR^
  4104	033020	312 00 0 00 033424 		CAME	0,[707070,,707070]  ;PASS IF C(AC) WAS NOT MODIFIED
  4105						STOP^
  4106	033021	254 04 0 00 033022 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4107	033022	324 00 0 00 033023 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4108									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4109									;IN THE SUBTEST) TO LOOP ON ERROR^
  4110
  4111					;**********
  4112
  4113					;THIS TEST VERIFIES THAT SOSL DECREMENTS C(E) BY 0,,1 AND PLACES
  4114					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4115					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0.
  4116					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4117					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=0,,1
  4118					;BEFORE INCREMENTING.  HENCE, SOSL SHOULD NOT SKIP; AND THE
  4119					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0
  4120					;RESPECTIVELY.
  4121
  4122	033023	200 00 0 00 033424 	C55210:	MOVE	0,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4123	033024	201 01 0 00 000001 		MOVEI	1,1		;PRELOAD E WITH 0,,1
  4124	033025	371 00 0 00 000001 		SOSL	0,1		;*SOSL SHOULD SUBTRACT 0,,1 FROM C(E),
  4125									;AND NOT SKIP.
  4126	033026	334 00 0 00 000000 		SKIPA			;PASS IF SOSL DID NOT SKIP
  4127						STOP^
  4128	033027	254 04 0 00 033030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4129	033030	324 00 0 00 033031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4130									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 81-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0120

  4131									;IN THE SUBTEST) TO LOOP ON ERROR^
  4132	033031	312 01 0 00 033431 		CAME	1,[0]		;PASS IF E DECREMENTED CORRECTLY
  4133						STOP^
  4134	033032	254 04 0 00 033033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4135	033033	324 00 0 00 033034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4136									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4137									;IN THE SUBTEST) TO LOOP ON ERROR^
  4138	033034	312 00 0 00 033424 		CAME	0,[707070,,707070]  ;PASS IF C(AC) WAS NOT MODIFIED
  4139						STOP^
  4140	033035	254 04 0 00 033036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4141	033036	324 00 0 00 033037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4142									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4143									;IN THE SUBTEST) TO LOOP ON ERROR^
  4144
  4145					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 82
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0121

  4146					;THIS TEST VERIFIES THAT SOSL DECREMENTS C(E) BY 0,,1 AND PLACES
  4147					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4148					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0.
  4149					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4150					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E)=0,,1
  4151					;BEFORE INCREMENTING.  HENCE, SOSL SHOULD NOT SKIP; AND THE
  4152					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0
  4153					;RESPECTIVELY.
  4154
  4155	033037	200 00 0 00 033424 	C55211:	MOVE	0,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4156	033040	201 01 0 00 000001 		MOVEI	1,1		;PRELOAD E WITH 0,,1
  4157	033041	202 01 0 00 033056 		MOVEM	1,E55211
  4158	033042	371 00 0 00 033056 		SOSL	0,E55211	;*SOSL SHOULD SUBTRACT 0,,1 FROM C(E),
  4159									;AND NOT SKIP.
  4160	033043	334 00 0 00 000000 		SKIPA			;PASS IF SOSL DID NOT SKIP
  4161						STOP^
  4162	033044	254 04 0 00 033045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4163	033045	324 00 0 00 033046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4164									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4165									;IN THE SUBTEST) TO LOOP ON ERROR^
  4166	033046	200 01 0 00 033056 		MOVE	1,E55211
  4167	033047	312 01 0 00 033431 		CAME	1,[0]		;PASS IF E DECREMENTED CORRECTLY
  4168						STOP^
  4169	033050	254 04 0 00 033051 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4170	033051	324 00 0 00 033052 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4171									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4172									;IN THE SUBTEST) TO LOOP ON ERROR^
  4173	033052	312 00 0 00 033424 		CAME	0,[707070,,707070]  ;PASS IF C(AC) WAS NOT MODIFIED
  4174						STOP^
  4175	033053	254 04 0 00 033054 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4176	033054	324 00 0 00 033055 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4177									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4178									;IN THE SUBTEST) TO LOOP ON ERROR^
  4179
  4180	033055	334 00 0 00 000000 		SKIPA			;GO TO NEXT TEST
  4181	033056	000000	000000		E55211:	0			;TEST WORD MEMORY
  4182
  4183					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 83
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0122

  4184					;THIS TEST VERIFIES THAT SOS DECREMENTS C(E) BY 0,,1 AND PLACES
  4185					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4186					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN 0.
  4187					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4188					;IN THIS CASE, AC=0, C(AC)=707070,,707070 AND C(E) 0,,2
  4189					;BEFORE INCREMENTING.  HENCE, SOSL SHOULD NOT SKIP; AND THE
  4190					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0,,1
  4191					;RESPECTIVELY.
  4192
  4193	033057	200 00 0 00 033424 	C55220:	MOVE	0,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4194	033060	201 01 0 00 000002 		MOVEI	1,2		;PRELOAD E WITH 0,,2
  4195	033061	371 00 0 00 000001 		SOSL	0,1		;*SOSL SHOULD SUBTRACT 0,,1 FROM C(E),
  4196									;AND NOT SKIP
  4197
  4198	033062	334 00 0 00 000000 		SKIPA			;PASS IF SOSL DID NOT SKIP
  4199						STOP^
  4200	033063	254 04 0 00 033064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4201	033064	324 00 0 00 033065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4202									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4203									;IN THE SUBTEST) TO LOOP ON ERROR^
  4204	033065	312 01 0 00 033432 		CAME	1,[1]		;PASS IF E DECREMENTED CORRECTLY
  4205						STOP^
  4206	033066	254 04 0 00 033067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4207	033067	324 00 0 00 033070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4208									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4209									;IN THE SUBTEST) TO LOOP ON ERROR^
  4210	033070	312 00 0 00 033424 		CAME	0,[707070,,707070]  ;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4211						STOP^
  4212	033071	254 04 0 00 033072 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4213	033072	324 00 0 00 033073 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4215									;IN THE SUBTEST) TO LOOP ON ERROR^
  4216
  4217					;**********
  4218
  4219					;THIS TEST VERIFIES THAT SOSE DECREMENTS C(E) BY 0,,1 AND PLACES
  4220					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4221					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0
  4222					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4223					;IN THIS CASE, AC=10, C(AC)=707070,,707070 AND C(E)=0
  4224					;BEFORE INCREMENTING.  HENCE, SOSE SHOULD NOT SKIP ; AND THE
  4225					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4226					;RESPECTIVELY.
  4227
  4228	033073	200 10 0 00 033424 	C55300:	MOVE	10,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4229	033074	201 11 0 00 000000 		MOVEI	11,0		;PRELOAD E WITH 0
  4230	033075	372 10 0 00 000011 		SOSE	10,11		;*SOSE SHOULD SUBTRACT 0,,1 FROM C(E),
  4231									;UPDATE AC AND NOT SKIP
  4232
  4233	033076	334 00 0 00 000000 		SKIPA			;PASS IF SOSE DID NOT SKIP
  4234						STOP^
  4235	033077	254 04 0 00 033100 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4236	033100	324 00 0 00 033101 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4237									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4238									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 83-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0123

  4239	033101	312 11 0 00 033412 		CAME	11,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4240						STOP^
  4241	033102	254 04 0 00 033103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4242	033103	324 00 0 00 033104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4243									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4244									;IN THE SUBTEST) TO LOOP ON ERROR^
  4245	033104	312 10 0 00 033412 		CAME	10,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4246						STOP^
  4247	033105	254 04 0 00 033106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4248	033106	324 00 0 00 033107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4249									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4250									;IN THE SUBTEST) TO LOOP ON ERROR^
  4251
  4252					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 84
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0124

  4253					;THIS TEST VERIFIES THAT SOSE DECREMENTS C(E) BY 0,,1 AND PLACES
  4254					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4255					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0
  4256					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4257					;IN THIS CASE, AC=10, C(AC)=707070,,707070 AND C(E)=0,,1
  4258					;BEFORE INCREMENTING.  HENCE, SOSE SHOULD SKIP ; AND THE
  4259					;FINAL RESULTS IN AC AND E SHOULD BE 707070,,707070 AND 0
  4260					;RESPECTIVELY.
  4261
  4262	033107	200 10 0 00 033424 	C55310:	MOVE	10,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4263	033110	201 11 0 00 000001 		MOVEI	11,1		;PRELOAD E WITH 0,,1
  4264	033111	372 10 0 00 000011 		SOSE	10,11		;*SOS SHOULD SUBTRACT 0,,1 FROM C(E)
  4265									;UPDATE AC AND SKIP
  4266						STOP^
  4267	033112	254 04 0 00 033113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4268	033113	324 00 0 00 033114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4269									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4270									;IN THE SUBTEST) TO LOOP ON ERROR^
  4271	033114	312 11 0 00 033431 		CAME	11,[0]		;PASS IF E DECREMENTED CORRECTLY
  4272						STOP^
  4273	033115	254 04 0 00 033116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4274	033116	324 00 0 00 033117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4275									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4276									;IN THE SUBTEST) TO LOOP ON ERROR^
  4277	033117	312 10 0 00 033431 		CAME	10,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4278						STOP^
  4279	033120	254 04 0 00 033121 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4280	033121	324 00 0 00 033122 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4281									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4282									;IN THE SUBTEST) TO LOOP ON ERROR^
  4283
  4284					;**********
  4285
  4286					;THIS TEST VERIFIES THAT SOSE DECREMENTS C(E) BY 0,11 AND PLACES
  4287					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4288					;THE NEXT INSTRUCTION IF C(E) IS EQUAL TO 0.
  4289					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4290					;IN THIS CASE, AC=10, C(AC)=707070,,707070 AND C(E)=0,,2
  4291					;BEFORE INCREMENTING. HENCE, SOSE SHOULD NOT SKIP ; AND THE
  4292					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  4293					;RESPECTIVELY.
  4294
  4295	033122	200 10 0 00 033424 	C55320:	MOVE	10,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  4296	033123	201 11 0 00 000002 		MOVEI	11,2		;PRELOAD E WITH 0,,2
  4297	033124	372 10 0 00 000011 		SOSE	10,11		;*SOSE SHOULD SUBTRACT 0,,1 FROM C(E),
  4298									;UPDATE AC AND NOT SKIP
  4299
  4300	033125	334 00 0 00 000000 		SKIPA			;PASS IF SOSE DID NOT SKIP
  4301						STOP^
  4302	033126	254 04 0 00 033127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4303	033127	324 00 0 00 033130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4305									;IN THE SUBTEST) TO LOOP ON ERROR^
  4306	033130	312 11 0 00 033432 		CAME	11,[1]		;PASS IF E DECREMENTED CORRECTLY
  4307						STOP^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 84-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0125

  4308	033131	254 04 0 00 033132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4309	033132	324 00 0 00 033133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4310									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4311									;IN THE SUBTEST) TO LOOP ON ERROR^
  4312	033133	312 10 0 00 033432 		CAME	10,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4313						STOP^
  4314	033134	254 04 0 00 033135 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4315	033135	324 00 0 00 033136 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4316									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4317									;IN THE SUBTEST) TO LOOP ON ERROR^
  4318
  4319					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 85
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0126

  4320					;THIS TEST VERIFIES THAT SOSLE DECREMENTS C(E) BY 0,,1 AND PLACES
  4321					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4322					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO 0.
  4323					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4324					;IN THIS CASE, AC=7, C(AC)=707070,,707070 AND C(E)=0
  4325					;BEFORE INCREMENTING.  HENCE, SOSLE SHOULD SKIP ; AND THE
  4326					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4327					;RESPECTIVELY.
  4328
  4329	033136	200 07 0 00 033424 	C55400:	MOVE	7,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4330	033137	201 10 0 00 000000 		MOVEI	10,0		;PRELOAD E WITH 0
  4331	033140	373 07 0 00 000010 		SOSLE	7,10		;*SOSLE SHOULD SUBTRACT 0,,1 FROM C(E),
  4332									;UPDATE AC AND SKIP
  4333						STOP^
  4334	033141	254 04 0 00 033142 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4335	033142	324 00 0 00 033143 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4336									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4337									;IN THE SUBTEST) TO LOOP ON ERROR^
  4338	033143	312 10 0 00 033412 		CAME	10,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4339						STOP^
  4340	033144	254 04 0 00 033145 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4341	033145	324 00 0 00 033146 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4342									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4343									;IN THE SUBTEST) TO LOOP ON ERROR^
  4344	033146	312 07 0 00 033412 		CAME	7,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4345						STOP^
  4346	033147	254 04 0 00 033150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4347	033150	324 00 0 00 033151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4348									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4349									;IN THE SUBTEST) TO LOOP ON ERROR^
  4350
  4351					;**********
  4352
  4353					;THIS TEST VERIFIES THAT SOSLE DECREMENTS C(E) BY 0,,1 AND PLACES
  4354					;THE RESULT INTO E. THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4355					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO 0.
  4356					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4357					;IN THIS CASE, AC=7, C(AC)=070707,,070707 AND C(E)=0,,1
  4358					;BEFORE INCREMENTING.  HENCE, SOSLE SHOULD SKIP ; AND THE
  4359					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  4360					;RESPECTIVELY.
  4361
  4362	033151	200 07 0 00 033424 	C55410:	MOVE	7,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  4363	033152	201 10 0 00 000001 		MOVEI	10,1		;PRELOAD E WITH 0,,1
  4364	033153	373 07 0 00 000010 		SOSLE	7,10		;*SOSLE SHOULD SUBTRACT 0,,1 FROM C(E),
  4365									;UPDATE AC AND SKIP
  4366						STOP^
  4367	033154	254 04 0 00 033155 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4368	033155	324 00 0 00 033156 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4370									;IN THE SUBTEST) TO LOOP ON ERROR^
  4371	033156	312 10 0 00 033431 		CAME	10,[0]		;PASS IF E DECREMENTED CORRECTLY
  4372						STOP^
  4373	033157	254 04 0 00 033160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4374	033160	324 00 0 00 033161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 85-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0127

  4375									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4376									;IN THE SUBTEST) TO LOOP ON ERROR^
  4377	033161	312 07 0 00 033431 		CAME	7,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4378						STOP^
  4379	033162	254 04 0 00 033163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4380	033163	324 00 0 00 033164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4381									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4382									;IN THE SUBTEST) TO LOOP ON ERROR^
  4383
  4384					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 86
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0128

  4385					;THIS TEST VERIFIES THAT SOSLE DECREMENTS C(E) BY 0,,1 AND PLACES
  4386					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4387					;THE NEXT INSTRUCTION IF C(E) IS LESS THAN OR EQUAL TO 0.
  4388					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4389					;IN THIS CASE, AC=7, C(AC)=707070,,707070 AND C(E)=0,,2
  4390					;BEFORE INCREMENTING.  HENCE, SOSLE SHOULD NOT SKIP; AND THE
  4391					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  4392					;RESPECTIVELY.
  4393
  4394	033164	200 07 0 00 033424 	C55420:	MOVE	7,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4395	033165	201 10 0 00 000002 		MOVEI	10,2		;PRELOAD E WITH 0,,2
  4396	033166	373 07 0 00 000010 		SOSLE	7,10		;*SOSLE SHOULD SUBTRACT 0,,1 FROM C(E),
  4397									;UPDATE AC AND NOT SKIP
  4398	033167	334 00 0 00 000000 		SKIPA			;PASS IF SOSLE DID NOT SKIP
  4399						STOP^
  4400	033170	254 04 0 00 033171 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4401	033171	324 00 0 00 033172 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4402									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4403									;IN THE SUBTEST) TO LOOP ON ERROR^
  4404	033172	312 10 0 00 033432 		CAME	10,[1]		;PASS IF E DECREMENTED CORRECTLY
  4405						STOP^
  4406	033173	254 04 0 00 033174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4407	033174	324 00 0 00 033175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4408									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4409									;IN THE SUBTEST) TO LOOP ON ERROR^
  4410	033175	312 07 0 00 033432 		CAME	7,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4411						STOP^
  4412	033176	254 04 0 00 033177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4413	033177	324 00 0 00 033200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4414									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4415									;IN THE SUBTEST) TO LOOP ON ERROR^
  4416
  4417					;**********
  4418
  4419					;THIS TEST VERIFIES THAT SOSA DECREMENTS C(E) BY 0,,1 AND PLACES
  4420					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  4421					;THE NEXT INSTRUCTION.
  4422					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4423					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=0
  4424					;BEFORE INCREMENTING. HENCE, SOSA SHOULD SKIP ; AND THE
  4425					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4426					;RESPECTIVELY.
  4427
  4428	033200	200 06 0 00 033424 	C55500:	MOVE	6,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4429	033201	201 07 0 00 000000 		MOVEI	7,0		;PRELOAD E WITH 0
  4430	033202	374 06 0 00 000007 		SOSA	6,7		;*SOSA SHOULD SUBTRACT 0,,1 FROM C(E),
  4431									;UPDATE AC AND SKIP
  4432						STOP^
  4433	033203	254 04 0 00 033204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4434	033204	324 00 0 00 033205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4436									;IN THE SUBTEST) TO LOOP ON ERROR^
  4437	033205	312 07 0 00 033412 		CAME	7,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4438						STOP^
  4439	033206	254 04 0 00 033207 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 86-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0129

  4440	033207	324 00 0 00 033210 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4441									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4442									;IN THE SUBTEST) TO LOOP ON ERROR^
  4443	033210	312 06 0 00 033412 		CAME	6,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4444						STOP^
  4445	033211	254 04 0 00 033212 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4446	033212	324 00 0 00 033213 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4447									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4448									;IN THE SUBTEST) TO LOOP ON ERROR^
  4449
  4450					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 87
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0130

  4451					;THIS TEST VERIFIES THAT SOSA DECREMENTS C(E) BY 0,,1 AND PLACES
  4452					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  4453					;THE NEXT INSTRUCTION.
  4454					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THEAC.
  4455					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=0,,1
  4456					;BEFORE INCREMENTING.  HENCE, SOSA SHOULD BE 0 AND 0
  4457					;RESPECTIVELY.
  4458
  4459	033213	200 06 0 00 033424 	C55510:	MOVE	6,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4460	033214	201 07 0 00 000001 		MOVEI	7,1		;PRELOAD E WITH 0,,1
  4461	033215	374 06 0 00 000007 		SOSA	6,7		;*SOSA SHOULD SUBTRACT 0,,1 FROM C(E),
  4462									;UPDATE AC AND SKIP
  4463						STOP^
  4464	033216	254 04 0 00 033217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4465	033217	324 00 0 00 033220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4466									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4467									;IN THE SUBTEST) TO LOOP ON ERROR^
  4468	033220	312 07 0 00 033431 		CAME	7,[0]		;PASS IF E DECREMENTED CORRECTLY
  4469						STOP^
  4470	033221	254 04 0 00 033222 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4471	033222	324 00 0 00 033223 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4472									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4473									;IN THE SUBTEST) TO LOOP ON ERROR^
  4474	033223	312 06 0 00 033431 		CAME	6,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4475						STOP^
  4476	033224	254 04 0 00 033225 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4477	033225	324 00 0 00 033226 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4478									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4479									;IN THE SUBTEST) TO LOOP ON ERROR^
  4480
  4481					;**********
  4482
  4483					;THIS TEST VERIFIES THAT SOSA DECREMENTS C(E) BY 0,,1 AND PLACES
  4484					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND ALWAYS SKIPS
  4485					;THE NEXT INSTRUCTION.
  4486					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4487					;IN THIS CASE, AC=6, C(AC)=707070,,707070 AND C(E)=0,,2
  4488					;BEFORE INCREMENTING.  HENCE, SOSA SHOULD SKIP ; AND THE
  4489					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  4490					;RESPECTIVELY.
  4491
  4492	033226	200 06 0 00 033424 	C55520:	MOVE	6,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  4493	033227	201 07 0 00 000002 		MOVEI	7,2		;PRELOAD E WITH 0,,2
  4494	033230	374 06 0 00 000007 		SOSA	6,7		;*SOSA SHOULD SUBTRACT 0,,1 FROM C(E),
  4495									;UPDATE AC AND SKIP
  4496						STOP^
  4497	033231	254 04 0 00 033232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4498	033232	324 00 0 00 033233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4500									;IN THE SUBTEST) TO LOOP ON ERROR^
  4501	033233	312 07 0 00 033432 		CAME	7,[1]		;PASS IF E DECREMENTED CORRECTLY
  4502						STOP^
  4503	033234	254 04 0 00 033235 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4504	033235	324 00 0 00 033236 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4505									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 87-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0131

  4506									;IN THE SUBTEST) TO LOOP ON ERROR^
  4507	033236	312 06 0 00 033432 		CAME	6,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4508						STOP^
  4509	033237	254 04 0 00 033240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4510	033240	324 00 0 00 033241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4511									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4512									;IN THE SUBTEST) TO LOOP ON ERROR^
  4513
  4514					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 88
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0132

  4515					;THIS TEST VERIFIES THAT SOSGE DECREMENTS C(E) BY 0,,1 AND PLACES
  4516					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4517					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0.
  4518					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4519					;IN THIS CASE, AC=5, C(AC)=707070,,707070 AND C(E)=0
  4520					;BEFORE INCREMENTING.  HENCE, SOSGE SHOULD NOT SKIP ; AND THE
  4521					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4522					;RESPECTIVELY.
  4523
  4524	033241	200 05 0 00 033424 	C55600:	MOVE	5,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4525	033242	201 06 0 00 000000 		MOVEI	6,0		;PRELOAD E WITH 0
  4526	033243	375 05 0 00 000006 		SOSGE	5,6		;*SOSGE SHOULD SUBTRACT 0,,1 FROM C(E),
  4527									;UPDATE AC AND NOT SKIP
  4528	033244	334 00 0 00 000000 		SKIPA			;PASS IF SOSGE DID NOT SKIP
  4529						STOP^
  4530	033245	254 04 0 00 033246 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4531	033246	324 00 0 00 033247 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4532									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4533									;IN THE SUBTEST) TO LOOP ON ERROR^
  4534	033247	312 06 0 00 033412 		CAME	6,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4535						STOP^
  4536	033250	254 04 0 00 033251 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4537	033251	324 00 0 00 033252 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4538									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4539									;IN THE SUBTEST) TO LOOP ON ERROR^
  4540	033252	312 05 0 00 033412 		CAME	5,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4541						STOP^
  4542	033253	254 04 0 00 033254 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4543	033254	324 00 0 00 033255 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4544									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4545									;IN THE SUBTEST) TO LOOP ON ERROR^
  4546
  4547					;**********
  4548
  4549					;THIS TEST VERIFIES THAT SOSGE DECREMENTS C(E) BY 0,,1 AND PLACES
  4550					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4551					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0.
  4552					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4553					;IN THIS CASE, AC=5, C(AC)=707070,,707070 AND C(E)=0,,1
  4554					;BEFORE INCREMENTING.  HENCE, SOSGE SHOULD SKIP ; AND THE
  4555					;FINAL RESULTS IN ACAND E SHOULD BE 0 AND 0
  4556					;RESPECTIVELY.
  4557
  4558	033255	200 05 0 00 033424 	C55610:	MOVE	5,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4559	033256	201 06 0 00 000001 		MOVEI	6,1		;PRELOAD E WITH 0,,1
  4560	033257	375 05 0 00 000006 		SOSGE	5,6		;*SOSGE SHOULD SUBTRACT 0,,1 FROM C(E),
  4561									;UPDATE AC AND SKIP
  4562						STOP^
  4563	033260	254 04 0 00 033261 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4564	033261	324 00 0 00 033262 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4565									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4566									;IN THE SUBTEST) TO LOOP ON ERROR^
  4567	033262	312 06 0 00 033431 		CAME	6,[0]		;PASS IF E DECREMENTED CORRECTLY
  4568						STOP^
  4569	033263	254 04 0 00 033264 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 88-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0133

  4570	033264	324 00 0 00 033265 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4571									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4572									;IN THE SUBTEST) TO LOOP ON ERROR^
  4573	033265	312 05 0 00 033431 		CAME	5,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4574						STOP^
  4575	033266	254 04 0 00 033267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4576	033267	324 00 0 00 033270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4577									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4578									;IN THE SUBTEST) TO LOOP ON ERROR^
  4579
  4580					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 89
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0134

  4581					;THIS TEST VERIFIES THAT SOSGE DECREMENTS C(E) BY 0,,1 AND PLACES
  4582					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4583					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN OR EQUAL TO 0
  4584					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4585					;IN THIS CASE, AC=5, C(AC)=707070,,707070 AND C(E)=0,,2
  4586					;BEFORE INCREMENTING.  HENCE, SOSGE SHOULD SKIP ; AND THE
  4587					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  4588					;RESPECTIVELY.
  4589
  4590	033270	200 05 0 00 033424 	C55620:	MOVE	5,[707070,,707070] ;PRELOAD AC WITH 707070,,707070
  4591	033271	201 06 0 00 000002 		MOVEI	6,2		;PRELOAD E WITH 0,,2
  4592	033272	375 05 0 00 000006 		SOSGE	5,6		;*SOSGE SHOULD SUBTRACT 0,,1 FROM C(E),
  4593									;UPDATE AC AND SKIP
  4594						STOP^
  4595	033273	254 04 0 00 033274 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4596	033274	324 00 0 00 033275 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4597									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4598									;IN THE SUBTEST) TO LOOP ON ERROR^
  4599	033275	312 06 0 00 033432 		CAME	6,[1]		;PASS IF E DECREMENTED CORRECTLY
  4600						STOP^
  4601	033276	254 04 0 00 033277 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4602	033277	324 00 0 00 033300 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4603									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4604									;IN THE SUBTEST) TO LOOP ON ERROR^
  4605	033300	312 05 0 00 033432 		CAME	5,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4606						STOP^
  4607	033301	254 04 0 00 033302 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4608	033302	324 00 0 00 033303 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4609									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4610									;IN THE SUBTEST) TO LOOP ON ERROR^
  4611
  4612					;**********
  4613
  4614					;THIS TEST VERIFIES SOSN DECREMENTS C(E) BY 0,,1 AND PLACES
  4615					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4616					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO
  4617					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4618					;IN THIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=0
  4619					;BEFORE INCREMENTING.  HENCE, SOSN SHOULD SKIP ; AND THE
  4620					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4621					;RESPECTIVELY.
  4622
  4623	033303	200 04 0 00 033424 	C55700:	MOVE	4,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4624	033304	201 05 0 00 000000 		MOVEI	5,0		;PRELOAD E WITH 0
  4625	033305	376 04 0 00 000005 		SOSN	4,5		;*SOSN SHOULD SUBTRACT 0,,1 FROM C(E),
  4626									;UPDATE AC AND SKIP
  4627						STOP^
  4628	033306	254 04 0 00 033307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4629	033307	324 00 0 00 033310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4630									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4631									;IN THE SUBTEST) TO LOOP ON ERROR^
  4632	033310	312 05 0 00 033412 		CAME	5,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4633						STOP^
  4634	033311	254 04 0 00 033312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4635	033312	324 00 0 00 033313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 89-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0135

  4636									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4637									;IN THE SUBTEST) TO LOOP ON ERROR^
  4638	033313	312 04 0 00 033412 		CAME	4,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4639						STOP^
  4640	033314	254 04 0 00 033315 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4641	033315	324 00 0 00 033316 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4642									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4643									;IN THE SUBTEST) TO LOOP ON ERROR^
  4644
  4645					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 90
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0136

  4646					;THIS TEST VERIFIES THAT SOSN DECREMENTS C(E) BY 0,,1 AND PLACES
  4647					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4648					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO
  4649					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC
  4650					;IN THIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=0,,1
  4651					;BEFORE INCREMENTING.  HENCE, SOSN SHOULD NOT SKIP ; AND THE
  4652					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  4653					;RESPECTIVELY.
  4654
  4655	033316	200 04 0 00 033424 	C55710:	MOVE	4,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4656	033317	201 05 0 00 000001 		MOVEI	5,1		;PRELOAD E WITH 0,,1
  4657	033320	376 04 0 00 000005 		SOSN	4,5		;*SOSN SHOULD SUBTRACT 0,,1 FROM C(E),
  4658									;UPDATE AC AND NOT SKIP
  4659	033321	334 00 0 00 000000 		SKIPA			;PASS IF SOSN DID NOT SKIP
  4660						STOP^
  4661	033322	254 04 0 00 033323 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4662	033323	324 00 0 00 033324 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4663									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4664									;IN THE SUBTEST) TO LOOP ON ERROR^
  4665	033324	312 05 0 00 033431 		CAME	5,[0]		;PASS IF E DECREMENTED CORRECTLY
  4666						STOP^
  4667	033325	254 04 0 00 033326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4668	033326	324 00 0 00 033327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4669									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4670									;IN THE SUBTEST) TO LOOP ON ERROR^
  4671	033327	312 04 0 00 033431 		CAME	4,[0]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4672						STOP^
  4673	033330	254 04 0 00 033331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4674	033331	324 00 0 00 033332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4675									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4676									;IN THE SUBTEST) TO LOOP ON ERROR^
  4677
  4678					;**********
  4679
  4680					;THIS TEST VERIFIES THAT SOSN DECREMENTS C(E) BY 0,,1 AND PLACES
  4681					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4682					;THE NEXT INSTRUCTION IF C(E) IS NON-ZERO
  4683					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4684					;INtTHIS CASE, AC=4, C(AC)=707070,,707070 AND C(E)=0,,2
  4685					;BEFORE INCREMENTING.  HENCE, SOSN SHOULD SKIP ; AND THE
  4686					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 0,,1
  4687					;RESPECTIVELY
  4688
  4689	033332	200 04 0 00 033424 	C55720:	MOVE	4,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4690	033333	201 05 0 00 000002 		MOVEI	5,2		;PRELOAD E WITH 0,,2
  4691	033334	376 04 0 00 000005 		SOSN	4,5		;*SOSN SHOULD SUBTRACT 0,,1 FROM C(E),
  4692									;UPDATE AC AND SKIP
  4693						STOP^
  4694	033335	254 04 0 00 033336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4695	033336	324 00 0 00 033337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4696									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4697									;IN THE SUBTEST) TO LOOP ON ERROR^
  4698	033337	312 05 0 00 033432 		CAME	5,[1]		;PASS IF E DECREMENTED CORRECTLY
  4699						STOP^
  4700	033340	254 04 0 00 033341 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 90-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0137

  4701	033341	324 00 0 00 033342 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4702									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4703									;IN THE SUBTEST) TO LOOP ON ERROR^
  4704	033342	312 04 0 00 033432 		CAME	4,[1]		;PASS IF ACWAS UPDATED IF AC NON-ZERO
  4705						STOP^
  4706	033343	254 04 0 00 033344 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4707	033344	324 00 0 00 033345 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4708									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4709									;IN THE SUBTEST) TO LOOP ON ERROR^
  4710
  4711					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 91
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0138

  4712					;THIS TEST VERIFIESTHAT SOSG DECREMENTS C(E) BY 0,,1 AND PLACES
  4713					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4714					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN 0
  4715					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4716					;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=0
  4717					;BEFORE INCREMENTING.  HENCE, SOSG SHOULD NOT SKIP ; AND THE 
  4718					;FINAL RESULTS IN AC AND E SHOULD BE -1,,-1 AND -1,,-1
  4719					;RESPECTIVELY.
  4720
  4721	033345	200 03 0 00 033424 	C56000:	MOVE	3,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4722	033346	201 04 0 00 000000 		MOVEI	4,0		;PRELOAD E WITH 0
  4723	033347	377 03 0 00 000004 		SOSG	3,4		;*SOSG SHOULD SUBTRACT 0,,1 FROM C(E),
  4724									;UPDATE AC AND NOT SKIP
  4725	033350	334 00 0 00 000000 		SKIPA			;PASS IF SOSG DID NOT SKIP
  4726						STOP^
  4727	033351	254 04 0 00 033352 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4728	033352	324 00 0 00 033353 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4729									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4730									;IN THE SUBTEST) TO LOOP ON ERROR^
  4731	033353	312 04 0 00 033412 		CAME	4,[-1]		;PASS IF E DECREMENTED CORRECTLY
  4732						STOP^
  4733	033354	254 04 0 00 033355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4734	033355	324 00 0 00 033356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4735									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4736									;IN THE SUBTEST) TO LOOP ON ERROR^
  4737	033356	312 03 0 00 033412 		CAME	3,[-1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4738						STOP^
  4739	033357	254 04 0 00 033360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4740	033360	324 00 0 00 033361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4741									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4742									;IN THE SUBTEST) TO LOOP ON ERROR^
  4743
  4744					;**********
  4745
  4746					;THIS TEST VERIFIES THAT SOSG DECREMENTS C(E) BY 0,,1 AND PLACES
  4747					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4748					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN 0.
  4749					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4750					;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=0,,1
  4751					;BEFORE INCREMENTING.  HENCE, SOSG SHOULD NOT SKIP ; AND THE
  4752					;FINAL RESULTS IN AC AND E SHOULD BE 0 AND 0
  4753					;RESPECTIVELY.
  4754
  4755	033361	200 03 0 00 033424 	C56010:	MOVE	3,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4756	033362	201 04 0 00 000001 		MOVEI	4,1		;PRELOAD E WITH 0,,1
  4757	033363	377 03 0 00 000004 		SOSG	3,4		;*SOSG SHOULD SUBTRACT 0,,1 FROM C(E),
  4758									;UPDATE AC AND NOT SKIP
  4759	033364	334 00 0 00 000000 		SKIPA			;PASS IF SOSG DID NOT SKIP
  4760						STOP^
  4761	033365	254 04 0 00 033366 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4762	033366	324 00 0 00 033367 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4763									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4764									;IN THE SUBTEST) TO LOOP ON ERROR^
  4765	033367	312 04 0 00 033431 		CAME	4,[0]		;PASS IF E DECREMENTED CORRECTLY
  4766						STOP^
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 91-1
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0139

  4767	033370	254 04 0 00 033371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4768	033371	324 00 0 00 033372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4769									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4770									;IN THE SUBTEST) TO LOOP ON ERROR^
  4771	033372	312 03 0 00 033431 		CAME	3,[0]		;PASS IF AC WAS UPDATED IS AC NON-ZERO
  4772						STOP^
  4773	033373	254 04 0 00 033374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4774	033374	324 00 0 00 033375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4775									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4776									;IN THE SUBTEST) TO LOOP ON ERROR^
  4777
  4778					;**********
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 92
DSKAE1	MAC	28-Mar-78 13:59		TEST OF MSCL SOSX INSTRUCTIONS                                                     SEQ 0140

  4779					;THIS TEST VERIFIES THAT SOSG DECREMENTS C(E) BY 0,,1 AND PLACES
  4780					;THE RESULT INTO E.  THE RESULT IN E IS COMPARED TO 0 AND SKIPS
  4781					;THE NEXT INSTRUCTION IF C(E) IS GREATER THAN 0
  4782					;IF THE AC IS NON-ZERO, THE RESULT IS ALSO PLACED INTO THE AC.
  4783					;IN THIS CASE, AC=3, C(AC)=707070,,707070 AND C(E)=0,,2
  4784					;BEFORE INCREMENTING.  HENCE, SOSG SHOULD SKIP ; AND THE
  4785					;FINAL RESULTS IN AC AND E SHOULD BE 0,,1 AND 011,
  4786					;RESPECTIVELY.
  4787
  4788	033375	200 03 0 00 033424 	C56020:	MOVE	3,[707070,,707070]  ;PRELOAD AC WITH 707070,,707070
  4789	033376	201 04 0 00 000002 		MOVEI	4,2		;PRELOAD E WITH 0,,2
  4790	033377	377 03 0 00 000004 		SOSG	3,4		;*SOSG SHOULD SUBTRACT 0,,1 FROM C(E),
  4791									;UPDATE AC AND SKIP
  4792						STOP^
  4793	033400	254 04 0 00 033401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4794	033401	324 00 0 00 033402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4795									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4796									;IN THE SUBTEST) TO LOOP ON ERROR^
  4797	033402	312 04 0 00 033432 		CAME	4,[1]		;PASS IF E DECREMENTED CORRECTLY
  4798						STOP^
  4799	033403	254 04 0 00 033404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4800	033404	324 00 0 00 033405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4801									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4802									;IN THE SUBTEST) TO LOOP ON ERROR^
  4803	033405	312 03 0 00 033432 		CAME	3,[1]		;PASS IF AC WAS UPDATED IF AC NON-ZERO
  4804						STOP^
  4805	033406	254 04 0 00 033407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4806	033407	324 00 0 00 033410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4807									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4808									;IN THE SUBTEST) TO LOOP ON ERROR^
  4809
  4810					;**********
  4811	033410	402 00 0 00 033434 	ENDIT:	SETZM	TNUMB#
  4812	033411	254 00 0 00 030057 		JRST	BEGEND
DSKAE DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (5) 0,1	MACRO %53(1020) 14:13 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0141

  4813					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  4814
  4815					;PROGRAM LITERALS
  4816
  4817						XLIST
  4818					IFNDEF	$LPAPER,<LIST>
  4819	033412					LIT
  4820	033412	777777	777777
  4821	033413	310 00 0 00 000000 
  4822	033414	201 01 0 00 001234 
  4823	033415	031044	031043
  4824	033416	031053	031052
  4825	033417	254 00 0 00 031116 
  4826	033420	000001	000002
  4827	033421	135531	246642
  4828	033422	135246	246135
  4829	033423	252525	252525
  4830	033424	707070	707070
  4831	033425	123456	123456
  4832	033426	777777	000000
  4833	033427	777777	777775
  4834	033430	777777	777776
  4835	033431	000000	000000
  4836	033432	000000	000001
  4837						LIST
  4838	033433	000000	000000		ENDSLD:	0
  4839
  4840					IFDEF	DEBUG,<
  4841					PATCH:	BLOCK DEBUG		;PATCHING AREA
  4842					>
  4843
  4844					;PROGRAM VARIABLES
  4845	033434					VAR
  4846
  4847					IFDEF	PGMEND,<
  4848	033435	000000	000000		END:	0
  4849			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 033436
CPU TIME USED 00:15.180

20P CORE USED

ABORT	    92#
AC0	   687#                                                                                                            SEQ 0142
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
BEGEND	   438#	  4812
BEGIN	   307	   308	   369#	   708	   771	  4849
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#	  1319	  1328	  1343	  1347	  1361	  1367	  1382	  1387
C23000	   816#
C23100	   838#
C23200	   859#
C23300	   883#
C23400	   904#
C23500	   927#
C23600	   948#	   952
C23700	   970#
C24000	   990#
C24100	  1005#
C24200	  1022#
C24300	  1037#
C24400	  1052#
C24500	  1066#
C24600	  1083#
C24700	  1099#
C25000	  1117#
C25100	  1134#
C25200	  1152#
C25300	  1169#
C25400	  1187#
C25500	  1202#
C25600	  1215#
C25700	  1230#
C26200	  1247#
C26300	  1265#
C26400	  1281#
C26500	  1298#
C26600	  1317#
C26700	  1341#
C27000	  1359#
C27001	  1380#
C27100	  1400#
C50000	  1427#
C50100	  1452#
C50110	  1475#
C50200	  1498#
C50300	  1513#
C50301	  1537#
C50400	  1566#
C50401	  1590#
C50410	  1619#                                                                                                            SEQ 0143
C50500	  1642#
C50501	  1656#
C50600	  1671#
C50700	  1696#
C50710	  1720#
C51000	  1746#
C51100	  1762#
C51101	  1785#
C51200	  1813#
C51201	  1836#
C51300	  1868#
C51310	  1884#
C51320	  1900#
C51400	  1917#
C51410	  1932#
C51420	  1948#
C51500	  1964#
C51510	  1980#
C51520	  1995#
C51600	  2011#
C51610	  2027#
C51620	  2043#
C51700	  2058#
C51710	  2074#
C51720	  2090#
C52000	  2106#
C52010	  2122#
C52020	  2139#
C52100	  2158#
C52110	  2175#
C52120	  2190#
C52200	  2208#
C52210	  2223#
C52220	  2240#
C52300	  2257#
C52310	  2271#
C52320	  2284#
C52400	  2299#
C52410	  2313#
C52420	  2327#
C52500	  2346#
C52510	  2369#
C52520	  2392#
C52600	  2417#
C52610	  2441#
C52620	  2465#
C52700	  2489#
C52710	  2513#
C52720	  2536#
C53000	  2561#
C53010	  2584#
C53020	  2608#
C53100	  2631#                                                                                                            SEQ 0144
C53110	  2656#
C53120	  2679#
C53200	  2703#
C53210	  2726#
C53220	  2751#
C53300	  2774#
C53310	  2799#
C53320	  2823#
C53400	  2852#
C53401	  2885#
C53410	  2922#
C53420	  2955#
C53500	  2989#
C53510	  3022#
C53520	  3055#
C53600	  3088#
C53610	  3121#
C53620	  3153#
C53700	  3187#
C53710	  3219#
C53720	  3252#
C54000	  3284#
C54010	  3318#
C54020	  3350#
C54100	  3383#
C54110	  3415#
C54120	  3449#
C54200	  3481#
C54210	  3515#
C54220	  3548#
C54300	  3582#
C54310	  3606#
C54320	  3629#
C54400	  3654#
C54410	  3678#
C54420	  3702#
C54500	  3726#
C54510	  3750#
C54520	  3773#
C54600	  3798#
C54610	  3821#
C54620	  3845#
C54700	  3868#
C54710	  3893#
C54720	  3916#
C55000	  3940#
C55010	  3963#
C55020	  3987#
C55100	  4011#
C55110	  4035#
C55120	  4060#
C55200	  4089#
C55210	  4122#                                                                                                            SEQ 0145
C55211	  4155#
C55220	  4193#
C55300	  4228#
C55310	  4262#
C55320	  4295#
C55400	  4329#
C55410	  4362#
C55420	  4394#
C55500	  4428#
C55510	  4459#
C55520	  4492#
C55600	  4524#
C55610	  4558#
C55620	  4590#
C55700	  4623#
C55710	  4655#
C55720	  4689#
C56000	  4721#
C56010	  4755#
C56020	  4788#
CCA	   356#
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#	   818	   840	   861	   885	   906
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  4840
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409                                                                                                             SEQ 0146
E50301	  1539	  1540	  1548	  1557#
E50401	  1592	  1593	  1601	  1610#
E51101	  1787	  1788	  1796	  1805#
E51201	  1838	  1839	  1846	  1855#
E53401	  2887	  2888	  2895	  2910#
E55211	  4157	  4158	  4166	  4181#
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  4848#
ENDFIX	   684#
ENDIT	  4811#
ENDSLD	  4838#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#                                                                                                            SEQ 0147
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#                                                                                                            SEQ 0148
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490                                                                                                     SEQ 0149
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#                                                                                                            SEQ 0150
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  4847
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#                                                                                                            SEQ 0151
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  4811#	  4811
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#                                                                                                            SEQ 0152
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#                                                                                                            SEQ 0153
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	  4818
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#                                                                                                            SEQ 0154
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0155
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   826	   848	   870	   893	   915	   933
	   938	   949	   954	   977	   996	  1006	  1011	  1028	  1042	  1057	  1067	  1072	  1085	  1089
	  1101	  1105	  1123	  1140	  1158	  1174	  1192	  1206	  1220	  1235	  1253	  1269	  1285	  1302
	  1330	  1349	  1369	  1389	  1408	  1433	  1439	  1458	  1464	  1480	  1486	  1502	  1519	  1525
	  1544	  1551	  1572	  1578	  1597	  1604	  1625	  1631	  1646	  1661	  1677	  1683	  1702	  1708
	  1726	  1732	  1750	  1768	  1774	  1792	  1799	  1818	  1824	  1842	  1849	  1871	  1888	  1904
	  1920	  1935	  1952	  1967	  1983	  1998	  2015	  2030	  2046	  2061	  2078	  2093	  2110	  2126
	  2142	  2162	  2178	  2195	  2212	  2227	  2243	  2260	  2274	  2288	  2303	  2316	  2330	  2349
	  2355	  2374	  2380	  2397	  2403	  2422	  2428	  2445	  2451	  2470	  2476	  2493	  2499	  2517
	  2523	  2541	  2547	  2565	  2571	  2588	  2594	  2612	  2618	  2636	  2642	  2660	  2666	  2683
	  2689	  2707	  2713	  2731	  2737	  2755	  2761	  2779	  2785	  2804	  2810	  2827	  2833	  2857
	  2863	  2869	  2891	  2898	  2904	  2928	  2934	  2940	  2961	  2967	  2973	  2995	  3001	  3007
	  3027	  3033	  3039	  3061	  3067	  3073	  3093	  3099	  3105	  3126	  3132	  3138	  3159	  3165
	  3171	  3192	  3198	  3204	  3224	  3230	  3236	  3257	  3263	  3269	  3290	  3296	  3302	  3323
	  3329	  3335	  3355	  3361	  3367	  3388	  3394	  3400	  3421	  3427	  3433	  3454	  3460	  3466
	  3487	  3493	  3499	  3521	  3527	  3533	  3553	  3559	  3565	  3586	  3592	  3610	  3616	  3634
	  3640	  3659	  3665	  3682	  3688	  3707	  3713	  3730	  3736	  3754	  3760	  3778	  3784	  3802
	  3808	  3825	  3831	  3849	  3855	  3873	  3879	  3897	  3903	  3920	  3926	  3944	  3950	  3968
	  3974	  3991	  3997	  4016	  4022	  4040	  4046	  4064	  4070	  4094	  4100	  4106	  4128	  4134
	  4140	  4162	  4169	  4175	  4200	  4206	  4212	  4235	  4241	  4247	  4267	  4273	  4279	  4302
	  4308	  4314	  4334	  4340	  4346	  4367	  4373	  4379	  4400	  4406	  4412	  4433	  4439	  4445
	  4464	  4470	  4476	  4497	  4503	  4509	  4530	  4536	  4542	  4563	  4569	  4575	  4595	  4601
	  4607	  4628	  4634	  4640	  4661	  4667	  4673	  4694	  4700	  4706	  4727	  4733	  4739	  4761
	  4767	  4773	  4793	  4799	  4805
JEN	   160#
JRSTF	   159#
MAPADR	   295#                                                                                                            SEQ 0156
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#                                                                                                            SEQ 0157
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#	   816	   838	   859	   883	   904	   927	  1317	  1322	  1341	  1359	  1380	  1400
SIXBTZ	   261#
STOP	    48#	   825	   847	   869	   892	   914	   937	   953	   976	   995	  1010	  1027	  1041	  1056
	  1071	  1088	  1104	  1122	  1139	  1157	  1173	  1191	  1205	  1219	  1234	  1252	  1268	  1284
	  1301	  1329	  1348	  1368	  1388	  1407	  1432	  1438	  1457	  1463	  1479	  1485	  1501	  1518
	  1524	  1543	  1550	  1571	  1577	  1596	  1603	  1624	  1630	  1645	  1660	  1676	  1682	  1701
	  1707	  1725	  1731	  1749	  1767	  1773	  1791	  1798	  1817	  1823	  1841	  1848	  1870	  1887
	  1903	  1919	  1934	  1951	  1966	  1982	  1997	  2014	  2029	  2045	  2060	  2077	  2092	  2109
	  2125	  2141	  2161	  2177	  2194	  2211	  2226	  2242	  2259	  2273	  2287	  2302	  2315	  2329
	  2348	  2354	  2373	  2379	  2396	  2402	  2421	  2427	  2444	  2450	  2469	  2475	  2492	  2498
	  2516	  2522	  2540	  2546	  2564	  2570	  2587	  2593	  2611	  2617	  2635	  2641	  2659	  2665
	  2682	  2688	  2706	  2712	  2730	  2736	  2754	  2760	  2778	  2784	  2803	  2809	  2826	  2832
	  2856	  2862	  2868	  2890	  2897	  2903	  2927	  2933	  2939	  2960	  2966	  2972	  2994	  3000
	  3006	  3026	  3032	  3038	  3060	  3066	  3072	  3092	  3098	  3104	  3125	  3131	  3137	  3158
	  3164	  3170	  3191	  3197	  3203	  3223	  3229	  3235	  3256	  3262	  3268	  3289	  3295	  3301     SEQ 0158
	  3322	  3328	  3334	  3354	  3360	  3366	  3387	  3393	  3399	  3420	  3426	  3432	  3453	  3459
	  3465	  3486	  3492	  3498	  3520	  3526	  3532	  3552	  3558	  3564	  3585	  3591	  3609	  3615
	  3633	  3639	  3658	  3664	  3681	  3687	  3706	  3712	  3729	  3735	  3753	  3759	  3777	  3783
	  3801	  3807	  3824	  3830	  3848	  3854	  3872	  3878	  3896	  3902	  3919	  3925	  3943	  3949
	  3967	  3973	  3990	  3996	  4015	  4021	  4039	  4045	  4063	  4069	  4093	  4099	  4105	  4127
	  4133	  4139	  4161	  4168	  4174	  4199	  4205	  4211	  4234	  4240	  4246	  4266	  4272	  4278
	  4301	  4307	  4313	  4333	  4339	  4345	  4366	  4372	  4378	  4399	  4405	  4411	  4432	  4438
	  4444	  4463	  4469	  4475	  4496	  4502	  4508	  4529	  4535	  4541	  4562	  4568	  4574	  4594
	  4600	  4606	  4627	  4633	  4639	  4660	  4666	  4672	  4693	  4699	  4705	  4726	  4732	  4738
	  4760	  4766	  4772	  4792	  4798	  4804
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#
WRTIM	   356#
WRUBR	   356#

AOJA	  2562	  2585	  2609
AOJE	  2418	  2442	  2466                                                                                             SEQ 0159
AOJG	  2775	  2800	  2824
AOJGE	  2632	  2657	  2680
AOJL	  2347	  2370	  2393
AOJLE	  2490	  2514	  2537
AOJN	  2704	  2727	  2752
AOS	   444	   757
AOSA	  3189	  3221	  3254
AOSE	  2991	  3024	  3057
AOSG	  3483	  3517	  3550
AOSGE	  3286	  3320	  3352
AOSL	  2854	  2888	  2924	  2957
AOSLE	  3090	  3123	  3155
AOSN	  3385	  3417	  3451
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAIA	  1965	  1981	  1996
CAIE	   952	  1156	  1251	  1267	  1523	  1549	  1644	  1659	  1681	  1706	  1724	  1730	  1748	  1766
	  1772	  1790	  1797	  1816	  1822	  1840	  1847	  2378	  2401	  2449	  2474	  2521	  2545	  2592
	  2616	  2664	  2687	  2735	  2759	  2808	  2831
CAIG	  2107	  2123	  2140
CAIGE	  2012	  2028	  2044
CAIL	  1869	  1885	  1901
CAILE	  1918	  1933	  1949
CAIN	   936	   994	  1009	  1026	  1070	  2059	  2075	  2091
CAM	   971	  1171
CAME	   846	  1087	  1103	  1138	  1172	  1283	  1300	  1431	  1437	  1456	  1462	  1478	  1484	  1500
	  1517	  1542	  1576	  1602	  1623	  1629	  1675	  2353	  2426	  2497	  2569	  2640	  2711	  2783
	  2861	  2867	  2896	  2902	  2932	  2938	  2965	  2971	  2999	  3005	  3031	  3037	  3065	  3071
	  3097	  3103	  3130	  3136	  3163	  3169	  3196	  3202	  3228	  3234	  3261	  3267	  3294	  3300
	  3327	  3333	  3359	  3365	  3392	  3398	  3425	  3431	  3458	  3464	  3491	  3497	  3525	  3531
	  3557	  3563	  3590	  3614	  3638	  3663	  3686	  3711	  3734	  3758	  3782	  3806	  3829	  3853
	  3877	  3901	  3924	  3948	  3972	  3995	  4020	  4044	  4068	  4098	  4104	  4132	  4138	  4167
	  4173	  4204	  4210	  4239	  4245	  4271	  4277	  4306	  4312	  4338	  4344	  4371	  4377	  4404
	  4410	  4437	  4443	  4468	  4474	  4501	  4507	  4534	  4540	  4567	  4573	  4599	  4605	  4632
	  4638	  4665	  4671	  4698	  4704	  4731	  4737	  4765	  4771	  4797	  4803
CAMG	  2209	  2224	  2241
CAMLE	  2160	  2176	  2192
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  4849
HLLZ	   867
HLRZM	  1069
HRLOI	  1298
HRLZI	  1281
HRROI	  2208	  2346	  2417	  2489	  2561	  2631	  2703	  2774	  2853	  2886	  2990	  3089	  3188	  3285
	  3384	  3482
HRRZ	   935	   951
HRRZI	  1265
HRRZM	  1008
IFDEF	   356	   407	   408	   409	   410	  4840	  4847
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  4818                                             SEQ 0160
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717	   819
	   841	   862	   886	   907	   930	  1320	  1325	  1344	  1362	  1383	  1403
JRA	  1189	  1203	  1216	  1231	  1250	  1266	  1282	  1299
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	   820	   842	   863	   887	   908	   931
	  1187	  1321	  1326	  1345	  1363	  1384	  1404	  4812
JSA	   972	   992	  1005	  1023	  1038	  1053	  1066	  1084	  1100	  1119	  1136	  1153	  1170
JSP	   166	   743	   776	  1327	  1346	  1366	  1385	  1386	  1405
JSR	   822	   844	   865	   889	   910	   932	   948	  1364
JUMP	  2285
JUMPA	   827	   849	   871	   894	   916	   939	   955	   978	   997	  1012	  1029	  1043	  1058	  1073
	  1090	  1106	  1124	  1141	  1159	  1175	  1193	  1207	  1221	  1236	  1254	  1270	  1286	  1303
	  1331	  1350	  1370	  1390	  1409	  1434	  1440	  1459	  1465	  1481	  1487	  1503	  1520	  1526
	  1545	  1552	  1573	  1579	  1598	  1605	  1626	  1632	  1647	  1662	  1678	  1684	  1703	  1709
	  1727	  1733	  1751	  1769	  1775	  1793	  1800	  1819	  1825	  1843	  1850	  1872	  1889	  1905
	  1921	  1936	  1953	  1968	  1984	  1999	  2016	  2031	  2047	  2062	  2079	  2094	  2111	  2127
	  2143	  2163	  2179	  2196	  2213	  2228	  2244	  2261	  2275	  2289	  2304	  2317	  2331	  2350
	  2356	  2375	  2381	  2398	  2404	  2423	  2429	  2446	  2452	  2471	  2477	  2494	  2500	  2518
	  2524	  2542	  2548	  2566	  2572	  2589	  2595	  2613	  2619	  2637	  2643	  2661	  2667	  2684
	  2690	  2708	  2714	  2732	  2738	  2756	  2762	  2780	  2786	  2805	  2811	  2828	  2834	  2858
	  2864	  2870	  2892	  2899	  2905	  2929	  2935	  2941	  2962	  2968	  2974	  2996	  3002	  3008
	  3028	  3034	  3040	  3062	  3068	  3074	  3094	  3100	  3106	  3127	  3133	  3139	  3160	  3166
	  3172	  3193	  3199	  3205	  3225	  3231	  3237	  3258	  3264	  3270	  3291	  3297	  3303	  3324
	  3330	  3336	  3356	  3362	  3368	  3389	  3395	  3401	  3422	  3428	  3434	  3455	  3461	  3467
	  3488	  3494	  3500	  3522	  3528	  3534	  3554	  3560	  3566	  3587	  3593	  3611	  3617	  3635
	  3641	  3660	  3666	  3683	  3689	  3708	  3714	  3731	  3737	  3755	  3761	  3779	  3785	  3803
	  3809	  3826	  3832	  3850	  3856	  3874	  3880	  3898	  3904	  3921	  3927	  3945	  3951	  3969
	  3975	  3992	  3998	  4017	  4023	  4041	  4047	  4065	  4071	  4095	  4101	  4107	  4129	  4135
	  4141	  4163	  4170	  4176	  4201	  4207	  4213	  4236	  4242	  4248	  4268	  4274	  4280	  4303
	  4309	  4315	  4335	  4341	  4347	  4368	  4374	  4380	  4401	  4407	  4413	  4434	  4440	  4446
	  4465	  4471	  4477	  4498	  4504	  4510	  4531	  4537	  4543	  4564	  4570	  4576	  4596	  4602
	  4608	  4629	  4635	  4641	  4662	  4668	  4674	  4695	  4701	  4707	  4728	  4734	  4740	  4762
	  4768	  4774	  4794	  4800	  4806
JUMPGE	  2300	  2314	  2328
JUMPLE	  2258	  2272
LALL	    10
LIST	     9	   318	   356	   489	  4818	  4837
LIT	  4819
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
MOVE	   971	   991	  1025	  1155	  1187	  1247	  1427	  1428	  1452	  1453	  1475	  1498	  1514	  1538
	  1548	  1601	  1657	  1671	  1697	  1721	  1796	  1846	  2074	  2852	  2885	  2895	  2922	  2955
	  2989	  3022	  3055	  3088	  3121	  3153	  3187	  3219	  3252	  3284	  3318	  3350	  3383	  3415
	  3449	  3481	  3515	  3548	  4089	  4122	  4155	  4166	  4193	  4228	  4262	  4295	  4329	  4362
	  4394	  4428	  4459	  4492	  4524	  4558	  4590	  4623	  4655	  4689	  4721	  4755	  4788
MOVEI	   991	  1037	  1152	  1248	  1249	  1567	  1591	  1620	  1746	  1762	  1763	  1785	  1786	  1813
	  1814	  1836	  1837	  1868	  1884	  1900	  1948	  1995	  2011	  2027	  2043	  2090	  2106	  2122
	  2139	  2190	  2284	  2327	  3582	  3606	  3629	  3654	  3678	  3702	  3726	  3750	  3773	  3798
	  3821	  3845	  3868	  3893	  3916	  3940	  3963	  3987	  4011	  4035	  4060	  4090	  4123	  4156
	  4194	  4229	  4263	  4296	  4330	  4363	  4395	  4429	  4460	  4493	  4525	  4559	  4591	  4624
	  4656	  4690	  4722	  4756	  4789
MOVEM	  1429	  1539	  1592	  1787	  1838	  2887	  4157
MOVES	  1454	  1477                                                                                                     SEQ 0161
MOVM	  1658
MOVMI	  1643
MOVMM	  1673
MOVMS	  1698	  1722
MOVNM	  1515	  1540
MOVNS	  1568	  1593	  1621
MOVSI	   818	   840	   861	   885	   906	   929	  1188	  1202	  1319	  1324	  1343	  1361	  1382	  1402
	  1499
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
SETO	   843	   911	   973	  1083	  1217	  1476	  1513	  1537	  1720	  1917	  1964	  2158	  2223	  2257
	  2299	  2369	  2441	  2513	  2584	  2656	  2726	  2799	  2923	  3023	  3220	  3319	  3416	  3516
SETOB	  1134
SETOM	   745	   752	   778	  1118	  1169	  3122
SETZ	   909	   970	   990	  1052	  1099	  1117	  1230	  1566	  1590	  1619	  1642	  1656	  1672	  1696
	  1932	  1980	  2058	  2159	  2175	  2191	  2240	  2271	  2313	  2392	  2465	  2536	  2608	  2679
	  2751	  2823	  2956	  3056	  3154	  3253	  3351	  3450	  3549
SETZB	   888	  1022	  1215
SETZM	   742	   747	   775	   780	   821	   864	  1135	  4811
SIXBIT	    77	    78	   574	   575	   583	   584
SKIPA	  1190	  1204	  1556	  1609	  1804	  1854	  1886	  1902	  1950	  2013	  2076	  2108	  2124	  2193
	  2210	  2225	  2286	  2301	  2372	  2395	  2420	  2468	  2539	  2634	  2729	  2777	  2802	  2909
	  2926	  2959	  2993	  3059	  3157	  3288	  3419	  3485	  3519	  3608	  3632	  3657	  3705	  3776
	  3871	  3966	  4014	  4038	  4126	  4160	  4180	  4198	  4233	  4300	  4398	  4528	  4659	  4725
	  4759
SKIPE	   748	   762	   768	   891	   913	   975	  1121	  1218	  1232	  1570	  1595	  1700
SKIPL	   783
SKIPN	   746	   751	   759	   764	   770	   779	   781	   824	   868
SOJA	  3799	  3822	  3846
SOJE	  3655	  3679	  3703
SOJG	  4012	  4036	  4061
SOJGE	  3869	  3894	  3917
SOJL	  3583	  3607	  3630
SOJLE	  3727	  3751	  3774
SOJN	  3941	  3964	  3988
SOS	   758
SOSA	  4430	  4461	  4494
SOSE	  4230	  4264	  4297
SOSG	  4723	  4757	  4790
SOSGE	  4526	  4560	  4592
SOSL	  4091	  4124	  4158	  4195
SOSLE	  4331	  4364	  4396                                                                                             SEQ 0162
SOSN	  4625	  4657	  4691
SUBB	  1815	  1839
SUBI	  1747
SUBM	  1764	  1788
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	   960	  1180	  1308	  1414	  1738
	  1858	  2148	  2249	  2336	  2839	  3571	  4076	  4813
TITLE	    14
TLNE	   744	   777	  1328	  1367	  1387	  1406
TLNN	  1347
TRNN	  1040	  1055
TTCALL	   784
VAR	  4845
XLIST	     8	   317	   355	   488	  4817
XWD	  1087	  1103	  1247

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0163
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0164

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0165

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  MOVSI	1,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0166

*030662  JFCL	17,030663

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030663 
----------

*030663  JRST	2,030664(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030664 
----------

*030664  SETZM	0,030666

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030665  JSR	0,030666

FLAGS - INT/FINAL   200000 200000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 200000 030666 
----------

*030667  SKIPN	0,030666

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633  C(E)= 200000 030666 
FINAL
C(AC)= 000000 030633 
----------

*030671  JUMPA	0,030672

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633     E= 000000 030672 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0167

*030672  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030673  JFCL	17,030674

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030674 
----------

*030674  JRST	2,030675(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030675 
----------

*030675  SETO 	1,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*030676  JSR	1,030677

FLAGS - INT/FINAL   200000 200000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 200000 030677 
----------

*030700  CAME	1,033412

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0168

*030702  JUMPA	0,030703

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633     E= 000000 030703 
----------

*030703  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 777777 777777     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030704  JFCL	17,030705

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030705 
----------

*030705  JRST	2,030706(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030706 
----------

*030706  SETZM	0,030710

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030707  JSR	0,030710

FLAGS - INT/FINAL   200000 200000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 200000 030710 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0169

*030711  HLLZ 	0,030710

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 030633  C(E)= 200000 030710 
FINAL
C(AC)= 200000 000000 
----------

*030712  SKIPN	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*030714  JUMPA	0,030715

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 030715 
----------

*030715  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030716  JFCL	17,030717

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030717 
----------

*030717  JRST	2,030720(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030720 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0170

*030720  SETZB	0,030722

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030721  JSR	0,030722

FLAGS - INT/FINAL   200000 200000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 200000 030722 
----------

*030723  SKIPE	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030725  JUMPA	0,030726

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 030726 
----------

*030726  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0171

*030727  JFCL	17,030730

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030730 
----------

*030730  JRST	2,030731(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030731 
----------

*030731  SETZ 	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030732  JSR	0,030734

FLAGS - INT/FINAL   200000 200000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 200000 030733 
----------

*030735  SKIPE	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030737  JUMPA	0,030740

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 030740 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0172

*030740  MOVSI	1,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030741  JFCL	17,030742

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030742 
----------

*030742  JRST	2,030743(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030743 
----------

*030743  JSR	0,030745

FLAGS - INT/FINAL   000000 000000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 000000 030744 
----------

*030746  HRRZ 	0,030745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030744 
FINAL
C(AC)= 000000 030744 
----------

*030747  CAIN	0,030745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030744     E= 000000 030745 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0173

*030751  JUMPA	0,030752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030744     E= 000000 030752 
----------

*030752  JSR	0,030754

FLAGS - INT/FINAL   000000 000000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 000000 030753 
----------

*030755  HRRZ 	0,030754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030744  C(E)= 000000 030753 
FINAL
C(AC)= 000000 030753 
----------

*030756  CAIE	0,030753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030753     E= 000000 030753 
----------

*030760  JUMPA	0,030761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030753     E= 000000 030761 
----------

*030761  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030753 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0174

*030762  MOVE 	0,033413

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030753  C(E)= 310000 000000 
FINAL
C(AC)= 310000 000000 
----------

*030763  JSA	0,030765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 310000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 030765 030764  C(E)= 310000 000000 
----------

*030766  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 030765 030764  C(E)= 000000 000000 
FINAL
C(AC)= 030765 030764 
----------

*030770  JUMPA	0,030771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 030765 030764     E= 000000 030771 
----------

*030771  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 030765 030764 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0175

*030772  MOVE 	0,033414

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 030765 030764  C(E)= 201040 001234 
FINAL
C(AC)= 201040 001234 
----------

*030773  JSA	0,030774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 201040 001234  C(E)= 000000 000000 
FINAL
C(AC)= 030774 030774  C(E)= 201040 001234 
----------

*030775  CAIN	1,001234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 001234 
----------

*030777  JUMPA	0,031000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 030774 030774     E= 000000 031000 
----------

*031000  JSA	0,031002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 030774 030774  C(E)= 000000 000000 
FINAL
C(AC)= 031002 031001  C(E)= 030774 030774 
----------

*031003  HRRZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031002 031001  C(E)= 000000 000000 
FINAL
 C(E)= 000000 031001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0176

*031004  CAIN	1,031002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031001     E= 000000 031002 
----------

*031006  JUMPA	0,031007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031002 031001     E= 000000 031007 
----------

*031007  SETZB	0,031011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031002 031001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031010  JSA	0,031011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 031011 031011  C(E)= 000000 000000 
----------

*031012  MOVE 	1,031011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031013  CAIN	1,031011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031011 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0177

*031015  JUMPA	0,031016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031011 031011     E= 000000 031016 
----------

*031016  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031011 031011     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031017  JSA	0,031020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 031020 031020  C(E)= 000000 777777 
----------

*031021  TRNN	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031020 031020     E= 000000 777777 
FINAL
C(AC)= 031020 031020 
----------

*031023  JUMPA	0,031024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031020 031020     E= 000000 031024 
----------

*031024  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031020 031020  C(E)= 031020 031020 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0178

*031025  JSA	0,031026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 031026 031026  C(E)= 000000 000000 
----------

*031027  TRNN	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031026 031026     E= 000000 777777 
FINAL
C(AC)= 031026 031026 
----------

*031031  JUMPA	0,031032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031026 031026     E= 000000 031032 
----------

*031032  JSA	0,031034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031026 031026  C(E)= 000000 000000 
FINAL
C(AC)= 031034 031033  C(E)= 031026 031026 
----------

*031035  HLRZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031034 031033  C(E)= 000000 000000 
FINAL
 C(E)= 000000 031034 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0179

*031036  CAIN	1,031033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031034     E= 000000 031033 
----------

*031040  JUMPA	0,031041

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031034 031033     E= 000000 031041 
----------

*031041  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031034 031033  C(E)= 031034 031033 
FINAL
C(AC)= 777777 777777 
----------

*031042  JSA	0,031044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 031044 031043  C(E)= 777777 777777 
----------

*031045  CAME	0,033415

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031044 031043  C(E)= 031044 031043 
----------

*031047  JUMPA	0,031050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031044 031043     E= 000000 031050 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0180

*031050  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031044 031043  C(E)= 031044 031043 
FINAL
C(AC)= 000000 000000 
----------

*031051  JSA	0,031053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 031053 031052  C(E)= 000000 000000 
----------

*031054  CAME	0,033416

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031053 031052  C(E)= 031053 031052 
----------

*031056  JUMPA	0,031057

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031053 031052     E= 000000 031057 
----------

*031057  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031053 031052  C(E)= 031053 031052 
FINAL
C(AC)= 000000 000000 
----------

*031060  SETOM	0,031062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0181

*031061  JSA	0,031062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 031062 031062  C(E)= 000000 000000 
----------

*031063  SKIPE	0,031062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031062 031062  C(E)= 000000 000000 
FINAL
C(AC)= 031062 031062 
----------

*031065  JUMPA	0,031066

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031062 031062     E= 000000 031066 
----------

*031066  SETOB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031062 031062  C(E)= 000000 031034 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031067  SETZM	0,031071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0182

*031070  JSA	0,031071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 031071 031071  C(E)= 777777 777777 
----------

*031072  CAME	1,031071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031074  JUMPA	0,031075

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031071 031071     E= 000000 031075 
----------

*031075  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031071 031071     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031076  JSA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 031077 031077  C(E)= 000000 777777 
----------

*031100  MOVE 	1,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0183

*031101  CAIE	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031103  JUMPA	0,031104

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031077 031077     E= 000000 031104 
----------

*031104  SETOM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031077 031077  C(E)= 000000 777777 
FINAL
 C(E)= 777777 777777 
----------

*031105  JSA	0,031106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031077 031077  C(E)= 310000 000000 
FINAL
C(AC)= 031106 031106  C(E)= 031077 031077 
----------

*031107  CAME	1,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031111  JUMPA	0,031112

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031106 031106     E= 000000 031112 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0184

*031112  MOVE 	0,033417

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031106 031106  C(E)= 254000 031116 
FINAL
C(AC)= 254000 031116 
----------

*031113  MOVSI	1,031115

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031115 
FINAL
C(AC)= 031115 000000 
----------

*031114  JRA	1,031115

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031115 000000 C(C(ACL))= 334000 000000 
FINAL
C(AC)= 334000 000000 
----------

*031115  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254000 031116  C(E)= 254000 031116 
FINAL
C(AC)= 254000 031116 
----------

*031117  JUMPA	0,031120

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254000 031116     E= 000000 031120 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0185

*031120  MOVSI	0,031123

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254000 031116     E= 000000 031123 
FINAL
C(AC)= 031123 000000 
----------

*031121  JRA	0,031122

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031123 000000 C(C(ACL))= 254200 031124 
FINAL
C(AC)= 254200 031124 
----------

*031122  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 031124  C(E)= 254200 031124 
FINAL
C(AC)= 254200 031124 
----------

*031124  JUMPA	0,031125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 031124     E= 000000 031125 
----------

*031125  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 031124  C(E)= 334000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0186

*031126  JRA	0,031130

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACL))= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031130  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031132  JUMPA	0,031133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031133 
----------

*031133  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031134  JRA	0,031135

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACL))= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0187

*031135  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031137  JUMPA	0,031140

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031140 
----------

*031140  MOVE 	0,033420

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000002 
FINAL
C(AC)= 000001 000002 
----------

*031141  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031142  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0188

*031143  JRA	0,031144

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000002 C(C(ACL))= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031144  CAIE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031146  JUMPA	0,031147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 031147 
----------

*031147  HRRZI	0,033421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033421 
FINAL
C(AC)= 000000 033421 
----------

*031150  JRA	0,031151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033421 C(C(ACL))= 000000 033421 
FINAL
C(AC)= 000000 033421 
----------

*031151  CAIE	0,033421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033421     E= 000000 033421 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0189

*031153  JUMPA	0,031154

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033421     E= 000000 031154 
----------

*031154  HRLZI	0,033422

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033421     E= 000000 033422 
FINAL
C(AC)= 033422 000000 
----------

*031155  JRA	0,031156

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 033422 000000 C(C(ACL))= 135246 246135 
FINAL
C(AC)= 135246 246135 
----------

*031156  CAME	0,033422

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 135246 246135  C(E)= 135246 246135 
----------

*031160  JUMPA	0,031161

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 135246 246135     E= 000000 031161 
----------

*031161  HRLOI	0,031162

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 135246 246135     E= 000000 031162 
FINAL
C(AC)= 031162 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0190

*031162  JRA	0,031163

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 031162 777777 C(C(ACL))= 267000 031163 
FINAL
C(AC)= 267000 031163 
----------

*031163  CAME	0,031162

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 267000 031163  C(E)= 267000 031163 
----------

*031165  JUMPA	0,031166

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 267000 031163     E= 000000 031166 
----------

*031166  MOVSI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031167  JFCL	17,031170

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031170 
----------

*031170  JRST	2,031171(1)

FLAGS - INT/FINAL   000000 020000 
INITIAL
    E= 000000 031171 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0191

*031171  MOVSI	1,000000

FLAGS - INT/FINAL   020000 020000 
INITIAL
C(AC)= 020000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031172  JFCL	17,031173

FLAGS - INT/FINAL   020000 020000 
INITIAL
    E= 000000 031173 
----------

*031173  JRST	2,031174(1)

FLAGS - INT/FINAL   020000 000000 
INITIAL
    E= 000000 031174 
----------

*031174  JSP	0,031175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 267000 031163     E= 000000 031175 
FINAL
C(AC)= 000000 031175 
----------

*031175  TLNE	0,020037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031175     E= 000000 020037 
FINAL
C(AC)= 000000 031175 
----------

*031177  JUMPA	0,031200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031175     E= 000000 031200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0192

*031200  MOVSI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031201  JFCL	17,031202

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031202 
----------

*031202  JRST	2,031203(1)

FLAGS - INT/FINAL   000000 020000 
INITIAL
    E= 000000 031203 
----------

*031203  JSP	0,031204

FLAGS - INT/FINAL   020000 000000 
INITIAL
C(AC)= 000000 031175     E= 000000 031204 
FINAL
C(AC)= 020000 031204 
----------

*031204  TLNN	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 031204     E= 000000 020000 
FINAL
C(AC)= 020000 031204 
----------

*031206  JUMPA	0,031207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 031204     E= 000000 031207 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0193

*031207  MOVSI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031210  JFCL	17,031211

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031211 
----------

*031211  JRST	2,031212(1)

FLAGS - INT/FINAL   000000 020000 
INITIAL
    E= 000000 031212 
----------

*031212  JSR	0,031213

FLAGS - INT/FINAL   020000 000000 
INITIAL
 C(E)= 000000 000000 
FINAL
 C(E)= 020000 031213 
----------

*031214  JSP	0,031215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 031204     E= 000000 031215 
FINAL
C(AC)= 000000 031215 
----------

*031215  TLNE	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031215     E= 000000 020000 
FINAL
C(AC)= 000000 031215 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0194

*031217  JUMPA	0,031220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031215     E= 000000 031220 
----------

*031220  MOVSI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031221  JFCL	17,031222

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031222 
----------

*031222  JRST	2,031223(1)

FLAGS - INT/FINAL   000000 020000 
INITIAL
    E= 000000 031223 
----------

*031223  JSP	0,031224

FLAGS - INT/FINAL   020000 000000 
INITIAL
C(AC)= 000000 031215     E= 000000 031224 
FINAL
C(AC)= 020000 031224 
----------

*031224  JSP	0,031225

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 031224     E= 000000 031225 
FINAL
C(AC)= 000000 031225 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0195

*031225  TLNE	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031225     E= 000000 020000 
FINAL
C(AC)= 000000 031225 
----------

*031227  JUMPA	0,031230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031225     E= 000000 031230 
----------

*031230  MOVSI	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031231  JFCL	17,031232

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031232 
----------

*031232  JRST	2,031233(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031233 
----------

*031233  JSP	0,031234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031225     E= 000000 031234 
FINAL
C(AC)= 000000 031234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0196

*031234  TLNE	0,001600

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031234     E= 000000 001600 
FINAL
C(AC)= 000000 031234 
----------

*031236  JUMPA	0,031237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031234     E= 000000 031237 
----------

*031237  MOVE 	0,033423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031234  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031240  MOVE 	1,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*031241  MOVEM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 707070 707070 
FINAL
 C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0197

*031242  CAME	0,033423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*031244  JUMPA	0,031245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031245 
----------

*031245  CAME	1,033423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*031247  JUMPA	0,031250

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031250 
----------

*031250  MOVE 	2,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*031251  MOVE 	1,033425

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 123456 123456 
FINAL
C(AC)= 123456 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0198

*031252  MOVES	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 123456 123456 
FINAL
C(AC)= 123456 123456  C(E)= 123456 123456 
----------

*031253  CAME	2,033425

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 123456 
----------

*031255  JUMPA	0,031256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031256 
----------

*031256  CAME	1,033425

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 123456 
----------

*031260  JUMPA	0,031261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031261 
----------

*031261  MOVE 	1,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0199

*031262  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 777777 777777 
----------

*031263  MOVES	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 777777 777777  C(E)= 707070 707070 
----------

*031264  CAME	0,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031266  JUMPA	0,031267

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031267 
----------

*031267  CAME	1,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*031271  JUMPA	0,031272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031272 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0200

*031272  MOVE 	1,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*031273  MOVSI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031274  CAME	1,033426

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031276  JUMPA	0,031277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031277 
----------

*031277  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031300  MOVE 	2,033427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 777777 777775 
FINAL
C(AC)= 777777 777775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0201

*031301  MOVNM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777775 
FINAL
 C(E)= 000000 000001 
----------

*031302  CAME	1,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031304  JUMPA	0,031305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031305 
----------

*031305  CAIE	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031307  JUMPA	0,031310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031310 
----------

*031310  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0202

*031311  MOVE 	2,033427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 777777 777775 
FINAL
C(AC)= 777777 777775 
----------

*031312  MOVEM	2,031324

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777775 
----------

*031313  MOVNM	1,031324

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777775 
FINAL
 C(E)= 000000 000001 
----------

*031314  CAME	1,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031316  JUMPA	0,031317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031317 
----------

*031317  MOVE 	2,031324

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0203

*031320  CAIE	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031322  JUMPA	0,031323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031323 
----------

*031323  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031325  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031326  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031327  MOVNS	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0204

*031330  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031332  JUMPA	0,031333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031333 
----------

*031333  CAME	2,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031335  JUMPA	0,031336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031336 
----------

*031336  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031337  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0205

*031340  MOVEM	2,031352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000001 
----------

*031341  MOVNS	0,031352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*031342  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031344  JUMPA	0,031345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031345 
----------

*031345  MOVE 	2,031352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0206

*031346  CAME	2,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031350  JUMPA	0,031351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031351 
----------

*031351  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031353  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031354  MOVEI	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031355  MOVNS	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000003 
FINAL
C(AC)= 777777 777775  C(E)= 777777 777775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0207

*031356  CAME	1,033427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
----------

*031360  JUMPA	0,031361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031361 
----------

*031361  CAME	2,033427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
----------

*031363  JUMPA	0,031364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031364 
----------

*031364  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031365  MOVMI	1,777776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 000000 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0208

*031366  CAIE	1,777776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777776     E= 000000 777776 
----------

*031370  JUMPA	0,031371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031371 
----------

*031371  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777776  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031372  MOVE 	3,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*031373  MOVM 	1,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 000000 000002 
----------

*031374  CAIE	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0209

*031376  JUMPA	0,031377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031377 
----------

*031377  MOVE 	1,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*031400  SETZ 	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031401  MOVMM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000002 
----------

*031402  CAME	1,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*031404  JUMPA	0,031405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031405 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0210

*031405  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031407  JUMPA	0,031410

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031410 
----------

*031410  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031411  MOVE 	2,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*031412  MOVMS	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000002 
----------

*031413  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0211

*031415  JUMPA	0,031416

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031416 
----------

*031416  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031420  JUMPA	0,031421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031421 
----------

*031421  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031422  MOVE 	2,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*031423  MOVMS	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777776 
FINAL
C(AC)= 000000 000002  C(E)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0212

*031424  CAIE	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031426  JUMPA	0,031427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031427 
----------

*031427  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031431  JUMPA	0,031432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031432 
----------

*031432  MOVEI	1,000070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000070 
FINAL
C(AC)= 000000 000070 
----------

*031433  SUBI	1,000002

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000070     E= 000000 000002 
FINAL
C(AC)= 000000 000066 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0213

*031434  CAIE	1,000066

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000066     E= 000000 000066 
----------

*031436  JUMPA	0,031437

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031437 
----------

*031437  MOVEI	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000066     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031440  MOVEI	2,000037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000037 
FINAL
C(AC)= 000000 000037 
----------

*031441  SUBM	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000037 
FINAL
 C(E)= 000000 000041 
----------

*031442  CAIE	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0214

*031444  JUMPA	0,031445

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031445 
----------

*031445  CAIE	2,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

*031447  JUMPA	0,031450

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031450 
----------

*031450  MOVEI	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031451  MOVEI	2,000037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000037 
FINAL
C(AC)= 000000 000037 
----------

*031452  MOVEM	2,031464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000037  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000037 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0215

*031453  SUBM	1,031464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000037 
FINAL
 C(E)= 000000 000041 
----------

*031454  CAIE	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
----------

*031456  JUMPA	0,031457

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031457 
----------

*031457  MOVE 	2,031464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000037  C(E)= 000000 000041 
FINAL
C(AC)= 000000 000041 
----------

*031460  CAIE	2,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

*031462  JUMPA	0,031463

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031463 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0216

*031463  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031465  MOVEI	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031466  MOVEI	2,000037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000037 
FINAL
C(AC)= 000000 000037 
----------

*031467  SUBB	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000037 
FINAL
C(AC)= 000000 000041  C(E)= 000000 000041 
----------

*031470  CAIE	1,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0217

*031472  JUMPA	0,031473

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031473 
----------

*031473  CAIE	2,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

*031475  JUMPA	0,031476

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031476 
----------

*031476  MOVEI	1,000100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031477  MOVEI	2,000037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000037 
FINAL
C(AC)= 000000 000037 
----------

*031500  MOVEM	2,031512

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000037  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000037 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0218

*031501  SUBB	1,031512

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000037 
FINAL
C(AC)= 000000 000041  C(E)= 000000 000041 
----------

*031502  CAIE	1,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

*031504  JUMPA	0,031505

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031505 
----------

*031505  MOVE 	2,031512

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000037  C(E)= 000000 000041 
FINAL
C(AC)= 000000 000041 
----------

*031506  CAIE	2,000041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000041 
----------

*031510  JUMPA	0,031511

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031511 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0219

*031511  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031513  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031514  CAIL	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
----------

*031516  JUMPA	0,031517

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031517 
----------

*031517  MOVEI	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031520  CAIL	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0220

*031521  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031523  JUMPA	0,031524

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031524 
----------

*031524  MOVEI	1,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031525  CAIL	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000003     E= 000000 000002 
----------

*031526  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031530  JUMPA	0,031531

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031531 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0221

*031531  SETO 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000003  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031532  CAILE	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*031534  JUMPA	0,031535

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031535 
----------

*031535  SETZ 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031536  CAILE	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031540  JUMPA	0,031541

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031541 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0222

*031541  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031542  CAILE	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
----------

*031543  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031545  JUMPA	0,031546

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031546 
----------

*031546  SETO 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031547  CAIA	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0223

*031551  JUMPA	0,031552

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031552 
----------

*031552  SETZ 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031553  CAIA	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031555  JUMPA	0,031556

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031556 
----------

*031556  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031557  CAIA	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0224

*031561  JUMPA	0,031562

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031562 
----------

*031562  MOVEI	2,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000041     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*031563  CAIGE	2,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000005     E= 000000 000006 
----------

*031564  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031566  JUMPA	0,031567

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031567 
----------

*031567  MOVEI	2,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000005     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0225

*031570  CAIGE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031572  JUMPA	0,031573

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031573 
----------

*031573  MOVEI	2,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000006     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*031574  CAIGE	2,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000007     E= 000000 000006 
----------

*031576  JUMPA	0,031577

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031577 
----------

*031577  SETZ 	6,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0226

*031600  CAIN	6,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
----------

*031602  JUMPA	0,031603

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031603 
----------

*031603  MOVE 	6,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031604  CAIN	6,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031605  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031607  JUMPA	0,031610

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031610 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0227

*031610  MOVEI	6,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031611  CAIN	6,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000001 
----------

*031613  JUMPA	0,031614

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031614 
----------

*031614  MOVEI	11,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031615  CAIG	11,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000003 
----------

*031616  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0228

*031620  JUMPA	0,031621

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031621 
----------

*031621  MOVEI	11,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031622  CAIG	11,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*031623  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031625  JUMPA	0,031626

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031626 
----------

*031626  MOVEI	11,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000003     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0229

*031627  CAIG	11,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 000003 
----------

*031631  JUMPA	0,031632

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031632 
----------

*031632  SETO 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031633  SETZ 	2,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031634  CAMLE	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*031636  JUMPA	0,031637

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031637 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0230

*031637  SETZ 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031640  CAMLE	1,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031642  JUMPA	0,031643

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031643 
----------

*031643  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031644  SETZ 	2,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031645  CAMLE	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0231

*031646  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031650  JUMPA	0,031651

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031651 
----------

*031651  HRROI	10,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*031652  CAMG	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777777 
----------

*031653  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031655  JUMPA	0,031656

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031656 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0232

*031656  SETO 	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031657  CAMG	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031660  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031662  JUMPA	0,031663

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031663 
----------

*031663  SETZ 	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031664  CAMG	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0233

*031666  JUMPA	0,031667

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031667 
----------

*031667  SETO 	17,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031670  JUMPLE	17,031672

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 031672 
----------

*031672  JUMPA	0,031673

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031673 
----------

*031673  SETZ 	17,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031674  JUMPLE	17,031676

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031676 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0234

*031676  JUMPA	0,031677

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031677 
----------

*031677  MOVEI	17,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031700  JUMP 	17,031702

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 031702 
----------

*031701  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031703  JUMPA	0,031704

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031704 
----------

*031704  SETO 	16,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0235

*031705  JUMPGE	16,031707

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 031707 
----------

*031706  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031710  JUMPA	0,031711

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031711 
----------

*031711  SETZ 	16,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031712  JUMPGE	16,031714

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031714 
----------

*031714  JUMPA	0,031715

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031715 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0236

*031715  MOVEI	16,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031716  JUMPGE	16,031720

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 031720 
----------

*031720  JUMPA	0,031721

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031721 
----------

*031721  HRROI	15,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*031722  AOJL	15,031724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 031724 
FINAL
C(AC)= 777777 777777 
----------

*031724  JUMPA	0,031725

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031725 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0237

*031725  CAME	15,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031727  JUMPA	0,031730

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031730 
----------

*031730  SETO 	15,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031731  AOJL	15,031733

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 031733 
FINAL
C(AC)= 000000 000000 
----------

*031732  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031734  JUMPA	0,031735

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031735 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0238

*031735  CAIE	15,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031737  JUMPA	0,031740

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031740 
----------

*031740  SETZ 	15,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031741  AOJL	15,031743

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031743 
FINAL
C(AC)= 000000 000001 
----------

*031742  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031744  JUMPA	0,031745

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031745 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0239

*031745  CAIE	15,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031747  JUMPA	0,031750

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031750 
----------

*031750  HRROI	14,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*031751  AOJE	14,031753

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 031753 
FINAL
C(AC)= 777777 777777 
----------

*031752  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031754  JUMPA	0,031755

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031755 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0240

*031755  CAME	14,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031757  JUMPA	0,031760

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031760 
----------

*031760  SETO 	14,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031761  AOJE	14,031763

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 031763 
FINAL
C(AC)= 000000 000000 
----------

*031763  JUMPA	0,031764

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031764 
----------

*031764  CAIE	14,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0241

*031766  JUMPA	0,031767

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031767 
----------

*031767  SETZ 	14,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031770  AOJE	14,031772

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031772 
FINAL
C(AC)= 000000 000001 
----------

*031771  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031773  JUMPA	0,031774

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031774 
----------

*031774  CAIE	14,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0242

*031776  JUMPA	0,031777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031777 
----------

*031777  HRROI	13,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032000  AOJLE	13,032002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 032002 
FINAL
C(AC)= 777777 777777 
----------

*032002  JUMPA	0,032003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032003 
----------

*032003  CAME	13,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032005  JUMPA	0,032006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032006 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0243

*032006  SETO 	13,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032007  AOJLE	13,032011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032011 
FINAL
C(AC)= 000000 000000 
----------

*032011  JUMPA	0,032012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032012 
----------

*032012  CAIE	13,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032014  JUMPA	0,032015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032015 
----------

*032015  SETZ 	13,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0244

*032016  AOJLE	13,032020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032020 
FINAL
C(AC)= 000000 000001 
----------

*032017  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032021  JUMPA	0,032022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032022 
----------

*032022  CAIE	13,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*032024  JUMPA	0,032025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032025 
----------

*032025  HRROI	12,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0245

*032026  AOJA	12,032030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 032030 
FINAL
C(AC)= 777777 777777 
----------

*032030  JUMPA	0,032031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032031 
----------

*032031  CAME	12,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032033  JUMPA	0,032034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032034 
----------

*032034  SETO 	12,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032035  AOJA	12,032037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032037 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0246

*032037  JUMPA	0,032040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032040 
----------

*032040  CAIE	12,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032042  JUMPA	0,032043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032043 
----------

*032043  SETZ 	12,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032044  AOJA	12,032046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032046 
FINAL
C(AC)= 000000 000001 
----------

*032046  JUMPA	0,032047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032047 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0247

*032047  CAIE	12,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*032051  JUMPA	0,032052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032052 
----------

*032052  HRROI	11,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032053  AOJGE	11,032055

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 032055 
FINAL
C(AC)= 777777 777777 
----------

*032054  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032056  JUMPA	0,032057

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032057 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0248

*032057  CAME	11,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032061  JUMPA	0,032062

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032062 
----------

*032062  SETO 	11,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032063  AOJGE	11,032065

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032065 
FINAL
C(AC)= 000000 000000 
----------

*032065  JUMPA	0,032066

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032066 
----------

*032066  CAIE	11,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0249

*032070  JUMPA	0,032071

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032071 
----------

*032071  SETZ 	11,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032072  AOJGE	11,032074

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032074 
FINAL
C(AC)= 000000 000001 
----------

*032074  JUMPA	0,032075

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032075 
----------

*032075  CAIE	11,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*032077  JUMPA	0,032100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0250

*032100  HRROI	10,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032101  AOJN	10,032103

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 032103 
FINAL
C(AC)= 777777 777777 
----------

*032103  JUMPA	0,032104

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032104 
----------

*032104  CAME	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032106  JUMPA	0,032107

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032107 
----------

*032107  SETO 	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0251

*032110  AOJN	10,032112

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032112 
FINAL
C(AC)= 000000 000000 
----------

*032111  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032113  JUMPA	0,032114

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032114 
----------

*032114  CAIE	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032116  JUMPA	0,032117

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032117 
----------

*032117  SETZ 	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0252

*032120  AOJN	10,032122

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032122 
FINAL
C(AC)= 000000 000001 
----------

*032122  JUMPA	0,032123

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032123 
----------

*032123  CAIE	10,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*032125  JUMPA	0,032126

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032126 
----------

*032126  HRROI	7,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032127  AOJG	7,032131

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 032131 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0253

*032130  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032132  JUMPA	0,032133

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032133 
----------

*032133  CAME	7,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032135  JUMPA	0,032136

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032136 
----------

*032136  SETO 	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032137  AOJG	7,032141

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032141 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0254

*032140  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032142  JUMPA	0,032143

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032143 
----------

*032143  CAIE	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032145  JUMPA	0,032146

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032146 
----------

*032146  SETZ 	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032147  AOJG	7,032151

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032151 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0255

*032151  JUMPA	0,032152

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032152 
----------

*032152  CAIE	7,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*032154  JUMPA	0,032155

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032155 
----------

*032155  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032156  HRROI	7,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032157  AOSL	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0256

*032161  JUMPA	0,032162

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032162 
----------

*032162  CAME	7,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032164  JUMPA	0,032165

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032165 
----------

*032165  CAME	6,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032167  JUMPA	0,032170

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032170 
----------

*032170  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0257

*032171  HRROI	7,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032172  MOVEM	7,032206

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777776 
----------

*032173  AOSL	6,032206

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032175  JUMPA	0,032176

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032176 
----------

*032176  MOVE 	7,032206

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0258

*032177  CAME	7,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032201  JUMPA	0,032202

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032202 
----------

*032202  CAME	6,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032204  JUMPA	0,032205

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032205 
----------

*032205  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032207  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0259

*032210  SETO 	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032211  AOSL	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032212  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032214  JUMPA	0,032215

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032215 
----------

*032215  CAME	7,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032217  JUMPA	0,032220

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032220 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0260

*032220  CAME	6,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032222  JUMPA	0,032223

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032223 
----------

*032223  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032224  SETZ 	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032225  AOSL	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032226  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0261

*032230  JUMPA	0,032231

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032231 
----------

*032231  CAME	7,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032233  JUMPA	0,032234

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032234 
----------

*032234  CAME	6,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032236  JUMPA	0,032237

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032237 
----------

*032237  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0262

*032240  HRROI	6,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032241  AOSE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032242  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032244  JUMPA	0,032245

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032245 
----------

*032245  CAME	6,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032247  JUMPA	0,032250

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032250 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0263

*032250  CAME	5,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032252  JUMPA	0,032253

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032253 
----------

*032253  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032254  SETO 	6,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032255  AOSE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032257  JUMPA	0,032260

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032260 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0264

*032260  CAME	6,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032262  JUMPA	0,032263

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032263 
----------

*032263  CAME	5,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032265  JUMPA	0,032266

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032266 
----------

*032266  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032267  SETZ 	6,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0265

*032270  AOSE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032271  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032273  JUMPA	0,032274

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032274 
----------

*032274  CAME	6,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032276  JUMPA	0,032277

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032277 
----------

*032277  CAME	5,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0266

*032301  JUMPA	0,032302

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032302 
----------

*032302  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032303  HRROI	5,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032304  AOSLE	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032306  JUMPA	0,032307

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032307 
----------

*032307  CAME	5,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0267

*032311  JUMPA	0,032312

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032312 
----------

*032312  CAME	4,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032314  JUMPA	0,032315

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032315 
----------

*032315  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032316  SETOM	5,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*032317  AOSLE	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0268

*032321  JUMPA	0,032322

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032322 
----------

*032322  CAME	5,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032324  JUMPA	0,032325

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032325 
----------

*032325  CAME	4,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032327  JUMPA	0,032330

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 032330 
----------

*032330  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0269

*032331  SETZ 	0,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032332  AOSLE	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032333  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032335  JUMPA	0,032336

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032336 
----------

*032336  CAME	5,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032340  JUMPA	0,032341

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032341 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0270

*032341  CAME	4,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032343  JUMPA	0,032344

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032344 
----------

*032344  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032345  HRROI	4,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032346  AOSA	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032350  JUMPA	0,032351

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032351 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0271

*032351  CAME	4,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032353  JUMPA	0,032354

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032354 
----------

*032354  CAME	3,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032356  JUMPA	0,032357

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032357 
----------

*032357  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032360  SETO 	4,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0272

*032361  AOSA	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032363  JUMPA	0,032364

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032364 
----------

*032364  CAME	4,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032366  JUMPA	0,032367

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032367 
----------

*032367  CAME	3,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032371  JUMPA	0,032372

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032372 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0273

*032372  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032373  SETZ 	4,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032374  AOSA	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032376  JUMPA	0,032377

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032377 
----------

*032377  CAME	4,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032401  JUMPA	0,032402

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032402 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0274

*032402  CAME	3,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032404  JUMPA	0,032405

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032405 
----------

*032405  MOVE 	2,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032406  HRROI	3,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032407  AOSGE	2,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032410  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0275

*032412  JUMPA	0,032413

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032413 
----------

*032413  CAME	3,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032415  JUMPA	0,032416

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032416 
----------

*032416  CAME	2,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032420  JUMPA	0,032421

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032421 
----------

*032421  MOVE 	2,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0276

*032422  SETO 	3,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032423  AOSGE	2,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032425  JUMPA	0,032426

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032426 
----------

*032426  CAME	3,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032430  JUMPA	0,032431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032431 
----------

*032431  CAME	2,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0277

*032433  JUMPA	0,032434

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032434 
----------

*032434  MOVE 	2,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032435  SETZ 	3,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032436  AOSGE	2,000003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032440  JUMPA	0,032441

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032441 
----------

*032441  CAME	3,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0278

*032443  JUMPA	0,032444

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032444 
----------

*032444  CAME	2,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032446  JUMPA	0,032447

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032447 
----------

*032447  MOVE 	1,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032450  HRROI	2,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*032451  AOSN	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0279

*032453  JUMPA	0,032454

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032454 
----------

*032454  CAME	2,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032456  JUMPA	0,032457

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032457 
----------

*032457  CAME	1,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032461  JUMPA	0,032462

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032462 
----------

*032462  MOVE 	1,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0280

*032463  SETO 	2,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032464  AOSN	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032465  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032467  JUMPA	0,032470

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032470 
----------

*032470  CAME	2,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032472  JUMPA	0,032473

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032473 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0281

*032473  CAME	1,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032475  JUMPA	0,032476

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032476 
----------

*032476  MOVE 	1,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032477  SETZ 	2,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032500  AOSN	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032502  JUMPA	0,032503

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032503 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0282

*032503  CAME	2,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032505  JUMPA	0,032506

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032506 
----------

*032506  CAME	1,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032510  JUMPA	0,032511

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032511 
----------

*032511  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032512  HRROI	1,777776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0283

*032513  AOSG	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777776 
FINAL
C(AC)= 707070 707070  C(E)= 777777 777777 
----------

*032514  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032516  JUMPA	0,032517

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032517 
----------

*032517  CAME	1,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032521  JUMPA	0,032522

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032522 
----------

*032522  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0284

*032524  JUMPA	0,032525

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032525 
----------

*032525  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032526  SETO 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 777777 777777 
----------

*032527  AOSG	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000000 
----------

*032530  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0285

*032532  JUMPA	0,032533

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032533 
----------

*032533  CAME	1,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032535  JUMPA	0,032536

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032536 
----------

*032536  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*032540  JUMPA	0,032541

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032541 
----------

*032541  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0286

*032542  SETZ 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 000000 000000 
----------

*032543  AOSG	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000001 
----------

*032545  JUMPA	0,032546

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032546 
----------

*032546  CAME	1,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032550  JUMPA	0,032551

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032551 
----------

*032551  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0287

*032553  JUMPA	0,032554

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032554 
----------

*032554  MOVEI	17,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032555  SOJL	17,032557

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032557 
FINAL
C(AC)= 777777 777777 
----------

*032557  JUMPA	0,032560

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032560 
----------

*032560  CAME	17,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032562  JUMPA	0,032563

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032563 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0288

*032563  MOVEI	17,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032564  SOJL	17,032566

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032566 
FINAL
C(AC)= 000000 000000 
----------

*032565  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032567  JUMPA	0,032570

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032570 
----------

*032570  CAME	17,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032572  JUMPA	0,032573

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032573 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*032573  MOVEI	17,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032574  SOJL	17,032576

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032576 
FINAL
C(AC)= 000000 000001 
----------

*032575  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032577  JUMPA	0,032600

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032600 
----------

*032600  CAME	17,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032602  JUMPA	0,032603

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032603 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*032603  MOVEI	16,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032604  SOJE	16,032606

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032606 
FINAL
C(AC)= 777777 777777 
----------

*032605  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032607  JUMPA	0,032610

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032610 
----------

*032610  CAME	16,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032612  JUMPA	0,032613

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032613 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*032613  MOVEI	16,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032614  SOJE	16,032616

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032616 
FINAL
C(AC)= 000000 000000 
----------

*032616  JUMPA	0,032617

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032617 
----------

*032617  CAME	16,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032621  JUMPA	0,032622

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032622 
----------

*032622  MOVEI	16,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*032623  SOJE	16,032625

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032625 
FINAL
C(AC)= 000000 000001 
----------

*032624  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032626  JUMPA	0,032627

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032627 
----------

*032627  CAME	16,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032631  JUMPA	0,032632

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032632 
----------

*032632  MOVEI	15,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*032633  SOJLE	15,032635

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032635 
FINAL
C(AC)= 777777 777777 
----------

*032635  JUMPA	0,032636

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032636 
----------

*032636  CAME	15,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032640  JUMPA	0,032641

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032641 
----------

*032641  MOVEI	15,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032642  SOJLE	15,032644

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032644 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*032644  JUMPA	0,032645

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032645 
----------

*032645  CAME	15,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032647  JUMPA	0,032650

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032650 
----------

*032650  MOVEI	15,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032651  SOJLE	15,032653

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032653 
FINAL
C(AC)= 000000 000001 
----------

*032652  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*032654  JUMPA	0,032655

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032655 
----------

*032655  CAME	15,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032657  JUMPA	0,032660

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032660 
----------

*032660  MOVEI	14,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032661  SOJA	14,032663

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032663 
FINAL
C(AC)= 777777 777777 
----------

*032663  JUMPA	0,032664

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032664 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*032664  CAME	14,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032666  JUMPA	0,032667

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032667 
----------

*032667  MOVEI	14,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032670  SOJA	14,032672

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032672 
FINAL
C(AC)= 000000 000000 
----------

*032672  JUMPA	0,032673

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032673 
----------

*032673  CAME	14,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*032675  JUMPA	0,032676

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032676 
----------

*032676  MOVEI	14,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032677  SOJA	14,032701

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032701 
FINAL
C(AC)= 000000 000001 
----------

*032701  JUMPA	0,032702

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032702 
----------

*032702  CAME	14,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032704  JUMPA	0,032705

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032705 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*032705  MOVEI	13,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032706  SOJGE	13,032710

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032710 
FINAL
C(AC)= 777777 777777 
----------

*032707  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032711  JUMPA	0,032712

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032712 
----------

*032712  CAME	13,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032714  JUMPA	0,032715

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032715 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*032715  MOVEI	13,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032716  SOJGE	13,032720

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032720 
FINAL
C(AC)= 000000 000000 
----------

*032720  JUMPA	0,032721

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032721 
----------

*032721  CAME	13,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032723  JUMPA	0,032724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032724 
----------

*032724  MOVEI	13,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*032725  SOJGE	13,032727

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032727 
FINAL
C(AC)= 000000 000001 
----------

*032727  JUMPA	0,032730

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032730 
----------

*032730  CAME	13,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032732  JUMPA	0,032733

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032733 
----------

*032733  MOVEI	12,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032734  SOJN	12,032736

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032736 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*032736  JUMPA	0,032737

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032737 
----------

*032737  CAME	12,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032741  JUMPA	0,032742

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032742 
----------

*032742  MOVEI	12,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032743  SOJN	12,032745

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032745 
FINAL
C(AC)= 000000 000000 
----------

*032744  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*032746  JUMPA	0,032747

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032747 
----------

*032747  CAME	12,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032751  JUMPA	0,032752

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032752 
----------

*032752  MOVEI	12,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032753  SOJN	12,032755

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032755 
FINAL
C(AC)= 000000 000001 
----------

*032755  JUMPA	0,032756

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032756 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*032756  CAME	12,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032760  JUMPA	0,032761

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032761 
----------

*032761  MOVEI	11,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032762  SOJG	11,032764

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032764 
FINAL
C(AC)= 777777 777777 
----------

*032763  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032765  JUMPA	0,032766

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032766 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*032766  CAME	11,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032770  JUMPA	0,032771

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032771 
----------

*032771  MOVEI	11,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032772  SOJG	11,032774

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032774 
FINAL
C(AC)= 000000 000000 
----------

*032773  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*032775  JUMPA	0,032776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 032776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*032776  CAME	11,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033000  JUMPA	0,033001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033001 
----------

*033001  MOVEI	11,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033002  SOJG	11,033004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 033004 
FINAL
C(AC)= 000000 000001 
----------

*033004  JUMPA	0,033005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033005 
----------

*033005  CAME	11,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*033007  JUMPA	0,033010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033010 
----------

*033010  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033011  MOVEI	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033012  SOSL	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 707070 707070  C(E)= 777777 777777 
----------

*033014  JUMPA	0,033015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033015 
----------

*033015  CAME	1,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*033017  JUMPA	0,033020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033020 
----------

*033020  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*033022  JUMPA	0,033023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033023 
----------

*033023  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033024  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033025  SOSL	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*033026  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033030  JUMPA	0,033031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033031 
----------

*033031  CAME	1,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033033  JUMPA	0,033034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033034 
----------

*033034  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*033036  JUMPA	0,033037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033037 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*033037  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033040  MOVEI	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033041  MOVEM	1,033056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000001 
----------

*033042  SOSL	0,033056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000000 
----------

*033043  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*033045  JUMPA	0,033046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033046 
----------

*033046  MOVE 	1,033056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033047  CAME	1,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033051  JUMPA	0,033052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033052 
----------

*033052  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*033054  JUMPA	0,033055

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033055 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*033055  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033057  MOVE 	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033060  MOVEI	1,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033061  SOSL	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000001 
----------

*033062  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*033064  JUMPA	0,033065

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033065 
----------

*033065  CAME	1,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033067  JUMPA	0,033070

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033070 
----------

*033070  CAME	0,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*033072  JUMPA	0,033073

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033073 
----------

*033073  MOVE 	10,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*033074  MOVEI	11,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033075  SOSE	10,000011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033076  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033100  JUMPA	0,033101

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033101 
----------

*033101  CAME	11,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033103  JUMPA	0,033104

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033104 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*033104  CAME	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033106  JUMPA	0,033107

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033107 
----------

*033107  MOVE 	10,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033110  MOVEI	11,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033111  SOSE	10,000011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033113  JUMPA	0,033114

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033114 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*033114  CAME	11,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033116  JUMPA	0,033117

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033117 
----------

*033117  CAME	10,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033121  JUMPA	0,033122

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033122 
----------

*033122  MOVE 	10,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033123  MOVEI	11,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*033124  SOSE	10,000011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033125  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033127  JUMPA	0,033130

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033130 
----------

*033130  CAME	11,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033132  JUMPA	0,033133

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033133 
----------

*033133  CAME	10,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*033135  JUMPA	0,033136

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033136 
----------

*033136  MOVE 	7,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033137  MOVEI	10,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033140  SOSLE	7,000010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033142  JUMPA	0,033143

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033143 
----------

*033143  CAME	10,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*033145  JUMPA	0,033146

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033146 
----------

*033146  CAME	7,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033150  JUMPA	0,033151

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033151 
----------

*033151  MOVE 	7,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033152  MOVEI	10,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033153  SOSLE	7,000010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*033155  JUMPA	0,033156

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033156 
----------

*033156  CAME	10,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033160  JUMPA	0,033161

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033161 
----------

*033161  CAME	7,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033163  JUMPA	0,033164

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033164 
----------

*033164  MOVE 	7,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*033165  MOVEI	10,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033166  SOSLE	7,000010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033167  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033171  JUMPA	0,033172

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033172 
----------

*033172  CAME	10,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033174  JUMPA	0,033175

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033175 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*033175  CAME	7,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033177  JUMPA	0,033200

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033200 
----------

*033200  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033201  MOVEI	7,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033202  SOSA	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033204  JUMPA	0,033205

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033205 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*033205  CAME	7,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033207  JUMPA	0,033210

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033210 
----------

*033210  CAME	6,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033212  JUMPA	0,033213

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033213 
----------

*033213  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033214  MOVEI	7,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*033215  SOSA	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033217  JUMPA	0,033220

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033220 
----------

*033220  CAME	7,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033222  JUMPA	0,033223

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033223 
----------

*033223  CAME	6,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033225  JUMPA	0,033226

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033226 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*033226  MOVE 	6,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033227  MOVEI	7,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033230  SOSA	6,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033232  JUMPA	0,033233

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033233 
----------

*033233  CAME	7,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033235  JUMPA	0,033236

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033236 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*033236  CAME	6,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033240  JUMPA	0,033241

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033241 
----------

*033241  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033242  MOVEI	6,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033243  SOSGE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033244  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*033246  JUMPA	0,033247

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033247 
----------

*033247  CAME	6,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033251  JUMPA	0,033252

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033252 
----------

*033252  CAME	5,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033254  JUMPA	0,033255

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033255 
----------

*033255  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*033256  MOVEI	6,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033257  SOSGE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033261  JUMPA	0,033262

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033262 
----------

*033262  CAME	6,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033264  JUMPA	0,033265

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033265 
----------

*033265  CAME	5,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*033267  JUMPA	0,033270

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033270 
----------

*033270  MOVE 	5,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033271  MOVEI	6,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033272  SOSGE	5,000006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033274  JUMPA	0,033275

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033275 
----------

*033275  CAME	6,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*033277  JUMPA	0,033300

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033300 
----------

*033300  CAME	5,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033302  JUMPA	0,033303

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033303 
----------

*033303  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033304  MOVEI	5,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033305  SOSN	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*033307  JUMPA	0,033310

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033310 
----------

*033310  CAME	5,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033312  JUMPA	0,033313

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033313 
----------

*033313  CAME	4,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033315  JUMPA	0,033316

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033316 
----------

*033316  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*033317  MOVEI	5,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033320  SOSN	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033321  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033323  JUMPA	0,033324

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033324 
----------

*033324  CAME	5,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033326  JUMPA	0,033327

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033327 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*033327  CAME	4,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033331  JUMPA	0,033332

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033332 
----------

*033332  MOVE 	4,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033333  MOVEI	5,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033334  SOSN	4,000005

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033336  JUMPA	0,033337

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033337 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*033337  CAME	5,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033341  JUMPA	0,033342

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033342 
----------

*033342  CAME	4,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033344  JUMPA	0,033345

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033345 
----------

*033345  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033346  MOVEI	4,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*033347  SOSG	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033350  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033352  JUMPA	0,033353

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033353 
----------

*033353  CAME	4,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033355  JUMPA	0,033356

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033356 
----------

*033356  CAME	3,033412

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*033360  JUMPA	0,033361

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033361 
----------

*033361  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033362  MOVEI	4,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033363  SOSG	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033364  SKIPA	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*033366  JUMPA	0,033367

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033367 
----------

*033367  CAME	4,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033371  JUMPA	0,033372

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033372 
----------

*033372  CAME	3,033431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033374  JUMPA	0,033375

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033375 
----------

*033375  MOVE 	3,033424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*033376  MOVEI	4,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033377  SOSG	3,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033401  JUMPA	0,033402

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033402 
----------

*033402  CAME	4,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033404  JUMPA	0,033405

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033405 
----------

*033405  CAME	3,033432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*033407  JUMPA	0,033410

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033410 
----------

*033410  SETZM	0,033434

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*033411  JRST	0,030057

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000001 
FINAL
C(AC)= 707070 707070  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAE	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 707070 707070 
----------

*030616  JRST	0,030624

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 707070 707070 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 777777 777777 
FINAL
C(AC)= 707070 707070 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 431110 
----------

