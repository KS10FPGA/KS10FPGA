;DSKAG







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E309A-DD

	DIAGNOSTIC CODE:	DSKAG

	PRODUCT NAME:	 	DSKAGA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (7)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAG.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAG.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE SEVENTH IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS THE PUSH, POP, XCT,
	AND BASIC SHIFT/ROTATE INSTRUCTIONS.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAG.TXT
							PAGE 4                                                             SEQ 0005
     1					;DSKAG
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
DSKAGT	MAC	28-Mar-78 14:15		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
DSKAGT	MAC	28-Mar-78 14:15		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414600		PAREA3=SIXBIT/DSKAG/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011
    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414600		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 1
DSKAG1	MAC	28-Mar-78 14:22		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) [DSKAG]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 067 051 040 
   798	030656	133 104 123 113 101 
   799	030657	107 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (7)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 2
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSH INSTRUCTION                                                           SEQ 0029

   807					SUBTTL	TEST OF PUSH INSTRUCTION
   808
   809					;**********
   810
   811					;THIS TEST VERIFIES THAT PUSH DECODES CORRECTLY.
   812					;IF PUSH DECODES AS PUSHJ, THIS TEST FAILS.
   813
   814	030661	400 02 0 00 000000 	C27200:	SETZ	2,		;CLEAR AC
   815	030662	261 02 0 00 030664 		PUSH	2,.+2		;*PUSH SHOULD NOT JUMP
   816	030663	334 00 0 00 000000 		SKIPA			;PASS IF PUSH DID NOT JUMP
   817						STOP^
   818	030664	254 04 0 00 030665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   819	030665	324 00 0 00 030666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   820									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   821									;IN THE SUBTEST) TO LOOP ON ERROR^
   822
   823					;**********
   824
   825					;THIS TEST VERIFIES THAT PUSH DOES NOT MODIFY C(E).
   826					;CLEAR E AND AC; THEN, EXECUTE PUSH.
   827					;CHECK E FOR ORIGINAL CONTENTS ,0.
   828					;PASS IF C(E)=0.
   829
   830	030666	403 00 0 00 000002 	C27300:	SETZB	2		;CLEAR AC,E
   831	030667	261 02 0 00 000000 		PUSH	2,		;*PUSH SHOULD NOT ALTER C(E)
   832	030670	332 00 0 00 000000 		SKIPE			;PASS IF C(E)=0,,0
   833						STOP^
   834	030671	254 04 0 00 030672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   835	030672	324 00 0 00 030673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   836									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   837									;IN THE SUBTEST) TO LOOP ON ERROR^
   838
   839					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 3
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSH INSTRUCTION                                                           SEQ 0030

   840					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC.
   841					;FIRST THE AC IS CLEARED; THEN PUSH IS EXECUTED.
   842					;THE AC IS CHECKED FOR 1,,1.  IF C(AC)=1,,1, THIS TEST PASSES.
   843
   844	030673	400 02 0 00 000000 	C27400:	SETZ	2,		;CLEAR AC
   845	030674	261 02 0 00 030675 		PUSH	2,.+1		;*PUSH SHOULD ADD 1,,1 TO C(AC)
   846	030675	312 02 0 00 032143 		CAME	2,[XWD 1,1]	;PASS IF C(AC)=1,,1
   847						STOP^
   848	030676	254 04 0 00 030677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   849	030677	324 00 0 00 030700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   850									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   851									;IN THE SUBTEST) TO LOOP ON ERROR^
   852
   853					;**********
   854
   855					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC BEFORE MODIFYING C(C(AC-RIGHT)).
   856					;FIRST, THE AC AND AC0 ARE ZEROED; THEN PUSH IS EXECUTED.
   857					;C(C(AC-RIGHT)) [BEFORE AC UPDATING] (AC0) IS CHECKED FOR THE INITIAL VALUE, 0.
   858					;IF C(AC0)=0, THIS TEST PASSES
   859
   860	030700	403 00 0 00 000002 	C27500:	SETZB	2		;CLEAR AC AND AC0
   861	030701	261 02 0 00 032144 		PUSH	2,[16541320]	;*PUSH SHOULD NOT MODIFY C(AC0)
   862	030702	332 00 0 00 000000 		SKIPE			;PASS IF C(AC0)=0
   863						STOP^
   864	030703	254 04 0 00 030704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   865	030704	324 00 0 00 030705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   866									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   867									;IN THE SUBTEST) TO LOOP ON ERROR^
   868
   869					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 4
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSH INSTRUCTION                                                           SEQ 0031

   870					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC BEFORE MODIFYING C(C(AC-RIGHT)).
   871					;FIRST, THE AC AND AC0 ARE ZEROED; THEN PUSH IS EXECUTED.
   872					;C(C(AC-RIGHT)) [BEFORE AC UPDATING] (AC0) IS CHECKED FOR 
   873					;IF C(AC0)IS NOT EQUAL TO E, THIS TEST PASSES
   874
   875	030705	403 01 0 00 000002 	C27600:	SETZB	1,2		;CLEAR AC AND AC0
   876	030706	261 02 0 00 030707 		PUSH	2,.+1		;*PUSH SHOULD NOT MODIFY C(AC0)
   877	030707	306 00 0 00 030707 		CAIN	.		;FAIL IF C(AC0)=E
   878						STOP^
   879	030710	254 04 0 00 030711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   880	030711	324 00 0 00 030712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   882									;IN THE SUBTEST) TO LOOP ON ERROR^
   883
   884					;**********
   885
   886					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC; THEN, MOVES C(E) INTO
   887					;THE LOCATION SPECIFIED BY C(AC-RIGHT).  IN THIS CASE, AC AND THE LOCATION SPECIFIED
   888					;BY UPDATING C(AC-RIGHT) ARE CLEARED; THEN, PUSH IS EXECUTED WITH C(E)=-1,,-1.
   889					;THE LOCATION SPECIFIED BY C(AC-RIGHT) IS THEN CHECKED FOR -1,,-1, THE
   890					;ORIGINAL C(E).  IF C(C(AC-RIGHT))=-1,,-1, THIS TEST PASSES.
   891
   892	030712	403 01 0 00 000002 	C27700:	SETZB	1,2		;CLEAR AC, C(AC-RIGHT)
   893	030713	261 02 0 00 032145 		PUSH	2,[-1]		;*PUSH SHOULD PLACE -1,,-1 INTO AC1
   894	030714	312 01 0 00 032145 		CAME	1,[-1]		;PASS IF C(1)=-1,,-1
   895						STOP^
   896	030715	254 04 0 00 030716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   897	030716	324 00 0 00 030717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   898									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   899									;IN THE SUBTEST) TO LOOP ON ERROR^
   900
   901					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 5
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSH INSTRUCTION                                                           SEQ 0032

   902					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC; THEN, MOVES C(E) INTO
   903					;THE LOCATION SPECIFIED BY C(AC-RIGHT).  IN THIS CASE, AC
   904					;IS CLEARED; THEN, PUSH IS EXECUTED WITH C(E)=0.
   905					;THE LOCATION SPECIFIED BY C(AC-RIGHT) IS THEN CHECKED FOR 0, THE
   906					;ORIGINAL C(E).  IF C(C(AC-RIGHT))=0, THIS TEST PASSES.
   907
   908	030717	402 00 0 00 000002 	C30000:	SETZM	2		;CLEAR AC
   909	030720	261 02 0 00 032146 		PUSH	2,[0]		;*PUSH SHOULD PLACE 0 INTO AC1
   910	030721	332 00 0 00 000001 		SKIPE	1		;PASS IF C(1)=0
   911						STOP^
   912	030722	254 04 0 00 030723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   913	030723	324 00 0 00 030724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   914									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   915									;IN THE SUBTEST) TO LOOP ON ERROR^
   916
   917					;**********
   918
   919					;THIS TEST VERIFIES THAT PUSH ADDS 1,,1 TO THE AC; THEN, MOVES C(E) INTO
   920					;THE LOCATION SPECIFIED BY C(AC-RIGHT).  IN THIS CASE,
   921					;AC IS PRELOADED WITH 0,,-1, AND THE LOCATION SPECIFIED
   922					;BY UPDATING C(AC-RIGHT) IS CLEARED; THEN, PUSH IS EXECUTED WITH C(E)=-1,,-1.
   923					;THE LOCATION SPECIFIED BY C(AC-RIGHT) IS THEN CHECKED FOR -1,,-1, THE
   924					;ORIGINAL C(E).  IF C(C(AC-RIGHT))=-1,,-1, THIS TEST PASSES.
   925
   926	030724	201 02 0 00 777777 	C30100:	MOVEI	2,-1		;PRELOAD AC WITH 0,,-1
   927	030725	400 00 0 00 000000 		SETZ			;CLEAR AC, C(AC-RIGHT)
   928	030726	261 02 0 00 032145 		PUSH	2,[-1]		;*PUSH SHOULD PLACE -1,,-1 INTO AC0
   929	030727	312 00 0 00 032145 		CAME	[-1]		;PASS IF C(0)=-1,,-1
   930						STOP^
   931	030730	254 04 0 00 030731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   932	030731	324 00 0 00 030732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   933									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   934									;IN THE SUBTEST) TO LOOP ON ERROR^
   935
   936					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 6
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSH INSTRUCTION                                                           SEQ 0033

   937					;THIS TEST VERIFIES THAT THERE IS NO CARRY FROM BIT 18 TO BIT 17 OF THE AC ON PUSH.
   938					;THE AC IS PRELOADED WITH 0,,-1; THEN PUSH IS EXECUTED. PUSH SHOULD ADD ONE
   939					;TO BOTH HALVES OF THE AC WITHOUT GENERATING A CARRY FROM BIT 18 TO BIT 17. IF NO
   940					;CARRY WAS GENERATED, THIS TEST PASSES
   941
   942	030732	201 02 0 00 777777 	C30101:	MOVEI	2,-1		;PRELOAD AC WITH 0,, -1
   943	030733	261 02 0 00 000000 		PUSH	2,0		;*PUSH SHOULD NOT GENERATE A CARRY FROM BIT 18 TO 17
   944	030734	312 02 0 00 032147 		CAME	2,[1,,0]	;PASS IF C(AC)=1,,0 (NO CARRY WAS GENERATED)
   945						STOP^
   946	030735	254 04 0 00 030736 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   947	030736	324 00 0 00 030737 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   948									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   949									;IN THE SUBTEST) TO LOOP ON ERROR^
   950
   951					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 7
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0034

   952					SUBTTL	TEST OF PUSHJ INSTRUCTION
   953
   954					;**********
   955
   956					;THIS TEST VERIFIES THAT PUSHJ TRANSFERS CONTROL TO THE LOCATION ADDRESSED BY E.
   957					;IF PUSHJ DOES NOT JUMP, THIS TEST FAILS
   958
   959	030737				C30200:	SFLAG	CRY0		^;SETS CRY0 FLAG
   960
   961	030737	205 01 0 00 200000 		MOVSI	1,CRY0
   962	030740	255 17 0 00 030741 		JFCL	17,.+1	;RESET ALL FLAGS
   963	030741	254 02 0 01 030742 		JRST	2,.+1(1)		;SET CRY0 FLAG
   964	030742	400 00 0 00 000000 		SETZ			;CLEAR AC
   965	030743	260 00 0 00 030745 		PUSHJ	.+2		;*PUSHJ SHOULD JUMP TO LOCATION E
   966						STOP^
   967	030744	254 04 0 00 030745 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   968	030745	324 00 0 00 030746 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   969									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   970									;IN THE SUBTEST) TO LOOP ON ERROR^
   971
   972					;**********
   973
   974					;THIS TEST VERIFIES THAT PUSHJ DOES NOT MODIFY C(PC) WHERE PC IS ONE GREATER
   975					;THAN THE LOCATION OF THE PUSHJ INSTRUCTION.
   976					;IF PUSHJ MODIFIES C(PC), THIS TEST FAILS
   977
   978	030746				C30300:	SFLAG	CRY0		^;SET CRY0
   979
   980	030746	205 01 0 00 200000 		MOVSI	1,CRY0
   981	030747	255 17 0 00 030750 		JFCL	17,.+1	;RESET ALL FLAGS
   982	030750	254 02 0 01 030751 		JRST	2,.+1(1)		;SET CRY0 FLAG
   983	030751	403 01 0 00 030753 		SETZB	1,.+2		;CLEAR C(AC-RIGHT) AND C(PC)
   984	030752	260 00 0 00 030755 		PUSHJ	.+3		;*PUSHJ SHOULD NOT MODIFY C(PC)
   985	030753	000000	000000			0			;THIS LOCATION SHOULD NOT BE MODIFIED BY PUSHJ
   986	030754	310 00 0 00 000000 		CAM			;PUSHJ SHOULD JUMP OVER THIS LOCATION
   987	030755	332 00 0 00 030753 		SKIPE	.-2		;PASS IF PUSHJ DID NOT MODIFY C(PC)
   988						STOP^
   989	030756	254 04 0 00 030757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   990	030757	324 00 0 00 030760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   991									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   992									;IN THE SUBTEST) TO LOOP ON ERROR^
   993
   994					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 8
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0035

   995					;THIS TEST VERIFIES THAT PUSHJ DOES NOT STORE IN E
   996					;IF PUSHJ STORED IN E, THIS TEST FAILS
   997
   998	030760				C30400:	SFLAG	CRY0		^;SET CRY0
   999
  1000	030760	205 01 0 00 200000 		MOVSI	1,CRY0
  1001	030761	255 17 0 00 030762 		JFCL	17,.+1	;RESET ALL FLAGS
  1002	030762	254 02 0 01 030763 		JRST	2,.+1(1)		;SET CRY0 FLAG
  1003	030763	403 00 0 00 000001 		SETZB	1		;CLEAR AC AND C(AC-RIGHT
  1004	030764	260 00 0 00 030765 		PUSHJ	.+1		;*PUSHJ SHOULD NOT STORE IN E
  1005	030765	200 02 0 00 030765 		MOVE	2,.		;SAVE C(E)
  1006	030766	312 02 0 00 030765 		CAME	2,.-1		;FAIL IF PUSHJ STORED IN E
  1007						STOP^
  1008	030767	254 04 0 00 030770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1009	030770	324 00 0 00 030771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1010									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1011									;IN THE SUBTEST) TO LOOP ON ERROR^
  1012
  1013					;**********
  1014
  1015					;THIS TEST VERIFIES THAT PUSHJ DOES NOT STORE IN LOC 0
  1016					;PUSHJ SHOULD STORE PC IN C(AC-RIGHT) - LOCATION 2.
  1017					;IF PUSHJ STORES IN LOCATION 0, THIS TEST FAILS
  1018
  1019	030771	201 02 0 00 000001 	C30500:	MOVEI	2,1		;PRELOAD AC WITH 0,,1
  1020	030772	400 00 0 00 000000 		SETZ	0		;CLEAR 0
  1021	030773	260 02 0 00 030774 		PUSHJ	2,.+1		;*PUSHJ SHOULD NOT STORE IN LOCATION 0
  1022	030774	332 00 0 00 000000 		SKIPE			;FAIL IF PUSHJ STORED IN LOCATION 0
  1023						STOP^
  1024	030775	254 04 0 00 030776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1025	030776	324 00 0 00 030777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1026									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1027									;IN THE SUBTEST) TO LOOP ON ERROR^
  1028
  1029					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 9
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0036

  1030					;THIS TEST VERIFIES THAT PUSHJ STORES THE PC IN THE LOCATION SPECIFIED
  1031					;BY C(AC-RIGHT) AFTER INCREMENTING AC.
  1032					;IN THIS TEST, AC AND C(AC-RIGHT) ARE CLEARED; THEN, PUSHJ IS EXECUTED.
  1033					;C(C(AC-RIGHT))IS THEN COMPARED TO ZERO.  IF C(C(AC-RIGHT)) IS NON-ZERO,
  1034					;A PC WAS STORED AND THIS TEST PASSES.
  1035
  1036	030777	403 00 0 00 000001 	C30600:	SETZB	1		;CLEAR AC, C(AC-RIGHT)
  1037	031000	260 00 0 00 031002 		PUSHJ	.+2		;*PUSHJ SHOULD STORE PC IN RIGHT HALF OF C(AC-RIGHT)
  1038	031001	254 04 0 00 031001 		HALT	.		;PUSHJ SHOULD JUMP OVER THIS INSTRUCTION
  1039	031002	405 01 0 00 777777 		ANDI	1,-1		;SAVE C(C(AC-RIGHT))
  1040	031003	306 01 0 00 031002 		CAIN	1,.-1		;FAIL IF PC WAS NOT STORED IN C(AC-RIGHT)
  1041						STOP^
  1042	031004	254 04 0 00 031005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1043	031005	324 00 0 00 031006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1045									;IN THE SUBTEST) TO LOOP ON ERROR^
  1046
  1047					;**********
  1048
  1049					;THIS TEST VERIFIES THAT PUSHJ ADDS 1,,1 TO THE AC
  1050					;THE AC IS CLEARED AND PUSHJ IS EXECUTED
  1051					;AC IS CHECKED FOR 1,,1 IF C(AC)=1,,1, THIS TEST PASSES
  1052
  1053	031006	400 00 0 00 000000 	C31000:	SETZ			;CLEAR AC
  1054	031007	260 00 0 00 031010 		PUSHJ	.+1		;*PUSHJ SHOULD PLACE 1,,1 INTO THE AC
  1055	031010	312 00 0 00 032143 		CAME	[1,,1]		;PASS IF C(AC)=1,,1
  1056						STOP^
  1057	031011	254 04 0 00 031012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1058	031012	324 00 0 00 031013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1059									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1060									;IN THE SUBTEST) TO LOOP ON ERROR^
  1061
  1062					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 10
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0037

  1063					;THIS TEST VERIFIES THAT PUSHJ STORES THE FLAGS IN LEFT HALF OF C(AC-RIGHT)
  1064					;FIRST, CRY0 IS SET AND AC AND C(AC-RIGHT) ARE CLEARED; THEN, PUSHJ IS EXECUTED.
  1065					;C(C(AC-RIGHT)) IS THEN CHECKED FOR CRY0.  IF CRY0 IS SET, THIS TEST PASSES.
  1066
  1067	031013				C31100:	SFLAG	CRY0		^;SET CRY0
  1068
  1069	031013	205 01 0 00 200000 		MOVSI	1,CRY0
  1070	031014	255 17 0 00 031015 		JFCL	17,.+1	;RESET ALL FLAGS
  1071	031015	254 02 0 01 031016 		JRST	2,.+1(1)		;SET CRY0 FLAG
  1072	031016	403 00 0 00 000001 		SETZB	1		;CLEAR AC AND C(AC-RIGHT)
  1073	031017	260 00 0 00 031020 		PUSHJ	.+1		;*PUSHJ SHOULD STORE FLAGS IN LEFT HALF OF C(AC-RIGHT)
  1074	031020	607 01 0 00 200000 		TLNN	1,CRY0		;PASS IF CRY0 STORED CORRECTLY
  1075						STOP^
  1076	031021	254 04 0 00 031022 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1077	031022	324 00 0 00 031023 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1078									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1079									;IN THE SUBTEST) TO LOOP ON ERROR^
  1080
  1081					;**********
  1082
  1083					;THIS TEST VERIFIES THAT PUSHJ ADDS 1,,1 TO THE AC
  1084					;THE AC IS PRELOADED WITH 0,,1 AND PUSHJ IS EXECUTED
  1085					;AC IS CHECKED FOR 1,,2 IF C(AC)=1,,2, THIS TEST PASSES
  1086
  1087	031023	201 01 0 00 000001 	C31400:	MOVEI	1,1		;PRELOAD AC WITH 0,,1
  1088	031024	260 01 0 00 031026 		PUSHJ	1,.+2		;*PUSHJ SHOULD PLACE 1,,2 INTO THE AC
  1089	031025	254 04 0 00 000000 		HALT			;PUSHJ SHOULD JUMP OVER THIS INSTRUCTION
  1090	031026	312 01 0 00 032150 		CAME	1,[XWD 1,2]	;PASS IF AC WAS INCREMENTED CORRECTLY
  1091						STOP^
  1092	031027	254 04 0 00 031030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1093	031030	324 00 0 00 031031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1094									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1095									;IN THE SUBTEST) TO LOOP ON ERROR^
  1096
  1097					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 11
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0038

  1098					;THIS TEST VERIFIES THAT PUSHJ STORES THE PC IN RIGHT HALF OF C(AC-RIGHT)
  1099					;THIS TEST PASSES IF THE PC WAS STORED CORRECTLY.
  1100
  1101	031031	201 01 0 00 000001 	C31500:	MOVEI	1,1		;PLACE 0,,1 INTO AC
  1102	031032	260 01 0 00 031034 		PUSHJ	1,.+2		;*PUSHJ SHOULD STORE .+1 INTO RIGHT HALF OF C(AC-RIGHT)
  1103	031033	254 04 0 00 000000 		HALT			;PUSHJ SHOULD JUMP OVER THIS PC
  1104	031034	405 02 0 00 777777 		ANDI	2,-1		;SAVE RIGHT HALF OF C(AC-RIGHT)
  1105	031035	302 02 0 00 031033 		CAIE	2,.-2		;PASS IF PC STORED CORRECTLY
  1106						STOP^
  1107	031036	254 04 0 00 031037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1108	031037	324 00 0 00 031040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1110									;IN THE SUBTEST) TO LOOP ON ERROR^
  1111
  1112					;**********
  1113
  1114					;THIS TEST VERIFIES THAT PUSHJ ALWAYS RESETS BIS.
  1115					;FIRST BIS IS SET; THEN PUSHJ IS EXECUTED.  THE FLAGS ARE
  1116					;THEN SAVED AND CHECKED.  IF BIS WAS RESET VIA PUSHJ, THIS TEST PASSES.
  1117
  1118	031040				C31501:	SFLAG	BIS		^;SET BIS
  1119
  1120	031040	205 01 0 00 020000 		MOVSI	1,BIS
  1121	031041	255 17 0 00 031042 		JFCL	17,.+1	;RESET ALL FLAGS
  1122	031042	254 02 0 01 031043 		JRST	2,.+1(1)		;SET BIS FLAG
  1123	031043	400 00 0 00 000000 		SETZ			;CLEAR AC
  1124	031044	260 00 0 00 031045 		PUSHJ	.+1		;*PUSHJ SHOULD RESET BIS
  1125	031045	265 00 0 00 031046 		JSP	.+1		;SAVE FLAGS
  1126	031046	603 00 0 00 020000 		TLNE	BIS		;PASS IF BIS FLAG IS RESET
  1127						STOP^
  1128	031047	254 04 0 00 031050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1129	031050	324 00 0 00 031051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1130									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1131									;IN THE SUBTEST) TO LOOP ON ERROR^
  1132
  1133					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 12
DSKAG1	MAC	28-Mar-78 14:22		TEST OF PUSHJ INSTRUCTION                                                          SEQ 0039

  1134					;THIS TEST VERIFIES THAT THERE IS NO CARRY FROM BIT 18 TO BIT 17 OF THE AC ON PUSHJ.
  1135					;THE AC IS PRELOADED WITH 0,,-1; THEN PUSHJ IS EXECUTED. PUSHJ SHOULD ADD ONE
  1136					;TO BOTH HALVES OF THE AC WITHOUT GENERATING A CARRY FROM BIT 18 TO BIT 17. IF NO
  1137					;CARRY WAS GENERATED, THIS TEST PASSES
  1138
  1139	031051	201 02 0 00 777777 	C31502:	MOVEI	2,-1		;PRELOAD AC WITH 0,,-1
  1140	031052	260 02 0 00 031053 		PUSHJ	2,.+1		;*PUSHJ SHOULD NOT GENERATE A CARRY FROM BIT 18 TO 17
  1141	031053	312 02 0 00 032147 		CAME	2,[1,,0]	;PASS IF C(AC)=1,,0 (NO CARRY WAS GENERATED)
  1142						STOP^
  1143	031054	254 04 0 00 031055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1144	031055	324 00 0 00 031056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1145									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1146									;IN THE SUBTEST) TO LOOP ON ERROR^
  1147
  1148					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 13
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POP INSTRUCTION                                                            SEQ 0040

  1149					SUBTTL	TEST OF POP INSTRUCTION
  1150
  1151					;**********
  1152
  1153					;THIS TEST VERIFIES THAT POP SUBTRACTS 1,,1 FROM THE AC
  1154					;THE AC IS PRELOADED WITH 1,,1; THEN, POP IS EXECUTED.
  1155					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  1156
  1157	031056	200 00 0 00 032143 	C31600:	MOVE	[XWD 1,1]	;PRELOAD AC WITH 1,,1
  1158	031057	262 00 0 00 000001 		POP	1		;*POP SHOULD SUBTRACT 1,,1 FROM THE AC
  1159	031060	332 00 0 00 000000 		SKIPE			;PASS IF AC WAS DECREMENTED CORRECTLY
  1160						STOP^
  1161	031061	254 04 0 00 031062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1162	031062	324 00 0 00 031063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1163									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1164									;IN THE SUBTEST) TO LOOP ON ERROR^
  1165
  1166					;**********
  1167
  1168					;THIS TEST VERIFIES THAT POP SUBTRACTS 1,,1 FROM THE AC
  1169					;THE AC IS PRELOADED WITH 2,,2; THEN, POP IS EXECUTED.
  1170					;THE AC IS CHECKED FOR 1,,1.  IF C(AC)=1,,1, THIS TEST PASSES.
  1171
  1172	031063	200 00 0 00 032151 	C31700:	MOVE	[XWD 2,2]	;PRELOAD AC WITH E,,E WHERE E=2
  1173	031064	201 02 0 00 000005 		MOVEI	2,5		;PRELOAD 2 WITH 0,,5
  1174	031065	262 00 0 00 000002 		POP	2		;*POP SHOULD SUBTRACT 1,,1 FROM THE AC
  1175	031066	312 00 0 00 032143 		CAME	[1,,1]		;PASS IF AC WAS DECREMENTED CORRECTLY
  1176						STOP^
  1177	031067	254 04 0 00 031070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1178	031070	324 00 0 00 031071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1179									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1180									;IN THE SUBTEST) TO LOOP ON ERROR^
  1181
  1182					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 14
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POP INSTRUCTION                                                            SEQ 0041

  1183					;THIS TEST VERIFIES THAT POP STORES C(C(AC-RIGHT)) INTO E
  1184					;IN THIS CASE, AC=0 AND AC IS PRELOADED WITH 2,,2; E=2 AND IS PRELOADED WITH 0.
  1185					;POP IS THEN EXECUTED.  POP SHOULD PLACE 0 INTO E.  IF C(E)=0, THIS TEST PASSES.
  1186
  1187	031071	200 00 0 00 032151 	C32300:	MOVE	[XWD 2,2]	;PRELOAD AC WITH 2,,2
  1188	031072	402 00 0 00 000002 		SETZM	2		;CLEAR E AND C(AC-RIGHT)
  1189	031073	262 00 0 00 000002 		POP	2		;*POP SHOULD PLACE 0 INTO E
  1190	031074	332 00 0 00 000002 		SKIPE	2		;PASS IF C(E)=0
  1191						STOP^
  1192	031075	254 04 0 00 031076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1193	031076	324 00 0 00 031077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1194									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1195									;IN THE SUBTEST) TO LOOP ON ERROR^
  1196
  1197					;**********
  1198
  1199					;THIS TEST VERIFIES THAT POP DOES NOT MODIFY C(C(AC-RIGHT)-1).
  1200					;THIS TEST FAILS IF C(C(AC-RIGHT)-1) IS MODIFIED BY POP.
  1201
  1202	031077	200 00 0 00 032151 	C32400:	MOVE	[XWD 2,2]	;PRELOAD AC WITH 2,,2
  1203	031100	201 02 0 00 000017 		MOVEI	2,17		;PRELOAD 2 WITH 0,,17
  1204	031101	402 00 0 00 000001 		SETZM	1		;CLEAR C(C(AC-RIGHT)-1)
  1205	031102	262 00 0 00 000002 		POP	2		;*POP SHOULD NOT MODIFY C(C(AC-RIGHT)-1)
  1206	031103	332 00 0 00 000001 		SKIPE	1		;PASS IF C(C(AC-RIGHT)-1) WAS UNALTERED
  1207						STOP^
  1208	031104	254 04 0 00 031105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1209	031105	324 00 0 00 031106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1210									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1211									;IN THE SUBTEST) TO LOOP ON ERROR^
  1212
  1213					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 15
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POP INSTRUCTION                                                            SEQ 0042

  1214					;THIS TEST VERIFIES THAT POP STORES C(C(AC-RIGHT)) INTO E.
  1215					;IN THIS CASE, AC IS PRELOADED WITH 2,,2 AND AC2 [C(AC-RIGHT)] IS PRELOADED WITH 0,,3.
  1216					;E IS CLEARED AND POP IS EXECUTED.  E IS THEN CHECKED FOR 0,,3 [C(C(AC-RIGHT))] .
  1217					;IF C(E)=0,,3, THIS TEST PASSES.
  1218
  1219	031106	200 00 0 00 032151 	C32500:	MOVE	[XWD 2,2]	;PRELOAD AC WITH 2,,2
  1220	031107	201 02 0 00 000003 		MOVEI	2,3		;PRELOAD C(AC-RIGHT) WITH 0,,3
  1221	031110	402 00 0 00 000003 		SETZM	3		;CLEAR E
  1222	031111	262 00 0 00 000003 		POP	3		;*POP SHOULD PLACE 0,,3 INTO E
  1223	031112	302 03 0 00 000003 		CAIE	3,3		;PASS IF C(E)=0,,3
  1224						STOP^
  1225	031113	254 04 0 00 031114 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1226	031114	324 00 0 00 031115 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1227									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1228									;IN THE SUBTEST) TO LOOP ON ERROR^
  1229
  1230					;**********
  1231
  1232					;THIS TEST VERIFIES THAT POP STORES C(C(AC-RIGHT)) INTO E.  IN THIS CASE,
  1233					;AC IS PRELOADED WITH 2,,2 AND AC2 [C(AC-RIGHT)] IS PRELOADED WITH 0,,17.
  1234					;E IS CLEARED AND POP IS EXECUTED.  E IS THEN CHECKED FOR 0,,17 [C(C(AC-RIGHT))] .
  1235					;IF C(E)=0,,17, THIS TEST PASSES.
  1236
  1237	031115	402 00 0 00 000002 	C32600:	SETZM	2		;CLEAR E
  1238	031116	200 00 0 00 032151 		MOVE	[XWD 2,2]	;PRELOAD AC WITH 2,,2
  1239	031117	201 02 0 00 000017 		MOVEI	2,17		;PRELOAD C(AC-RIGHT) WITH 0,,17
  1240	031120	262 00 0 00 000002 		POP	2		;*POP SHOULD PLACE 0,,17 INTO E
  1241	031121	302 02 0 00 000017 		CAIE	2,17		;PASS IF C(E)=0,,17
  1242						STOP^
  1243	031122	254 04 0 00 031123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1244	031123	324 00 0 00 031124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1245									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1246									;IN THE SUBTEST) TO LOOP ON ERROR^
  1247
  1248					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 16
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POP INSTRUCTION                                                            SEQ 0043

  1249					;THIS TEST VERIFIES THAT POP STORES C(C(AC-RIGHT)) INTO E.  IN THIS CASE,
  1250					;AC IS PRELOADED WITH 2,,2 AND AC2 [C(AC-RIGHT)] IS PRELOADED WITH -1,,-1.
  1251					;E IS CLEARED AND POP IS EXECUTED.  E IS THEN CHECKED FOR -1,,-1 [C(C(AC-RIGHT))] .
  1252					;IF C(E)=0,,3, THIS TEST PASSES.
  1253
  1254	031124	200 00 0 00 032151 	C33100:	MOVE	[XWD 2,2]	;PRELOAD AC WITH 2,,2
  1255	031125	476 00 0 00 000002 		SETOM	2		;PRELOAD C(AC-RIGHT) WITH -1,,-1
  1256	031126	402 00 0 00 000003 		SETZM	3		;CLEAR E
  1257	031127	262 00 0 00 000003 		POP	3		;*POP SHOULD PLACE -1,,-1 INTO E
  1258	031130	312 03 0 00 032145 		CAME	3,[-1]		;PASS IF C(E)=-1,,-1
  1259						STOP^
  1260	031131	254 04 0 00 031132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1261	031132	324 00 0 00 031133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1262									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1263									;IN THE SUBTEST) TO LOOP ON ERROR^
  1264
  1265					;**********
  1266
  1267					;THIS TEST VERIFIES THAT POP PLACES C(C(AC-RIGHT)) INTO E AND ADDS 1,,1 TO AC.
  1268					;IN THIS CASE, THE AC IS PRELOADED WITH 1,,17; E=1 AND E IS PRELOADED WITH 0;
  1269					;C(AC-RIGHT) IS PRELOADED WITH -1,,-1; AND POP IS EXECUTED.  POP SHOULD PLACE -1,,-1
  1270					;INTO E AND 0,,16 INTO AC.  IF AC AND E ARE UPDATED CORRECTLY, THIS TEST PASSES.
  1271
  1272	031133	200 00 0 00 032152 	C33300:	MOVE	[XWD 1,17]	;PRELOAD AC WITH 1,,17
  1273	031134	402 00 0 00 000001 		SETZM	1		;PRELOAD E WITH 0
  1274	031135	476 00 0 00 000017 		SETOM	17		;PRELOAD C(AC-RIGHT) WITH 1,,1
  1275	031136	262 00 0 00 000001 		POP	1		;*POP SHOULD PLACE -1,,-1 INTO E AND 0,,16 INTO AC
  1276	031137	312 01 0 00 032145 		CAME	1,[-1]		;PASS IF C(E)=-1,,-1
  1277						STOP^
  1278	031140	254 04 0 00 031141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1279	031141	324 00 0 00 031142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1280									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1281									;IN THE SUBTEST) TO LOOP ON ERROR^
  1282	031142	302 00 0 00 000016 	C33310:	CAIE	16		;PASS IF C(AC)=0,,16
  1283						STOP^
  1284	031143	254 04 0 00 031144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1285	031144	324 00 0 00 031145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1286									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1287									;IN THE SUBTEST) TO LOOP ON ERROR^
  1288
  1289					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 17
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POP INSTRUCTION                                                            SEQ 0044

  1290					;THIS TEST VERIFIES THAT POP PLACES C(C(AC-RIGHT)) INTO E AND ADDS 1,,1 TO AC
  1291					;IN THIS CASE, THE AC IS PRELOADED WITH -1,,0; E=17 
  1292					;C(AC-RIGHT) IS PRELOADED WITH 0; AND POP IS EXECUTED.  POP SHOULD PLACE 0
  1293					;INTO E.  IF AC IS UPDATED CORRECTLY, THIS TEST PASSES.
  1294
  1295	031145	205 01 0 00 777777 	C33400:	MOVSI	1,-1		;PRELOAD AC WITH -1,,0
  1296	031146	400 00 0 00 000000 		SETZ			;CLEAR C(AC-RIGHT)
  1297	031147	262 01 0 00 000017 		POP	1,17		;*POP SHOULD PLACE 0 INTO E
  1298	031150	332 00 0 00 000017 		SKIPE	17		;PASS IF C(E)=0
  1299						STOP^
  1300	031151	254 04 0 00 031152 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1301	031152	324 00 0 00 031153 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1302									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1303									;IN THE SUBTEST) TO LOOP ON ERROR^
  1304
  1305					;**********
  1306
  1307					;THIS TEST VERIFIES THAT THERE IS NO CARRY FROM BIT 18 TO BIT 17 OF THE AC ON POP.
  1308					;THE AC IS PRELOADED WITH 1,,0; THEN POP IS EXECUTED. POP SHOULD SUBTRACT ONE
  1309					;FROM BOTH HALVES OF THE AC WITHOUT GENERATING A CARRY FROM BIT 18 TO BIT 17. IF NO
  1310					;CARRY WAS GENERATED, THIS TEST PASSES
  1311
  1312	031153	515 02 0 00 000001 	C33401:	HRLZI	2,1		;PRELOAD AC WITH 1,,0
  1313	031154	262 02 0 00 000000 		POP	2,0		;*POP SHOULD NOT GENERATE A CARRY FROM BIT 18 TO 17
  1314	031155	302 02 0 00 777777 		CAIE	2,-1		;PASS IF C(AC)=0,,-1 (NO CARRY WAS GENERATED)
  1315						STOP^
  1316	031156	254 04 0 00 031157 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1317	031157	324 00 0 00 031160 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1318									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1319									;IN THE SUBTEST) TO LOOP ON ERROR^
  1320
  1321					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 18
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POPJ INSTRUCTION                                                           SEQ 0045

  1322					SUBTTL	TEST OF POPJ INSTRUCTION
  1323
  1324					;**********
  1325
  1326					;THIS TEST VERIFIES THAT POPJ JUMPS TO THE LOCATION ADDRESSED BY RIGHT HALF OF
  1327					;C(C(AC-RIGHT)) BEFORE POPJ DECREMENTED THE AC.
  1328					;THIS TEST PASSES IF POPJ JUMPS CORRECTLY.
  1329
  1330	031160	200 00 0 00 032143 	C33500:	MOVE	[XWD 1,1]	;PRELOAD AC WITH 1,,1
  1331	031161	201 01 0 00 031164 		MOVEI	1,.+3		;PRELOAD C(AC-RIGHT) WITH .+3
  1332	031162	263 00 0 00 031164 		POPJ	.+2		;*POPJ SHOULD JUMP TO LOCATION
  1333									;ADDRESSED BY C(C(AC-RIGHT))
  1334						STOP^
  1335	031163	254 04 0 00 031164 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1336	031164	324 00 0 00 031165 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1337									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1338									;IN THE SUBTEST) TO LOOP ON ERROR^
  1339
  1340					;**********
  1341
  1342					;THIS TEST VERIFIES THAT POPJ SUBTRACTS 1,,1 FROM THE AC
  1343					;THIS AC IS PRELOADED WITH 1,,1; THEN,POPJ IS EXECUTED.
  1344					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  1345
  1346	031165	200 00 0 00 032143 	C33600:	MOVE	[XWD 1,1]	;PRELOAD AC WITH 1,,1
  1347	031166	201 01 0 00 031170 		MOVEI	1,.+2		;PRELOAD C(AC-NIGHT)WITH .+2
  1348	031167	263 00 0 00 031170 		POPJ	.+1		;*POPJ SHOULD SUBTRACT 1,,1 FROM AC
  1349	031170	312 00 0 00 032146 		CAME	[0]		;PASS IF C(AC)=0
  1350						STOP^
  1351	031171	254 04 0 00 031172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1352	031172	324 00 0 00 031173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1353									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1354									;IN THE SUBTEST) TO LOOP ON ERROR^
  1355
  1356					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 19
DSKAG1	MAC	28-Mar-78 14:22		TEST OF POPJ INSTRUCTION                                                           SEQ 0046

  1357					;THIS TEST VERIFIES THAT POPJ JUMPS TO THE LOCATION ADDRESSED BY RIGHT HALF OF
  1358					;C(C(AC-RIGHT)) BEFORE POPJ DECREMENTED THE AC.
  1359					;THIS TEST PASSES IF POPJ JUMPS CORRECTLY.
  1360
  1361	031173	200 00 0 00 032143 	C33700:	MOVE	[XWD 1,1]	;PRELOAD AC WITH 1,,1
  1362	031174	201 01 0 00 031176 		MOVEI	1,.+2		;PRELOAD C(AC-RIGHT) WITH C33700+3
  1363
  1364	031175	263 00 0 00 031177 		POPJ	.+2		;*POPJ SHOULD JUMP TO C33700+3
  1365	031176	334 00 0 00 000000 		SKIPA			;PASS IF POPJ JUMPED CORRECTLY
  1366						STOP^
  1367	031177	254 04 0 00 031200 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1368	031200	324 00 0 00 031201 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1369									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1370									;IN THE SUBTEST) TO LOOP ON ERROR^
  1371
  1372					;**********
  1373
  1374					;THIS TEST VERIFIES THAT THERE IS NO CARRY FROM BIT 18 TO BIT 17 OF THE AC ON POPJ.
  1375					;THE AC IS PRELOADED WITH 1,,0; THEN POPJ IS EXECUTED. POPJ SHOULD SUBTRACT ONE
  1376					;FROM BOTH HALVES OF THE AC WITHOUT GENERATING A CARRY FROM BIT 18 TO BIT 17. IF NO
  1377					;CARRY WAS GENERATED, THIS TEST PASSES
  1378
  1379	031201	515 02 0 00 000001 	C33701:	HRLZI	2,1		;PRELOAD AC WITH 1,,0
  1380	031202	201 00 0 00 031204 		MOVEI	0,.+2		;PRELOAD C(AC-RIGHT) WITH  C33701+3
  1381	031203	263 02 0 00 000000 		POPJ	2,0		;*POPJ SHOULD NOT GENERATE A CARRY FROM BIT 18 TO 17
  1382	031204	302 02 0 00 777777 		CAIE	2,-1		;PASS IF C(AC)=0,,-1 (NO CARRY WAS GENERATED)
  1383						STOP^
  1384	031205	254 04 0 00 031206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1385	031206	324 00 0 00 031207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1386									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1387									;IN THE SUBTEST) TO LOOP ON ERROR^
  1388
  1389					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 20
DSKAG1	MAC	28-Mar-78 14:22		XCT INSTRUCTION - ADDITIONAL TESTS                                                 SEQ 0047

  1390					SUBTTL	XCT INSTRUCTION - ADDITIONAL TESTS
  1391
  1392					;**********
  1393
  1394					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A SKIP INSTRUCTION, THE SKIP IS RELATIVE
  1395					;TO THE LOCATION OF THE XCT.
  1396
  1397	031207	477 00 0 00 000001 	C34000:	SETOB	1
  1398	031210	256 00 0 00 032153 		XCT	[CAME 0,1]	;*CAME SHOULD SKIP TO C34000+3
  1399						STOP^
  1400	031211	254 04 0 00 031212 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1401	031212	324 00 0 00 031213 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1402									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1403									;IN THE SUBTEST) TO LOOP ON ERROR^
  1404
  1405					;**********
  1406
  1407					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A SKIP INSTRUCTION, THE SKIP IS RELATIVE
  1408					;TO THE LOCATION OF THE XCT.
  1409
  1410	031213	477 00 0 00 000001 	C34100:	SETOB	1
  1411	031214	256 00 0 00 032155 		XCT	[XCT[XCT[CAME 0,1]]]	;*CAME SHOULD SKIP TO C34100+3
  1412						STOP^
  1413	031215	254 04 0 00 031216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1414	031216	324 00 0 00 031217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1415									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1416									;IN THE SUBTEST) TO LOOP ON ERROR^
  1417
  1418					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 21
DSKAG1	MAC	28-Mar-78 14:22		XCT INSTRUCTION - ADDITIONAL TESTS                                                 SEQ 0048

  1419					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A JUMP, PROGRAM FLOW IS ALTERED AS
  1420					;SPECIFIED BY THE JUMP.
  1421
  1422	031217	256 00 0 00 032156 	C34200:	XCT	[JRST .+4]	;*JRST SHOULD JUMP TO C34200+4
  1423
  1424	031220	254 04 0 00 000000 		HALT			;JRST SHOULD JUMP OVER THIS LOCATION
  1425	031221	254 04 0 00 000000 		HALT			;JRST SHOULD JUMP OVER THIS LOCATION
  1426						STOP^
  1427	031222	254 04 0 00 031223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1428	031223	324 00 0 00 031224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1430									;IN THE SUBTEST) TO LOOP ON ERROR^
  1431
  1432					;**********
  1433
  1434					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A JUMP, PROGRAM FLOW IS ALTERED AS
  1435					;SPECIFIED BY THE JUMP AND THAT WHEN THE PC IS SAVED IT CONTAINS AN
  1436					;ADDRESS ONE GREATER THAN THE LOCATION OF FIRST XCT OF THE CHAIN.
  1437
  1438	031224	402 00 0 00 000003 	C34300:	SETZM	3		;CLEAR AC OF JSP
  1439	031225	256 00 0 00 032161 		XCT	[XCT[XCT[JSP 3,.+3]]] ;*JSP SHOULD JUMP TO C34300+4 AND
  1440	031226	254 04 0 00 000000 		HALT			;THE SAVED PC SHOULD BE C 34300+2	
  1441	031227	254 04 0 00 000000 		HALT			;PASS IF JSP JUMPED CORRECTLY	
  1442	031230	620 03 0 00 031226 		TRZ	3,.-2		;AND SAVED PC=C34300+2
  1443	031231	602 03 0 00 777777 		TRNE	3,-1
  1444						STOP^
  1445	031232	254 04 0 00 031233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1446	031233	324 00 0 00 031234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1447									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1448									;IN THE SUBTEST) TO LOOP ON ERROR^
  1449
  1450					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 22
DSKAG1	MAC	28-Mar-78 14:22		XCT INSTRUCTION - ADDITIONAL TESTS                                                 SEQ 0049

  1451					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A SKIP INSTRUCTION, THE SKIP IS RELATIVE
  1452					;TO THE LOCATION OF THE XCT.
  1453					;IN THIS CASE, NO SKIP SHOULD OCCUR  ;HENCE, THE INSTRUCTION
  1454					;FOLLOWING XCT SHOULD BE EXECUTED AFTER 'CAME' IS EXECUTED.
  1455
  1456	031234	403 00 0 00 000000 	C34400:	SETZB	0		;SET-UP AC,E SO THAT
  1457	031235	476 00 0 00 000001 		SETOM	1		;CAME WILL NOT SKIP
  1458	031236	256 00 0 00 032153 		XCT	[CAME 0,1]	;*CAME SHOULD CAUSE EXECUTION
  1459									;OF INSTRUCTION FOLLOWING XCT
  1460	031237	254 00 0 00 031241 		JRST	.+2		;PASS IF THIS INSTRUCTION IS EXECUTED
  1461						STOP^
  1462	031240	254 04 0 00 031241 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1463	031241	324 00 0 00 031242 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1464									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1465									;IN THE SUBTEST) TO LOOP ON ERROR^
  1466
  1467					;**********
  1468
  1469					;THIS TEST VERIFIES INDEXING FOR XCT OF AN ADD INSTRUCTION
  1470					;C(4)=10, AND C(6)=3, SO THE RESULT IN 6 (THE AC) SHOULD BE 16
  1471					;C(11)=13
  1472
  1473	031242	201 04 0 00 000010 	C34500:	MOVEI	4,10		;PRELOAD INDEX REG WITH 10
  1474	031243	201 11 0 00 000013 		MOVEI	11,13		;PRELOAD EFFECTIVE ADDRESS WITH 13
  1475	031244	201 06 0 00 000003 		MOVEI	6,3		;PRELOAD AC WITH 3
  1476	031245	256 00 0 00 032162 		XCT	[ADD 6,1(4)]	;*ADD SHOULD PLACE 16 IN AC
  1477	031246	302 06 0 00 000016 		CAIE	6,16		;PASS IF C(AC)=16
  1478						STOP^
  1479	031247	254 04 0 00 031250 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1480	031250	324 00 0 00 031251 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1481									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1482									;IN THE SUBTEST) TO LOOP ON ERROR^
  1483
  1484					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 23
DSKAG1	MAC	28-Mar-78 14:22		XCT INSTRUCTION - ADDITIONAL TESTS                                                 SEQ 0050

  1485					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A SKIP INSTRUCTION, THE SKIP IS RELATIVE
  1486					;TO THE LOCATION OF THE XCT
  1487					;IN THIS CASE, NO SKIP SHOULD OCCUR  ;HENCE, THE INSTRUCTION
  1488					;FOLLOWING XCT SHOULD BE EXECUTED AFTER CAME IS EXECUTED.
  1489
  1490	031251	402 00 0 00 000002 	C34600:	SETZM	2		;SETUP E SO THAT SKIPL WILL NOT SKIP
  1491	031252	256 00 0 00 032163 		XCT	[SKIPL 1,2]	;*SKIPL SHOULD CAUSE INSTRUCTION
  1492									;OF FOLLOWING INSTRUCTION
  1493	031253	254 00 0 00 031255 		JRST	.+2		;PASS IF THIS INSTRUCTION IS EXECUTED.
  1494						STOP^
  1495	031254	254 04 0 00 031255 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1496	031255	324 00 0 00 031256 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1497									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1498									;IN THE SUBTEST) TO LOOP ON ERROR^
  1499	031256	332 00 0 00 000001 	C34610:	SKIPE	1		;*SKIPE SHOULD SKIP BECAUSE XCT OF SKIPL
  1500									;PLACED 0 INTO AC1
  1501						STOP^
  1502	031257	254 04 0 00 031260 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1503	031260	324 00 0 00 031261 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1504									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1505									;IN THE SUBTEST) TO LOOP ON ERROR^
  1506
  1507					;**********
  1508
  1509					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A SKIP INSTRUCTION, THE SKIP IS RELATIVE
  1510					;TO THE LOCATION OF THE XCT.
  1511
  1512	031261	476 00 0 00 000006 	C34700:	SETOM	6		;SETUP E SO THAT SKIPL WILL SKIP
  1513	031262	256 00 0 00 032164 		XCT	[SKIPL 3,6]	;*SKIPL SHOULD SKIP TO C34700+3
  1514						STOP^
  1515	031263	254 04 0 00 031264 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1516	031264	324 00 0 00 031265 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1517									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1518									;IN THE SUBTEST) TO LOOP ON ERROR^
  1519	031265	331 00 0 00 000003 	C34710:	SKIPL	3		;*SKIPE SHOULD SKIP BECAUSE XCT OF SKIPL
  1520									;PLACED 0 INTO AC1
  1521						STOP^
  1522	031266	254 04 0 00 031267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1523	031267	324 00 0 00 031270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1524									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1525									;IN THE SUBTEST) TO LOOP ON ERROR^
  1526
  1527					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 24
DSKAG1	MAC	28-Mar-78 14:22		XCT INSTRUCTION - ADDITIONAL TESTS                                                 SEQ 0051

  1528					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A JUMP, PROGRAM FLOW IS ALTERED AS
  1529					;SPECIFIED BY THE JUMP.
  1530					;THIS TEST ALSO VERIFIES CORRECT UPDATING OF THE AC FOR AOBJN
  1531
  1532	031270	200 03 0 00 032165 	C35000:	MOVE	3,[-2,,5]	;SETUP AC SO THAT AOBJN WILL JUMP
  1533	031271	256 00 0 00 032166 		XCT	[AOBJN 3,.+3]	;*JUMP SHOULD BE TO C35000+4
  1534	031272	254 04 0 00 000000 		HALT			;JUMP OVER THIS INSTRUCTION
  1535	031273	254 04 0 00 000000 		HALT			;JUMP OVER THIS INSTRUCTION
  1536	031274	312 03 0 00 032167 		CAME	3,[-1,,6]	;PASS IF C(AC)=-1,,6 AND AOBJN JUMPED
  1537						STOP^
  1538	031275	254 04 0 00 031276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1539	031276	324 00 0 00 031277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1540									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1541									;IN THE SUBTEST) TO LOOP ON ERROR^
  1542
  1543					;**********
  1544
  1545					;THIS TEST VERIFIES THAT IF AN XCT EXECUTES A JUMP, PROGRAM FLOW IS ALTERED AS
  1546					;SPECIFIED BY THE JUMP.
  1547					;THIS TEST ALSO VERIFIES CORRECT UPDATING OF THE AC FOR AOBJN
  1548
  1549	031277	200 03 0 00 032167 	C35100:	MOVE	3,[-1,,6]	;SETUP AC SO THAT AOBJN WILL NOT JUMP
  1550	031300	256 00 0 00 032170 		XCT	[AOBJN 3,.+2]	;*AOBJN SHOULD NOT JUMP
  1551	031301	312 03 0 00 032171 		CAME	3,[0,,7]	;PASS IF AOBJN DID NOT JUMP AND C(AC)=0,,7
  1552						STOP^
  1553	031302	254 04 0 00 031303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1554	031303	324 00 0 00 031304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1556									;IN THE SUBTEST) TO LOOP ON ERROR^
  1557
  1558					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 25
DSKAG1	MAC	28-Mar-78 14:22		TEST XCT INSTRUCTION WITH INDIRECT ADDRESSING AND INDEXING                         SEQ 0052

  1559					SUBTTL	TEST XCT INSTRUCTION WITH INDIRECT ADDRESSING AND INDEXING
  1560
  1561					;**********
  1562
  1563					;THIS TEST VERIFIES THAT XCT WILL EXECUTE AN INSTRUCTION
  1564					;FROM AN INDIRECTLY ADDRESSED LOCATION
  1565
  1566	031304	403 00 0 00 000002 	C35200:	SETZB	2
  1567	031305	254 00 0 00 031310 		JRST	.+3
  1568	031306	000000	031307				.+1
  1569	031307	476 00 0 00 000002 		SETOM	2		;THIS INSTRUCTION SHOULD BE EXECUTED
  1570	031310	256 00 1 00 031306 		XCT	@.-2
  1571	031311	312 02 0 00 032145 		CAME	2,[-1,,-1]	;PASS IF 'SETOM 2' WAS EXECUTED
  1572						STOP^
  1573	031312	254 04 0 00 031313 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1574	031313	324 00 0 00 031314 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1575									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1576									;IN THE SUBTEST) TO LOOP ON ERROR^
  1577
  1578					;**********
  1579
  1580					;THIS TEST VERIFIES THAT XCT WILL EXECUTE AN INSTRUCTION
  1581					;FROM AN INDEXED LOCATION
  1582
  1583	031314	201 04 0 00 031315 	C35300:	MOVEI	4,.+1
  1584	031315	254 00 0 00 031317 		JRST	.+2
  1585	031316	302 04 0 00 031315 		CAIE	4,.-1		;THIS INSTRUCTION SHOULD BE EXECUTED
  1586	031317	256 00 0 04 000001 		XCT	1(4)
  1587						STOP			^;PASS IF 'CAIE 4,,-1' WAS EXECUTED
  1588
  1589	031320	254 04 0 00 031321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1590	031321	324 00 0 00 031322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1591									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1592									;IN THE SUBTEST) TO LOOP ON ERROR
  1593
  1594					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 26
DSKAG1	MAC	28-Mar-78 14:22		TEST XCT INSTRUCTION WITH INDIRECT ADDRESSING AND INDEXING                         SEQ 0053

  1595					;THIS TEST VERIFIES THAT XCT WILL EXECUTE AN INSTRUCTION
  1596					;FROM AN INDIRECTLY ADDRESSED AND INDEXED LOCATION
  1597
  1598	031322	402 00 0 00 000005 	C35400:	SETZM	5
  1599	031323	201 03 0 00 031326 		MOVEI	3,.+3
  1600	031324	254 00 0 00 031326 		JRST	.+2
  1601	031325	201 05 0 00 031330 		MOVEI	5,.+3
  1602	031326	256 00 1 03 777777 		XCT	@-1(3)
  1603	031327	254 00 0 00 031331 		JRST	.+2
  1604	031330	476 00 0 00 000005 		SETOM	5		;THIS INSTRUCTION SHOULD BE EXECUTED
  1605	031331	312 05 0 00 032145 		CAME	5,[-1,,-1]	;PASS IF 'SETOM 5' WAS EXECUTED
  1606						STOP^
  1607	031332	254 04 0 00 031333 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1608	031333	324 00 0 00 031334 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1609									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1610									;IN THE SUBTEST) TO LOOP ON ERROR^
  1611
  1612					;**********
  1613
  1614					;THIS TEST VERIFIES THAT XCT WILL EXECUTE AN INDIRECTLY ADDRESSED
  1615					;AND INDEXED INSTRUCTION
  1616
  1617	031334	402 00 0 00 000003 	C35500:	SETZM	3
  1618	031335	201 10 0 00 000003 		MOVEI	10,3
  1619	031336	254 00 0 00 031343 		JRST	.+5
  1620	031337	254 04 0 00 000000 		HALT
  1621	031340	254 04 0 00 000000 		HALT
  1622	031341	200 03 1 10 031337 		MOVE	3,@.-2(10)	;THIS INSTRUCTION SHOULD BE EXECUTED
  1623	031342	254 04 0 00 032172 		HALT	[0,,707070]
  1624	031343	256 00 0 00 031341 		XCT	.-2
  1625	031344	302 03 0 00 707070 		CAIE	3,707070	;PASS IF 'MOVE 3,@.-2(10)' WAS EXECUTED
  1626						STOP^
  1627	031345	254 04 0 00 031346 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1628	031346	324 00 0 00 031347 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1629									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1630									;IN THE SUBTEST) TO LOOP ON ERROR^
  1631
  1632					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 27
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0054

  1633					SUBTTL	TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER
  1634
  1635					;**********
  1636
  1637					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1638					;IN THIS CASE, 0,,0 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1639					;SO THAT FINAL C(AC)=0,,0.
  1640					;C(AC+1) SHOULD NOT BE AFFECTED.
  1641
  1642	031347	200 00 0 00 032146 	C35600:	MOVE	0,[0,,0]	;PRELOAD AC WITH 0,,0
  1643	031350	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1644	031351	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE 0,,0 RIGHT 3 BIT POSITIONS
  1645	031352	312 00 0 00 032146 		CAME	0,[0,,0]	;PASS IF C(AC)=0,,0
  1646						STOP^
  1647	031353	254 04 0 00 031354 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1648	031354	324 00 0 00 031355 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1649									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1650									;IN THE SUBTEST) TO LOOP ON ERROR^
  1651	031355	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1652						STOP^
  1653	031356	254 04 0 00 031357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1654	031357	324 00 0 00 031360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1655									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1656									;IN THE SUBTEST) TO LOOP ON ERROR^
  1657
  1658					;**********
  1659
  1660					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1661					;IN THIS CASE, -1,,-1 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1662					;SO THAT FINAL C(AC)=-1,,-1.
  1663					;C(AC+1) SHOULD NOT BE AFFECTED.
  1664
  1665	031360	200 00 0 00 032145 	C35700:	MOVE	0,[-1,,-1]	;PRELOAD AC WITH 0,,0
  1666	031361	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1667	031362	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE -1,,-1 RIGHT 3 BIT POSITIONS
  1668	031363	312 00 0 00 032145 		CAME	0,[-1,,-1]	;PASS IF C(AC)=-1,,-1
  1669						STOP^
  1670	031364	254 04 0 00 031365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1671	031365	324 00 0 00 031366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1672									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1673									;IN THE SUBTEST) TO LOOP ON ERROR^
  1674	031366	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1675						STOP^
  1676	031367	254 04 0 00 031370 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1677	031370	324 00 0 00 031371 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1678									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1679									;IN THE SUBTEST) TO LOOP ON ERROR^
  1680
  1681					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 28
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0055

  1682					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1683					;IN THIS CASE, 252525,,252525 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1684					;SO THAT FINAL C(AC)=525252,,525252.
  1685					;C(AC+1) SHOULD NOT BE AFFECTED.
  1686
  1687	031371	200 00 0 00 032174 	C36000:	MOVE	0,[252525,,252525] ;PRELOAD AC WITH 252525,,252525
  1688	031372	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1689	031373	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE 252525,,252525
  1690									;RIGHT 3 BIT POSITIONS
  1691	031374	312 00 0 00 032175 		CAME	0,[525252,,525252] ;PASS IF C(AC)=525252,,525252
  1692						STOP^
  1693	031375	254 04 0 00 031376 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1694	031376	324 00 0 00 031377 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1695									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1696									;IN THE SUBTEST) TO LOOP ON ERROR^
  1697	031377	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1698						STOP^
  1699	031400	254 04 0 00 031401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1700	031401	324 00 0 00 031402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1701									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1702									;IN THE SUBTEST) TO LOOP ON ERROR^
  1703
  1704					;**********
  1705
  1706					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1707					;IN THIS CASE, 525252,,525252 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1708					;SO THAT FINAL C(AC)=252525,,252525.
  1709					;C(AC+1) SHOULD NOT BE AFFECTED.
  1710
  1711	031402	200 00 0 00 032175 	C36100:	MOVE	0,[525252,,525252] ;PRELOAD AC WITH 525252,,525252
  1712	031403	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1713	031404	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE 525252,,525252
  1714									;RIGHT 3 BIT POSITIONS
  1715	031405	312 00 0 00 032174 		CAME	0,[252525,,252525] ;PASS IF C(AC)=252525,,252525
  1716						STOP^
  1717	031406	254 04 0 00 031407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1718	031407	324 00 0 00 031410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1719									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1720									;IN THE SUBTEST) TO LOOP ON ERROR^
  1721	031410	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1722						STOP^
  1723	031411	254 04 0 00 031412 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1724	031412	324 00 0 00 031413 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1725									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1726									;IN THE SUBTEST) TO LOOP ON ERROR^
  1727
  1728					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 29
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0056

  1729					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1730					;IN THIS CASE, 230703,,603700 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1731					;SO THAT FINAL C(AC)=023070,,360370.
  1732					;C(AC+1) SHOULD NOT BE AFFECTED.
  1733
  1734	031413	200 00 0 00 032176 	C36200:	MOVE	0,[230703,,603700] ;PRELOAD AC WITH 230703,,603700
  1735	031414	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1736	031415	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE 230703,,603700
  1737									;RIGHT 3 BIT POSITIONS
  1738	031416	312 00 0 00 032177 		CAME	0,[023070,,360370] ;PASS IF C(AC)=023070,,360370
  1739						STOP^
  1740	031417	254 04 0 00 031420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1741	031420	324 00 0 00 031421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1742									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1743									;IN THE SUBTEST) TO LOOP ON ERROR^
  1744	031421	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1745						STOP^
  1746	031422	254 04 0 00 031423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1747	031423	324 00 0 00 031424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1748									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1749									;IN THE SUBTEST) TO LOOP ON ERROR^
  1750
  1751					;**********
  1752
  1753					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1754					;IN THIS CASE, 007603,,607062 SHOULD BE ROTATED RIGHT 3 BIT POSITIONS
  1755					;SO THAT FINAL C(AC)=200760,,360706.
  1756					;C(AC+1) SHOULD NOT BE AFFECTED.
  1757
  1758	031424	200 00 0 00 032200 	C36300:	MOVE	0,[007603,,607062] ;PRELOAD AC WITH 007603,,607062
  1759	031425	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1760	031426	241 00 0 00 777775 		ROT	0,-3		;*ROT SHOULD ROTATE 007603,,607062
  1761									;RIGHT 3 BIT POSITIONS
  1762	031427	312 00 0 00 032201 		CAME	0,[200760,,360706] ;PASS IF C(AC)=200760,,360706
  1763						STOP^
  1764	031430	254 04 0 00 031431 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1765	031431	324 00 0 00 031432 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1766									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1767									;IN THE SUBTEST) TO LOOP ON ERROR^
  1768	031432	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1769						STOP^
  1770	031433	254 04 0 00 031434 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1771	031434	324 00 0 00 031435 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1772									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1773									;IN THE SUBTEST) TO LOOP ON ERROR^
  1774
  1775					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 30
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0057

  1776					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1777					;IN THIS CASE, 0,,0 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1778					;SO THAT FINAL C(AC)=0,,0.
  1779					;C(AC+1) SHOULD NOT BE AFFECTED.
  1780
  1781	031435	200 02 0 00 032146 	C36400:	MOVE	2,[0,,0]	;PRELOAD AC WITH 0,,0
  1782	031436	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1783	031437	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE 0,,0 LEFT 15 BIT POSITIONS
  1784	031440	312 02 0 00 032146 		CAME	2,[0,,0]	;PASS IF C(AC)=0,,0
  1785						STOP^
  1786	031441	254 04 0 00 031442 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1787	031442	324 00 0 00 031443 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1788									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1789									;IN THE SUBTEST) TO LOOP ON ERROR^
  1790	031443	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1791						STOP^
  1792	031444	254 04 0 00 031445 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1793	031445	324 00 0 00 031446 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1794									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1795									;IN THE SUBTEST) TO LOOP ON ERROR^
  1796
  1797					;**********
  1798
  1799					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1800					;IN THIS CASE, -1,,-1 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1801					;SO THAT FINAL C(AC)=-1,,-1.
  1802					;C(AC+1) SHOULD NOT BE AFFECTED.
  1803
  1804	031446	200 02 0 00 032145 	C36500:	MOVE	2,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  1805	031447	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1806	031450	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE -1,,-1 LEFT 15 BIT POSITIONS
  1807	031451	312 02 0 00 032145 		CAME	2,[-1,,-1]	;PASS IF C(AC)=-1,,-1
  1808						STOP^
  1809	031452	254 04 0 00 031453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1810	031453	324 00 0 00 031454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1811									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1812									;IN THE SUBTEST) TO LOOP ON ERROR^
  1813	031454	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1814						STOP^
  1815	031455	254 04 0 00 031456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1816	031456	324 00 0 00 031457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1817									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1818									;IN THE SUBTEST) TO LOOP ON ERROR^
  1819
  1820					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 31
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0058

  1821					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1822					;IN THIS CASE, 252525,,252525 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1823					;SO THAT FINAL C(AC)=525252,,525252.
  1824					;C(AC+1) SHOULD NOT BE AFFECTED.
  1825
  1826	031457	200 02 0 00 032174 	C36600:	MOVE	2,[252525,,252525] ;PRELOAD AC WITH 252525,,252525
  1827	031460	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1828	031461	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE 252525,,252525
  1829									;LEFT 15 BIT POSITIONS
  1830	031462	312 02 0 00 032175 		CAME	2,[525252,,525252] ;PASS IF C(AC)=525252,,525252
  1831						STOP^
  1832	031463	254 04 0 00 031464 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1833	031464	324 00 0 00 031465 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1834									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1835									;IN THE SUBTEST) TO LOOP ON ERROR^
  1836	031465	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1837						STOP^
  1838	031466	254 04 0 00 031467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1839	031467	324 00 0 00 031470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1840									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1841									;IN THE SUBTEST) TO LOOP ON ERROR^
  1842
  1843					;**********
  1844
  1845					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1846					;IN THIS CASE, 525252,,525252 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1847					;SO THAT FINAL C(AC)=252525,,252525.
  1848					;C(AC+1) SHOULD NOT BE AFFECTED.
  1849
  1850	031470	200 02 0 00 032175 	C36700:	MOVE	2,[525252,,525252] ;PRELOAD AC WITH 525252,,525252
  1851	031471	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1852	031472	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE 525252,,525252
  1853									;LEFT 15 BIT POSITIONS
  1854	031473	312 02 0 00 032174 		CAME	2,[252525,,252525] ;PASS IF C(AC)=252525,,252525
  1855						STOP^
  1856	031474	254 04 0 00 031475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1857	031475	324 00 0 00 031476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1858									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1859									;IN THE SUBTEST) TO LOOP ON ERROR^
  1860	031476	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1861						STOP^
  1862	031477	254 04 0 00 031500 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1863	031500	324 00 0 00 031501 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1864									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1865									;IN THE SUBTEST) TO LOOP ON ERROR^
  1866
  1867					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 32
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0059

  1868					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1869					;IN THIS CASE, 230703,,603700 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1870					;SO THAT FINAL C(AC)074076,,004616.
  1871					;C(AC+1) SHOULD NOT BE AFFECTED.
  1872
  1873	031501	200 02 0 00 032176 	C37000:	MOVE	2,[230703,,603700] ;PRELOAD AC WITH 230703,,603700
  1874	031502	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1875	031503	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE 230703,,603700
  1876									;LEFT 15 BIT POSITIONS
  1877	031504	312 02 0 00 032202 		CAME	2,[074076,,004616] ;PASS IF C(AC)074076,,004616
  1878						STOP^
  1879	031505	254 04 0 00 031506 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1880	031506	324 00 0 00 031507 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1882									;IN THE SUBTEST) TO LOOP ON ERROR^
  1883	031507	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1884						STOP^
  1885	031510	254 04 0 00 031511 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1886	031511	324 00 0 00 031512 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1887									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1888									;IN THE SUBTEST) TO LOOP ON ERROR^
  1889
  1890					;**********
  1891
  1892					;THIS TEST VERIFIES THAT A ROT INSTRUCTION FUNCTIONS CORRECTLY.
  1893					;IN THIS CASE, 007603,,607062 SHOULD BE ROTATED LEFT 15 BIT POSITIONS
  1894					;SO THAT FINAL C(AC)074161,,440174.
  1895					;C(AC+1) SHOULD NOT BE AFFECTED.
  1896
  1897	031512	200 02 0 00 032200 	C37100:	MOVE	2,[007603,,607062] ;PRELOAD AC WITH 007603,,607062
  1898	031513	200 03 0 00 032173 		MOVE	3,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  1899	031514	241 02 0 00 000015 		ROT	2,15		;*ROT SHOULD ROTATE 007603,,607062
  1900									;LEFT 15 BIT POSITIONS
  1901	031515	312 02 0 00 032203 		CAME	2,[074161,,440174] ;PASS IF C(AC)074161,,440174
  1902						STOP^
  1903	031516	254 04 0 00 031517 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1904	031517	324 00 0 00 031520 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1906									;IN THE SUBTEST) TO LOOP ON ERROR^
  1907	031520	312 03 0 00 032173 		CAME	3,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  1908						STOP^
  1909	031521	254 04 0 00 031522 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1910	031522	324 00 0 00 031523 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1911									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1912									;IN THE SUBTEST) TO LOOP ON ERROR^
  1913
  1914					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 33
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0060

  1915					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  1916					;IN THIS CASE, 0,,0 0,,0 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  1917					;SO THAT FINAL C(AC)=0,,0 AND FINAL C(AC+1)=0,,0
  1918
  1919	031523	200 00 0 00 032146 	C37200:	MOVE	0,[0,,0]	;PRELOAD AC WITH 0,,0
  1920	031524	200 01 0 00 032146 		MOVE	1,[0,,0]	;PRELOAD AC+1 WITH 0,,0
  1921	031525	245 00 0 00 000003 		ROTC	0,3		;*ROTC SHOULD ROTATE 0,,0 0,,0 LEFT 3 BIT POSITIONS
  1922	031526	312 00 0 00 032146 		CAME	0,[0,,0]	;PASS IF C(AC)=0,,0
  1923						STOP^
  1924	031527	254 04 0 00 031530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1925	031530	324 00 0 00 031531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1926									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1927									;IN THE SUBTEST) TO LOOP ON ERROR^
  1928	031531	312 01 0 00 032146 		CAME	1,[0,,0]	;PASS IF C(AC+1)=0,,0
  1929						STOP^
  1930	031532	254 04 0 00 031533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1931	031533	324 00 0 00 031534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1932									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1933									;IN THE SUBTEST) TO LOOP ON ERROR^
  1934
  1935					;**********
  1936
  1937					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  1938					;IN THIS CASE, -1,,-1 -1,,-1 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  1939					;SO THAT FINAL C(AC)=-1,,-1 AND FINAL C(AC+1)=-1,,-1
  1940
  1941	031534	200 00 0 00 032145 	C37300:	MOVE	0,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  1942	031535	200 01 0 00 032145 		MOVE	1,[-1,,-1]	;PRELOAD AC+1 WITH -1,,-1
  1943	031536	245 00 0 00 000003 		ROTC	0,3		;*ROTC SHOULD ROTATE -1,,-1
  1944									;-1,,-1 LEFT 3 BIT POSITIONS
  1945	031537	312 00 0 00 032145 		CAME	0,[-1,,-1]	;PASS IF C(AC)=-1,,-1
  1946						STOP^
  1947	031540	254 04 0 00 031541 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1948	031541	324 00 0 00 031542 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1949									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1950									;IN THE SUBTEST) TO LOOP ON ERROR^
  1951	031542	312 00 0 00 032145 		CAME	0,[-1,,-1]	;PASS IF C(AC+1)=-1,,-1
  1952						STOP^
  1953	031543	254 04 0 00 031544 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1954	031544	324 00 0 00 031545 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1955									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1956									;IN THE SUBTEST) TO LOOP ON ERROR^
  1957
  1958					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 34
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0061

  1959					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  1960					;IN THIS CASE, 252525,,252525 252525,,252525 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  1961					;SO THAT FINAL C(AC)=525252,,525252 AND FINAL C(AC+1)=525252,,525252
  1962
  1963	031545	200 00 0 00 032174 	C37400:	MOVE	0,[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  1964	031546	200 01 0 00 032174 		MOVE	1,[252525,,252525]	;PRELOAD AC+1 WITH 252525,,252525
  1965	031547	245 00 0 00 000003 		ROTC	0,3			;*ROTC SHOULD ROTATE 252525,,252525
  1966										;252525,,252525 LEFT 3 BIT POSITIONS
  1967	031550	312 00 0 00 032175 		CAME	0,[525252,,525252]	;PASS IF C(AC)=525252,,525252
  1968						STOP^
  1969	031551	254 04 0 00 031552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1970	031552	324 00 0 00 031553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1971									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1972									;IN THE SUBTEST) TO LOOP ON ERROR^
  1973	031553	312 01 0 00 032175 		CAME	1,[525252,,525252]	;PASS IF C(AC+1)=525252,,525252
  1974						STOP^
  1975	031554	254 04 0 00 031555 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1976	031555	324 00 0 00 031556 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1977									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1978									;IN THE SUBTEST) TO LOOP ON ERROR^
  1979
  1980					;**********
  1981
  1982					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  1983					;IN THIS CASE, 525252,,525252 525252,,525252 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  1984					;SO THAT FINAL C(AC)=252525,,252525 AND FINAL C(AC+1)=252525,,252525
  1985
  1986	031556	200 00 0 00 032175 	C37500:	MOVE	0,[525252,,525252]	;PRELOAD AC WITH 525252,,525252
  1987	031557	200 01 0 00 032175 		MOVE	1,[525252,,525252]	;PRELOAD AC+1 WITH 525252,,525252
  1988	031560	245 00 0 00 000003 		ROTC	0,3			;*ROTC SHOULD ROTATE 525252,,525252
  1989										;525252,,525252 LEFT 3 BIT POSITIONS
  1990	031561	312 00 0 00 032174 		CAME	0,[252525,,252525]	;PASS IF C(AC)=252525,,252525
  1991						STOP^
  1992	031562	254 04 0 00 031563 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1993	031563	324 00 0 00 031564 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1995									;IN THE SUBTEST) TO LOOP ON ERROR^
  1996	031564	312 01 0 00 032174 		CAME	1,[252525,,252525]	;PASS IF C(AC+1)=252525,,252525
  1997						STOP^
  1998	031565	254 04 0 00 031566 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1999	031566	324 00 0 00 031567 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2000									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2001									;IN THE SUBTEST) TO LOOP ON ERROR^
  2002
  2003					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 35
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0062

  2004					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2005					;IN THIS CASE, 230703,,603700 770037,,600377 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  2006					;SO THAT FINAL C(AC)=307036,,37007 AND FINAL C(AC+1)=700376,,003772
  2007
  2008	031567	200 00 0 00 032176 	C37600:	MOVE	0,[230703,,603700]	;PRELOAD AC WITH 230703,,603700
  2009	031570	200 01 0 00 032204 		MOVE	1,[770037,,600377]	;PRELOAD AC+1 WITH 770037,,600377
  2010	031571	245 00 0 00 000003 		ROTC	0,3			;*ROTC SHOULD ROTATE 230703,,603700
  2011										;770037,,600377 LEFT 3 BIT POSITIONS
  2012	031572	312 00 0 00 032205 		CAME	0,[307036,,037007]	;PASS IF C(AC)=307036,,37007
  2013						STOP^
  2014	031573	254 04 0 00 031574 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2015	031574	324 00 0 00 031575 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2017									;IN THE SUBTEST) TO LOOP ON ERROR^
  2018	031575	312 01 0 00 032206 		CAME	1,[700376,,003772]	;PASS IF C(AC+1)=700376,,003772
  2019						STOP^
  2020	031576	254 04 0 00 031577 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2021	031577	324 00 0 00 031600 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2022									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2023									;IN THE SUBTEST) TO LOOP ON ERROR^
  2024
  2025					;**********
  2026
  2027					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2028					;IN THIS CASE, 776003,,760077 007603,,607062 SHOULD BE ROTATED LEFT 3 BIT POSITIONS
  2029					;SO THAT FINAL C(AC)=760037,,600770 AND FINAL C(AC+1)=076036,,070627
  2030
  2031	031600	200 00 0 00 032207 	C37700:	MOVE	0,[776003,,760077]	;PRELOAD AC WITH 776003,,760077
  2032	031601	200 01 0 00 032200 		MOVE	1,[007603,,607062]	;PRELOAD AC+1 WITH 007603,,607062
  2033	031602	245 00 0 00 000003 		ROTC	0,3			;*ROTC SHOULD ROTATE 776003,,760077
  2034										;007603,,607062 LEFT 3 BIT POSITIONS
  2035	031603	312 00 0 00 032210 		CAME	0,[760037,,600770]	;PASS IF C(AC)=076036,,070627
  2036						STOP^
  2037	031604	254 04 0 00 031605 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2038	031605	324 00 0 00 031606 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2039									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2040									;IN THE SUBTEST) TO LOOP ON ERROR^
  2041	031606	312 01 0 00 032211 		CAME	1,[076036,,070627]	;PASS IF C(AC+1)=760037,,600770
  2042						STOP^
  2043	031607	254 04 0 00 031610 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2044	031610	324 00 0 00 031611 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2045									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2046									;IN THE SUBTEST) TO LOOP ON ERROR^
  2047
  2048					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 36
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0063

  2049					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2050					;IN THIS CASE, 0,,0 0,,0 SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2051					;SO THAT FINAL C(AC)=0,,0 AND FINAL C(AC+1)=0,,0
  2052
  2053	031611	200 00 0 00 032146 	C40000:	MOVE	0,[0,,0]	;PRELOAD AC WITH 0,,0
  2054	031612	200 01 0 00 032146 		MOVE	1,[0,,0]	;PRELOAD AC+1 WITH 0,,0
  2055	031613	245 00 0 00 000007 		ROTC	0,7		;*ROTC SHOULD ROTATE 0,,0 0,,0 LEFT 7 BIT POSITIONS
  2056	031614	312 00 0 00 032146 		CAME	0,[0,,0]	;PASS IF C(AC)=0,,0
  2057						STOP^
  2058	031615	254 04 0 00 031616 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2059	031616	324 00 0 00 031617 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2060									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2061									;IN THE SUBTEST) TO LOOP ON ERROR^
  2062	031617	312 01 0 00 032146 		CAME	1,[0,,0]	;PASS IF C(AC+1)=0,,0
  2063						STOP^
  2064	031620	254 04 0 00 031621 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2065	031621	324 00 0 00 031622 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2066									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2067									;IN THE SUBTEST) TO LOOP ON ERROR^
  2068
  2069					;**********
  2070
  2071					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2072					;IN THIS CASE, -1,,-1 -1,,-1  SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2073					;SO THAT FINAL C(AC)=-1,,-1 AND FINAL C(AC+1)=-1,,-1
  2074
  2075	031622	200 00 0 00 032145 	C40100:	MOVE	0,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  2076	031623	200 01 0 00 032145 		MOVE	1,[-1,,-1]	;PRELOAD AC+1 WITH -1,,-1
  2077	031624	245 00 0 00 000007 		ROTC	0,7		;*ROTC SHOULD ROTATE -1,,-1
  2078									;-1,,-1 LEFT 7 BIT POSITIONS
  2079	031625	312 00 0 00 032145 		CAME	0,[-1,,-1]	;PASS IF C(AC)=-1,,-1
  2080						STOP^
  2081	031626	254 04 0 00 031627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2082	031627	324 00 0 00 031630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2083									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2084									;IN THE SUBTEST) TO LOOP ON ERROR^
  2085	031630	312 01 0 00 032145 		CAME	1,[-1,,-1]	;PASS IF C(AC+1)=-1,,-1
  2086						STOP^
  2087	031631	254 04 0 00 031632 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2088	031632	324 00 0 00 031633 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2089									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2090									;IN THE SUBTEST) TO LOOP ON ERROR^
  2091
  2092					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 37
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0064

  2093					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2094					;IN THIS CASE, 252525,,252525 252525,,252525 SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2095					;SO THAT FINAL C(AC)=525252,,525252 AND FINAL C(AC+1)=525252,,525252
  2096
  2097	031633	200 00 0 00 032174 	C40200:	MOVE	0,[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  2098	031634	200 01 0 00 032174 		MOVE	1,[252525,,252525]	;PRELOAD AC+1 WITH 252525,,252525
  2099	031635	245 00 0 00 000007 		ROTC	0,7			;*ROTC SHOULD ROTATE 252525,,252525
  2100										;252525,,252525 LEFT 7 BIT POSITIONS
  2101	031636	312 00 0 00 032175 		CAME	0,[525252,,525252]	;PASS IF C(AC)=525252,,525252
  2102						STOP^
  2103	031637	254 04 0 00 031640 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2104	031640	324 00 0 00 031641 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2105									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2106									;IN THE SUBTEST) TO LOOP ON ERROR^
  2107	031641	312 01 0 00 032175 		CAME	1,[525252,,525252]	;PASS IF C(AC+1)=525252,,525252
  2108						STOP^
  2109	031642	254 04 0 00 031643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2110	031643	324 00 0 00 031644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2111									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2112									;IN THE SUBTEST) TO LOOP ON ERROR^
  2113
  2114					;**********
  2115
  2116					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2117					;IN THIS CASE, 525252,,525252 525252,,525252 SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2118					;SO THAT FINAL C(AC)=252525,,252525 AND FINAL C(AC+1)=252525,,252525 
  2119
  2120	031644	200 00 0 00 032175 	C40300:	MOVE	0,[525252,,525252]	;PRELOAD AC WITH 525252,,525252
  2121	031645	200 01 0 00 032175 		MOVE	1,[525252,,525252]	;PRELOAD AC+1 WITH 525252,,525252
  2122	031646	245 00 0 00 000007 		ROTC	0,7			;*ROTC SHOULD ROTATE 525252,,525252
  2123										;525252,,525252 LEFT 7 BIT POSITIONS
  2124	031647	312 00 0 00 032174 		CAME	0,[252525,,252525]	;PASS IF C(AC)=252525,,252525
  2125						STOP^
  2126	031650	254 04 0 00 031651 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2127	031651	324 00 0 00 031652 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2128									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2129									;IN THE SUBTEST) TO LOOP ON ERROR^
  2130	031652	312 01 0 00 032174 		CAME	1,[252525,,252525]	;PASS IF C(AC+1)=252525,,252525
  2131						STOP^
  2132	031653	254 04 0 00 031654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2133	031654	324 00 0 00 031655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2135									;IN THE SUBTEST) TO LOOP ON ERROR^
  2136
  2137					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 38
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0065

  2138					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2139					;IN THIS CASE, 230703,,603700 770037,,600377 SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2140					;SO THAT FINAL C(AC)=160740,,760176 AND FINAL C(AC+1)=007740,,077646
  2141
  2142	031655	200 00 0 00 032176 	C40400:	MOVE	0,[230703,,603700]	;PRELOAD AC WITH 230703,,603700
  2143	031656	200 01 0 00 032204 		MOVE	1,[770037,,600377]	;PRELOAD AC+1 WITH 770037,,600377
  2144	031657	245 00 0 00 000007 		ROTC	0,7			;*ROTC SHOULD ROTATE 230703,,603700
  2145										;770037,,600377 LEFT 7 BIT POSITIONS
  2146	031660	312 00 0 00 032212 		CAME	0,[160740,,760176]	;PASS IF C(AC)=160740,,760176
  2147						STOP^
  2148	031661	254 04 0 00 031662 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2149	031662	324 00 0 00 031663 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2150									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2151									;IN THE SUBTEST) TO LOOP ON ERROR^
  2152	031663	312 01 0 00 032213 		CAME	1,[007740,,077646]	;PASS IF C(AC+1)=007740,,077646
  2153						STOP^
  2154	031664	254 04 0 00 031665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2155	031665	324 00 0 00 031666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2156									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2157									;IN THE SUBTEST) TO LOOP ON ERROR^
  2158
  2159					;**********
  2160
  2161					;THIS TEST VERIFIES THAT A ROTC INSTRUCTION FUNCTIONS CORRECTLY.
  2162					;IN THIS CASE, 776003,,760077 007603,,607063 SHOULD BE ROTATED LEFT 7 BIT POSITIONS
  2163					;SO THAT FINAL C(AC)=400774,,017610 AND FINAL C(AC+1)=740741,,614577
  2164
  2165	031666	200 00 0 00 032207 	C40500:	MOVE	0,[776003,,760077]	;PRELOAD AC WITH 776003,,760077
  2166	031667	200 01 0 00 032200 		MOVE	1,[007603,,607062]	;PRELOAD AC+1 WITH 007603,,607062
  2167	031670	245 00 0 00 000007 		ROTC	0,7			;*ROTC SHOULD ROTATE 776003,,760077
  2168										;007603,,607062 LEFT 7 BIT POSITIONS
  2169	031671	312 00 0 00 032214 		CAME	0,[400774,,017601]	;PASS IF C(AC)=400774,,017601
  2170						STOP^
  2171	031672	254 04 0 00 031673 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2172	031673	324 00 0 00 031674 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2173									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2174									;IN THE SUBTEST) TO LOOP ON ERROR^
  2175	031674	312 01 0 00 032215 		CAME	1,[740741,,614577]	;PASS IF C(AC+1)=740741,,614577
  2176						STOP^
  2177	031675	254 04 0 00 031676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2178	031676	324 00 0 00 031677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2179									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2180									;IN THE SUBTEST) TO LOOP ON ERROR^
  2181
  2182					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 39
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0066

  2183					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2184					;IN THIS CASE, 0,,0 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2185					;SO THAT FINAL C(AC)=0,,0.
  2186					;C(AC+1) SHOULD NOT BE AFFECTED
  2187
  2188	031677	200 00 0 00 032146 	C40600:	MOVE	0,[0,,0]	;PRELOAD AC WITH 0,,0
  2189	031700	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  2190	031701	242 00 0 00 777745 		LSH	0,-33		;*LSH SHOULD LOGICALLY SHIFT 0,,0
  2191									;RIGHT 33 OCTAL BIT POSITIONS
  2192	031702	312 00 0 00 032146 		CAME	0,[0,,0]	;PASS IF C(AC)=0,,0
  2193						STOP^
  2194	031703	254 04 0 00 031704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2195	031704	324 00 0 00 031705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2196									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2197									;IN THE SUBTEST) TO LOOP ON ERROR^
  2198	031705	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  2199						STOP^
  2200	031706	254 04 0 00 031707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2201	031707	324 00 0 00 031710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2202									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2203									;IN THE SUBTEST) TO LOOP ON ERROR^
  2204
  2205					;**********
  2206
  2207					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2208					;IN -1,,-1 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2209					;SO THAT FINAL C(AC)=0,,777.
  2210					;C(AC+1) SHOULD NOT BE AFFECTED
  2211
  2212	031710	200 00 0 00 032145 	C40700:	MOVE	0,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  2213	031711	200 01 0 00 032173 		MOVE	1,[172737,,405060] ;PRELOAD AC+1 WITH 172737,,405060
  2214	031712	242 00 0 00 777745 		LSH	0,-33		;*LSH SHOULD LOGICALLY SHIFT -1,,-1
  2215									;RIGHT 33 OCTAL BIT POSITIONS
  2216	031713	312 00 0 00 032216 		CAME	0,[0,777]	;PASS IF C(AC)=0,,777
  2217						STOP^
  2218	031714	254 04 0 00 031715 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2219	031715	324 00 0 00 031716 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2220									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2221									;IN THE SUBTEST) TO LOOP ON ERROR^
  2222	031716	312 01 0 00 032173 		CAME	1,[172737,,405060] ;PASS IF C(AC+1) NOT AFFECTED
  2223						STOP^
  2224	031717	254 04 0 00 031720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2225	031720	324 00 0 00 031721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2226									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2227									;IN THE SUBTEST) TO LOOP ON ERROR^
  2228
  2229					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 40
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0067

  2230					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2231					;IN 252525,,252525 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2232					;SO THAT FINAL C(AC)=0,,252.
  2233					;C(AC+1) SHOULD NOT BE AFFECTED
  2234
  2235	031721	200 00 0 00 032174 	C41000:	MOVE	0,[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  2236	031722	200 01 0 00 032173 		MOVE	1,[172737,,405060] 	;PRELOAD AC+1 WITH 172737,,405060
  2237	031723	242 00 0 00 777745 		LSH	0,-33			;*LSH SHOULD LOGICALLY SHIFT 252525,,252525
  2238										;RIGHT 33 OCTAL BIT POSITIONS
  2239	031724	312 00 0 00 032217 		CAME	0,[0,,252]		;PASS IF C(AC)=0,,252
  2240						STOP^
  2241	031725	254 04 0 00 031726 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2242	031726	324 00 0 00 031727 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2243									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2244									;IN THE SUBTEST) TO LOOP ON ERROR^
  2245	031727	312 01 0 00 032173 		CAME	1,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2246						STOP^
  2247	031730	254 04 0 00 031731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2248	031731	324 00 0 00 031732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2249									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2250									;IN THE SUBTEST) TO LOOP ON ERROR^
  2251
  2252					;**********
  2253
  2254					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2255					;IN THIS CASE, 525252,,525252 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2256					;SO THAT FINAL C(AC)=0,,525.
  2257					;C(AC+1) SHOULD NOT BE AFFECTED
  2258
  2259	031732	200 00 0 00 032175 	C41100:	MOVE	0,[525252,,525252]	;PRELOAD AC WITH 525252,,525252
  2260	031733	200 01 0 00 032173 		MOVE	1,[172737,,405060]	;PRELOAD AC+1 WITH 172737,,405060
  2261	031734	242 00 0 00 777745 		LSH	0,-33			;*LSH SHOULD LOGICALLY SHIFT 525252,,525252
  2262										;RIGHT 33 OCTAL BIT POSITIONS
  2263	031735	312 00 0 00 032220 		CAME	0,[0,,525]		;PASS IF C(AC)=0,,525
  2264						STOP^
  2265	031736	254 04 0 00 031737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2266	031737	324 00 0 00 031740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2267									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2268									;IN THE SUBTEST) TO LOOP ON ERROR^
  2269	031740	312 01 0 00 032173 		CAME	1,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2270						STOP^
  2271	031741	254 04 0 00 031742 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2272	031742	324 00 0 00 031743 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2273									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2274									;IN THE SUBTEST) TO LOOP ON ERROR^
  2275
  2276					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 41
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0068

  2277					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2278					;IN THIS CASE, 230703,,603700 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2279					;SO THAT FINAL C(AC)=0,,230.
  2280					;C(AC+1) SHOULD NOT BE AFFECTED
  2281
  2282	031743	200 00 0 00 032176 	C41200:	MOVE	0,[230703,,603700]	;PRELOAD AC WITH 230703,,603700
  2283	031744	200 01 0 00 032173 		MOVE	1,[172737,,405060]	;PRELOAD AC+1 WITH 172737,,405060
  2284	031745	242 00 0 00 777745 		LSH	0,-33			;*LSH SHOULD LOGICALLY SHIFT 230703,,603700
  2285										;RIGHT 33 OCTAL BIT POSITIONS
  2286	031746	312 00 0 00 032221 		CAME	0,[0,,230]		;PASS IF C(AC)=230703,,603700
  2287						STOP^
  2288	031747	254 04 0 00 031750 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2289	031750	324 00 0 00 031751 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2290									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2291									;IN THE SUBTEST) TO LOOP ON ERROR^
  2292	031751	312 01 0 00 032173 		CAME	1,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2293						STOP^
  2294	031752	254 04 0 00 031753 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2295	031753	324 00 0 00 031754 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2296									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2297									;IN THE SUBTEST) TO LOOP ON ERROR^
  2298
  2299					;**********
  2300
  2301					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2302					;IN THIS CASE, 007603,,607062 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2303					;SO THAT FINAL C(AC)=0,,7.
  2304					;C(AC+1) SHOULD NOT BE AFFECTED
  2305
  2306	031754	200 00 0 00 032200 	C41300:	MOVE	0,[007603,,607062]	;PRELOAD AC WITH 007603,,607062
  2307	031755	200 01 0 00 032173 		MOVE	1,[172737,,405060]	;PRELOAD AC+1 WITH 172737,,405060
  2308	031756	242 00 0 00 777745 		LSH	0,-33			;*LSH SHOULD LOGICALLY SHIFT 007603,,6070062
  2309										;RIGHT 33 OCTAL BIT POSITIONS
  2310	031757	312 00 0 00 032171 		CAME	0,[0,,7]		;PASS IF C(AC)=0,,7
  2311						STOP^
  2312	031760	254 04 0 00 031761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2313	031761	324 00 0 00 031762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2314									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2315									;IN THE SUBTEST) TO LOOP ON ERROR^
  2316	031762	312 01 0 00 032173 		CAME	1,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2317						STOP^
  2318	031763	254 04 0 00 031764 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2319	031764	324 00 0 00 031765 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2320									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2321									;IN THE SUBTEST) TO LOOP ON ERROR^
  2322
  2323					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 42
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0069

  2324					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2325					;IN THIS CASE, 0,,0 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2326					;SO THAT FINAL C(AC)=0,,0.
  2327					;C(AC+1) SHOULD NOT BE AFFECTED
  2328
  2329	031765	200 01 0 00 032146 	C41400:	MOVE	1,[0,,0]	;PRELOAD AC WITH 0,,0
  2330	031766	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2331	031767	242 01 0 00 777751 		LSH	1,-27		;*LSH SHOULD LOGICALLY SHIFT 0,,0
  2332									;RIGHT 27 OCTAL BIT POSITIONS
  2333	031770	312 01 0 00 032146 		CAME	1,[0,,0]	;PASS IF C(AC)=0,,0
  2334						STOP^
  2335	031771	254 04 0 00 031772 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2336	031772	324 00 0 00 031773 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2337									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2338									;IN THE SUBTEST) TO LOOP ON ERROR^
  2339	031773	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2340						STOP^
  2341	031774	254 04 0 00 031775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2342	031775	324 00 0 00 031776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2343									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2344									;IN THE SUBTEST) TO LOOP ON ERROR^
  2345
  2346					;**********
  2347
  2348					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2349					;IN THIS CASE, -1,,-1 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2350					;SO THAT FINAL C(AC)=0,,17777.
  2351					;C(AC+1) SHOULD NOT BE AFFECTED
  2352
  2353	031776	200 01 0 00 032145 	C41500:	MOVE	1,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  2354	031777	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2355	032000	242 01 0 00 777751 		LSH	1,-27		;*LSH SHOULD LOGICALLY SHIFT -1,,-1
  2356									;RIGHT 27 OCTAL BIT POSITIONS
  2357	032001	312 01 0 00 032222 		CAME	1,[0,,17777]	;PASS IF C(AC)=0,17777
  2358						STOP^
  2359	032002	254 04 0 00 032003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2360	032003	324 00 0 00 032004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2362									;IN THE SUBTEST) TO LOOP ON ERROR^
  2363	032004	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2364						STOP^
  2365	032005	254 04 0 00 032006 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2366	032006	324 00 0 00 032007 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2367									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2368									;IN THE SUBTEST) TO LOOP ON ERROR^
  2369
  2370					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 43
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0070

  2371					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2372					;IN THIS CASE, 252525,,252525 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2373					;SO THAT FINAL C(AC)=0,,5252.
  2374					;C(AC+1) SHOULD NOT BE AFFECTED
  2375
  2376	032007	200 01 0 00 032174 	C41600:	MOVE	1,[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  2377	032010	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2378	032011	242 01 0 00 777751 		LSH	1,-27			;*LSH SHOULD LOGICALLY SHIFT 252525,,252525
  2379										;RIGHT 27 OCTAL BIT POSITIONS
  2380	032012	312 01 0 00 032223 		CAME	1,[0,,5252]		;PASS IF C(AC)=0,,5252
  2381						STOP^
  2382	032013	254 04 0 00 032014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2383	032014	324 00 0 00 032015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2385									;IN THE SUBTEST) TO LOOP ON ERROR^
  2386	032015	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2387						STOP^
  2388	032016	254 04 0 00 032017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2389	032017	324 00 0 00 032020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2391									;IN THE SUBTEST) TO LOOP ON ERROR^
  2392
  2393					;**********
  2394
  2395					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2396					;IN THIS CASE, 525252,,525252 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2397					;SO THAT FINAL C(AC)=0,,12525.
  2398					;C(AC+1) SHOULD NOT BE AFFECTED
  2399
  2400	032020	200 01 0 00 032175 	C41700:	MOVE	1,[525252,,525252]	;PRELOAD AC WITH 525252,,525252
  2401	032021	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2402	032022	242 01 0 00 777751 		LSH	1,-27			;*LSH SHOULD LOGICALLY SHIFT 525252,,525252
  2403										;RIGHT 27 OCTAL BIT POSITIONS
  2404	032023	312 01 0 00 032224 		CAME	1,[0,,12525]		;PASS IF C(AC)=0,,12525
  2405						STOP^
  2406	032024	254 04 0 00 032025 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2407	032025	324 00 0 00 032026 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2408									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2409									;IN THE SUBTEST) TO LOOP ON ERROR^
  2410	032026	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2411						STOP^
  2412	032027	254 04 0 00 032030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2413	032030	324 00 0 00 032031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2414									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2415									;IN THE SUBTEST) TO LOOP ON ERROR^
  2416
  2417					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 44
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0071

  2418					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2419					;IN THIS CASE, 230703,602700 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2420					;SO THAT FINAL C(AC)=0,,4616.
  2421					;C(AC+1) SHOULD NOT BE AFFECTED
  2422
  2423	032031	200 01 0 00 032176 	C42000:	MOVE	1,[230703,,603700]	;PRELOAD AC WITH 230703,603700
  2424	032032	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2425	032033	242 01 0 00 777751 		LSH	1,-27			;*LSH SHOULD LOGICALLY SHIFT 230703,,603700
  2426										;RIGHT 27 OCTAL BIT POSITIONS
  2427	032034	312 01 0 00 032225 		CAME	1,[0,,4616]		;PASS IF C(AC)=0,,4616
  2428						STOP^
  2429	032035	254 04 0 00 032036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2430	032036	324 00 0 00 032037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2431									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2432									;IN THE SUBTEST) TO LOOP ON ERROR^
  2433	032037	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2434						STOP^
  2435	032040	254 04 0 00 032041 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2436	032041	324 00 0 00 032042 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2437									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2438									;IN THE SUBTEST) TO LOOP ON ERROR^
  2439
  2440					;**********
  2441
  2442					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2443					;IN THIS CASE, 007603,,607062 SHOULD BE LOGICALLY SHIFTED RIGHT 27 OCTAL BIT POSITIONS
  2444					;SO THAT FINAL C(AC)=0,,174.
  2445					;C(AC+1) SHOULD NOT BE AFFECTED
  2446
  2447	032042	200 01 0 00 032200 	C42100:	MOVE	1,[007603,,607062]	;PRELOAD AC WITH 007603,,607062
  2448	032043	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2449	032044	242 01 0 00 777751 		LSH	1,-27			;*LSH SHOULD LOGICALLY SHIFT 007603,,607062
  2450										;RIGHT 27 OCTAL BIT POSITIONS
  2451	032045	312 01 0 00 032226 		CAME	1,[0,,174]		;PASS IF C(AC)=0,,174
  2452						STOP^
  2453	032046	254 04 0 00 032047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2454	032047	324 00 0 00 032050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2455									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2456									;IN THE SUBTEST) TO LOOP ON ERROR^
  2457	032050	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2458						STOP^
  2459	032051	254 04 0 00 032052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2460	032052	324 00 0 00 032053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2461									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2462									;IN THE SUBTEST) TO LOOP ON ERROR^
  2463
  2464					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 45
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0072

  2465					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2466					;IN THIS CASE, 0,,0 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2467					;SO THAT FINAL C(AC)=0,,0.
  2468					;C(AC+1) SHOULD NOT BE AFFECTED
  2469
  2470	032053	200 01 0 00 032146 	C42200:	MOVE	1,[0,0]		;PRELOAD AC WITH 0,,0
  2471	032054	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2472	032055	242 01 0 00 777745 		LSH	1,-33		;*LSH SHOULD LOGICALLY SHIFT 0,,0
  2473									;RIGHT 33 OCTAL BIT POSITIONS
  2474	032056	312 01 0 00 032146 		CAME	1,[0,,0]	;PASS IF C(AC)=0,,0
  2475						STOP^
  2476	032057	254 04 0 00 032060 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2477	032060	324 00 0 00 032061 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2478									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2479									;IN THE SUBTEST) TO LOOP ON ERROR^
  2480	032061	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2481						STOP^
  2482	032062	254 04 0 00 032063 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2483	032063	324 00 0 00 032064 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2484									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2485									;IN THE SUBTEST) TO LOOP ON ERROR^
  2486
  2487					;**********
  2488
  2489					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2490					;IN THIS CASE, -1,,-1 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2491					;SO THAT FINAL C(AC)=0,,777.
  2492					;C(AC+1) SHOULD NOT BE AFFECTED
  2493
  2494	032064	200 01 0 00 032145 	C42300:	MOVE	1,[-1,,-1]	;PRELOAD AC WITH -1,,-1
  2495	032065	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2496	032066	242 01 0 00 777745 		LSH	1,-33		;*LSH SHOULD LOGICALLY SHIFT -1,,-1
  2497									;RIGHT 33 OCTAL BIT POSITIONS
  2498	032067	312 01 0 00 032216 		CAME	1,[0,,777]	;PASS IF C(AC)=0,,777
  2499						STOP^
  2500	032070	254 04 0 00 032071 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2501	032071	324 00 0 00 032072 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2502									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2503									;IN THE SUBTEST) TO LOOP ON ERROR^
  2504	032072	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2505						STOP^
  2506	032073	254 04 0 00 032074 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2507	032074	324 00 0 00 032075 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2508									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2509									;IN THE SUBTEST) TO LOOP ON ERROR^
  2510
  2511					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 46
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0073

  2512					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2513					;IN THIS CASE, 252525,,252525 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2514					;SO THAT FINAL C(AC)=0,,252.
  2515					;C(AC+1) SHOULD NOT BE AFFECTED
  2516
  2517	032075	200 01 0 00 032174 	C42400:	MOVE	1,[252525,,252525]	;PRELOAD AC WITH 252525,,252525
  2518	032076	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2519	032077	242 01 0 00 777745 		LSH	1,-33			;*LSH SHOULD LOGICALLY SHIFT 252525,,252525
  2520										;RIGHT 33 OCTAL BIT POSITIONS
  2521	032100	312 01 0 00 032217 		CAME	1,[0,,252]		;PASS IF C(AC)=0,,252
  2522						STOP^
  2523	032101	254 04 0 00 032102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2524	032102	324 00 0 00 032103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2526									;IN THE SUBTEST) TO LOOP ON ERROR^
  2527	032103	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2528						STOP^
  2529	032104	254 04 0 00 032105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2530	032105	324 00 0 00 032106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2531									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2532									;IN THE SUBTEST) TO LOOP ON ERROR^
  2533
  2534					;**********
  2535
  2536					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2537					;IN THIS CASE, 525252,,525252 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2538					;SO THAT FINAL C(AC)=0,,525.
  2539					;C(AC+1) SHOULD NOT BE AFFECTED
  2540
  2541	032106	200 01 0 00 032175 	C42500:	MOVE	1,[525252,,525252]	;PRELOAD AC WITH 525252,,525252
  2542	032107	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2543	032110	242 01 0 00 777745 		LSH	1,-33			;*LSH SHOULD LOGICALLY SHIFT 525252,,525252
  2544										;RIGHT 33 OCTAL BIT POSITIONS
  2545	032111	312 01 0 00 032220 		CAME	1,[0,,525]		;PASS IF C(AC)=0,525
  2546						STOP^
  2547	032112	254 04 0 00 032113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2548	032113	324 00 0 00 032114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2550									;IN THE SUBTEST) TO LOOP ON ERROR^
  2551	032114	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2552						STOP^
  2553	032115	254 04 0 00 032116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2554	032116	324 00 0 00 032117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2556									;IN THE SUBTEST) TO LOOP ON ERROR^
  2557
  2558					;**********
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 47
DSKAG1	MAC	28-Mar-78 14:22		TEST OF SHIFT/ROTATE INSTRUCTIONS USED IN THE ERROR HANDLER                        SEQ 0074

  2559					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2560					;IN THIS CASE, 230703,,603700 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2561					;SO THAT FINAL C(AC)=0,,230.
  2562					;C(AC+1) SHOULD NOT BE AFFECTED
  2563
  2564	032117	200 01 0 00 032176 	C42600:	MOVE	1,[230703,,603700]	;PRELOAD AC WITH 230703,,603700
  2565	032120	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2566	032121	242 01 0 00 777745 		LSH	1,-33			;*LSH SHOULD LOGICALLY SHIFT 230703,,603700
  2567										;RIGHT 33 OCTAL BIT POSITIONS
  2568	032122	312 01 0 00 032221 		CAME	1,[0,,230]		;PASS IF C(AC)=0,,230
  2569						STOP^
  2570	032123	254 04 0 00 032124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2571	032124	324 00 0 00 032125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2572									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2573									;IN THE SUBTEST) TO LOOP ON ERROR^
  2574	032125	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2575						STOP^
  2576	032126	254 04 0 00 032127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2577	032127	324 00 0 00 032130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2578									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2579									;IN THE SUBTEST) TO LOOP ON ERROR^
  2580
  2581					;**********
  2582
  2583					;THIS TEST VERIFIES THAT THE LSH INSTRUCTION FUNCTIONS CORRECTLY
  2584					;IN THIS CASE, 007603,,607062 SHOULD BE LOGICALLY SHIFTED RIGHT 33 OCTAL BIT POSITIONS
  2585					;SO THAT FINAL C(AC)=0,,7.
  2586					;C(AC+1) SHOULD NOT BE AFFECTED
  2587
  2588	032130	200 01 0 00 032200 	C42700:	MOVE	1,[007603,,607062]	;PRELOAD AC WITH 007603,,607062
  2589	032131	200 02 0 00 032173 		MOVE	2,[172737,,405060]	;PRELOAD C(AC+1) WITH 172737,,405060
  2590	032132	242 01 0 00 777745 		LSH	1,-33			;*LSH SHOULD LOGICALLY SHIFT 007603,,607062
  2591										;RIGHT 33 OCTAL BIT POSITIONS
  2592	032133	312 01 0 00 032171 		CAME	1,[0,,7]		;PASS IF C(AC)=0,,7
  2593						STOP^
  2594	032134	254 04 0 00 032135 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2595	032135	324 00 0 00 032136 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2596									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2597									;IN THE SUBTEST) TO LOOP ON ERROR^
  2598	032136	312 02 0 00 032173 		CAME	2,[172737,,405060]	;PASS IF C(AC+1) NOT AFFECTED
  2599						STOP^
  2600	032137	254 04 0 00 032140 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2601	032140	324 00 0 00 032141 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2602									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2603									;IN THE SUBTEST) TO LOOP ON ERROR^
  2604
  2605					;**********
  2606	032141	402 00 0 00 032230 	ENDIT:	SETZM	TNUMB#
  2607	032142	254 00 0 00 030057 		JRST	BEGEND
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0075

  2608					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  2609
  2610					;PROGRAM LITERALS
  2611
  2612						XLIST
  2613					IFNDEF	$LPAPER,<LIST>
  2614	032143					LIT
  2615	032143	000001	000001
  2616	032144	000016	541320
  2617	032145	777777	777777
  2618	032146	000000	000000
  2619	032147	000001	000000
  2620	032150	000001	000002
  2621	032151	000002	000002
  2622	032152	000001	000017
  2623	032153	312 00 0 00 000001 
  2624	032154	256 00 0 00 032153 
  2625	032155	256 00 0 00 032154 
  2626	032156	254 00 0 00 031223 
  2627	032157	265 03 0 00 031230 
  2628	032160	256 00 0 00 032157 
  2629	032161	256 00 0 00 032160 
  2630	032162	270 06 0 04 000001 
  2631	032163	331 01 0 00 000002 
  2632	032164	331 03 0 00 000006 
  2633	032165	777776	000005
  2634	032166	253 03 0 00 031274 
  2635	032167	777777	000006
  2636	032170	253 03 0 00 031302 
  2637	032171	000000	000007
  2638	032172	000000	707070
  2639	032173	172737	405060
  2640	032174	252525	252525
  2641	032175	525252	525252
  2642	032176	230703	603700
  2643	032177	023070	360370
  2644	032200	007603	607062
  2645	032201	200760	360706
  2646	032202	074076	004616
  2647	032203	074161	440174
  2648	032204	770037	600377
  2649	032205	307036	037007
  2650	032206	700376	003772
  2651	032207	776003	760077
  2652	032210	760037	600770
  2653	032211	076036	070627
  2654	032212	160740	760176
  2655	032213	007740	077646
  2656	032214	400774	017601
  2657	032215	740741	614577
  2658	032216	000000	000777
  2659	032217	000000	000252
  2660	032220	000000	000525
  2661	032221	000000	000230
  2662	032222	000000	017777
DSKAG DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (7) 0,1	MACRO %53(1020) 14:29 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0076

  2663	032223	000000	005252
  2664	032224	000000	012525
  2665	032225	000000	004616
  2666	032226	000000	000174
  2667						LIST
  2668	032227	000000	000000		ENDSLD:	0
  2669
  2670					IFDEF	DEBUG,<
  2671					PATCH:	BLOCK DEBUG		;PATCHING AREA
  2672					>
  2673
  2674					;PROGRAM VARIABLES
  2675	032230					VAR
  2676
  2677					IFDEF	PGMEND,<
  2678	032231	000000	000000		END:	0
  2679			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 032232
CPU TIME USED 00:09.171

20P CORE USED

ABORT	    92#
AC0	   687#                                                                                                            SEQ 0077
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
BEGEND	   438#	  2607
BEGIN	   307	   308	   369#	   708	   771	  2679
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#	  1120	  1126
C27200	   814#
C27300	   830#
C27400	   844#
C27500	   860#
C27600	   875#
C27700	   892#
C30000	   908#
C30100	   926#
C30101	   942#
C30200	   959#
C30300	   978#
C30400	   998#
C30500	  1019#
C30600	  1036#
C31000	  1053#
C31100	  1067#
C31400	  1087#
C31500	  1101#
C31501	  1118#
C31502	  1139#
C31600	  1157#
C31700	  1172#
C32300	  1187#
C32400	  1202#
C32500	  1219#
C32600	  1237#
C33100	  1254#
C33300	  1272#
C33310	  1282#
C33400	  1295#
C33401	  1312#
C33500	  1330#
C33600	  1346#
C33700	  1361#
C33701	  1379#
C34000	  1397#
C34100	  1410#
C34200	  1422#
C34300	  1438#
C34400	  1456#
C34500	  1473#
C34600	  1490#                                                                                                            SEQ 0078
C34610	  1499#
C34700	  1512#
C34710	  1519#
C35000	  1532#
C35100	  1549#
C35200	  1566#
C35300	  1583#
C35400	  1598#
C35500	  1617#
C35600	  1642#
C35700	  1665#
C36000	  1687#
C36100	  1711#
C36200	  1734#
C36300	  1758#
C36400	  1781#
C36500	  1804#
C36600	  1826#
C36700	  1850#
C37000	  1873#
C37100	  1897#
C37200	  1919#
C37300	  1941#
C37400	  1963#
C37500	  1986#
C37600	  2008#
C37700	  2031#
C40000	  2053#
C40100	  2075#
C40200	  2097#
C40300	  2120#
C40400	  2142#
C40500	  2165#
C40600	  2188#
C40700	  2212#
C41000	  2235#
C41100	  2259#
C41200	  2282#
C41300	  2306#
C41400	  2329#
C41500	  2353#
C41600	  2376#
C41700	  2400#
C42000	  2423#
C42100	  2447#
C42200	  2470#
C42300	  2494#
C42400	  2517#
C42500	  2541#
C42600	  2564#
C42700	  2588#
CCA	   356#
CHAIN	   112#                                                                                                            SEQ 0079
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#	   961	   980	  1000	  1069	  1074
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  2670
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  2678#
ENDFIX	   684#
ENDIT	  2606#
ENDSLD	  2668#
ERMORE	   458#
EROLD	   318                                                                                                             SEQ 0080
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#                                                                                                            SEQ 0081
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#                                                                                                            SEQ 0082
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#                                                                                                            SEQ 0083
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  2677
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#                                                                                                            SEQ 0084
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#                                                                                    SEQ 0085
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  2606#	  2606
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#                                                                                                            SEQ 0086
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	  2613
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#                                                                                                            SEQ 0087
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0088
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   818	   834	   848	   864	   879	   896
	   912	   931	   946	   967	   989	  1008	  1024	  1038	  1042	  1057	  1076	  1089	  1092	  1103
	  1107	  1128	  1143	  1161	  1177	  1192	  1208	  1225	  1243	  1260	  1278	  1284	  1300	  1316
	  1335	  1351	  1367	  1384	  1400	  1413	  1424	  1425	  1427	  1440	  1441	  1445	  1462	  1479
	  1495	  1502	  1515	  1522	  1534	  1535	  1538	  1553	  1573	  1589	  1607	  1620	  1621	  1623
	  1627	  1647	  1653	  1670	  1676	  1693	  1699	  1717	  1723	  1740	  1746	  1764	  1770	  1786
	  1792	  1809	  1815	  1832	  1838	  1856	  1862	  1879	  1885	  1903	  1909	  1924	  1930	  1947
	  1953	  1969	  1975	  1992	  1998	  2014	  2020	  2037	  2043	  2058	  2064	  2081	  2087	  2103
	  2109	  2126	  2132	  2148	  2154	  2171	  2177	  2194	  2200	  2218	  2224	  2241	  2247	  2265
	  2271	  2288	  2294	  2312	  2318	  2335	  2341	  2359	  2365	  2382	  2388	  2406	  2412	  2429
	  2435	  2453	  2459	  2476	  2482	  2500	  2506	  2523	  2529	  2547	  2553	  2570	  2576	  2594
	  2600
JEN	   160#
JRSTF	   159#
MAPADR	   295#
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#                                                                                                            SEQ 0089
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#                                                                                                            SEQ 0090
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#	   959	   978	   998	  1067	  1118
SIXBTZ	   261#
STOP	    48#	   817	   833	   847	   863	   878	   895	   911	   930	   945	   966	   988	  1007	  1023
	  1041	  1056	  1075	  1091	  1106	  1127	  1142	  1160	  1176	  1191	  1207	  1224	  1242	  1259
	  1277	  1283	  1299	  1315	  1334	  1350	  1366	  1383	  1399	  1412	  1426	  1444	  1461	  1478
	  1494	  1501	  1514	  1521	  1537	  1552	  1572	  1587	  1606	  1626	  1646	  1652	  1669	  1675
	  1692	  1698	  1716	  1722	  1739	  1745	  1763	  1769	  1785	  1791	  1808	  1814	  1831	  1837
	  1855	  1861	  1878	  1884	  1902	  1908	  1923	  1929	  1946	  1952	  1968	  1974	  1991	  1997
	  2013	  2019	  2036	  2042	  2057	  2063	  2080	  2086	  2102	  2108	  2125	  2131	  2147	  2153
	  2170	  2176	  2193	  2199	  2217	  2223	  2240	  2246	  2264	  2270	  2287	  2293	  2311	  2317
	  2334	  2340	  2358	  2364	  2381	  2387	  2405	  2411	  2428	  2434	  2452	  2458	  2475	  2481
	  2499	  2505	  2522	  2528	  2546	  2552	  2569	  2575	  2593	  2599
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#                                                                                                            SEQ 0091
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#
WRTIM	   356#
WRUBR	   356#

ADD	  1476
ANDI	  1039	  1104                                                                                                     SEQ 0092
AOBJN	  1533	  1550
AOS	   444	   757
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAIE	  1105	  1223	  1241	  1282	  1314	  1382	  1477	  1585	  1625
CAIN	   877	  1040
CAM	   986
CAME	   846	   894	   929	   944	  1006	  1055	  1090	  1141	  1175	  1258	  1276	  1349	  1398	  1411
	  1458	  1536	  1551	  1571	  1605	  1645	  1651	  1668	  1674	  1691	  1697	  1715	  1721	  1738
	  1744	  1762	  1768	  1784	  1790	  1807	  1813	  1830	  1836	  1854	  1860	  1877	  1883	  1901
	  1907	  1922	  1928	  1945	  1951	  1967	  1973	  1990	  1996	  2012	  2018	  2035	  2041	  2056
	  2062	  2079	  2085	  2101	  2107	  2124	  2130	  2146	  2152	  2169	  2175	  2192	  2198	  2216
	  2222	  2239	  2245	  2263	  2269	  2286	  2292	  2310	  2316	  2333	  2339	  2357	  2363	  2380
	  2386	  2404	  2410	  2427	  2433	  2451	  2457	  2474	  2480	  2498	  2504	  2521	  2527	  2545
	  2551	  2568	  2574	  2592	  2598
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  2679
HRLZI	  1312	  1379
IFDEF	   356	   407	   408	   409	   410	  2670	  2677
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  2613
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717	   962
	   981	  1001	  1070	  1121
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	   963	   982	  1002	  1071	  1122	  1422
	  1460	  1493	  1567	  1584	  1600	  1603	  1619	  2607
JSP	   166	   743	   776	  1125	  1439
JUMPA	   819	   835	   849	   865	   880	   897	   913	   932	   947	   968	   990	  1009	  1025	  1043
	  1058	  1077	  1093	  1108	  1129	  1144	  1162	  1178	  1193	  1209	  1226	  1244	  1261	  1279
	  1285	  1301	  1317	  1336	  1352	  1368	  1385	  1401	  1414	  1428	  1446	  1463	  1480	  1496
	  1503	  1516	  1523	  1539	  1554	  1574	  1590	  1608	  1628	  1648	  1654	  1671	  1677	  1694
	  1700	  1718	  1724	  1741	  1747	  1765	  1771	  1787	  1793	  1810	  1816	  1833	  1839	  1857
	  1863	  1880	  1886	  1904	  1910	  1925	  1931	  1948	  1954	  1970	  1976	  1993	  1999	  2015
	  2021	  2038	  2044	  2059	  2065	  2082	  2088	  2104	  2110	  2127	  2133	  2149	  2155	  2172
	  2178	  2195	  2201	  2219	  2225	  2242	  2248	  2266	  2272	  2289	  2295	  2313	  2319	  2336
	  2342	  2360	  2366	  2383	  2389	  2407	  2413	  2430	  2436	  2454	  2460	  2477	  2483	  2501
	  2507	  2524	  2530	  2548	  2554	  2571	  2577	  2595	  2601
LALL	    10
LIST	     9	   318	   356	   489	  2613	  2667
LIT	  2614
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
LSH	  2190	  2214	  2237	  2261	  2284	  2308	  2331	  2355	  2378	  2402	  2425	  2449	  2472	  2496
	  2519	  2543	  2566	  2590
MOVE	  1005	  1157	  1172	  1187	  1202	  1219	  1238	  1254	  1272	  1330	  1346	  1361	  1532	  1549
	  1622	  1642	  1643	  1665	  1666	  1687	  1688	  1711	  1712	  1734	  1735	  1758	  1759	  1781
	  1782	  1804	  1805	  1826	  1827	  1850	  1851	  1873	  1874	  1897	  1898	  1919	  1920	  1941
	  1942	  1963	  1964	  1986	  1987	  2008	  2009	  2031	  2032	  2053	  2054	  2075	  2076	  2097
	  2098	  2120	  2121	  2142	  2143	  2165	  2166	  2188	  2189	  2212	  2213	  2235	  2236	  2259
	  2260	  2282	  2283	  2306	  2307	  2329	  2330	  2353	  2354	  2376	  2377	  2400	  2401	  2423
	  2424	  2447	  2448	  2470	  2471	  2494	  2495	  2517	  2518	  2541	  2542	  2564	  2565	  2588     SEQ 0093
	  2589
MOVEI	   926	   942	  1019	  1087	  1101	  1139	  1173	  1203	  1220	  1239	  1331	  1347	  1362	  1380
	  1473	  1474	  1475	  1583	  1599	  1601	  1618
MOVSI	   961	   980	  1000	  1069	  1120	  1295
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
POP	   156	  1158	  1174	  1189	  1205	  1222	  1240	  1257	  1275	  1297	  1313
POPJ	   154	  1332	  1348	  1364	  1381
PUSH	   155	   815	   831	   845	   861	   876	   893	   909	   928	   943
PUSHJ	   153	   965	   984	  1004	  1021	  1037	  1054	  1073	  1088	  1102	  1124	  1140
ROT	  1644	  1667	  1689	  1713	  1736	  1760	  1783	  1806	  1828	  1852	  1875	  1899
ROTC	  1921	  1943	  1965	  1988	  2010	  2033	  2055	  2077	  2099	  2122	  2144	  2167
SETOB	  1397	  1410
SETOM	   745	   752	   778	  1255	  1274	  1457	  1512	  1569	  1604
SETZ	   814	   844	   927	   964	  1020	  1053	  1123	  1296
SETZB	   830	   860	   875	   892	   983	  1003	  1036	  1072	  1456	  1566
SETZM	   742	   747	   775	   780	   908	  1188	  1204	  1221	  1237	  1256	  1273	  1438	  1490	  1598
	  1617	  2606
SIXBIT	    77	    78	   574	   575	   583	   584
SKIPA	   816	  1365
SKIPE	   748	   762	   768	   832	   862	   910	   987	  1022	  1159	  1190	  1206	  1298	  1499
SKIPL	   783	  1491	  1513	  1519
SKIPN	   746	   751	   759	   764	   770	   779	   781
SOS	   758
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	   952	  1149	  1322	  1390	  1559
	  1633	  2608
TITLE	    14
TLNE	   744	   777	  1126
TLNN	  1074
TRNE	  1443
TRZ	  1442
TTCALL	   784
VAR	  2675
XCT	  1398	  1411	  1422	  1439	  1458	  1476	  1491	  1513	  1533	  1550	  1570	  1586	  1602	  1624
XLIST	     8	   317	   355	   488	  2612
XWD	   846	  1090	  1157	  1172	  1187	  1202	  1219	  1238	  1254	  1272	  1330	  1346	  1361

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0094
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0095

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0096

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  SETZ 	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0097

*030662  PUSH	2,030664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000  C(E)= 254200 030665 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 254200 030665 
----------

*030663  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

*030665  JUMPA	0,030666

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030666 
----------

*030666  SETZB	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030667  PUSH	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 254200 030665  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0098

*030670  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030672  JUMPA	0,030673

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030673 
----------

*030673  SETZ 	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030674  PUSH	2,030675

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000  C(E)= 312100 032143 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 312100 032143 
----------

*030675  CAME	2,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*030677  JUMPA	0,030700

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030700 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0099

*030700  SETZB	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030701  PUSH	2,032144

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 312100 032143  C(E)= 000016 541320 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 000016 541320 
----------

*030702  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030704  JUMPA	0,030705

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030705 
----------

*030705  SETZB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000016 541320  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0100

*030706  PUSH	2,030707

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000  C(E)= 306000 030707 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 306000 030707 
----------

*030707  CAIN	0,030707

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030707 
----------

*030711  JUMPA	0,030712

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030712 
----------

*030712  SETZB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 306000 030707  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030713  PUSH	2,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 777777 777777 
----------

*030714  CAME	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0101

*030716  JUMPA	0,030717

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030717 
----------

*030717  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000001 
FINAL
 C(E)= 000000 000000 
----------

*030720  PUSH	2,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 000000 000000 
----------

*030721  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030723  JUMPA	0,030724

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030724 
----------

*030724  MOVEI	2,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0102

*030725  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030726  PUSH	2,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777 C(C(ACR+1))= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000001 000000 C(C(ACR))= 777777 777777 
----------

*030727  CAME	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030731  JUMPA	0,030732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030732 
----------

*030732  MOVEI	2,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*030733  PUSH	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777 C(C(ACR+1))= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000001 000000 C(C(ACR))= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0103

*030734  CAME	2,032147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*030736  JUMPA	0,030737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030737 
----------

*030737  MOVSI	1,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030740  JFCL	17,030741

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030741 
----------

*030741  JRST	2,030742(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030742 
----------

*030742  SETZ 	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0104

*030743  PUSHJ	0,030745

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 200000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 200000 030744 
----------

*030745  JUMPA	0,030746

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 030746 
----------

*030746  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 030744     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030747  JFCL	17,030750

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030750 
----------

*030750  JRST	2,030751(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030751 
----------

*030751  SETZB	1,030753

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0105

*030752  PUSHJ	0,030755

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001 C(C(ACR+1))= 000001 000000 
FINAL
C(AC)= 000002 000002 C(C(ACR))= 200000 030753 
----------

*030755  SKIPE	0,030753

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000002 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000002 000002 
----------

*030757  JUMPA	0,030760

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000002 000002     E= 000000 030760 
----------

*030760  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*030761  JFCL	17,030762

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 030762 
----------

*030762  JRST	2,030763(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 030763 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0106

*030763  SETZB	0,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000002 000002  C(E)= 200000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030764  PUSHJ	0,030765

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 200000 030765 
----------

*030765  MOVE 	2,030765

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 030753  C(E)= 200100 030765 
FINAL
C(AC)= 200100 030765 
----------

*030766  CAME	2,030765

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200100 030765  C(E)= 200100 030765 
----------

*030770  JUMPA	0,030771

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 030771 
----------

*030771  MOVEI	2,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200100 030765     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0107

*030772  SETZ 	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000 
----------

*030773  PUSHJ	2,030774

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000001 C(C(ACR+1))= 000000 000001 
FINAL
C(AC)= 200000 030774 C(C(ACR))= 332000 000000 
----------

*030774  SKIPE	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030776  JUMPA	0,030777

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 030777 
----------

*030777  SETZB	0,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 030765 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0108

*031000  PUSHJ	0,031002

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 200000 031001 
----------

*031002  ANDI	1,777777

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 031001     E= 000000 777777 
FINAL
C(AC)= 000000 031001 
----------

*031003  CAIN	1,031002

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 031001     E= 000000 031002 
----------

*031005  JUMPA	0,031006

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 031006 
----------

*031006  SETZ 	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000 
----------

*031007  PUSHJ	0,031010

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 031001 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 200000 031010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0109

*031010  CAME	0,032143

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*031012  JUMPA	0,031013

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 031013 
----------

*031013  MOVSI	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 031010     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*031014  JFCL	17,031015

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 031015 
----------

*031015  JRST	2,031016(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 031016 
----------

*031016  SETZB	0,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001  C(E)= 200000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0110

*031017  PUSHJ	0,031020

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 000000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 200000 031020 
----------

*031020  TLNN	1,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 031020     E= 000000 200000 
FINAL
C(AC)= 200000 031020 
----------

*031022  JUMPA	0,031023

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 031023 
----------

*031023  MOVEI	1,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 031020     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031024  PUSHJ	1,031026

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000001 C(C(ACR+1))= 200000 030774 
FINAL
C(AC)= 000001 000002 C(C(ACR))= 200000 031025 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0111

*031026  CAME	1,032150

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000002  C(E)= 000001 000002 
----------

*031030  JUMPA	0,031031

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 031031 
----------

*031031  MOVEI	1,000001

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000002     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031032  PUSHJ	1,031034

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000001 C(C(ACR+1))= 200000 031025 
FINAL
C(AC)= 000001 000002 C(C(ACR))= 200000 031033 
----------

*031034  ANDI	2,777777

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 031033     E= 000000 777777 
FINAL
C(AC)= 000000 031033 
----------

*031035  CAIE	2,031033

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 031033     E= 000000 031033 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0112

*031037  JUMPA	0,031040

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000001     E= 000000 031040 
----------

*031040  MOVSI	1,020000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000001 000002     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031041  JFCL	17,031042

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 031042 
----------

*031042  JRST	2,031043(1)

FLAGS - INT/FINAL   000000 020000 
INITIAL
    E= 000000 031043 
----------

*031043  SETZ 	0,000000

FLAGS - INT/FINAL   020000 020000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000 
----------

*031044  PUSHJ	0,031045

FLAGS - INT/FINAL   020000 000000 
INITIAL
C(AC)= 000000 000000 C(C(ACR+1))= 020000 000000 
FINAL
C(AC)= 000001 000001 C(C(ACR))= 020000 031045 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0113

*031045  JSP	0,031046

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031046 
FINAL
C(AC)= 000000 031046 
----------

*031046  TLNE	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031046     E= 000000 020000 
FINAL
C(AC)= 000000 031046 
----------

*031050  JUMPA	0,031051

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031046     E= 000000 031051 
----------

*031051  MOVEI	2,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031033     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031052  PUSHJ	2,031053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777 C(C(ACR+1))= 000000 000000 
FINAL
C(AC)= 000001 000000 C(C(ACR))= 000000 031053 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0114

*031053  CAME	2,032147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*031055  JUMPA	0,031056

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031053     E= 000000 031056 
----------

*031056  MOVE 	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031053  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*031057  POP	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001 C(C(ACR))= 020000 031045  C(E)= 020000 031045 
FINAL
C(AC)= 000000 000000  C(E)= 020000 031045 
----------

*031060  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031062  JUMPA	0,031063

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031063 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0115

*031063  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

*031064  MOVEI	2,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*031065  POP	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 000000 000005  C(E)= 000000 000005 
FINAL
C(AC)= 000001 000001  C(E)= 000000 000005 
----------

*031066  CAME	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*031070  JUMPA	0,031071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031071 
----------

*031071  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0116

*031072  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 000000 000005 
FINAL
 C(E)= 000000 000000 
----------

*031073  POP	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001  C(E)= 000000 000000 
----------

*031074  SKIPE	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001 
----------

*031076  JUMPA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031077 
----------

*031077  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0117

*031100  MOVEI	2,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*031101  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 020000 031045 
FINAL
 C(E)= 000000 000000 
----------

*031102  POP	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 000000 000017  C(E)= 000000 000017 
FINAL
C(AC)= 000001 000001  C(E)= 000000 000017 
----------

*031103  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001 
----------

*031105  JUMPA	0,031106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031106 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0118

*031106  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

*031107  MOVEI	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031110  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*031111  POP	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 000000 000003  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001  C(E)= 000000 000003 
----------

*031112  CAIE	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0119

*031114  JUMPA	0,031115

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031115 
----------

*031115  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000000 000003 
FINAL
 C(E)= 000000 000000 
----------

*031116  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

*031117  MOVEI	2,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*031120  POP	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 000000 000017  C(E)= 000000 000017 
FINAL
C(AC)= 000001 000001  C(E)= 000000 000017 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0120

*031121  CAIE	2,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
----------

*031123  JUMPA	0,031124

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031124 
----------

*031124  MOVE 	0,032151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000002 000002 
FINAL
C(AC)= 000002 000002 
----------

*031125  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 000000 000017 
FINAL
 C(E)= 777777 777777 
----------

*031126  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 000000 000003 
FINAL
 C(E)= 000000 000000 
----------

*031127  POP	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002 C(C(ACR))= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000001  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0121

*031130  CAME	3,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031132  JUMPA	0,031133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 031133 
----------

*031133  MOVE 	0,032152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000017 
FINAL
C(AC)= 000001 000017 
----------

*031134  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000017  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*031135  SETOM	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000017  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*031136  POP	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000017 C(C(ACR))= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000016  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0122

*031137  CAME	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031141  JUMPA	0,031142

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 031142 
----------

*031142  CAIE	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*031144  JUMPA	0,031145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 031145 
----------

*031145  MOVSI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031146  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016  C(E)= 000000 000016 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0123

*031147  POP	1,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000 C(C(ACR))= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777776 777777  C(E)= 000000 000000 
----------

*031150  SKIPE	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031152  JUMPA	0,031153

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031153 
----------

*031153  HRLZI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

*031154  POP	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000 C(C(ACR))= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0124

*031155  CAIE	2,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031157  JUMPA	0,031160

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031160 
----------

*031160  MOVE 	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*031161  MOVEI	1,031164

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777     E= 000000 031164 
FINAL
C(AC)= 000000 031164 
----------

*031162  POPJ	0,031164

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001 C(C(ACR))= 000000 031164 
FINAL
C(AC)= 000000 000000 
----------

*031164  JUMPA	0,031165

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031165 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0125

*031165  MOVE 	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*031166  MOVEI	1,031170

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031164     E= 000000 031170 
FINAL
C(AC)= 000000 031170 
----------

*031167  POPJ	0,031170

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001 C(C(ACR))= 000000 031170 
FINAL
C(AC)= 000000 000000 
----------

*031170  CAME	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031172  JUMPA	0,031173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031173 
----------

*031173  MOVE 	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0126

*031174  MOVEI	1,031176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031170     E= 000000 031176 
FINAL
C(AC)= 000000 031176 
----------

*031175  POPJ	0,031177

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001 C(C(ACR))= 000000 031176 
FINAL
C(AC)= 000000 000000 
----------

*031176  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031200  JUMPA	0,031201

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031201 
----------

*031201  HRLZI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0127

*031202  MOVEI	0,031204

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031204 
FINAL
C(AC)= 000000 031204 
----------

*031203  POPJ	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000 C(C(ACR))= 000000 031204 
FINAL
C(AC)= 000000 777777 
----------

*031204  CAIE	2,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031206  JUMPA	0,031207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031204     E= 000000 031207 
----------

*031207  SETOB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031204  C(E)= 000000 031176 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031210  XCT	0,032153

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032153 
FINAL
 C(E)= 312000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0128

*031210  CAME	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031212  JUMPA	0,031213

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031213 
----------

*031213  SETOB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031214  XCT	0,032155

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032155 
FINAL
 C(E)= 256000 032154 
----------

*031214  XCT	0,032154

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032154 
FINAL
 C(E)= 256000 032153 
----------

*031214  XCT	0,032153

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032153 
FINAL
 C(E)= 312000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0129

*031214  CAME	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031216  JUMPA	0,031217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031217 
----------

*031217  XCT	0,032156

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032156 
FINAL
 C(E)= 254000 031223 
----------

*031217  JRST	0,031223

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031223 
----------

*031223  JUMPA	0,031224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031224 
----------

*031224  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0130

*031225  XCT	0,032161

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032161 
FINAL
 C(E)= 256000 032160 
----------

*031225  XCT	0,032160

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032160 
FINAL
 C(E)= 256000 032157 
----------

*031225  XCT	0,032157

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032157 
FINAL
 C(E)= 265140 031230 
----------

*031225  JSP	3,031230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031230 
FINAL
C(AC)= 000000 031226 
----------

*031230  TRZ 	3,031226

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031226     E= 000000 031226 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0131

*031231  TRNE	3,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031233  JUMPA	0,031234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031234 
----------

*031234  SETZB	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031235  SETOM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 777777 777777 
----------

*031236  XCT	0,032153

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032153 
FINAL
 C(E)= 312000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0132

*031236  CAME	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*031237  JRST	0,031241

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031241 
----------

*031241  JUMPA	0,031242

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031242 
----------

*031242  MOVEI	4,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031243  MOVEI	11,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*031244  MOVEI	6,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0133

*031245  XCT	0,032162

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032162 
FINAL
 C(E)= 270304 000001 
----------

*031245  ADD 	6,000001(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003  C(E)= 000000 000013 
FINAL
C(AC)= 000000 000016 
----------

*031246  CAIE	6,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*031250  JUMPA	0,031251

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031251 
----------

*031251  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
 C(E)= 000000 000000 
----------

*031252  XCT	0,032163

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032163 
FINAL
 C(E)= 331040 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0134

*031252  SKIPL	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031253  JRST	0,031255

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031255 
----------

*031255  JUMPA	0,031256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031256 
----------

*031256  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031260  JUMPA	0,031261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031261 
----------

*031261  SETOM	0,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000016 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0135

*031262  XCT	0,032164

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032164 
FINAL
 C(E)= 331140 000006 
----------

*031262  SKIPL	3,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031264  JUMPA	0,031265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031265 
----------

*031265  SKIPL	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031267  JUMPA	0,031270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031270 
----------

*031270  MOVE 	3,032165

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777776 000005 
FINAL
C(AC)= 777776 000005 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0136

*031271  XCT	0,032166

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032166 
FINAL
 C(E)= 253140 031274 
----------

*031271  AOBJN	3,031274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 000005     E= 000000 031274 
FINAL
C(AC)= 777777 000006 
----------

*031274  CAME	3,032167

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000006  C(E)= 777777 000006 
----------

*031276  JUMPA	0,031277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031277 
----------

*031277  MOVE 	3,032167

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000006  C(E)= 777777 000006 
FINAL
C(AC)= 777777 000006 
----------

*031300  XCT	0,032170

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032170 
FINAL
 C(E)= 253140 031302 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0137

*031300  AOBJN	3,031302

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000006     E= 000000 031302 
FINAL
C(AC)= 000000 000007 
----------

*031301  CAME	3,032171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000007 
----------

*031303  JUMPA	0,031304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031304 
----------

*031304  SETZB	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031305  JRST	0,031310

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031310 
----------

*031310  XCT	0,@031306

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031307 
FINAL
 C(E)= 476000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0138

*031310  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*031311  CAME	2,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031313  JUMPA	0,031314

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031314 
----------

*031314  MOVEI	4,031315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 031315 
FINAL
C(AC)= 000000 031315 
----------

*031315  JRST	0,031317

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031317 
----------

*031317  XCT	0,000001(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031316 
FINAL
 C(E)= 302200 031315 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0139

*031317  CAIE	4,031315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 031315     E= 000000 031315 
----------

*031321  JUMPA	0,031322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031322 
----------

*031322  SETZM	0,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*031323  MOVEI	3,031326

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 031326 
FINAL
C(AC)= 000000 031326 
----------

*031324  JRST	0,031326

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031326 
----------

*031326  XCT	0,@777777(3)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031330 
FINAL
 C(E)= 476000 000005 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0140

*031326  SETOM	0,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*031327  JRST	0,031331

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031331 
----------

*031331  CAME	5,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031333  JUMPA	0,031334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031334 
----------

*031334  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 031326 
FINAL
 C(E)= 000000 000000 
----------

*031335  MOVEI	10,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0141

*031336  JRST	0,031343

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031343 
----------

*031343  XCT	0,031341

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 031341 
FINAL
 C(E)= 200170 031337 
----------

*031343  MOVE 	3,@031337(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 707070 
FINAL
C(AC)= 000000 707070 
----------

*031344  CAIE	3,707070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 707070     E= 000000 707070 
----------

*031346  JUMPA	0,031347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031347 
----------

*031347  MOVE 	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0142

*031350  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031351  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777775 
FINAL
C(AC)= 000000 000000 
----------

*031352  CAME	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031354  JUMPA	0,031355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031355 
----------

*031355  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031357  JUMPA	0,031360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031360 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0143

*031360  MOVE 	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031361  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031362  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777775 
FINAL
C(AC)= 777777 777777 
----------

*031363  CAME	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031365  JUMPA	0,031366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031366 
----------

*031366  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0144

*031370  JUMPA	0,031371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031371 
----------

*031371  MOVE 	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031372  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031373  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 777775 
FINAL
C(AC)= 525252 525252 
----------

*031374  CAME	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031376  JUMPA	0,031377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031377 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0145

*031377  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031401  JUMPA	0,031402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031402 
----------

*031402  MOVE 	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031403  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031404  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 777775 
FINAL
C(AC)= 252525 252525 
----------

*031405  CAME	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0146

*031407  JUMPA	0,031410

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031410 
----------

*031410  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031412  JUMPA	0,031413

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031413 
----------

*031413  MOVE 	0,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*031414  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031415  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700     E= 000000 777775 
FINAL
C(AC)= 023070 360370 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0147

*031416  CAME	0,032177

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023070 360370  C(E)= 023070 360370 
----------

*031420  JUMPA	0,031421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023070 360370     E= 000000 031421 
----------

*031421  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031423  JUMPA	0,031424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023070 360370     E= 000000 031424 
----------

*031424  MOVE 	0,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023070 360370  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

*031425  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0148

*031426  ROT	0,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007603 607062     E= 000000 777775 
FINAL
C(AC)= 200760 360706 
----------

*031427  CAME	0,032201

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706  C(E)= 200760 360706 
----------

*031431  JUMPA	0,031432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031432 
----------

*031432  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031434  JUMPA	0,031435

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031435 
----------

*031435  MOVE 	2,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0149

*031436  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 707070  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031437  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000015 
FINAL
C(AC)= 000000 000000 
----------

*031440  CAME	2,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031442  JUMPA	0,031443

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031443 
----------

*031443  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031445  JUMPA	0,031446

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031446 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0150

*031446  MOVE 	2,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031447  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031450  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000015 
FINAL
C(AC)= 777777 777777 
----------

*031451  CAME	2,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031453  JUMPA	0,031454

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031454 
----------

*031454  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0151

*031456  JUMPA	0,031457

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031457 
----------

*031457  MOVE 	2,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031460  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031461  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 000015 
FINAL
C(AC)= 525252 525252 
----------

*031462  CAME	2,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031464  JUMPA	0,031465

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031465 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0152

*031465  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031467  JUMPA	0,031470

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031470 
----------

*031470  MOVE 	2,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031471  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031472  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 000015 
FINAL
C(AC)= 252525 252525 
----------

*031473  CAME	2,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0153

*031475  JUMPA	0,031476

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031476 
----------

*031476  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031500  JUMPA	0,031501

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031501 
----------

*031501  MOVE 	2,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*031502  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031503  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700     E= 000000 000015 
FINAL
C(AC)= 074076 004616 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0154

*031504  CAME	2,032202

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 074076 004616  C(E)= 074076 004616 
----------

*031506  JUMPA	0,031507

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031507 
----------

*031507  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031511  JUMPA	0,031512

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031512 
----------

*031512  MOVE 	2,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 074076 004616  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

*031513  MOVE 	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0155

*031514  ROT	2,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007603 607062     E= 000000 000015 
FINAL
C(AC)= 074161 440174 
----------

*031515  CAME	2,032203

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 074161 440174  C(E)= 074161 440174 
----------

*031517  JUMPA	0,031520

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031520 
----------

*031520  CAME	3,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031522  JUMPA	0,031523

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706     E= 000000 031523 
----------

*031523  MOVE 	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200760 360706  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0156

*031524  MOVE 	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031525  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(AC+1)= 000000 000000     E= 000000 000003 
FINAL
C(AC)= 000000 000000 C(AC+1)= 000000 000000 
----------

*031526  CAME	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031530  JUMPA	0,031531

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031531 
----------

*031531  CAME	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031533  JUMPA	0,031534

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031534 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0157

*031534  MOVE 	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031535  MOVE 	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031536  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777 C(AC+1)= 777777 777777     E= 000000 000003 
FINAL
C(AC)= 777777 777777 C(AC+1)= 777777 777777 
----------

*031537  CAME	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031541  JUMPA	0,031542

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031542 
----------

*031542  CAME	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0158

*031544  JUMPA	0,031545

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031545 
----------

*031545  MOVE 	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031546  MOVE 	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031547  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525 C(AC+1)= 252525 252525     E= 000000 000003 
FINAL
C(AC)= 525252 525252 C(AC+1)= 525252 525252 
----------

*031550  CAME	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031552  JUMPA	0,031553

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031553 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0159

*031553  CAME	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031555  JUMPA	0,031556

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031556 
----------

*031556  MOVE 	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031557  MOVE 	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031560  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252 C(AC+1)= 525252 525252     E= 000000 000003 
FINAL
C(AC)= 252525 252525 C(AC+1)= 252525 252525 
----------

*031561  CAME	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0160

*031563  JUMPA	0,031564

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031564 
----------

*031564  CAME	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*031566  JUMPA	0,031567

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031567 
----------

*031567  MOVE 	0,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*031570  MOVE 	1,032204

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 770037 600377 
FINAL
C(AC)= 770037 600377 
----------

*031571  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700 C(AC+1)= 770037 600377     E= 000000 000003 
FINAL
C(AC)= 307036 037007 C(AC+1)= 700376 003772 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0161

*031572  CAME	0,032205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 307036 037007  C(E)= 307036 037007 
----------

*031574  JUMPA	0,031575

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 307036 037007     E= 000000 031575 
----------

*031575  CAME	1,032206

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 700376 003772  C(E)= 700376 003772 
----------

*031577  JUMPA	0,031600

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 307036 037007     E= 000000 031600 
----------

*031600  MOVE 	0,032207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 307036 037007  C(E)= 776003 760077 
FINAL
C(AC)= 776003 760077 
----------

*031601  MOVE 	1,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 700376 003772  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0162

*031602  ROTC	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776003 760077 C(AC+1)= 007603 607062     E= 000000 000003 
FINAL
C(AC)= 760037 600770 C(AC+1)= 076036 070627 
----------

*031603  CAME	0,032210

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 760037 600770  C(E)= 760037 600770 
----------

*031605  JUMPA	0,031606

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 760037 600770     E= 000000 031606 
----------

*031606  CAME	1,032211

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076036 070627  C(E)= 076036 070627 
----------

*031610  JUMPA	0,031611

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 760037 600770     E= 000000 031611 
----------

*031611  MOVE 	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 760037 600770  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0163

*031612  MOVE 	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076036 070627  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031613  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000 C(AC+1)= 000000 000000     E= 000000 000007 
FINAL
C(AC)= 000000 000000 C(AC+1)= 000000 000000 
----------

*031614  CAME	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031616  JUMPA	0,031617

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031617 
----------

*031617  CAME	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031621  JUMPA	0,031622

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031622 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0164

*031622  MOVE 	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031623  MOVE 	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031624  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777 C(AC+1)= 777777 777777     E= 000000 000007 
FINAL
C(AC)= 777777 777777 C(AC+1)= 777777 777777 
----------

*031625  CAME	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031627  JUMPA	0,031630

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031630 
----------

*031630  CAME	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0165

*031632  JUMPA	0,031633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031633 
----------

*031633  MOVE 	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031634  MOVE 	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031635  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525 C(AC+1)= 252525 252525     E= 000000 000007 
FINAL
C(AC)= 525252 525252 C(AC+1)= 525252 525252 
----------

*031636  CAME	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031640  JUMPA	0,031641

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031641 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0166

*031641  CAME	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
----------

*031643  JUMPA	0,031644

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 031644 
----------

*031644  MOVE 	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031645  MOVE 	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031646  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252 C(AC+1)= 525252 525252     E= 000000 000007 
FINAL
C(AC)= 252525 252525 C(AC+1)= 252525 252525 
----------

*031647  CAME	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0167

*031651  JUMPA	0,031652

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031652 
----------

*031652  CAME	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*031654  JUMPA	0,031655

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 031655 
----------

*031655  MOVE 	0,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*031656  MOVE 	1,032204

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 770037 600377 
FINAL
C(AC)= 770037 600377 
----------

*031657  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700 C(AC+1)= 770037 600377     E= 000000 000007 
FINAL
C(AC)= 160740 760176 C(AC+1)= 007740 077646 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0168

*031660  CAME	0,032212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 160740 760176  C(E)= 160740 760176 
----------

*031662  JUMPA	0,031663

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 160740 760176     E= 000000 031663 
----------

*031663  CAME	1,032213

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007740 077646  C(E)= 007740 077646 
----------

*031665  JUMPA	0,031666

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 160740 760176     E= 000000 031666 
----------

*031666  MOVE 	0,032207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 160740 760176  C(E)= 776003 760077 
FINAL
C(AC)= 776003 760077 
----------

*031667  MOVE 	1,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007740 077646  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0169

*031670  ROTC	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776003 760077 C(AC+1)= 007603 607062     E= 000000 000007 
FINAL
C(AC)= 400774 017601 C(AC+1)= 740741 614577 
----------

*031671  CAME	0,032214

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400774 017601  C(E)= 400774 017601 
----------

*031673  JUMPA	0,031674

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400774 017601     E= 000000 031674 
----------

*031674  CAME	1,032215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 740741 614577  C(E)= 740741 614577 
----------

*031676  JUMPA	0,031677

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400774 017601     E= 000000 031677 
----------

*031677  MOVE 	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400774 017601  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0170

*031700  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 740741 614577  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031701  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777745 
FINAL
C(AC)= 000000 000000 
----------

*031702  CAME	0,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031704  JUMPA	0,031705

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031705 
----------

*031705  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031707  JUMPA	0,031710

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031710 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0171

*031710  MOVE 	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031711  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031712  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777745 
FINAL
C(AC)= 000000 000777 
----------

*031713  CAME	0,032216

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 000000 000777 
----------

*031715  JUMPA	0,031716

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777     E= 000000 031716 
----------

*031716  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0172

*031720  JUMPA	0,031721

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777     E= 000000 031721 
----------

*031721  MOVE 	0,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*031722  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031723  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 777745 
FINAL
C(AC)= 000000 000252 
----------

*031724  CAME	0,032217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252  C(E)= 000000 000252 
----------

*031726  JUMPA	0,031727

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252     E= 000000 031727 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0173

*031727  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031731  JUMPA	0,031732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252     E= 000000 031732 
----------

*031732  MOVE 	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*031733  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031734  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 777745 
FINAL
C(AC)= 000000 000525 
----------

*031735  CAME	0,032220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525  C(E)= 000000 000525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0174

*031737  JUMPA	0,031740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525     E= 000000 031740 
----------

*031740  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031742  JUMPA	0,031743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525     E= 000000 031743 
----------

*031743  MOVE 	0,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*031744  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031745  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700     E= 000000 777745 
FINAL
C(AC)= 000000 000230 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0175

*031746  CAME	0,032221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230  C(E)= 000000 000230 
----------

*031750  JUMPA	0,031751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230     E= 000000 031751 
----------

*031751  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031753  JUMPA	0,031754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230     E= 000000 031754 
----------

*031754  MOVE 	0,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

*031755  MOVE 	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0176

*031756  LSH	0,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007603 607062     E= 000000 777745 
FINAL
C(AC)= 000000 000007 
----------

*031757  CAME	0,032171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000007 
----------

*031761  JUMPA	0,031762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 031762 
----------

*031762  CAME	1,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031764  JUMPA	0,031765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 031765 
----------

*031765  MOVE 	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0177

*031766  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 074161 440174  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*031767  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777751 
FINAL
C(AC)= 000000 000000 
----------

*031770  CAME	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031772  JUMPA	0,031773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 031773 
----------

*031773  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*031775  JUMPA	0,031776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 031776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0178

*031776  MOVE 	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031777  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032000  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777751 
FINAL
C(AC)= 000000 017777 
----------

*032001  CAME	1,032222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 017777  C(E)= 000000 017777 
----------

*032003  JUMPA	0,032004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032004 
----------

*032004  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0179

*032006  JUMPA	0,032007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032007 
----------

*032007  MOVE 	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 017777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*032010  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032011  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 777751 
FINAL
C(AC)= 000000 005252 
----------

*032012  CAME	1,032223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 005252  C(E)= 000000 005252 
----------

*032014  JUMPA	0,032015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0180

*032015  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032017  JUMPA	0,032020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032020 
----------

*032020  MOVE 	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 005252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*032021  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032022  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 777751 
FINAL
C(AC)= 000000 012525 
----------

*032023  CAME	1,032224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 012525  C(E)= 000000 012525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0181

*032025  JUMPA	0,032026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032026 
----------

*032026  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032030  JUMPA	0,032031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032031 
----------

*032031  MOVE 	1,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 012525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*032032  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032033  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700     E= 000000 777751 
FINAL
C(AC)= 000000 004616 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0182

*032034  CAME	1,032225

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004616  C(E)= 000000 004616 
----------

*032036  JUMPA	0,032037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032037 
----------

*032037  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032041  JUMPA	0,032042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032042 
----------

*032042  MOVE 	1,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004616  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

*032043  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0183

*032044  LSH	1,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007603 607062     E= 000000 777751 
FINAL
C(AC)= 000000 000174 
----------

*032045  CAME	1,032226

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000174  C(E)= 000000 000174 
----------

*032047  JUMPA	0,032050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032050 
----------

*032050  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032052  JUMPA	0,032053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032053 
----------

*032053  MOVE 	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000174  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0184

*032054  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032055  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777745 
FINAL
C(AC)= 000000 000000 
----------

*032056  CAME	1,032146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032060  JUMPA	0,032061

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032061 
----------

*032061  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032063  JUMPA	0,032064

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032064 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0185

*032064  MOVE 	1,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032065  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032066  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777745 
FINAL
C(AC)= 000000 000777 
----------

*032067  CAME	1,032216

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 000000 000777 
----------

*032071  JUMPA	0,032072

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032072 
----------

*032072  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0186

*032074  JUMPA	0,032075

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032075 
----------

*032075  MOVE 	1,032174

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*032076  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032077  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 777745 
FINAL
C(AC)= 000000 000252 
----------

*032100  CAME	1,032217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252  C(E)= 000000 000252 
----------

*032102  JUMPA	0,032103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032103 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0187

*032103  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032105  JUMPA	0,032106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032106 
----------

*032106  MOVE 	1,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000252  C(E)= 525252 525252 
FINAL
C(AC)= 525252 525252 
----------

*032107  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032110  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 525252 525252     E= 000000 777745 
FINAL
C(AC)= 000000 000525 
----------

*032111  CAME	1,032220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525  C(E)= 000000 000525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0188

*032113  JUMPA	0,032114

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032114 
----------

*032114  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032116  JUMPA	0,032117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032117 
----------

*032117  MOVE 	1,032176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000525  C(E)= 230703 603700 
FINAL
C(AC)= 230703 603700 
----------

*032120  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

*032121  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 230703 603700     E= 000000 777745 
FINAL
C(AC)= 000000 000230 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0189

*032122  CAME	1,032221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230  C(E)= 000000 000230 
----------

*032124  JUMPA	0,032125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032125 
----------

*032125  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032127  JUMPA	0,032130

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032130 
----------

*032130  MOVE 	1,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000230  C(E)= 007603 607062 
FINAL
C(AC)= 007603 607062 
----------

*032131  MOVE 	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
FINAL
C(AC)= 172737 405060 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0190

*032132  LSH	1,777745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 007603 607062     E= 000000 777745 
FINAL
C(AC)= 000000 000007 
----------

*032133  CAME	1,032171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000007 
----------

*032135  JUMPA	0,032136

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032136 
----------

*032136  CAME	2,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 172737 405060  C(E)= 172737 405060 
----------

*032140  JUMPA	0,032141

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 032141 
----------

*032141  SETZM	0,032230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0191

*032142  JRST	0,030057

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000007  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000007  C(E)= 000000 000000 
----------

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000007 
----------

*030616  JRST	0,030624

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030624 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAG	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0192

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000007 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000007  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000007 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 431110 
----------

