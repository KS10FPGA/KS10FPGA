;DSKAC







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E301A-DD

	DIAGNOSTIC CODE:	DSKAC

	PRODUCT NAME:	 	DSKACA0 DECSYSTEM 2020 BASIC
				INSTRUCRION DIAGNOSTIC (3)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAC.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAC.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE THIRD IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS SOME OF THE FOLLOWING
	INSTRUCTIONS. LOGICAL TEST, HALF WORD AND THE ADDER.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAC.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAC.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAC                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAC

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (3)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
DSKACT	MAC	28-Mar-78 12:49		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAC
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 2
DSKACT	MAC	28-Mar-78 12:49		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 3
DSKACT	MAC	28-Mar-78 12:49		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414300		PAREA3=SIXBIT/DSKAC/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414300		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
DSKAC1	MAC	28-Mar-78 12:49		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) [DSKAC]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 063 051 040 
   798	030656	133 104 123 113 101 
   799	030657	103 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (3)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 2
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0029

   807					SUBTTL	TEST OF LOGICAL TEST INSTRUCTIONS
   808
   809					;**********
   810
   811					;THIS TEST VERIFIES THAT TDN DOES NOT MODIFY THE AC BECAUSE
   812					;TDN IS A NO-OP
   813					;FIRST, THE AC IS PRELOADED WITH 0.  THEN,
   814					;TDN IS EXECUTED.  THE AC IS THEN CHECKED FOR
   815					;NO MODIFICATION.  IF C(AC) IS UNALTERED, THE TEST PASSES
   816	030661	400 00 0 00 000000 	B12600:	SETZ			;PRELOAD AC WITH 0
   817	030662	610 00 0 00 033730 		TDN	[-1]		;*TDN IS A NO-OP
   818	030663	310 00 0 00 000000 		CAM			;CAM IS A NO-OP.  IT IS HERE IN CASE TDN SKIPS
   819	030664	302 00 0 00 000000 		CAIE			;PASS TEST IF C(AC) IS UNMODIFIED BY TDN
   820						STOP^
   821	030665	254 04 0 00 030666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   822	030666	324 00 0 00 030667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   823									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   824									;IN THE SUBTEST) TO LOOP ON ERROR^
   825
   826					;*****     FAILURE ANALYSIS     *****
   827					;C(AC0)		C(AC1)		FAILING SIGNAL
   828
   829					;-1,,-1				FC: AD FM + EN
   830
   831					;**********
   832
   833					;THIS TEST VERIFIES THAT TSN DOES NOT MODIFY THE AC BECAUSE
   834					;TSN IS A NO-OP
   835					;FIRST, THE AC IS PRELOADED WITH -1.  THEN,
   836					;TSN IS EXECUTED.  THE AC IS THEN CHECKED FOR
   837					;NO MODIFICATION.  IF C(AC) IS UNALTERED, THIS TEST PASSES
   838
   839	030667	474 00 0 00 000000 	B12700:	SETO			;PRELOAD AC WITH -1,,-1
   840	030670	611 00 0 00 033731 		TSN	[XWD -1,0]	;*TSN IS A NO-OP
   841	030671	310 00 0 00 000000 		CAM			;CAM IS A NO-OP.  IT IS HERE IN CASE TSN SKIPS
   842	030672	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC) IS UNMODIFIED BY TSN
   843						STOP^
   844	030673	254 04 0 00 030674 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   845	030674	324 00 0 00 030675 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   846									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   847									;IN THE SUBTEST) TO LOOP ON ERROR^
   848
   849					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 3
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0030

   850					;THIS TEST VERIFIES THAT TRN DOE NOT MODIFY THE AC BECAUSE
   851					;TRN IS A NO-OP.
   852					;FIRST, THE AC IS PRELOADED WITH 0.  THEN,
   853					;TRN IS EXECUTED.  THE AC IS THEN CHECKED FOR
   854					;NO MODIFICATION.  IF C(AC) IS UNALTERED, THIS TEST PASSES
   855
   856	030675	400 00 0 00 000000 	B13000:	SETZ			;PRELOAD AC WITH 0
   857	030676	600 00 0 00 123456 		TRN	123456		;*TRN IS A NO-OP
   858	030677	310 00 0 00 000000 		CAM			;CAM IS A NO-OP.  IT IS HERE IN CASE TRN SKIPS
   859	030700	302 00 0 00 000000 		CAIE			;PASS TEST IF C(AC) IS UNMODIFIED BY TRN
   860						STOP^
   861	030701	254 04 0 00 030702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   862	030702	324 00 0 00 030703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   863									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   864									;IN THE SUBTEST) TO LOOP ON ERROR^
   865
   866					;**********
   867
   868					;THIS TEST VERIFIES THAT TLN DOES NOT MODIFY THE AC BECAUSE
   869					;TLN IS A NO-OP.
   870					;FIRST,THE AC IS PRELOADED WITH -1,,-1.  THEN,
   871					;TRN IS EXECUTED.  THE AC IS THEN CHECKED FOR
   872					;NO MODIFICATION.  IF C(AC) IS UNALTERED, THIS TEST PASSES
   873
   874	030703	474 00 0 00 000000 	B13100:	SETO			;PRELOAD AC WITH -1,,-1
   875	030704	601 00 0 00 123456 		TLN	123456		;*TRN IS A NO-OP
   876	030705	310 00 0 00 000000 		CAM			;CAM IS A NO-OP.  IT IS HERE IN CASE TRN SKIPS
   877	030706	312 00 0 00 000000 		CAME			;PASS TEST IF C(AC) IS UNMODIFIED BY TRN
   878						STOP^
   879	030707	254 04 0 00 030710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   880	030710	324 00 0 00 030711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   882									;IN THE SUBTEST) TO LOOP ON ERROR^
   883
   884					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 4
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0031

   885					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC
   886					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   887					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
   888					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC) -1,,-1, THE TEST PASSES.
   889
   890	030711	400 00 0 00 000000 	B13200:	SETZ			;PRELOAD AC WITH 0
   891	030712	670 00 0 00 033730 		TDO	[-1]		;*TDO SHOULD PLACE ALL ONES IN THE AC
   892	030713	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO SKIPS
   893	030714	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
   894						STOP^
   895	030715	254 04 0 00 030716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   896	030716	324 00 0 00 030717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   897									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   898									;IN THE SUBTEST) TO LOOP ON ERROR^
   899
   900					;*****     FAILURE ANALYSIS     *****
   901					;C(AC0)		C(AC1)		FAILING SIGNAL
   902
   903					;E				SW: FCE
   904					;0				SW: ET1
   905					;0				ET1: BR AR EN
   906					;0				ET1: AD BR - EN
   907					;0				ET1: AD EQV
   908
   909					;**********
   910
   911					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC
   912					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   913					;IN THIS CASE, AC=E AND C(AC)= C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
   914					;THIS AC IS CHECKED FOR ZERO.  IF C(AC) IS ZERO, THE TEST PASSES.
   915
   916	030717	400 00 0 00 000000 	B13300:	SETZ			;PRELOAD AC WITH 0
   917	030720	670 00 0 00 000000 		TDO			;*TDO SHOULD PLACE ALL ZERO IN THE AC		
   918	030721	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO SKIPS
   919	030722	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC) ZERO
   920						STOP^
   921	030723	254 04 0 00 030724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   922	030724	324 00 0 00 030725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   923									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   924									;IN THE SUBTEST) TO LOOP ON ERROR^
   925
   926					;*****     FAILURE ANALYSIS     *****
   927					;C(AC0)		C(AC1)		FAILING SIGNAL
   928
   929					;-1,,-1				ET1: AD AR + EN
   930
   931					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 5
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0032

   932					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC,
   933					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   934					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
   935					;THE AC IS CHECKED FOR ITS CONTENTS ZERO.  IF C(AC) IS ZERO, THE TEST PASSES.
   936
   937	030725	400 00 0 00 000000 	B13400:	SETZ			;PRELOAD AC WITH 0
   938	030726	670 00 0 00 033732 		TDO	[0]		;*TDO SHOULD PLACE ALL ZERO IN THE AC
   939	030727	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO SKIPS
   940	030730	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC) IS ZERO
   941						STOP^
   942	030731	254 04 0 00 030732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   943	030732	324 00 0 00 030733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   944									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   945									;IN THE SUBTEST) TO LOOP ON ERROR^
   946
   947					;**********
   948
   949					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC
   950					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   951					;IN THIS CASE, AC=E AND C(AC)= C(E)=-1,,-1.
   952					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
   953					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
   954
   955	030733	474 00 0 00 000000 	B13600:	SETO			;PRELOAD AC WITH -1,,-1
   956	030734	670 00 0 00 000000 		TDO			;*TDO SHOULD PLACE ALL ONES IN THE AC
   957	030735	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO SKIPS
   958	030736	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC) -1,,-1
   959						STOP^
   960	030737	254 04 0 00 030740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   961	030740	324 00 0 00 030741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   962									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   963									;IN THE SUBTEST) TO LOOP ON ERROR^
   964
   965					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 6
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0033

   966					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC
   967					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   968					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
   969					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
   970
   971	030741	474 00 0 00 000000 	B14000:	SETO			;PRELOAD AC WITH -1,,-1
   972	030742	670 00 0 00 033732 		TDO	[0]		;*TDO SHOULD PLACE ALL ONES IN THE AC
   973	030743	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO SKIPS
   974	030744	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
   975						STOP^
   976	030745	254 04 0 00 030746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   977	030746	324 00 0 00 030747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   978									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   979									;IN THE SUBTEST) TO LOOP ON ERROR^
   980
   981					;*****     FAILURE ANALYSIS     *****
   982					;C(AC0)		C(AC1)		FAILING SIGNAL
   983
   984					;0				ET1: AD FM - EN
   985					;0				ET2: AR AD EN
   986
   987					;**********
   988
   989					;THIS TEST VERIFIES THAT TDZ PLACES ZERO IN THE BITS OF THE AC
   990					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
   991					;IN THIS CASE, AC=E AND C(AC)= C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
   992					;THE AC IS CHECKED FOR 0.  IF C(AC) 0, THE TEST PASSES.
   993
   994	030747	400 00 0 00 000000 	B14100:	SETZ			;PRELOAD AC WITH 0		
   995	030750	630 00 0 00 000000 		TDZ			;*TDZ SHOULD PLACE ALL ZERO IN THE AC
   996	030751	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO
   997	030752	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
   998						STOP^
   999	030753	254 04 0 00 030754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1000	030754	324 00 0 00 030755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1002									;IN THE SUBTEST) TO LOOP ON ERROR^
  1003
  1004					;*****     FAILURE ANALYSIS     *****
  1005					;C(AC0)		C(AC1)		FAILING SIGNAL
  1006
  1007					;-1,,-1				FC: AD FM + EN
  1008
  1009					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 7
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0034

  1010					;THIS TEST VERIFIES THAT TDZ PLACES ZERO IN THE BITS OF THE AC
  1011					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1012					;IN THIS CASE, C(AC)=-1,,-1,,-1 AND C(E)=-1,,0.
  1013					;HENCE, THE RESULT IN THE AC SHOULD BE 0,,-1.
  1014					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)= 0,,-1, THE TEST PASSES.
  1015
  1016	030755	474 00 0 00 000000 	B14200:	SETO			;PRELOAD AC WITH -1,,-1		
  1017	030756	630 00 0 00 033731 		TDZ	[XWD -1,0]	;*TDZ SHOULD PLACE 0,,-1 IN THE AC
  1018	030757	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO
  1019	030760	312 00 0 00 033733 		CAME	[0,-1]		;PASS TEST IF C(AC)=0,,-1
  1020						STOP^
  1021	030761	254 04 0 00 030762 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1022	030762	324 00 0 00 030763 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1023									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1024									;IN THE SUBTEST) TO LOOP ON ERROR^
  1025
  1026					;*****     FAILURE ANALYSIS     *****
  1027					;C(AC0)		C(AC1)		FAILING SIGNAL
  1028
  1029					;-E				SW: FCE
  1030					;-1,,-1				FC: AD AR -EN
  1031					;-1,,0				ET2: AR AD EN
  1032
  1033					;**********
  1034
  1035					;THIS TEST VERIFIES THAT TDZ PLACES ZEROS IN THE BITS OF THE AC
  1036					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1037					;IN THIS CASE, AC=E AND C(AC)= C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  1038					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
  1039
  1040	030763	474 00 0 00 000000 	B14400:	SETO			;PRELOAD AC WITH -1,,-1
  1041	030764	630 00 0 00 000000 		TDZ			;*TDZ SHOULD PLACE ALL ZERO IN THE AC
  1042	030765	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO
  1043	030766	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1044						STOP^
  1045	030767	254 04 0 00 030770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1046	030770	324 00 0 00 030771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1047									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1048									;IN THE SUBTEST) TO LOOP ON ERROR^
  1049
  1050					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 8
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0035

  1051					;THIS TEST VERIFIES THAT TDZ PLACES ZEROS IN THE BITS OF THE AC
  1052					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1053					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  1054					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES.
  1055
  1056	030771	400 00 0 00 000000 	B14500:	SETZ			;PRELOAD AC WITH 0
  1057	030772	630 00 0 00 033730 		TDZ	[-1]		;*TDZ SHOULD PLACE ALL ZEROS IN THE AC
  1058	030773	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO
  1059	030774	332 00 0 00 000000 		SKIPE			;PASS TEST IS C(AC)=0
  1060						STOP^
  1061	030775	254 04 0 00 030776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1062	030776	324 00 0 00 030777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1063									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1064									;IN THE SUBTEST) TO LOOP ON ERROR^
  1065
  1066					;**********
  1067
  1068					;THIS TEST VERIFIES THAT TDZ PLACES ZEROS IN THE BITS OF THE AC
  1069					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1070					;IN THIS CASE, AC=E AND C(AC)= C(E)=-1,,-1.
  1071					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  1072					;THE AC IS CHECKED -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
  1073
  1074	030777	474 00 0 00 000000 	B14600:	SETO			;PRELOAD AC WITH -1,,-1
  1075	031000	630 00 0 00 033732 		TDZ	[0]		;*TDZ SHOULD PLACE ALL ONES IN THE AC
  1076	031001	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDO
  1077	031002	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
  1078						STOP^
  1079	031003	254 04 0 00 031004 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1080	031004	324 00 0 00 031005 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1081									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1082									;IN THE SUBTEST) TO LOOP ON ERROR^
  1083					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 9
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0036

  1084					;THIS TEST VERIFIES THAT TDC COMPLEMENTS THE BITS OF THE AC
  1085					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1086					;IN THIS CASE, C(AC)=-1 AND C(E)=0,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,0.
  1087					;THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES
  1088
  1089	031005	474 00 0 00 000000 	B14700:	SETO			;PRELOAD AC WITH -1,,-1
  1090	031006	650 00 0 00 033733 		TDC	[XWD 0,-1]	;*TDC SHOULD PLACE -1,,0 INTO THE AC
  1091	031007	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDC SKIPS
  1092	031010	312 00 0 00 033731 		CAME	[-1,,0]		;PASS TEST IF C(AC)=-1,,0
  1093						STOP^
  1094	031011	254 04 0 00 031012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1095	031012	324 00 0 00 031013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1096									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1097									;IN THE SUBTEST) TO LOOP ON ERROR^
  1098
  1099					;*****     FAILURE ANALYSIS     *****
  1100					;C(AC0)		C(AC1)		FAILING SIGNAL
  1101
  1102					;-E				SW: FCE
  1103					;0				FC: AD AR - EN
  1104					;0,,-1				ET2: AR AD EN
  1105
  1106					;**********
  1107
  1108					;THIS TEST VERIFIES THAT TDC COMPLEMENTS THE BITS OF THE AC
  1109					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1110					;IN THIS CASE, AC=E AND C(AC)= C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  1111					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  1112
  1113	031013	400 00 0 00 000000 	B15000:	SETZ			;PRELOAD AC, E WITH 0
  1114	031014	650 00 0 00 000000 		TDC			;*TDC SHOULD PLACE 0 INTO THE AC
  1115	031015	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDC SKIPS
  1116	031016	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1117						STOP^
  1118	031017	254 04 0 00 031020 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1119	031020	324 00 0 00 031021 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1120									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1121									;IN THE SUBTEST) TO LOOP ON ERROR^
  1122
  1123					;*****     FAILURE ANALYSIS     *****
  1124					;C(AC0)		C(AC1)		FAILING SIGNAL
  1125
  1126					;-1,,-1				FC:AD FM + EN
  1127
  1128					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 10
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0037

  1129					;THIS TEST VERIFIES THAT TDC COMPLEMENTS THE BITS OF THE AC
  1130					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1131					;IN THIS CASE, AC=E AND C(AC)= C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  1132					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST FAILS
  1133
  1134	031021	474 00 0 00 000000 	B15400:	SETO			;PRELOAD AC WITH -1,,-1		
  1135	031022	650 00 0 00 000000 		TDC			;*TDC SHOULD PLACE 0 INTO THE AC
  1136	031023	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDC SKIPS
  1137	031024	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  1138						STOP^
  1139	031025	254 04 0 00 031026 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1140	031026	324 00 0 00 031027 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1141									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1142									;IN THE SUBTEST) TO LOOP ON ERROR^
  1143
  1144					;**********
  1145
  1146					;THIS TEST VERIFIES THAT TDC COMPLEMENTS THE BITS OF THE AC
  1147					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1148					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  1149					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  1150
  1151	031027	400 00 0 00 000000 	B15500:	SETZ			;PRELOAD AC WITH 0		
  1152	031030	650 00 0 00 033730 		TDC	[-1]		;*TDC SHOULD PLACE -1,,-1 INTO THE AC
  1153	031031	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDC SKIPS
  1154	031032	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
  1155						STOP^
  1156	031033	254 04 0 00 031034 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1157	031034	324 00 0 00 031035 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1158									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1159									;IN THE SUBTEST) TO LOOP ON ERROR^
  1160
  1161					;*****     FAILURE ANALYSIS     *****
  1162					;C(AC0)		C(AC1)		FAILING SIGNAL
  1163
  1164					;0				FC: AD EQV
  1165
  1166					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 11
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0038

  1167					;THIS TEST VERIFIES THAT TDC COMPLEMENTS THE BITS OF THE AC
  1168					;WHICH ARE MASKED BY C(E) AND DOES NOT AFFECT THE UNMASKED BITS OF THE AC.
  1169					;IN THIS CASE, C(AC)=-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  1170					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  1171
  1172	031035	474 00 0 00 000000 	B15600:	SETO			;PRELOAD AC WITH -1,,-1		
  1173	031036	650 00 0 00 033732 		TDC	[0]		;*TDC SHOULD PLACE -1,,-1 INTO THE AC
  1174	031037	300 00 0 00 000000 		CAI			;CAI IS A NO-OP.  IT IS HERE IN CASE TDC SKIPS
  1175	031040	312 00 0 00 033730 		CAME	[-1]		;PASS TEST IF C(AC)=-1,,-1
  1176						STOP^
  1177	031041	254 04 0 00 031042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1178	031042	324 00 0 00 031043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1179									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1180									;IN THE SUBTEST) TO LOOP ON ERROR^
  1181
  1182					;**********
  1183
  1184					;THIS TEST VERIFIES THAT TDNA ALWAYS SKIPS THE NEXT
  1185					;SEQUENTIAL INSTRUCTION.  IF TDNA DOES NOT
  1186					;SKIP, THIS TEST FAILS.
  1187
  1188	031043	400 00 0 00 000000 	B15700:	SETZ			;PRESET AC, E TO 0		
  1189	031044	614 00 0 00 000000 		TDNA			;*TDNA SHOULD SKIP THE NEXT INSTRUCTION
  1190						STOP^
  1191	031045	254 04 0 00 031046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1192	031046	324 00 0 00 031047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1193									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1194									;IN THE SUBTEST) TO LOOP ON ERROR^
  1195
  1196					;*****     FAILURE ANALYSIS     *****
  1197					;C(AC0)		C(AC1)		FAILING SIGNAL
  1198
  1199					;0				SW: ET1
  1200					;0				FC: AB PC EN
  1201					;0				ET1: BR AR EN
  1202					;0				ET1: PC CLOCK
  1203					;0				ET2: MC INST FETCH EN
  1204
  1205					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 12
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0039

  1206					;THIS TEST VERIFIES THAT TDN NEVER SKIPS
  1207					;NEXT SEQUENTIAL INSTRUCTION.
  1208					;THIS TEST FAILS IF TDN SKIPS.
  1209
  1210	031047	474 00 0 00 000000 	B16000:	SETO			;PRESET AC, E TO -1,,-1		
  1211	031050	610 00 0 00 000000 		TDN			;*TDN SHOULD NOT SKIP
  1212	031051	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDN PASSES
  1213						STOP^
  1214	031052	254 04 0 00 031053 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1215	031053	324 00 0 00 031054 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1216									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1217									;IN THE SUBTEST) TO LOOP ON ERROR^
  1218
  1219					;**********
  1220
  1221					;THIS TEST VERIFIES THAT TDN NEVER SKIPS THE
  1222					;NEXT SEQUENTIAL INSTRUCTION.
  1223					;THIS TEST FAILS IF TDN SKIPS.
  1224
  1225	031054	400 00 0 00 000000 	B16100:	SETZ			;PRESET AC, E TO 0		
  1226	031055	610 00 0 00 000000 		TDN			;*TDN SHOULD NOT SKIP
  1227	031056	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDN PASSES
  1228						STOP^
  1229	031057	254 04 0 00 031060 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1230	031060	324 00 0 00 031061 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1231									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1232									;IN THE SUBTEST) TO LOOP ON ERROR^
  1233
  1234					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 13
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0040

  1235					;THIS TEST VERIFIES THAT TDNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1236					;AND ONLY WHEN ALL OF THE BITS OF THE AC, WHICH ARE MASKED
  1237					;BY C(E), ARE ZERO.
  1238					;IN THIS TEST C(AC) = -1..0 AND C(E) = 707070..707070.
  1239					;HENCE, TDNE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION.
  1240					;IF TDNE SKIPS, THIS TEST FAILS
  1241
  1242	031061	200 00 0 00 033731 	B16200:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1..0
  1243	031062	612 00 0 00 033734 		TDNE	[707070707070]	;*TDNE SHOULD NOT SKIP
  1244	031063	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDNE PASSES
  1245						STOP^
  1246	031064	254 04 0 00 031065 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1247	031065	324 00 0 00 031066 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1248									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1249									;IN THE SUBTEST) TO LOOP ON ERROR^
  1250
  1251					;*****     FAILURE ANALYSIS     *****
  1252					;C(AC0)		C(AC1)		FAILING SIGNAL
  1253
  1254					;-1,,0				SW:FCE
  1255					;-1,,0				SW: PC CHANGE
  1256					;-1,,-1				FC: AD AR + EN
  1257					;E				ET2: MC INST FETCH EN
  1258
  1259					;**********
  1260
  1261					;THIS TEST VERIFIES THAT TDNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1262					;AND ONLY WHEN ALL OF THE BITS OF THE AC, WHICH ARE MASKED
  1263					;BY C(E), ARE ZERO.
  1264					;IN THIS CASE, AC=E AND C(AC)=0.
  1265					;HENCE, TDNE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  1266					;IF TDNE DOES NOT SKIP, THIS TEST FAILS.
  1267
  1268	031066	400 00 0 00 000000 	B16300:	SETZ			;PRELOAD AC, E WITH 0		
  1269	031067	612 00 0 00 000000 		TDNE			;*TDNE SHOULD SKIP THE NEXT INSTRUCTION
  1270						STOP^
  1271	031070	254 04 0 00 031071 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1272	031071	324 00 0 00 031072 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1273									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1274									;IN THE SUBTEST) TO LOOP ON ERROR^
  1275
  1276					;*****     FAILURE ANALYSIS     *****
  1277					;C(AC0)		C(AC1)		FAILING SIGNAL
  1278
  1279					;0				SW: ET1
  1280					;0				ET1: PC CLOCK
  1281
  1282					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 14
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0041

  1283					;THIS TEST VERIFIES THAT TDNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN 
  1284					;AND ONLY WHEN NOT ALL OF THE BITS OF THE AC, WHICH ARE MASKED
  1285					;BY C(E) ARE ZERO.
  1286					;IN THIS TEST AC=E AND C(AC)=C(E)=0.  HENCE TDNN
  1287					;SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  1288					;IF TDNN SKIPS, THE TEST FAILS.
  1289
  1290	031072	400 00 0 00 000000 	B16400:	SETZ			;PRELOAD AC,E WITH 0
  1291	031073	616 00 0 00 000000 		TDNN			;*TDNN SHOULD NOT SKIP THE NEXT INSTRUCTION
  1292	031074	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDNE PASSES
  1293						STOP^
  1294	031075	254 04 0 00 031076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1295	031076	324 00 0 00 031077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1296									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1297									;IN THE SUBTEST) TO LOOP ON ERROR^
  1298
  1299					;*****     FAILURE ANALYSIS     *****
  1300					;C(AC0)		C(AC1)		FAILING SIGNAL
  1301
  1302					;0				SW: PC CHANGE
  1303					;0				FC: AB PC EN
  1304					;0				ET2: MC INST FETCH EN
  1305
  1306					;**********
  1307
  1308					;THIS TEST VERIFIES THAT TDNA ALWAYS SKIPS THE NEXT
  1309					;SEQUENTIAL INSTRUCTION.  IF TDNA DOES NOT
  1310					;SKIP, THIS TEST FAILS.
  1311
  1312	031077	474 00 0 00 000000 	B16500:	SETO			;PRESET AC, E TO 0		
  1313	031100	614 00 0 00 000000 		TDNA			;*TDNA SHOULD SKIP THE NEXT INSTRUCTION
  1314						STOP^
  1315	031101	254 04 0 00 031102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1316	031102	324 00 0 00 031103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1318									;IN THE SUBTEST) TO LOOP ON ERROR^
  1319
  1320					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 15
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0042

  1321					;THIS TEST VERIFIES THAT TDNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1322					;AND ONLY WHEN NOT ALL OF THE BITS OF THE AC, WHICH ARE MASKED BY C(E),
  1323					;ARE ZERO
  1324					;IN THIS TEST C(AC)=-1,,0 AND C(E)=707070,,707070.  HENCE, TDNN
  1325					;SHOULD SKIP THE NEXT INSTRUCTION.  IF IT DOES NOT SKIP, THIS TEST FAILS.
  1326
  1327	031103	200 00 0 00 033731 	B16600:	MOVE	[XWD -1,0]	;PRESET AC TO -1,,0
  1328	031104	616 00 0 00 033734 		TDNN	[707070707070]	;*TDNN SHOULD SKIP THE NEXT INSTRUCTION
  1329						STOP^
  1330	031105	254 04 0 00 031106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1331	031106	324 00 0 00 031107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1333									;IN THE SUBTEST) TO LOOP ON ERROR^
  1334
  1335					;*****     FAILURE ANALYSIS     *****
  1336					;C(AC0)		C(AC1)		FAILING SIGNAL
  1337
  1338					;-1,,0				SW: FCE
  1339					;-1,,0				SW: ET1
  1340					;-1,,0				ET1: PC CLOCK
  1341
  1342					;**********
  1343
  1344					;THIS TEST VERIFIES THAT TDNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1345					;AND ONLY WHEN ALL OF THE BITS OF THE AC, WHICH ARE MASKED
  1346					;BY C(E), ARE ZERO.
  1347					;IN THIS TEST, C(AC)=-1,,-1 AND C(E)=0.  HENCE, TDNE SHOULD SKIP
  1348					;THE NEXT SEQUENTIAL INSTRUCTION.
  1349					;IF TDNE DOES NOT SKIP, THIS TEST FAILS
  1350
  1351	031107	474 00 0 00 000000 	B16700:	SETO			;PRESET AC TO ALL ONES		
  1352	031110	612 00 0 00 033732 		TDNE	[0]		;*TDNE SHOULD SKIP THE NEXT INSTRUCTION
  1353						STOP^
  1354	031111	254 04 0 00 031112 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1355	031112	324 00 0 00 031113 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1356									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1357									;IN THE SUBTEST) TO LOOP ON ERROR^
  1358
  1359					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 16
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0043

  1360					;THIS TEST VERIFIES THAT TDNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1361					;AND ONLY WHEN ALL OF THE BITS OF THE AC, WHICH ARE MASKED
  1362					;BY C(E), ARE ZERO.
  1363					;IN THIS TEST C(AC)=0 AND C(E)=-1,,-1, HENCE, TDNE SHOULD SKIP
  1364					;THE NEXT SEQUENTIAL INSTRUCTION.
  1365					;IF TDNE DOES NOT SKIP, THIS TEST FAILS
  1366
  1367	031113	400 00 0 00 000000 	B17000:	SETZ			;PRESET AC TO 0		
  1368	031114	612 00 0 00 033730 		TDNE	[-1]		;*TDNE SHOULD SKIP THE NEXT INSTRUCTION
  1369						STOP^
  1370	031115	254 04 0 00 031116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1371	031116	324 00 0 00 031117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1372									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1373									;IN THE SUBTEST) TO LOOP ON ERROR^
  1374
  1375					;*****     FAILURE ANALYSIS     *****
  1376					;C(AC0)		C(AC1)		FAILING SIGNAL
  1377
  1378					;0				FC: AD FM + EN
  1379
  1380					;**********
  1381
  1382					;THIS TEST VERIFIES THAT TDN NEVER SKIPS THE NEXT SEQUENTIAL INSTRUCTION.
  1383					;THIS TEST FAILS IF TDN SKIPS
  1384
  1385	031117	474 00 0 00 000000 	B17300:	SETO			;PRESET AC TO -1,,-1		
  1386	031120	610 00 0 00 033732 		TDN	[0]		;*TDN SHOULD NOT SKIP
  1387	031121	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDN PASSES
  1388						STOP^
  1389	031122	254 04 0 00 031123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1390	031123	324 00 0 00 031124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1391									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1392									;IN THE SUBTEST) TO LOOP ON ERROR^
  1393
  1394					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 17
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0044

  1395					;THIS TEST VERIFIES THAT TDN NEVER SKIPS THE NEXT SEQUENTIAL INSTRUCTION.
  1396					;THIS TEST FAILS IF TDN SKIPS
  1397
  1398	031124	400 00 0 00 000000 	B17400:	SETZ			;PRESET AC TO 0
  1399	031125	610 00 0 00 033730 		TDN	[-1]		;*TDN SHOULD NOT SKIP
  1400	031126	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDN PASSES
  1401						STOP^
  1402	031127	254 04 0 00 031130 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1403	031130	324 00 0 00 031131 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1404									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1405									;IN THE SUBTEST) TO LOOP ON ERROR^
  1406
  1407					;**********
  1408
  1409					;THIS TEST VERIFIES THAT TDNA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  1410					;THIS TEST FAILS IF TDNA DOES NOT SKIP
  1411
  1412	031131	474 00 0 00 000000 	B17700:	SETO			;PRESET AC TO -1,,-1
  1413	031132	614 00 0 00 033732 		TDNA	[0]		;*TDNA SHOULD SKIP
  1414						STOP^
  1415	031133	254 04 0 00 031134 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1416	031134	324 00 0 00 031135 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1417									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1418									;IN THE SUBTEST) TO LOOP ON ERROR^
  1419
  1420					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 18
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0045

  1421					;THIS TEST VERIFIES THAT TDNA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  1422					;THIS TEST FAILS IF TDNA DOES NOT SKIP
  1423
  1424	031135	400 00 0 00 000000 	B20000:	SETZ			;PRESET AC TO 0
  1425	031136	614 00 0 00 033730 		TDNA	[-1]		;*TDNA SHOULD SKIP
  1426						STOP^
  1427	031137	254 04 0 00 031140 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1428	031140	324 00 0 00 031141 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1430									;IN THE SUBTEST) TO LOOP ON ERROR^
  1431
  1432					;**********
  1433
  1434					;THIS TEST VERIFIES THAT TDNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1435					;AND ONLY WHEN ALL OF THE BITS OF THE AC, WHICH ARE MASKED BY C(E), ARE ZERO.
  1436					;IN THIS TEST AC=E AND C(AC)=C(E)=-1,,-1.  HENCE TDNE SHOULD NOT SKIP.
  1437					;IF TDNE SKIPS, THIS TEST FAILS.
  1438
  1439	031141	474 00 0 00 000000 	B20400:	SETO			;PRESET AC,E TO -1,,-1
  1440	031142	612 00 0 00 000000 		TDNE			;*TDNE SHOULD NOT SKIP
  1441	031143	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDNE PASSES
  1442						STOP^
  1443	031144	254 04 0 00 031145 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1444	031145	324 00 0 00 031146 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1445									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1446									;IN THE SUBTEST) TO LOOP ON ERROR^
  1447
  1448					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 19
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0046

  1449					;THIS TEST VERIFIES THAT TDNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1450					;AND ONLY WHEN NOT ALL OF THE BITS OF THE AC, WHICH ARE MASKED BY C(E), ARE ZERO.
  1451					;IN THIS TEST, AC=E AND C(AC)=C(E)=-1,,-1.  HENCE TDNN SHOULD SKIP
  1452					;IF TDNN DOES NOT SKIP, THIS TEST FAILS
  1453
  1454	031146	474 00 0 00 000000 	B20600:	SETO			;PRESET AC,E TO -1,,-1
  1455	031147	616 00 0 00 000000 		TDNN			;*TDNN SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  1456						STOP^
  1457	031150	254 04 0 00 031151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1458	031151	324 00 0 00 031152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1459									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1460									;IN THE SUBTEST) TO LOOP ON ERROR^
  1461
  1462					;**********
  1463
  1464					;THIS TEST VERIFIES THAT TDNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1465					;AND ONLY WHEN NOT ALL OF THE BITS OF THE AC, WHICH ARE MASKED BY C(E), ARE ZERO.
  1466					;IN THIS TEST, C(AC)=0 AND C(E)=-1,,-1.  HENCE TDNN SHOULD NOT SKIP
  1467					;IF TDNN SKIPS, THIS TEST FAILS
  1468
  1469	031152	400 00 0 00 000000 	B20700:	SETZ			;PRESET AC TO 0
  1470	031153	616 00 0 00 033730 		TDNN	[-1]		;*TDNN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  1471	031154	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDNN PASSES
  1472						STOP^
  1473	031155	254 04 0 00 031156 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1474	031156	324 00 0 00 031157 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1475									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1476									;IN THE SUBTEST) TO LOOP ON ERROR^
  1477
  1478					;*****     FAILURE ANALYSIS     *****
  1479					;C(AC0)		C(AC1)		FAILING SIGNAL
  1480
  1481					;0				FC: AD FM + EN
  1482
  1483					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 20
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0047

  1484					;THIS TEST VERIFIES THAT TDNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION WHEN
  1485					;AND ONLY WHEN NOT ALL OF THE BITS OF THE AC, WHICH ARE MASKED BY C(E), ARE ZERO.
  1486					;IN THIS TEST, C(AC)=-1,,-1 AND C(E)=0.  HENCE TDNN SHOULD NOT SKIP
  1487					;IF TDNN SKIPS, THIS TEST FAILS
  1488
  1489	031157	474 00 0 00 000000 	B21000:	SETO			;PRESET AC TO -1,,-1
  1490	031160	616 00 0 00 033732 		TDNN	[0]		;*TDNN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  1491	031161	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TDNN PASSES
  1492						STOP^
  1493	031162	254 04 0 00 031163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1494	031163	324 00 0 00 031164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1496									;IN THE SUBTEST) TO LOOP ON ERROR^
  1497
  1498					;*****     FAILURE ANALYSIS     *****
  1499					;C(AC0)		C(AC1)		FAILING SIGNAL
  1500
  1501					;-1,,-1				FC: AD AR + EN
  1502
  1503					;**********
  1504
  1505					;THIS TEST VERIFIES THAT TDO PLACES ONES IN THE BITS OF THE AC
  1506					;WHICH ARE MASKED BY C(E) AND DOES NOT EFFECT THE UNMASKED BITS OF THE AC.
  1507					;IN THIS CASE C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,0
  1508					;THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES
  1509
  1510	031164	400 00 0 00 000000 	B21100:	SETZ			;PRELOAD AC WITH 0
  1511	031165	670 00 0 00 033731 		TDO	[XWD -1,0]	;*TDO SHOULD PLACE -1,,0 INTO THE AC
  1512	031166	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1513						STOP^
  1514	031167	254 04 0 00 031170 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1515	031170	324 00 0 00 031171 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1516									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1517									;IN THE SUBTEST) TO LOOP ON ERROR^
  1518
  1519					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 21
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0048

  1520					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1521					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1522					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1523					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE,
  1524					;THE RESULT IN THE AC SHOULD BE 0,,-1.  THE AC IS
  1525					;CHECKED FOR 0,,-1.  THIS TEST PASSES IF C(AC)=0,,-1
  1526
  1527	031171	400 00 0 00 000000 	B21400:	SETZ			;PRESET AC WITH 0
  1528	031172	671 00 0 00 033731 		TSO	[XWD -1,0]	;*TSO SHOULD PLACE 0,,-1 INTO THE AC
  1529	031173	312 00 0 00 033733 		CAME	[XWD 0,-1]	;PASS IF C(AC)=0,,-1
  1530						STOP^
  1531	031174	254 04 0 00 031175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1532	031175	324 00 0 00 031176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1533									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1534									;IN THE SUBTEST) TO LOOP ON ERROR^
  1535
  1536					;*****     FAILURE ANALYSIS     *****
  1537					;C(AC0)		C(AC1)		FAILING SIGNAL
  1538
  1539					;0				SW: FCE
  1540					;0				SW: ET0
  1541					;0				SW: ET1
  1542					;0				FC: AD FM + EN
  1543					;0				FC: AD AR + EN
  1544					;0				ET0: AR SWAP
  1545					;0				ET0: AD FM + EN
  1546					;0				ET0: AD AR + EN
  1547					;0				ET1: BR AR EN
  1548					;0				ET1: AD BR - EN
  1549					;-1,,-1				ET1: AD AR + EN
  1550					;0				ET1: AD EQV
  1551
  1552					;**********
  1553
  1554					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1555					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1556					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1557					;IN THIS CASE, C(AC)=0 AND C(E)=0,,-1.  HENCE,
  1558					;THE RESULT IN THE AC SHOULD BE -1,,0.  THE AC IS
  1559					;CHECKED FOR -1,,0.  THIS TEST PASSES IF C(AC)=-1,,0
  1560
  1561	031176	400 00 0 00 000000 	B21500:	SETZ			;PRESET AC WITH 0
  1562	031177	671 00 0 00 033733 		TSO	[XWD 0,-1]	;*TSO SHOULD PLACE -1,,0 INTO THE AC
  1563	031200	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1564						STOP^
  1565	031201	254 04 0 00 031202 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1566	031202	324 00 0 00 031203 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1567									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1568									;IN THE SUBTEST) TO LOOP ON ERROR^
  1569
  1570					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 22
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0049

  1571					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1572					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1573					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1574					;IN THIS CASE, C(AC)=0 AND C(E)=0,,-1.  HENCE,
  1575					;THE RESULT IN THE AC SHOULD BE -1,,0.  THE AC IS
  1576					;CHECKED FOR ITS CONTENTS NON-ZERO.  THIS TEST PASSES IF C(AC) IS NON-ZERO
  1577
  1578	031203	400 00 0 00 000000 	B21600:	SETZ			;PRELOAD AC,E WITH 0
  1579	031204	671 00 0 00 000000 		TSO			;*TSO SHOULD PLACE 0 INTO THE AC
  1580	031205	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  1581						STOP^
  1582	031206	254 04 0 00 031207 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1583	031207	324 00 0 00 031210 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1584									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1585									;IN THE SUBTEST) TO LOOP ON ERROR^
  1586
  1587					;**********
  1588
  1589					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1590					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1591					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1592					;IN THIS CASE, AC=E AND C(AC)=C(E)=-1,,-1.  HENCE,
  1593					;THE RESULT IN THE AC SHOULD BE -1,,-1.  THE AC IS
  1594					;CHECKED FOR -1,,-1.  THIS TEST PASSES IF C(AC) -1,,-1
  1595
  1596	031210	474 00 0 00 000000 	B21700:	SETO			;PRELOAD AC,E WITH -1,,-1
  1597	031211	671 00 0 00 000000 		TSO			;*TSO SHOULD PLACE -1,,-1 INTO THE AC
  1598	031212	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  1599						STOP^
  1600	031213	254 04 0 00 031214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1601	031214	324 00 0 00 031215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1602									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1603									;IN THE SUBTEST) TO LOOP ON ERROR^
  1604
  1605					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 23
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0050

  1606					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1607					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1608					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1609					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0,,-1.  HENCE,
  1610					;THE RESULT IN THE AC SHOULD BE -1,,0.  THE AC IS
  1611					;CHECKED FOR -1,,0.  THIS TEST PASSES IF C(AC)=-1,,0
  1612
  1613	031215	200 00 0 00 033731 	B22200:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
  1614	031216	671 00 0 00 033733 		TSO	[XWD 0,-1]	;*TSO SHOULD PLACE -1,,0 INTO THE AC
  1615	031217	312 00 0 00 033731 		CAME	[-1,,0]		;PASS IF C(AC)=-1,,0
  1616						STOP^
  1617	031220	254 04 0 00 031221 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1618	031221	324 00 0 00 031222 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1619									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1620									;IN THE SUBTEST) TO LOOP ON ERROR^
  1621
  1622					;**********
  1623
  1624					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1625					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1626					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1627					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=0.  HENCE,
  1628					;THE RESULT IN THE AC SHOULD BE 0,,-1.  THE AC IS
  1629					;CHECKED FOR 0,,-1.  THIS TEST PASSES IF C(AC)=0,,-1
  1630
  1631	031222	201 00 0 00 777777 	B22300:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  1632	031223	671 00 0 00 033732 		TSO	[0]		;*TSO SHOULD PLACE 0,,-1 INTO THE AC
  1633	031224	312 00 0 00 033733 		CAME	[XWD 0,-1]	;PASS IF C(AC)=0,,-1
  1634						STOP^
  1635	031225	254 04 0 00 031226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1636	031226	324 00 0 00 031227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1637									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1638									;IN THE SUBTEST) TO LOOP ON ERROR^
  1639
  1640					;*****     FAILURE ANALYSIS     *****
  1641					;C(AC0)		C(AC1)		FAILING SIGNAL
  1642
  1643					;0				ET1: AD FM - EN
  1644					;0				ET2: AR AD EN
  1645
  1646					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 24
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0051

  1647					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1648					;WHICH ARE MASKED BY BOTH HALVES OF C(E) SWAPPED.
  1649					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1650					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0.  HENCE,
  1651					;THE RESULT IN THE AC SHOULD BE -1,,0.  THE AC IS
  1652					;CHECKED FOR -1,,0.  THIS TEST PASSES IF C(AC)=-1,,0
  1653
  1654	031227	200 00 0 00 033731 	B22400:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
  1655	031230	671 00 0 00 033732 		TSO	[0]		;*TSO SHOULD PLACE -1,,0 INTO THE AC
  1656	031231	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1657						STOP^
  1658	031232	254 04 0 00 031233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1659	031233	324 00 0 00 031234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1660									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1661									;IN THE SUBTEST) TO LOOP ON ERROR^
  1662
  1663					;**********
  1664
  1665					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1666					;WHICH ARE MARKED BY BOTH HALVES OF C(E) SWAPPED.
  1667					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1668					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE,
  1669					;THE RESULT IN THE AC SHOULD BE -1,,-1.  THE AC IS
  1670					;CHECKED FOR -1,,-1.  THIS TEST PASSES IF C(AC)=-1,,-1
  1671
  1672	031234	201 00 0 00 777777 	B22500:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  1673	031235	671 00 0 00 033730 		TSO	[-1]		;*TSO SHOULD PLACE -1,,-1 INTO THE AC
  1674	031236	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  1675						STOP^
  1676	031237	254 04 0 00 031240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1677	031240	324 00 0 00 031241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1678									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1679									;IN THE SUBTEST) TO LOOP ON ERROR^
  1680
  1681					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 25
DSKAC1	MAC	28-Mar-78 12:49		TEST OF LOGICAL TEST INSTRUCTIONS                                                  SEQ 0052

  1682					;THIS TEST VERIFIES THAT TSO PLACES ONES IN THE BITS OF THE AC
  1683					;WHICH ARE MARKED BY BOTH HALVES OF C(E) SWAPPED.
  1684					;THE UNMASKED BITS OF THE AC ARE NOT AFFECTED
  1685					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=-1,,-1.  HENCE,
  1686					;THE RESULT IN THE AC SHOULD BE -1,,-1.  THE AC IS
  1687					;CHECKED FOR -1,,-1.  THIS TEST PASSES IF C(AC)=-1,,-1
  1688
  1689	031241	200 00 0 00 033731 	B22600:	MOVE	[XWD -1,0]	;PRELOAD AC WITH -1,,0
  1690	031242	671 00 0 00 033730 		TSO	[-1]		;*TSO SHOULD PLACE -1,,-1 INTO THE AC
  1691	031243	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  1692						STOP^
  1693	031244	254 04 0 00 031245 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1694	031245	324 00 0 00 031246 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1695									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1696									;IN THE SUBTEST) TO LOOP ON ERROR^
  1697
  1698					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 26
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0053

  1699					SUBTTL	TEST OF HWT INSTRUCTIONS
  1700
  1701					;**********
  1702
  1703					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1704					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1705					;IN THIS CASE AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  1706					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  1707
  1708	031246	400 00 0 00 000000 	B22700:	SETZ			;PRELOAD AC,E WITH 0		
  1709	031247	500 00 0 00 000000 		HLL			;*HLL SHOULD PLACE 0 INTO THE AC
  1710	031250	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  1711						STOP^
  1712	031251	254 04 0 00 031252 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1713	031252	324 00 0 00 031253 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1714									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1715									;IN THE SUBTEST) TO LOOP ON ERROR^
  1716
  1717					;*****     FAILURE ANALYSIS     *****
  1718					;C(AC0)		C(AC1)		FAILING SIGNAL
  1719
  1720					;-1,,0				FC: AD AR + EN
  1721					;0,,-1				FC: AD RT FM + EN
  1722
  1723					;**********
  1724
  1725					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1726					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1727					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  1728					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1,
  1729					;THIS TEST PASSES.
  1730
  1731	031253	474 00 0 00 000000 	B23000:	SETO			;PRELOAD AC WITH -1,,-1
  1732	031254	500 00 0 00 033732 		HLL	[0]		;*HLL SHOULD PLACE 0,,-1 INTO THE AC
  1733	031255	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  1734						STOP^
  1735	031256	254 04 0 00 031257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1736	031257	324 00 0 00 031260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1737									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1738									;IN THE SUBTEST) TO LOOP ON ERROR^
  1739
  1740					;*****     FAILURE ANALYSIS     *****
  1741					;C(AC0)		C(AC1)		FAILING SIGNAL
  1742
  1743					;0,,-1				SW: FCE
  1744					;0				ET2: AR AD EN
  1745
  1746					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 27
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0054

  1747					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1748					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1749					;IN THIS CASE AC=E AND C(AC)=C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1750					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  1751
  1752	031260	474 00 0 00 000000 	B23200:	SETO			;PRELOAD AC,E WITH -1,,-1		
  1753	031261	500 00 0 00 000000 		HLL			;*HLL SHOULD PLACE -1,,-1 INTO THE AC
  1754	031262	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  1755						STOP^
  1756	031263	254 04 0 00 031264 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1757	031264	324 00 0 00 031265 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1758									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1759									;IN THE SUBTEST) TO LOOP ON ERROR^
  1760
  1761					;**********
  1762
  1763					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1764					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1765					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1766					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0,
  1767					;THIS TEST PASSES
  1768
  1769	031265	400 00 0 00 000000 	B23400:	SETZ			;PRELOAD AC WITH 0		
  1770	031266	500 00 0 00 033730 		HLL	[-1]		;*HLL SHOULD PLACE -1,,0 INTO THE AC	
  1771	031267	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1772						STOP^
  1773	031270	254 04 0 00 031271 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1774	031271	324 00 0 00 031272 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1775									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1776									;IN THE SUBTEST) TO LOOP ON ERROR^
  1777
  1778					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 28
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0055

  1779					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1780					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1781					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  1782					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0,
  1783					;THIS TEST PASSES.
  1784
  1785	031272	400 00 0 00 000000 	B23600:	SETZ			;PRELOAD AC WITH 0		
  1786	031273	500 00 0 00 033731 		HLL	[XWD -1,0]	;*HLL SHOULD PLACE -1,,0 INTO THE AC
  1787	031274	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1788						STOP^
  1789	031275	254 04 0 00 031276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1790	031276	324 00 0 00 031277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1791									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1792									;IN THE SUBTEST) TO LOOP ON ERROR^
  1793
  1794					;**********
  1795
  1796					;THIS TEST VERIFIES THAT HLL PLACES THE LEFT HALF OF C(E) INTO
  1797					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  1798					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0,,-1.  HENCE, THE RESULT IN THE AC
  1799					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1,
  1800					;THIS TEST PASSES.
  1801
  1802	031277	474 00 0 00 000000 	B23700:	SETO			;PRELOAD AC WITH -1,,-1
  1803	031300	500 00 0 00 033733 		HLL	[XWD 0,-1]	;*HLL SHOULD PLACE 0,,-1 INTO THE AC
  1804	031301	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  1805						STOP^
  1806	031302	254 04 0 00 031303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1807	031303	324 00 0 00 031304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1808									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1809									;IN THE SUBTEST) TO LOOP ON ERROR^
  1810
  1811					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 29
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0056

  1812					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1813					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1814					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  1815					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  1816
  1817	031304	400 00 0 00 000000 	B24000:	SETZ			;PRELOAD AC,E WITH 0		
  1818	031305	510 00 0 00 000000 		HLLZ			;*HLLZ SHOULD PLACE 0 INTO THE AC
  1819	031306	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  1820						STOP^
  1821	031307	254 04 0 00 031310 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1822	031310	324 00 0 00 031311 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1823									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1824									;IN THE SUBTEST) TO LOOP ON ERROR^
  1825
  1826					;*****     FAILURE ANALYSIS     *****
  1827					;C(AC0)		C(AC1)		FAILING SIGNAL
  1828
  1829					;-1,,0				FC: AD LT AR + EN
  1830
  1831					;**********
  1832
  1833					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1834					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1835					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1836					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  1837					;IF C(AC)=-1,,0, THIS TEST PASSES.
  1838
  1839	031311	474 00 0 00 000000 	B24300:	SETO			;PRELOAD AC WITH -1,,-1
  1840	031312	510 00 0 00 033730 		HLLZ	[-1]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1841	031313	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1842						STOP^
  1843	031314	254 04 0 00 031315 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1844	031315	324 00 0 00 031316 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1845									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1846									;IN THE SUBTEST) TO LOOP ON ERROR^
  1847
  1848					;*****     FAILURE ANALYSIS     *****
  1849					;C(AC0)		C(AC1)		FAILING SIGNAL
  1850
  1851					;0				SW: FCE
  1852					;-1,,-1				ET2: AR LT AD EN
  1853
  1854					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 30
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0057

  1855					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1856					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1857					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1858					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO
  1859					;IF C(AC) IS NON-ZERO, THIS TEST PASSES.
  1860
  1861	031316	400 00 0 00 000000 	B24400:	SETZ			;PRELOAD AC WITH -1,,-1
  1862	031317	510 00 0 00 033730 		HLLZ	[-1]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1863	031320	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1864						STOP^
  1865	031321	254 04 0 00 031322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1866	031322	324 00 0 00 031323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1867									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1868									;IN THE SUBTEST) TO LOOP ON ERROR^
  1869
  1870					;**********
  1871
  1872					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1873					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1874					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  1875					;SHOULD BE 0.  THE AC IS CHECKED FOR ZERO
  1876					;IF C(AC) IS ZERO, THIS TEST PASSES.
  1877
  1878	031323	474 00 0 00 000000 	B24500:	SETO			;PRELOAD AC WITH -1,,-1		
  1879	031324	510 00 0 00 033732 		HLLZ	[0]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1880	031325	332 00 0 00 000000 		SKIPE			;PASS IF C(AC) IS ZERO.
  1881						STOP^
  1882	031326	254 04 0 00 031327 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1883	031327	324 00 0 00 031330 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1884									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1885									;IN THE SUBTEST) TO LOOP ON ERROR^
  1886
  1887					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 31
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0058

  1888					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1889					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1890					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  1891					;SHOULD BE 0.  THE AC IS CHECKED FOR ZERO
  1892					;IF C(AC) IS ZERO, THIS TEST PASSES.
  1893
  1894	031330	400 00 0 00 000000 	B24600:	SETZ			;PRELOAD AC WITH 0
  1895	031331	510 00 0 00 033732 		HLLZ	[0]		;*HLLZ SHOULD PLACE 0 INTO THE AC
  1896	031332	332 00 0 00 000000 		SKIPE			;PASS IF C(AC) IS ZERO.
  1897						STOP^
  1898	031333	254 04 0 00 031334 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1899	031334	324 00 0 00 031335 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1900									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1901									;IN THE SUBTEST) TO LOOP ON ERROR^
  1902
  1903					;**********
  1904
  1905					;THIS TEST VERIFIES THAT HLLZI ALWAYS CLEARS THE AC.
  1906					;IN THIS CASE C(AC)=-1,,-1 AND E=0,,-1.
  1907					;THE RESULT IN THE AC SHOULD BE 0
  1908					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  1909
  1910	031335	474 00 0 00 000000 	B24700:	SETO			;PRELOAD AC WITH -1,,-1
  1911	031336	511 00 0 00 777777 		HLLZI	-1		;*HLLZI SHOULD CLEAR THE AC
  1912	031337	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  1913						STOP^
  1914	031340	254 04 0 00 031341 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1915	031341	324 00 0 00 031342 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1916									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1917									;IN THE SUBTEST) TO LOOP ON ERROR^
  1918
  1919					;*****     FAILURE ANALYSIS     *****
  1920					;C(AC0)		C(AC1)		FAILING SIGNAL
  1921
  1922					;-1,,0				FC: AD LT AR + EN
  1923					;0,,-1				ET2: AR LT AD EN
  1924
  1925					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 32
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0059

  1926					;THIS TEST VERIFIES THAT HLLZI ALWAYS CLEARS THE AC.
  1927					;IN THIS CASE C(AC)=0 AND E=0,,-1.
  1928					;THE RESULT IN THE AC SHOULD BE 0
  1929					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  1930
  1931	031342	400 00 0 00 000000 	B25000:	SETZ			;PRELOAD AC WITH 0
  1932	031343	511 00 0 00 777777 		HLLZI	-1		;*HLLZI SHOULD CLEAR THE AC
  1933	031344	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  1934						STOP^
  1935	031345	254 04 0 00 031346 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1936	031346	324 00 0 00 031347 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1937									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1938									;IN THE SUBTEST) TO LOOP ON ERROR^
  1939
  1940					;**********
  1941
  1942					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1943					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1944					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  1945					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  1946					;IF C(AC)=-1,,0, THIS TEST PASSES.
  1947
  1948	031347	474 00 0 00 000000 	B25100:	SETO			;PRELOAD AC WITH -1,,-1
  1949	031350	510 00 0 00 033731 		HLLZ	[XWD -1,0]	;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1950	031351	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0.
  1951						STOP^
  1952	031352	254 04 0 00 031353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1953	031353	324 00 0 00 031354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1955									;IN THE SUBTEST) TO LOOP ON ERROR^
  1956
  1957					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 33
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0060

  1958					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1959					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1960					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  1961					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  1962					;IF C(AC)=-1,,0 THIS TEST PASSES.
  1963
  1964	031354	400 00 0 00 000000 	B25200:	SETZ			;PRELOAD AC WITH 0
  1965	031355	510 00 0 00 033731 		HLLZ	[XWD -1,0]	;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1966	031356	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1967						STOP^
  1968	031357	254 04 0 00 031360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1969	031360	324 00 0 00 031361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1970									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1971									;IN THE SUBTEST) TO LOOP ON ERROR^
  1972
  1973					;**********
  1974
  1975					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1976					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1977					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1978					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  1979					;IF C(AC)=-1,,0, THIS TEST PASSES.
  1980
  1981	031361	201 00 0 00 777777 	B25300:	MOVEI	-1		;PRELOAD AC WITH -1,,-1
  1982	031362	510 00 0 00 033730 		HLLZ	[-1]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1983	031363	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  1984						STOP^
  1985	031364	254 04 0 00 031365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1986	031365	324 00 0 00 031366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1987									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1988									;IN THE SUBTEST) TO LOOP ON ERROR^
  1989
  1990					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 34
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0061

  1991					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  1992					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  1993					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  1994					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  1995					;IF C(AC)=-1,,0 THIS TEST PASSES.
  1996
  1997	031366	205 00 0 00 777777 	B25400:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  1998	031367	510 00 0 00 033730 		HLLZ	[-1]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  1999	031370	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0.
  2000						STOP^
  2001	031371	254 04 0 00 031372 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2002	031372	324 00 0 00 031373 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2003									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2004									;IN THE SUBTEST) TO LOOP ON ERROR^
  2005
  2006					;**********
  2007
  2008					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  2009					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  2010					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2011					;SHOULD BE 0.  THE AC IS CHECKED FOR ZERO.
  2012					;IF C(AC) IS ZERO, THIS TEST PASSES.
  2013
  2014	031373	201 00 0 00 777777 	B25500:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2015	031374	510 00 0 00 033732 		HLLZ	[0]		;*HLLZ SHOULD PLACE 0 INTO THE AC
  2016	031375	332 00 0 00 000000 		SKIPE			;PASS IF C(AC) IS ZERO.
  2017						STOP^
  2018	031376	254 04 0 00 031377 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2019	031377	324 00 0 00 031400 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2020									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2021									;IN THE SUBTEST) TO LOOP ON ERROR^
  2022
  2023					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 35
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0062

  2024					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  2025					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  2026					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2027					;SHOULD BE 0.  THE AC IS CHECKED FOR ZERO.
  2028					;IF C(AC) IS ZERO, THIS TEST PASSES.
  2029
  2030	031400	205 00 0 00 777777 	B25600:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  2031	031401	510 00 0 00 033732 		HLLZ	[0]		;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  2032	031402	332 00 0 00 000000 		SKIPE			;PASS IF C(AC) IS ZERO.
  2033						STOP^
  2034	031403	254 04 0 00 031404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2035	031404	324 00 0 00 031405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2037									;IN THE SUBTEST) TO LOOP ON ERROR^
  2038
  2039					;**********
  2040
  2041					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  2042					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  2043					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2044					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  2045					;IF C(AC)=-1,,0, THIS TEST PASSES.
  2046
  2047	031405	201 00 0 00 777777 	B25700:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  2048	031406	510 00 0 00 033731 		HLLZ	[XWD -1,0]	;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  2049	031407	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2050						STOP^
  2051	031410	254 04 0 00 031411 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2052	031411	324 00 0 00 031412 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2053									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2054									;IN THE SUBTEST) TO LOOP ON ERROR^
  2055
  2056					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 36
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0063

  2057					;THIS TEST VERIFIES THAT HLLZI ALWAYS CLEARS THE AC.
  2058					;IN THIS CASE C(AC)=0,,-1 AND E=0,,-1.
  2059					;THE RESULT IN THE AC SHOULD BE 0
  2060					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  2061
  2062	031412	201 00 0 00 777777 	B26000:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  2063	031413	511 00 0 00 777777 		HLLZI	-1		;*HLLZI SHOULD CLEAR THE AC
  2064	031414	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2065						STOP^
  2066	031415	254 04 0 00 031416 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2067	031416	324 00 0 00 031417 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2068									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2069									;IN THE SUBTEST) TO LOOP ON ERROR^
  2070
  2071					;**********
  2072
  2073					;THIS TEST VERIFIES THAT HLLZ PLACES THE LEFT HALF OF C(E) INTO
  2074					;THE LEFT HALF OF THE AC AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  2075					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2076					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  2077					;IF C(AC)=-1,,0, THIS TEST PASSES.
  2078
  2079	031417	205 00 0 00 777777 	B26100:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  2080	031420	510 00 0 00 033731 		HLLZ	[XWD -1,0]	;*HLLZ SHOULD PLACE -1,,0 INTO THE AC
  2081	031421	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2082						STOP^
  2083	031422	254 04 0 00 031423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2084	031423	324 00 0 00 031424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2085									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2086									;IN THE SUBTEST) TO LOOP ON ERROR^
  2087
  2088					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 37
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0064

  2089					;THIS TEST VERIFIES THAT HLLZI ALWAYS CLEARS THE AC.
  2090					;IN THIS CASE C(AC)=-1,,0 AND E=0,,-1.
  2091					;THE RESULT IN THE AC SHOULD BE 0
  2092					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  2093
  2094	031424	205 00 0 00 777777 	B26200:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  2095	031425	511 00 0 00 777777 		HLLZI	-1		;*HLLZI SHOULD CLEAR THE AC
  2096	031426	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2097						STOP^
  2098	031427	254 04 0 00 031430 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2099	031430	324 00 0 00 031431 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2100									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2101									;IN THE SUBTEST) TO LOOP ON ERROR^
  2102
  2103					;**********
  2104
  2105					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2106					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2107					;IN THIS CASE AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  2108					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2109
  2110	031431	400 00 0 00 000000 	B26300:	SETZ			;PRELOAD AC WITH 0
  2111	031432	540 00 0 00 000000 		HRR			;*HRR SHOULD PLACE 0 INTO THE AC
  2112	031433	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2113						STOP^
  2114	031434	254 04 0 00 031435 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2115	031435	324 00 0 00 031436 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2116									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2117									;IN THE SUBTEST) TO LOOP ON ERROR^
  2118
  2119					;*****     FAILURE ANALYSIS     *****
  2120					;C(AC0)		C(AC1)		FAILING SIGNAL
  2121
  2122					;0,,-1				FC: AD RT AR + EN
  2123					;-1,,0				FC: AD LT FM + EN
  2124
  2125					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 38
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0065

  2126					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2127					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2128					;IN THIS CASE AC=E AND C(AC)=C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2129					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2130
  2131	031436	474 00 0 00 000000 	B26500:	SETO			;PRELOAD AC WITH -1,,-1
  2132	031437	540 00 0 00 000000 		HRR			;*HRR SHOULD PLACE -1,,-1 INTO THE AC
  2133	031440	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2134						STOP^
  2135	031441	254 04 0 00 031442 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2136	031442	324 00 0 00 031443 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2137									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2138									;IN THE SUBTEST) TO LOOP ON ERROR^
  2139
  2140					;*****     FAILURE ANALYSIS     *****
  2141					;C(AC0)		C(AC1)		FAILING SIGNAL
  2142
  2143					;-1,,0				SW: FCE
  2144
  2145					;**********
  2146
  2147					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2148					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2149					;IN THIS CASE C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2150					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2151
  2152	031443	474 00 0 00 000000 	B26600:	SETO			;PRELOAD AC WITH -1,,-1
  2153	031444	540 00 0 00 033731 		HRR	[XWD -1,0]	;*HRR SHOULD PLACE -1,,0 INTO THE AC
  2154	031445	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2155						STOP^
  2156	031446	254 04 0 00 031447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2157	031447	324 00 0 00 031450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2158									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2159									;IN THE SUBTEST) TO LOOP ON ERROR^
  2160
  2161					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 39
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0066

  2162					;THIS TEST VERIFIES THAT HRRI PLACES E INTO
  2163					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED
  2164					;IN THIS CASE C(AC)=-1,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2165					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2166
  2167	031450	474 00 0 00 000000 	B26700:	SETO			;PRELOAD AC WITH -1,,-1
  2168	031451	541 00 0 00 777777 		HRRI	-1		;*HRRI SHOULD PLACE -1,,-1 INTO THE AC
  2169	031452	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2170						STOP^
  2171	031453	254 04 0 00 031454 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2172	031454	324 00 0 00 031455 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2173									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2174									;IN THE SUBTEST) TO LOOP ON ERROR^
  2175
  2176					;*****     FAILURE ANALYSIS     *****
  2177					;C(AC0)		C(AC1)		FAILING SIGNAL
  2178
  2179					;0,,-1				ET2: AR AD EN
  2180
  2181					;**********
  2182
  2183					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2184					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2185					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2186					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2187
  2188	031455	474 00 0 00 000000 	B27000:	SETO			;PRELOAD AC WITH -1,,-1
  2189	031456	540 00 0 00 033732 		HRR	[0]		;*HRR SHOULD PLACE -1,,0 INTO THE AC
  2190	031457	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=0
  2191						STOP^
  2192	031460	254 04 0 00 031461 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2193	031461	324 00 0 00 031462 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2194									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2195									;IN THE SUBTEST) TO LOOP ON ERROR^
  2196
  2197					;*****     FAILURE ANALYSIS     *****
  2198					;C(AC0)		C(AC1)		FAILING SIGNAL
  2199
  2200					;0				ET2: AR AD EN
  2201
  2202					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 40
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0067

  2203					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2204					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2205					;IN THIS CASE C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2206					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2207
  2208	031462	400 00 0 00 000000 	B27100:	SETZ			;PRELOAD AC WITH 0
  2209	031463	540 00 0 00 033732 		HRR	[0]		;*HRR SHOULD PLACE 0 INTO THE AC
  2210	031464	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2211						STOP^
  2212	031465	254 04 0 00 031466 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2213	031466	324 00 0 00 031467 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2215									;IN THE SUBTEST) TO LOOP ON ERROR^
  2216
  2217					;**********
  2218
  2219					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2220					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2221					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2222					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2223
  2224	031467	400 00 0 00 000000 	B27200:	SETZ			;PRELOAD AC WITH 0
  2225	031470	540 00 0 00 033730 		HRR	[-1]		;*HRR SHOULD PLACE 0,,-1 INTO THE AC
  2226	031471	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2227						STOP^
  2228	031472	254 04 0 00 031473 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2229	031473	324 00 0 00 031474 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2230									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2231									;IN THE SUBTEST) TO LOOP ON ERROR^
  2232
  2233					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 41
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0068

  2234					;THIS TEST VERIFIES THAT HRRI PLACES E INTO
  2235					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED
  2236					;IN THIS CASE C(AC)=0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2237					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2238
  2239	031474	400 00 0 00 000000 	B27300:	SETZ			;PRELOAD AC WITH 0
  2240	031475	541 00 0 00 777777 		HRRI	-1		;*HRRI SHOULD PLACE 0,,-1 INTO THE AC
  2241	031476	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2242						STOP^
  2243	031477	254 04 0 00 031500 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2244	031500	324 00 0 00 031501 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2245									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2246									;IN THE SUBTEST) TO LOOP ON ERROR^
  2247
  2248					;*****     FAILURE ANALYSIS     *****
  2249					;C(AC0)		C(AC1)		FAILING SIGNAL
  2250
  2251					;-1,,-1				FC: AD LT FM + EN
  2252
  2253					;**********
  2254
  2255					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2256					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2257					;IN THIS CASE C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2258					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2259
  2260	031501	400 00 0 00 000000 	B27400:	SETZ			;PRELOAD AC WITH 0
  2261	031502	540 00 0 00 033731 		HRR	[XWD -1,0]	;*HRR SHOULD PLACE 0 INTO THE AC
  2262	031503	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2263						STOP^
  2264	031504	254 04 0 00 031505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2265	031505	324 00 0 00 031506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2266									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2267									;IN THE SUBTEST) TO LOOP ON ERROR^
  2268
  2269					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 42
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0069

  2270					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2271					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2272					;IN THIS CASE C(AC)=0,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2273					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2274
  2275	031506	201 00 0 00 777777 	B27500:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  2276	031507	540 00 0 00 033731 		HRR	[XWD -1,0]	;*HRR SHOULD PLACE 0 INTO THE AC
  2277	031510	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2278						STOP^
  2279	031511	254 04 0 00 031512 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2280	031512	324 00 0 00 031513 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2281									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2282									;IN THE SUBTEST) TO LOOP ON ERROR^
  2283
  2284					;**********
  2285
  2286					;THIS TEST VERIFIES THAT HRRI PLACES E INTO
  2287					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED
  2288					;IN THIS CASE C(AC)=-1,,0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2289					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2290
  2291	031513	205 00 0 00 777777 	B27600:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  2292	031514	541 00 0 00 777777 		HRRI	-1		;*HRRI SHOULD PLACE -1,,-1 INTO THE AC
  2293	031515	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2294						STOP^
  2295	031516	254 04 0 00 031517 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2296	031517	324 00 0 00 031520 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2297									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2298									;IN THE SUBTEST) TO LOOP ON ERROR^
  2299
  2300					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 43
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0070

  2301					;THIS TEST VERIFIES THAT HRRI PLACES E INTO
  2302					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED
  2303					;IN THIS CASE C(AC)=0,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2304					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2305
  2306	031520	201 00 0 00 777777 	B27700:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  2307	031521	541 00 0 00 777777 		HRRI	-1		;*HRRI SHOULD PLACE 0,,-1 INTO THE AC
  2308	031522	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2309						STOP^
  2310	031523	254 04 0 00 031524 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2311	031524	324 00 0 00 031525 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2312									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2313									;IN THE SUBTEST) TO LOOP ON ERROR^
  2314
  2315					;**********
  2316
  2317					;THIS TEST VERIFIES THAT HRR PLACES THE RIGHT HALF OF C(E) INTO
  2318					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2319					;IN THIS CASE C(AC)=-1,,0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2320					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2321
  2322	031525	205 00 0 00 777777 	B30000:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  2323	031526	540 00 0 00 033731 		HRR	[XWD -1,0]	;*HRR SHOULD PLACE -1,,0 INTO THE AC
  2324	031527	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2325						STOP^
  2326	031530	254 04 0 00 031531 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2327	031531	324 00 0 00 031532 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2328									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2329									;IN THE SUBTEST) TO LOOP ON ERROR^
  2330
  2331					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 44
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0071

  2332					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2333					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2334					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  2335					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2336
  2337	031532	400 00 0 00 000000 	B30100:	SETZ			;PRELOAD AC,E WITH 0
  2338	031533	550 00 0 00 000000 		HRRZ			;*HRRZ SHOULD PLACE 0 INTO THE AC
  2339	031534	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2340						STOP^
  2341	031535	254 04 0 00 031536 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2342	031536	324 00 0 00 031537 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2343									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2344									;IN THE SUBTEST) TO LOOP ON ERROR^
  2345
  2346					;*****     FAILURE ANALYSIS     *****
  2347					;C(AC0)		C(AC1)		FAILING SIGNAL
  2348
  2349					;0,,-1				FC: AD RT AR + EN
  2350
  2351					;**********
  2352
  2353					;THIS TEST VERIFIES THAT HRRZI PLACES E INTO
  2354					;THE RIGHT HALF OF THE AC AND CLEARS THE LEFT HALF OF THE AC
  2355					;IN THIS CASE C(AC)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2356					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES
  2357
  2358	031537	474 00 0 00 000000 	B30400:	SETO			;PRELOAD AC WITH -1,,-1
  2359	031540	551 00 0 00 777777 		HRRZI	-1		;*HRRZI SHOULD PLACE 0,,-1 INTO THE AC
  2360	031541	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2361						STOP^
  2362	031542	254 04 0 00 031543 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2363	031543	324 00 0 00 031544 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2364									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2365									;IN THE SUBTEST) TO LOOP ON ERROR^
  2366
  2367					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 45
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0072

  2368					;THIS TEST VERIFIES THAT HRRZI PLACES E INTO
  2369					;THE RIGHT HALF OF THE AC AND CLEARS THE LEFT HALF OF THE AC
  2370					;IN THIS CASE C(AC)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2371					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  2372
  2373	031544	474 00 0 00 000000 	B30500:	SETO			;PRELOAD AC WITH -1,,-1
  2374	031545	551 00 0 00 000000 		HRRZI	0		;*HRRZI SHOULD PLACE 0 INTO THE AC
  2375	031546	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2376						STOP^
  2377	031547	254 04 0 00 031550 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2378	031550	324 00 0 00 031551 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2379									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2380									;IN THE SUBTEST) TO LOOP ON ERROR^
  2381
  2382					;*****     FAILURE ANALYSIS     *****
  2383					;C(AC0)		C(AC1)		FAILING SIGNAL
  2384
  2385					;0,,-1				FC: AD RT AR + EN
  2386
  2387					;**********
  2388
  2389					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2390					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2391					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2392					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2393
  2394	031551	474 00 0 00 000000 	B30600:	SETO			;PRELOAD AC WITH -1,,-1
  2395	031552	550 00 0 00 033731 		HRRZ	[XWD -1,0]	;*HRRZ SHOULD PLACE 0 INTO THE AC
  2396	031553	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2397						STOP^
  2398	031554	254 04 0 00 031555 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2399	031555	324 00 0 00 031556 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2400									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2401									;IN THE SUBTEST) TO LOOP ON ERROR^
  2402
  2403					;*****     FAILURE ANALYSIS     *****
  2404					;C(AC0)		C(AC1)		FAILING SIGNAL
  2405
  2406					;E				SW: FCE
  2407					;-1,,0				ET2: AR RT AD EN
  2408
  2409					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 46
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0073

  2410					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2411					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2412					;IN THIS CASE C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2413					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2414
  2415	031556	474 00 0 00 000000 	B30700:	SETO			;PRELOAD AC WITH -1,,-1
  2416	031557	550 00 0 00 033730 		HRRZ	[-1]		;*HRRZ SHOULD PLACE 0,,-1 INTO THE AC
  2417	031560	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2418						STOP^
  2419	031561	254 04 0 00 031562 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2420	031562	324 00 0 00 031563 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2421									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2422									;IN THE SUBTEST) TO LOOP ON ERROR^
  2423
  2424					;**********
  2425
  2426					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2427					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2428					;IN THIS CASE C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2429					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2430
  2431	031563	201 00 0 00 777777 	B31000:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  2432	031564	550 00 0 00 033730 		HRRZ	[-1]		;*HRRZ SHOULD PLACE 0,,-1 INTO THE AC
  2433	031565	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2434						STOP^
  2435	031566	254 04 0 00 031567 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2436	031567	324 00 0 00 031570 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2437									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2438									;IN THE SUBTEST) TO LOOP ON ERROR^
  2439
  2440					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 47
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0074

  2441					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2442					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2443					;IN THIS CASE C(AC)=0,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2444					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2445
  2446	031570	201 00 0 00 777777 	B31100:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2447	031571	550 00 0 00 033732 		HRRZ	[0]		;*HRRZ SHOULD PLACE 0 INTO THE AC
  2448	031572	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=0
  2449						STOP^
  2450	031573	254 04 0 00 031574 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2451	031574	324 00 0 00 031575 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2452									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2453									;IN THE SUBTEST) TO LOOP ON ERROR^
  2454
  2455					;**********
  2456
  2457					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2458					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2459					;IN THIS CASE C(AC)=-1,,0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2460					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2461
  2462	031575	205 00 0 00 777777 	B31200:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2463	031576	550 00 0 00 033730 		HRRZ	[-1]		;*HRRZ SHOULD PLACE 0,,-1 INTO THE AC
  2464	031577	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2465						STOP^
  2466	031600	254 04 0 00 031601 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2467	031601	324 00 0 00 031602 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2468									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2469									;IN THE SUBTEST) TO LOOP ON ERROR^
  2470
  2471					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 48
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0075

  2472					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2473					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2474					;IN THIS CASE C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2475					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2476
  2477	031602	205 00 0 00 777777 	B31300:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2478	031603	550 00 0 00 033732 		HRRZ	[0]		;*HRRZ SHOULD PLACE 0 INTO THE AC
  2479	031604	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=0
  2480						STOP^
  2481	031605	254 04 0 00 031606 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2482	031606	324 00 0 00 031607 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2483									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2484									;IN THE SUBTEST) TO LOOP ON ERROR^
  2485
  2486					;**********
  2487
  2488					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2489					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2490					;IN THIS CASE C(AC)=0,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2491					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2492
  2493	031607	201 00 0 00 777777 	B31400:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2494	031610	550 00 0 00 033731 		HRRZ	[XWD -1,0]	;*HRRZ SHOULD PLACE 0 INTO THE AC
  2495	031611	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2496						STOP^
  2497	031612	254 04 0 00 031613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2498	031613	324 00 0 00 031614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2500									;IN THE SUBTEST) TO LOOP ON ERROR^
  2501
  2502					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 49
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0076

  2503					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2504					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2505					;IN THIS CASE C(AC)=-1,,0 AND C(E)=0,,-1.  HENCE, THE RESULT IN THE AC
  2506					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2507
  2508	031614	205 00 0 00 777777 	B31500:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2509	031615	550 00 0 00 033733 		HRRZ	[XWD 0,-1]	;*HRRZ SHOULD PLACE 0,,-1 INTO THE AC
  2510	031616	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2511						STOP^
  2512	031617	254 04 0 00 031620 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2513	031620	324 00 0 00 031621 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2514									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2515									;IN THE SUBTEST) TO LOOP ON ERROR^
  2516
  2517					;**********
  2518
  2519					;THIS TEST VERIFIES THAT HRRZI PLACES E INTO
  2520					;THE RIGHT HALF OF THE AC AND CLEARS THE LEFT HALF OF THE AC
  2521					;IN THIS CASE C(AC)=0,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2522					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES
  2523
  2524	031621	201 00 0 00 777777 	B31600:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2525	031622	551 00 0 00 777777 		HRRZI	-1		;*HRRZI SHOULD PLACE 0,,-1 INTO THE AC
  2526	031623	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,1
  2527						STOP^
  2528	031624	254 04 0 00 031625 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2529	031625	324 00 0 00 031626 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2530									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2531									;IN THE SUBTEST) TO LOOP ON ERROR^
  2532
  2533					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 50
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0077

  2534					;THIS TEST VERIFIES THAT HRRZ PLACES THE RIGHT HALF OF C(E) INTO
  2535					;RIGHT HALF OF THE AC AND PLACES ZEROS INTO THE LEFT HALF OF THE AC
  2536					;IN THIS CASE C(AC)=-1,,0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2537					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2538
  2539	031626	205 00 0 00 777777 	B31700:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2540	031627	550 00 0 00 033731 		HRRZ	[XWD -1,0]	;*HRRZ SHOULD PLACE 0 INTO THE AC,0]
  2541	031630	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=0
  2542						STOP^
  2543	031631	254 04 0 00 031632 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2544	031632	324 00 0 00 031633 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2545									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2546									;IN THE SUBTEST) TO LOOP ON ERROR^
  2547
  2548					;**********
  2549
  2550					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2551					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2552					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  2553					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2554
  2555	031633	400 00 0 00 000000 	B32000:	SETZ			;PRELOAD AC WITH 0		
  2556	031634	504 00 0 00 000000 		HRL			;*HRL SHOULD PLACE 0 INTO THE AC
  2557	031635	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2558						STOP^
  2559	031636	254 04 0 00 031637 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2560	031637	324 00 0 00 031640 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2561									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2562									;IN THE SUBTEST) TO LOOP ON ERROR^
  2563
  2564					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 51
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0078

  2565					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2566					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2567					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2568					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2569
  2570	031640	474 00 0 00 000000 	B32100:	SETO			;PRELOAD AC WITH -1,,-1		
  2571	031641	504 00 0 00 033730 		HRL	[-1]		;*HRL SHOULD PLACE -1,,-1 INTO THE AC
  2572	031642	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2573						STOP^
  2574	031643	254 04 0 00 031644 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2575	031644	324 00 0 00 031645 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2576									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2577									;IN THE SUBTEST) TO LOOP ON ERROR^
  2578
  2579					;*****     FAILURE ANALYSIS     *****
  2580					;C(AC0)		C(AC1)		FAILING SIGNAL
  2581
  2582					;E,,-1				SW: FCE
  2583					;0,,-1				FC: AD RT FM + EN
  2584					;0,,-1				ET2: AR LT AR RT EN
  2585					;-1,,0				ET2: AR RT AD EN
  2586
  2587					;**********
  2588
  2589					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2590					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2591					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2592					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2593
  2594	031645	474 00 0 00 000000 	B32200:	SETO			;PRELOAD AC WITH -1,,-1		
  2595	031646	504 00 0 00 033732 		HRL	[0]		;*HRL SHOULD PLACE 0,,-1 INTO THE AC
  2596	031647	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2597						STOP^
  2598	031650	254 04 0 00 031651 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2599	031651	324 00 0 00 031652 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2600									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2601									;IN THE SUBTEST) TO LOOP ON ERROR^
  2602
  2603					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 52
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0079

  2604					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2605					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2606					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2607					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2608
  2609	031652	474 00 0 00 000000 	B32300:	SETO			;PRELOAD AC WITH -1,,-1		
  2610	031653	544 00 0 00 033732 		HLR	[0]		;*HLR SHOULD PLACE -1,,0 INTO THE AC
  2611	031654	312 00 0 00 033731 		CAME	[-1,,0]		;PASS IF C(AC)=-1,,0
  2612						STOP^
  2613	031655	254 04 0 00 031656 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2614	031656	324 00 0 00 031657 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2615									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2616									;IN THE SUBTEST) TO LOOP ON ERROR^
  2617
  2618					;*****     FAILURE ANALYSIS     *****
  2619					;C(AC0)		C(AC1)		FAILING SIGNAL
  2620
  2621					;0				ET2: AR LT AD EN
  2622
  2623					;**********
  2624
  2625					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2626					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2627					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2628					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2629
  2630	031657	400 00 0 00 000000 	B32600:	SETZ			;PRELOAD AC WITH 0		
  2631	031660	504 00 0 00 033730 		HRL	[-1]		;*HRL SHOULD PLACE -1,,0 INTO THE AC
  2632	031661	312 00 0 00 033731 		CAME	[-1,,0]		;PASS IF C(AC)=-1,,0
  2633						STOP^
  2634	031662	254 04 0 00 031663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2635	031663	324 00 0 00 031664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2636									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2637									;IN THE SUBTEST) TO LOOP ON ERROR^
  2638
  2639					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 53
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0080

  2640					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2641					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2642					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2643					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2644
  2645	031664	400 00 0 00 000000 	B32700:	SETZ			;PRELOAD AC WITH 0		
  2646	031665	544 00 0 00 033730 		HLR	[-1]		;*HLR SHOULD PLACE 0,,-1 INTO THE AC
  2647	031666	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2648						STOP^
  2649	031667	254 04 0 00 031670 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2650	031670	324 00 0 00 031671 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2651									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2652									;IN THE SUBTEST) TO LOOP ON ERROR^
  2653
  2654					;*****     FAILURE ANALYSIS     *****
  2655					;C(AC0)		C(AC1)		FAILING SIGNAL
  2656
  2657					;0				SW: FCE
  2658					;-1,,-1				FC: AD LT FM + EN
  2659					;0				ET2: AR RT AR LT EN
  2660
  2661					;**********
  2662
  2663					;THIS TEST VERIFIES THAT HRLI PLACES E INTO
  2664					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  2665					;IN THIS CASE C(AC)=-1,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2666					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  2667
  2668	031671	400 00 0 00 000000 	B33000:	SETZ			;PRELOAD AC WITH -1,,-1		
  2669	031672	505 00 0 00 777777 		HRLI	-1		;*HRLI SHOULD PLACE -1,,-1 INTO THE AC
  2670	031673	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,-1
  2671						STOP^
  2672	031674	254 04 0 00 031675 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2673	031675	324 00 0 00 031676 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2674									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2675									;IN THE SUBTEST) TO LOOP ON ERROR^
  2676
  2677					;*****     FAILURE ANALYSIS     *****
  2678					;C(AC0)		C(AC1)		FAILING SIGNAL
  2679
  2680					;-1,,-1				FC: AD RT FM + EN
  2681					;0				ET2: AR LT AR RT EN
  2682
  2683					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 54
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0081

  2684					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2685					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2686					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2687					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2688
  2689	031676	400 00 0 00 000000 	B33100:	SETZ			;PRELOAD AC WITH -1,,-1		
  2690	031677	544 00 0 00 033731 		HLR	[XWD -1,0]	;*HLR SHOULD PLACE -1,,-1 INTO THE AC
  2691	031700	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2692						STOP^
  2693	031701	254 04 0 00 031702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2694	031702	324 00 0 00 031703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2695									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2696									;IN THE SUBTEST) TO LOOP ON ERROR^
  2697
  2698					;**********
  2699
  2700					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2701					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2702					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2703					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2704
  2705	031703	400 00 0 00 000000 	B33200:	SETZ			;PRELOAD AC WITH 0		
  2706	031704	504 00 0 00 033731 		HRL	[XWD -1,0]	;*HRL SHOULD PLACE 0 INTO THE AC
  2707	031705	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2708						STOP^
  2709	031706	254 04 0 00 031707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2710	031707	324 00 0 00 031710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2711									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2712									;IN THE SUBTEST) TO LOOP ON ERROR^
  2713
  2714					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 55
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0082

  2715					;THIS TEST VERIFIES THAT HLRI ALWAYS CLEARS THE RIGHT HALF
  2716					;OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2717					;IN THIS CASE, C(AC)=0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2718					;SHOULD BE 0.  THE AC IS CHECKED FOR 0
  2719					;IF C(AC)=0, THIS TEST PASSES.
  2720
  2721	031710	400 00 0 00 000000 	B33300:	SETZ			;PRELOAD AC WITH 0		
  2722	031711	545 00 0 00 777777 		HLRI	-1		;*HLRI SHOULD PLACE 0 INTO THE AC
  2723	031712	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2724						STOP^
  2725	031713	254 04 0 00 031714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2726	031714	324 00 0 00 031715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2727									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2728									;IN THE SUBTEST) TO LOOP ON ERROR^
  2729
  2730					;*****     FAILURE ANALYSIS     *****
  2731					;C(AC0)		C(AC1)		FAILING SIGNAL
  2732
  2733					;-1,,0				FC:AD LT FM + EN
  2734
  2735					;**********
  2736
  2737					;THIS TEST VERIFIES THAT HRLI PLACES E INTO
  2738					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED.
  2739					;IN THIS CASE C(AC)=-1,,-1 AND E=-1,,-1.  HENCE, THE RESULT IN THE AC
  2740					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  2741
  2742	031715	474 00 0 00 000000 	B33400:	SETO			;PRELOAD AC WITH -1,,-1		
  2743	031716	505 00 0 00 777777 		HRLI	-1		;*HRLI SHOULD PLACE -1,,-1 INTO THE AC
  2744	031717	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2745						STOP^
  2746	031720	254 04 0 00 031721 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2747	031721	324 00 0 00 031722 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2748									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2749									;IN THE SUBTEST) TO LOOP ON ERROR^
  2750
  2751					;*****     FAILURE ANALYSIS     *****
  2752					;C(AC0)		C(AC1)		FAILING SIGNAL
  2753
  2754					;-1,,0				ET2: AR RT AD EN
  2755
  2756
  2757					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 56
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0083

  2758					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2759					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2760					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2761					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2762
  2763	031722	474 00 0 00 000000 	B33500:	SETO			;PRELOAD AC WITH -1,,-1		
  2764	031723	544 00 0 00 033731 		HLR	[XWD -1,0]	;*HLR SHOULD PLACE -1,,-1 INTO THE AC
  2765	031724	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2766						STOP^
  2767	031725	254 04 0 00 031726 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2768	031726	324 00 0 00 031727 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2769									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2770									;IN THE SUBTEST) TO LOOP ON ERROR^
  2771
  2772					;**********
  2773
  2774					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2775					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2776					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  2777					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2778
  2779	031727	474 00 0 00 000000 	B33600:	SETO			;PRELOAD AC WITH -1,,-1		
  2780	031730	504 00 0 00 033731 		HRL	[XWD -1,0]	;*HRL SHOULD PLACE 0,,-1 INTO THE AC
  2781	031731	312 00 0 00 033733 		CAME	[XWD 0,-1]	;PASS IF C(AC)=0,,-1
  2782						STOP^
  2783	031732	254 04 0 00 031733 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2784	031733	324 00 0 00 031734 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2785									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2786									;IN THE SUBTEST) TO LOOP ON ERROR^
  2787
  2788					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 57
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0084

  2789					;THIS TEST VERIFIES THAT HLRI ALWAYS CLEARS THE RIGHT HALF
  2790					;OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2791					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  2792					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0
  2793					;IF C(AC)=-1,,0, THIS TEST PASSES.
  2794
  2795	031734	474 00 0 00 000000 	B33700:	SETO			;PRELOAD AC WITH -1,,-1		
  2796	031735	545 00 0 00 777777 		HLRI	-1		;*HLRI SHOULD PLACE -1,,0 INTO THE AC
  2797	031736	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2798						STOP^
  2799	031737	254 04 0 00 031740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2800	031740	324 00 0 00 031741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2801									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2802									;IN THE SUBTEST) TO LOOP ON ERROR^
  2803
  2804					;*****     FAILURE ANALYSIS     *****
  2805					;C(AC0)		C(AC1)		FAILING SIGNAL
  2806
  2807					;0				ET2: AR LT AD EN
  2808
  2809					;**********
  2810
  2811					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2812					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2813					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2814					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2815
  2816	031741	201 00 0 00 777777 	B34000:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2817	031742	504 00 0 00 033732 		HRL	[0]		;*HRL SHOULD PLACE 0,,-1 INTO THE AC
  2818	031743	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2819						STOP^
  2820	031744	254 04 0 00 031745 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2821	031745	324 00 0 00 031746 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2822									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2823									;IN THE SUBTEST) TO LOOP ON ERROR^
  2824
  2825					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 58
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0085

  2826					;THIS TEST VERIFIES THAT HLRI ALWAYS CLEARS THE RIGHT HALF
  2827					;OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2828					;IN THIS CASE, C(AC)=0,,-1 AND E=0.  HENCE, THE RESULT IN THE AC
  2829					;SHOULD BE 0.  THE AC IS CHECKED FOR 0
  2830					;IF C(AC)=0, THIS TEST PASSES.
  2831
  2832	031746	201 00 0 00 777777 	B34100:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2833	031747	545 00 0 00 000000 		HLRI			;*HLRI SHOULD PLACE 0 INTO THE AC
  2834	031750	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  2835						STOP^
  2836	031751	254 04 0 00 031752 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2837	031752	324 00 0 00 031753 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2838									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2839									;IN THE SUBTEST) TO LOOP ON ERROR^
  2840
  2841					;**********
  2842
  2843					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2844					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2845					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2846					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2847
  2848	031753	201 00 0 00 777777 	B34200:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2849	031754	504 00 0 00 033730 		HRL	[-1]		;*HRL SHOULD PLACE -1,,-1 INTO THE AC
  2850	031755	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2851						STOP^
  2852	031756	254 04 0 00 031757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2853	031757	324 00 0 00 031760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2854									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2855									;IN THE SUBTEST) TO LOOP ON ERROR^
  2856
  2857					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 59
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0086

  2858					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2859					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2860					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2861					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  2862
  2863	031760	201 00 0 00 777777 	B34300:	MOVEI	-1		;PRELOAD AC WITH 0,,-1	
  2864	031761	544 00 0 00 033730 		HLR	[-1]		;*HLR SHOULD PLACE 0,,-1 INTO THE AC
  2865	031762	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  2866						STOP^
  2867	031763	254 04 0 00 031764 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2868	031764	324 00 0 00 031765 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2869									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2870									;IN THE SUBTEST) TO LOOP ON ERROR^
  2871
  2872					;**********
  2873
  2874					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2875					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2876					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2877					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  2878
  2879	031765	205 00 0 00 777777 	B34400:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2880	031766	504 00 0 00 033732 		HRL	[0]		;*HRL SHOULD PLACE 0 INTO THE AC
  2881	031767	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=0
  2882						STOP^
  2883	031770	254 04 0 00 031771 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2884	031771	324 00 0 00 031772 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2885									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2886									;IN THE SUBTEST) TO LOOP ON ERROR^
  2887
  2888					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 60
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0087

  2889					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2890					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2891					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  2892					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2893
  2894	031772	205 00 0 00 777777 	B34500:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2895	031773	544 00 0 00 033732 		HLR	[0]		;*HLR SHOULD PLACE -1,,0 INTO THE AC
  2896	031774	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2897						STOP^
  2898	031775	254 04 0 00 031776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2899	031776	324 00 0 00 031777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2900									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2901									;IN THE SUBTEST) TO LOOP ON ERROR^
  2902
  2903					;**********
  2904
  2905					;THIS TEST VERIFIES THAT HRL PLACES THE RIGHT HALF OF C(E) INTO
  2906					;THE LEFT HALF OF THE AC.  THE RIGHT HALF OF THE AC IS UNAFFECTED
  2907					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  2908					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  2909
  2910	031777	205 00 0 00 777777 	B34600:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2911	032000	504 00 0 00 033730 		HRL	[-1]		;*HRL SHOULD PLACE -1,,0 INTO THE AC
  2912	032001	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  2913						STOP^
  2914	032002	254 04 0 00 032003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2915	032003	324 00 0 00 032004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2916									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2917									;IN THE SUBTEST) TO LOOP ON ERROR^
  2918
  2919					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 61
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0088

  2920					;THIS TEST VERIFIES THAT HLR PLACES THE LEFT HALF OF C(E) INTO
  2921					;THE RIGHT HALF OF THE AC.  THE LEFT HALF OF THE AC IS UNAFFECTED.
  2922					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=-1,,-1  HENCE, THE RESULT IN THE AC
  2923					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  2924
  2925	032004	205 00 0 00 777777 	B34700:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  2926	032005	544 00 0 00 033730 		HLR	[-1]		;*HLR SHOULD PLACE -1,,-1 INTO THE AC
  2927	032006	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  2928						STOP^
  2929	032007	254 04 0 00 032010 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2930	032010	324 00 0 00 032011 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2931									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2932									;IN THE SUBTEST) TO LOOP ON ERROR^
  2933
  2934					;**********
  2935
  2936					;THIS TEST VERIFIES THAT HLLM PLACES THE LEFT HALF OF C(AC) INTO
  2937					;THE LEFT HALF OF E.  THE RIGHT HALF OF E IS UNAFFECTED.
  2938					;IN THIS CASE, AC=E AND C(AC)= C(E)=0.  HENCE, THE RESULT IN E
  2939					;SHOULD BE 0.  E IS CHECKED FOR 0.  IF C(E)=0, THIS TEXT PASSES.
  2940
  2941	032011	400 00 0 00 000000 	B35000:	SETZ			;PRELOAD AC,E WITH 0
  2942	032012	502 00 0 00 000000 		HLLM			;*HLLM SHOULD PLACE 0 INTO E
  2943	032013	332 00 0 00 000000 		SKIPE			;PASS IF C(E)=0
  2944						STOP^
  2945	032014	254 04 0 00 032015 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2946	032015	324 00 0 00 032016 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2947									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2948									;IN THE SUBTEST) TO LOOP ON ERROR^
  2949
  2950					;*****     FAILURE ANALYSIS     *****
  2951					;C(AC0)		C(AC1)		FAILING SIGNAL
  2952
  2953					;-1,,0		0		FC: AD FM + EN
  2954					;0,,-1		0,,-1		ET0: AD RT BR + EN
  2955					;B35000		0,,-1		ET0: BR AR EN
  2956					;-1,,0		0,,-1		ET0: AD LT AR + EN
  2957
  2958					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 62
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0089

  2959					;THIS TEST VERIFIES THAT HLLM PLACES THE LEFT HALF OF C(AC) INTO
  2960					;THE LEFT HALF OF E.  THE RIGHT HALF OF E IS UNAFFECTED.
  2961					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN E
  2962					;SHOULD BE 0,,-1.  E IS CHECKED FOR 0,,-1. IF C(E)=0,,-1, THIS TEST PASSES.
  2963
  2964	032016	400 00 0 00 000000 	B35500:	SETZ			;PRELOAD AC WITH 0
  2965	032017	474 01 0 00 000000 		SETO	1,		;PRELOAD E WITH -1,,-1
  2966	032020	502 00 0 00 000001 		HLLM	1		;*HLLM SHOULD PLACE 0,,-1 INTO E
  2967	032021	302 01 0 00 777777 		CAIE	1,- 1		;PASS IF C(E) =0,,-1
  2968						STOP^
  2969	032022	254 04 0 00 032023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2970	032023	324 00 0 00 032024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2971									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2972									;IN THE SUBTEST) TO LOOP ON ERROR^
  2973
  2974					;*****     FAILURE ANALYSIS     *****
  2975					;C(AC0)		C(AC1)		FAILING SIGNAL
  2976
  2977					;0		-1,,-1		SW: FCE PSE
  2978					;0		0		SW: ET0
  2979					;0		-1,,-1		ET0: AR AD EN
  2980					;0		0		ET2: AR LT AD EN
  2981
  2982					;**********
  2983
  2984					;THIS TEST VERIFIES THAT HLLM PLACES THE LEFT HALF OF C(AC) INTO
  2985					;THE LEFT HALF OF E.  THE RIGHT HALF OF E IS UNAFFECTED.
  2986					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN E
  2987					;SHOULD BE -1,,0.  E IS CHECKED FOR -1,,0. IF C(E)=-1,,0, THIS TEST PASSES
  2988
  2989	032024	474 00 0 00 000000 	B35600:	SETO			;PRELOAD AC WITH -1,,-1
  2990	032025	400 01 0 00 000000 		SETZ	1,		;PRELOAD E WITH 0
  2991	032026	502 00 0 00 000001 		HLLM	1		;*HLLM SHOULD PLACE -1,,0 INTO E
  2992	032027	312 01 0 00 033731 		CAME	1,[XWD -1,0]	;PASS IF C(E) = -1,,0
  2993						STOP^
  2994	032030	254 04 0 00 032031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2995	032031	324 00 0 00 032032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2996									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2997									;IN THE SUBTEST) TO LOOP ON ERROR^
  2998
  2999					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 63
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0090

  3000					;THIS TEST VERIFIES THAT HRRM PLACES THE RIGHT HALF OF C(AC) INTO
  3001					;THE RIGHT HALF OF E.  THE LEFT HALF OF E IS UNAFFECTED.
  3002					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN E
  3003					;SHOULD BE -1,,0.  E IS CHECKED FOR -1,,0
  3004					;IF C(E) = -1,,0, THIS TEST PASSES.
  3005
  3006	032032	400 00 0 00 000000 	B35700:	SETZ			;PRELOAD AC WITH 0
  3007	032033	474 01 0 00 000000 		SETO	1,		;PRELOAD E WITH -1,,-1
  3008	032034	542 00 0 00 000001 		HRRM	1		;*HRRM SHOULD PLACE -1,,0 INTO E
  3009	032035	312 01 0 00 033731 		CAME	1,[XWD -1,0]	;PASS IF C(E) = -1,,0
  3010						STOP^
  3011	032036	254 04 0 00 032037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3012	032037	324 00 0 00 032040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3013									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3014									;IN THE SUBTEST) TO LOOP ON ERROR^
  3015
  3016					;*****     FAILURE ANALYSIS     *****
  3017					;C(AC0)		C(AC1)		FAILING SIGNAL
  3018
  3019					;0		-1,,-1		SW: FCE PSE
  3020					;0		0		SW: ET0
  3021					;0		-1,,-1		FC: AD FM + EN
  3022					;-1,,-1		-1,,-1		ET0: AD LT BR + EN
  3023					;0		-1,,-1		ET0: AD RT AR + EN
  3024					;0		0		ET0: BR AR EN
  3025					;0		-1,,-1		ET0: AR AD EN
  3026					;0		0		ET2: AR AD EN
  3027
  3028					;**********
  3029
  3030					;THIS TEST VERIFIES THAT HRRM PLACES THE RIGHT HALF OF C(AC) INTO
  3031					;THE RIGHT HALF OF E.  THE LEFT HALF OF E IS UNAFFECTED.
  3032					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN E
  3033					;SHOULD BE 0,,-1.  E IS CHECKED FOR = 0,,-1
  3034					;IF C(E) = 0,,-1, THIS TEST PASSES.
  3035
  3036	032040	474 00 0 00 000000 	B36000:	SETO			;PRELOAD AC WITH -1,,-1
  3037	032041	400 01 0 00 000000 		SETZ	1,		;PRELOAD E WITH 0
  3038	032042	542 00 0 00 000001 		HRRM	1		;*HRRM SHOULD PLACE 0,,-1 INTO E
  3039	032043	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(E) = 0,,-1
  3040						STOP^
  3041	032044	254 04 0 00 032045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3042	032045	324 00 0 00 032046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3043									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3044									;IN THE SUBTEST) TO LOOP ON ERROR^
  3045
  3046					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 64
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0091

  3047					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3048					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3049					;IN THIS CASE, AC=E AND C(AC)=C(E)=-1,,-1.  HENCE THE RESULT IN THE AC
  3050					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3051
  3052	032046	474 00 0 00 000000 	B36100:	SETO			;PRELOAD AC WITH -1,,-1
  3053	032047	520 00 0 00 000000 		HLLO			;*HLLO SHOULD PLACE -1,,-1 INTO THE AC
  3054	032050	312 00 0 00 033730 		CAME	[-1]		;PASS OF C(AC)=-1,,-1
  3055						STOP^
  3056	032051	254 04 0 00 032052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3057	032052	324 00 0 00 032053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3058									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3059									;IN THE SUBTEST) TO LOOP ON ERROR^
  3060
  3061					;*****     FAILURE ANALYSIS     *****
  3062					;C(AC0)		C(AC1)		FAILING SIGNAL
  3063
  3064					;0,,-1				SW: FCE
  3065
  3066					;**********
  3067
  3068					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3069					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3070					;IN THIS CASE, C(AC)=0 AND C(E)=0,,-1.  HENCE THE RESULT IN THE AC
  3071					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  3072
  3073	032053	400 00 0 00 000000 	B36200:	SETZ			;PRELOAD AC WITH 0
  3074	032054	520 00 0 00 033733 		HLLO	[XWD 0,-1]	;*HLLO SHOULD PLACE 0,,-1 INTO THE AC
  3075	032055	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3076						STOP^
  3077	032056	254 04 0 00 032057 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3078	032057	324 00 0 00 032060 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3079									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3080									;IN THE SUBTEST) TO LOOP ON ERROR^
  3081
  3082					;*****     FAILURE ANALYSIS     *****
  3083					;C(AC0)		C(AC1)		FAILING SIGNAL
  3084
  3085					;-1,,-1				FC: AD LT AR + EN
  3086
  3087					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 65
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0092

  3088					;THIS TEST VERIFIES THAT HRRO PLACES THE RIGHT HALF OF C(E) INTO
  3089					;THE RIGHT HALF OF THE AC AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3090					;IN THIS CASE, AC=E AND C(AC)=C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC
  3091					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3092
  3093	032060	474 00 0 00 000000 	B36300:	SETO			;PRELOAD AC,E WITH -1,,-1
  3094	032061	560 00 0 00 000000 		HRRO			;*HRRO SHOULD PLACE -1,,-1 INTO THE AC
  3095	032062	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3096						STOP^
  3097	032063	254 04 0 00 032064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3098	032064	324 00 0 00 032065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3099									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3100									;IN THE SUBTEST) TO LOOP ON ERROR^
  3101
  3102					;*****     FAILURE ANALYSIS     *****
  3103					;C(AC0)		C(AC1)		FAILING SIGNAL
  3104
  3105					;-1,,0				SW: FCE
  3106
  3107					;**********
  3108
  3109					;THIS TEST VERIFIES THAT HRRO PLACES THE RIGHT HALF OF C(E) INTO
  3110					;THE RIGHT HALF OF THE AC AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3111					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  3112					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  3113
  3114	032065	400 00 0 00 000000 	B36400:	SETZ			;PRELOAD AC WITH 0
  3115	032066	560 00 0 00 033731 		HRRO	[XWD -1,0]	;*HRRO SHOULD PLACE -1,,0 INTO THE AC
  3116	032067	312 00 0 00 033731 		CAME	[-1,,0]		;PASS IF C(AC)=-1,,0
  3117						STOP^
  3118	032070	254 04 0 00 032071 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3119	032071	324 00 0 00 032072 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3120									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3121									;IN THE SUBTEST) TO LOOP ON ERROR^
  3122
  3123					;*****     FAILURE ANALYSIS     *****
  3124					;C(AC0)		C(AC1)		FAILING SIGNAL
  3125
  3126					;-1,,-1				FC: AD RT AR + EN
  3127
  3128					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 66
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0093

  3129					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3130					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3131					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE THE RESULT IN THE AC
  3132					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  3133
  3134	032072	400 00 0 00 000000 	B36500:	SETZ			;PRELOAD AC WITH 0
  3135	032073	520 00 0 00 033732 		HLLO	[0]		;*HLLO SHOULD PLACE 0,,-1 INTO THE AC
  3136	032074	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3137						STOP^
  3138	032075	254 04 0 00 032076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3139	032076	324 00 0 00 032077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3140									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3141									;IN THE SUBTEST) TO LOOP ON ERROR^
  3142
  3143					;*****     FAILURE ANALYSIS     *****
  3144					;C(AC0)		C(AC1)		FAILING SIGNAL
  3145
  3146					;0				ET2: AR LT AD EN
  3147
  3148					;**********
  3149
  3150					;THIS TEST VERIFIES THAT HRRO PLACES THE RIGHT HALF OF C(E) INTO
  3151					;THE RIGHT HALF OF THE AC AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3152					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC
  3153					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES.
  3154
  3155	032077	400 00 0 00 000000 	B36600:	SETZ			;PRELOAD AC WITH 0
  3156	032100	560 00 0 00 033732 		HRRO	[0]		;*HRRO SHOULD PLACE -1,,0 INTO THE AC
  3157	032101	312 00 0 00 033731 		CAME	[-1,,0]		;PASS IF C(AC)=-1,,0
  3158						STOP^
  3159	032102	254 04 0 00 032103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3160	032103	324 00 0 00 032104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3161									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3162									;IN THE SUBTEST) TO LOOP ON ERROR^
  3163
  3164					;*****     FAILURE ANALYSIS     *****
  3165					;C(AC0)		C(AC1)		FAILING SIGNAL
  3166
  3167					;0				ET2: AR AD EN
  3168
  3169					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 67
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0094

  3170					;THIS TEST VERIFIES THAT HLLOI ALWAYS PLACES 0,,-1 INTO THE AC.
  3171					;IN THIS CASE, C(AC)=0 AND E=0.
  3172					;THE RESULT IN THE AC SHOULD BE 0,,-1.
  3173					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES
  3174
  3175	032104	400 00 0 00 000000 	B37100:	SETZ			;PRELOAD AC WITH 0
  3176	032105	521 00 0 00 000000 		HLLOI			;*HLLOI SHOULD PLACE 0,,-1 INTO THE AC
  3177	032106	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3178						STOP^
  3179	032107	254 04 0 00 032110 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3180	032110	324 00 0 00 032111 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3181									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3182									;IN THE SUBTEST) TO LOOP ON ERROR^
  3183
  3184					;*****     FAILURE ANALYSIS     *****
  3185					;C(AC0)		C(AC1)		FAILING SIGNAL
  3186
  3187					;-1,,-1				FC: AD LT AR + EN
  3188					;0				ET2: AR AD EN
  3189
  3190					;**********
  3191
  3192					;THIS TEST VERIFIES THAT HRROI PLACES E INTO THE RIGHT HALF OF THE AC
  3193					;AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3194					;IN THIS CASE, C(AC)=0 AND E=0.  HENCE, THE RESULT IN THE AC
  3195					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1, THIS TEST PASSES
  3196
  3197	032111	400 00 0 00 000000 	B37200:	SETZ			;PRELOAD AC WITH 0
  3198	032112	561 00 0 00 000000 		HRROI			;*HRROI SHOULD PLACE -1,,0 INTO THE AC
  3199	032113	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  3200						STOP^
  3201	032114	254 04 0 00 032115 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3202	032115	324 00 0 00 032116 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3203									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3204									;IN THE SUBTEST) TO LOOP ON ERROR^
  3205
  3206					;*****     FAILURE ANALYSIS     *****
  3207					;C(AC0)		C(AC1)		FAILING SIGNAL
  3208
  3209					;-1,,-1				FC: AD RT AR + EN
  3210					;0				ET2: AR AD EN
  3211
  3212					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 68
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0095

  3213					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3214					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3215					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE THE RESULT IN THE AC
  3216					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3217
  3218	032116	400 00 0 00 000000 	B37300:	SETZ			;PRELOAD AC WITH 0
  3219	032117	520 00 0 00 033731 		HLLO	[XWD -1,0]	;*HLLO SHOULD PLACE -1,,-1 INTO THE AC
  3220	032120	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3221						STOP^
  3222	032121	254 04 0 00 032122 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3223	032122	324 00 0 00 032123 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3224									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3225									;IN THE SUBTEST) TO LOOP ON ERROR^
  3226
  3227					;**********
  3228
  3229					;THIS TEST VERIFIES THAT HRROI PLACES E INTO THE RIGHT HALF OF THE AC
  3230					;AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3231					;IN THIS CASE, C(AC)=0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  3232					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3233
  3234	032123	400 00 0 00 000000 	B37400:	SETZ			;PRELOAD AC WITH 0
  3235	032124	561 00 0 00 777777 		HRROI	-1		;*HRRIO SHOULD PLACE -1,,-1 INTO THE AC
  3236	032125	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3237						STOP^
  3238	032126	254 04 0 00 032127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3239	032127	324 00 0 00 032130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3240									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3241									;IN THE SUBTEST) TO LOOP ON ERROR^
  3242
  3243					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 69
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0096

  3244					;THIS TEST VERIFIES THAT HLLOI ALWAYS PLACES 0,,-1 INTO THE AC.
  3245					;IN THIS CASE, C(AC)=0 AND E=0.
  3246					;THE RESULT IN THE AC SHOULD BE 0,,-1.
  3247					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES
  3248
  3249	032130	474 00 0 00 000000 	B37500:	SETO			;PRELOAD AC WITH -1,,-1
  3250	032131	521 00 0 00 000000 		HLLOI			;*HLLOI SHOULD PLACE 0,,-1 INTO THE AC
  3251	032132	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3252						STOP^
  3253	032133	254 04 0 00 032134 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3254	032134	324 00 0 00 032135 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3255									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3256									;IN THE SUBTEST) TO LOOP ON ERROR^
  3257
  3258					;**********
  3259
  3260					;THIS TEST VERIFIES THAT HRROI PLACES E INTO THE RIGHT HALF OF THE AC
  3261					;AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3262					;IN THIS CASE, C(AC)=0 AND E=0.  HENCE, THE RESULT IN THE AC
  3263					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES
  3264
  3265	032135	474 00 0 00 000000 	B37600:	SETO			;PRELOAD AC WITH -1,,-1
  3266	032136	561 00 0 00 000000 		HRROI			;*HRRIO SHOULD PLACE -1,,0 INTO THE AC
  3267	032137	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  3268						STOP^
  3269	032140	254 04 0 00 032141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3270	032141	324 00 0 00 032142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3271									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3272									;IN THE SUBTEST) TO LOOP ON ERROR^
  3273
  3274					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 70
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0097

  3275					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3276					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3277					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE THE RESULT IN THE AC
  3278					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3279
  3280	032142	474 00 0 00 000000 	B37700:	SETO			;PRELOAD AC WITH -1,,-1
  3281	032143	520 00 0 00 033731 		HLLO	[XWD -1,0]	;*HLLO SHOULD PLACE -1,,-1 INTO THE AC
  3282	032144	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3283						STOP^
  3284	032145	254 04 0 00 032146 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3285	032146	324 00 0 00 032147 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3286									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3287									;IN THE SUBTEST) TO LOOP ON ERROR^
  3288
  3289					;**********
  3290
  3291					;THIS TEST VERIFIES THAT HRROI PLACES E INTO THE RIGHT HALF OF THE AC
  3292					;AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3293					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,-1.  HENCE, THE RESULT IN THE AC
  3294					;SHOULD BE -1,,-1.  THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3295
  3296	032147	474 00 0 00 000000 	B40000:	SETO			;PRELOAD AC WITH -1,,-1
  3297	032150	561 00 0 00 777777 		HRROI	-1		;*HRRIO SHOULD PLACE -1,,-1 INTO THE AC
  3298	032151	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3299						STOP^
  3300	032152	254 04 0 00 032153 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3301	032153	324 00 0 00 032154 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3302									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3303									;IN THE SUBTEST) TO LOOP ON ERROR^
  3304
  3305					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 71
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0098

  3306					;THIS TEST VERIFIES THAT HRROI PLACES E INTO THE RIGHT HALF OF THE AC
  3307					;AND PLACES ONES INTO THE LEFT HALF OF THE AC.
  3308					;IN THIS CASE, C(AC)=0,,-1 AND E=0.  HENCE, THE RESULT IN THE AC
  3309					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.  IF C(AC)=-1,,0, THIS TEST PASSES
  3310
  3311	032154	201 00 0 00 777777 	B40100:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  3312	032155	561 00 0 00 000000 		HRROI			;*HRRIO SHOULD PLACE -1,,0 INTO THE AC
  3313	032156	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0
  3314						STOP^
  3315	032157	254 04 0 00 032160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3316	032160	324 00 0 00 032161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3318									;IN THE SUBTEST) TO LOOP ON ERROR^
  3319
  3320					;**********
  3321
  3322					;THIS TEST VERIFIES THAT HLLO PLACES THE LEFT HALF OF C(E) INTO
  3323					;THE LEFT HALF OF THE AC AND PLACES ONES INTO THE RIGHT HALF OF THE AC.
  3324					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0,,-1.  HENCE THE RESULT IN THE AC
  3325					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  3326
  3327	032161	205 00 0 00 777777 	B40200:	MOVSI	-1		;PRELOAD AC WITH -1,,0	
  3328	032162	520 00 0 00 033733 		HLLO	[XWD 0,-1]	;*HLLO SHOULD PLACE 0,,-1 INTO THE AC
  3329	032163	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3330						STOP^
  3331	032164	254 04 0 00 032165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3332	032165	324 00 0 00 032166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3333									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3334									;IN THE SUBTEST) TO LOOP ON ERROR^
  3335
  3336					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 72
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0099

  3337					;THIS TEST VERIFIES THAT HRLZ PLACES THE RIGHT HALF OF C(E)
  3338					;INTO THE LEFT HALF OF THE AC.
  3339					;AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  3340					;IN THIS CASE, AC=E AND C(AC)=C(E)=0. HENCE, THE FINAL RESULT IN THE AC
  3341					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  3342
  3343	032166	400 00 0 00 000000 	B40300:	SETZ			;PRELOAD AC WITH 0
  3344	032167	514 00 0 00 000000 		HRLZ			;*HRLZ SHOULD PLACE 0 INTO THE AC
  3345	032170	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3346						STOP^
  3347	032171	254 04 0 00 032172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3348	032172	324 00 0 00 032173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3349									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3350									;IN THE SUBTEST) TO LOOP ON ERROR^
  3351
  3352					;**********
  3353
  3354					;THIS TEST VERIFIES THAT HLRZ PLACES THE LEFT HALF OF C(E)
  3355					;INTO THE RIGHT HALF OF THE AC
  3356					;AND PLACES ZEROS INTO THE LEFT HALF OF THE AC.
  3357					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC
  3358					;SHOULD BE 0.  THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  3359
  3360	032173	400 00 0 00 000000 	B40400:	SETZ			;PRELOAD AC WITH 0
  3361	032174	554 00 0 00 000000 		HLRZ			;*HLRZ SHOULD PLACE 0 INTO THE AC
  3362	032175	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3363						STOP^
  3364	032176	254 04 0 00 032177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3365	032177	324 00 0 00 032200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3366									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3367									;IN THE SUBTEST) TO LOOP ON ERROR^
  3368
  3369					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 73
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0100

  3370					;THIS TEST VERIFIES THAT HRLZI PLACES E INTO THE LEFT HALF OF THE AC
  3371					;AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  3372					;IN THIS CASE, C(AC)=0 AND E=0,,-1.  HENCE THE RESULT IN THE AC
  3373					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0
  3374					;IF C(AC)=-1,,0, THIS TEST PASSES.
  3375
  3376	032200	400 00 0 00 000000 	B40700:	SETZ			;PRELOAD AC WITH 0		
  3377	032201	515 00 0 00 777777 		HRLZI	-1		;*HRLZI SHOULD PLACE -1,,0 INTO THE AC
  3378	032202	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0.
  3379						STOP^
  3380	032203	254 04 0 00 032204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3381	032204	324 00 0 00 032205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3382									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3383									;IN THE SUBTEST) TO LOOP ON ERROR^
  3384
  3385					;*****     FAILURE ANALYSIS     *****
  3386					;C(AC0)		C(AC1)		FAILING SIGNAL
  3387
  3388					;0				ET2: AR LT AR RT EN
  3389
  3390					;**********
  3391
  3392					;THIS TEST VERIFIES THAT HLRZ PLACES THE LEFT HALF OF C(E)
  3393					;INTO THE RIGHT HALF OF THE AC
  3394					;AND PLACES ZEROS INTO THE LEFT HALF OF THE AC.
  3395					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  3396					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  3397
  3398	032205	400 00 0 00 000000 	B41000:	SETZ			;PRELOAD AC WITH 0
  3399	032206	554 00 0 00 033731 		HLRZ	[XWD -1,0]	;*HLRZ SHOULD PLACE 0,,-1 INTO THE AC
  3400	032207	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3401						STOP^
  3402	032210	254 04 0 00 032211 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3403	032211	324 00 0 00 032212 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3404									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3405									;IN THE SUBTEST) TO LOOP ON ERROR^
  3406
  3407					;*****     FAILURE ANALYSIS     *****
  3408					;C(AC0)		C(AC1)		FAILING SIGNAL
  3409
  3410					;0				SW: FCE
  3411					;-1,,0				ET2: AR RT AR LT EN
  3412
  3413					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 74
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0101

  3414					;THIS TEST VERIFIES THAT HRLZI PLACES E INTO THE LEFT HALF OF THE AC
  3415					;AND PLACES ZEROS INTO THE RIGHT HALF OF THE AC.
  3416					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,-1.  HENCE THE RESULT IN THE AC
  3417					;SHOULD BE -1,,0.  THE AC IS CHECKED FOR -1,,0.
  3418					;IF C(AC)=-1,,0, THIS TEST PASSES.
  3419
  3420	032212	474 00 0 00 000000 	B41100:	SETO			;PRELOAD AC WITH -1,,-1
  3421	032213	515 00 0 00 777777 		HRLZI	-1		;*HRLZI SHOULD PLACE -1,,0 INTO THE AC
  3422	032214	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(AC)=-1,,0.
  3423						STOP^
  3424	032215	254 04 0 00 032216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3425	032216	324 00 0 00 032217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3426									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3427									;IN THE SUBTEST) TO LOOP ON ERROR^
  3428
  3429					;**********
  3430
  3431					;THIS TEST VERIFIES THAT HLRZ PLACES THE LEFT HALF OF C(E)
  3432					;INTO THE RIGHT HALF OF THE AC
  3433					;AND PLACES ZEROS INTO THE LEFT HALF OF THE AC.
  3434					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC
  3435					;SHOULD BE 0,,-1.  THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST PASSES.
  3436
  3437	032217	474 00 0 00 000000 	B41200:	SETO			;PRELOAD AC WITH -1,,-1
  3438	032220	554 00 0 00 033731 		HLRZ	[XWD -1,0]	;*HLRZ SHOULD PLACE 0,,-1 INTO THE AC
  3439	032221	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC)=0,,-1
  3440						STOP^
  3441	032222	254 04 0 00 032223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3442	032223	324 00 0 00 032224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3443									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3444									;IN THE SUBTEST) TO LOOP ON ERROR^
  3445
  3446					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 75
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0102

  3447					;THIS TEST VERIFIES THAT HLLE PLACES THE LEFT HALF OF C(E)
  3448					;INTO THE LEFT HALF OF THE AC
  3449					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3450					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0
  3451					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  3452
  3453	032224	400 00 0 00 000000 	B41500:	SETZ			;PRELOAD AC WITH 0		
  3454	032225	530 00 0 00 000000 		HLLE			;*HLLE SHOULD PLACE 0 INTO THE AC
  3455	032226	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3456						STOP^
  3457	032227	254 04 0 00 032230 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3458	032230	324 00 0 00 032231 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3459									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3460									;IN THE SUBTEST) TO LOOP ON ERROR^
  3461
  3462					;*****     FAILURE ANALYSIS     *****
  3463					;C(AC0)		C(AC1)		FAILING SIGNAL
  3464
  3465					;-1,,0				FC: AD LT AR + EN
  3466
  3467					;**********
  3468
  3469					;THIS TEST VERIFIES THAT HLLE PLACES THE LEFT HALF OF C(E)
  3470					;INTO THE LEFT HALF OF THE AC
  3471					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3472					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1
  3473					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3474
  3475	032231	400 00 0 00 000000 	B41600:	SETZ			;PRELOAD AC WITH 0		
  3476	032232	530 00 0 00 033730 		HLLE	[-1]		;*HLLE SHOULD PLACE -1,,-1 INTO THE AC
  3477	032233	312 00 0 00 033730 		CAME	[XWD -1,-1]	;PASS IF C(AC)=-1,,-1
  3478						STOP^
  3479	032234	254 04 0 00 032235 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3480	032235	324 00 0 00 032236 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3481									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3482									;IN THE SUBTEST) TO LOOP ON ERROR^
  3483
  3484					;*****     FAILURE ANALYSIS     *****
  3485					;C(AC0)		C(AC1)		FAILING SIGNAL
  3486
  3487					;0				SW: FCE
  3488					;-1,,-1				ET2: AR LT AD EN
  3489					;-1,,0				ET2: AR0(1): AR RT AD EN
  3490
  3491					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 76
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0103

  3492					;THIS TEST VERIFIES THAT HRRE PLACES THE RIGHT HALF OF C(E)
  3493					;INTO THE RIGHT HALF OF THE AC.
  3494					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC.
  3495					;IN THIS CASE C(AC)=0 AND C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  3496					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3497
  3498	032236	400 00 0 00 000000 	B42000:	SETZ			;PRELOAD AC WITH 0		
  3499	032237	570 00 0 00 033730 		HRRE	[-1]		;*HRRE SHOULD PLACE -1,,-1 INTO THE AC
  3500	032240	312 00 0 00 033730 		CAME	[-1,,-1]	;PASS IF C(AC)=-1,,-1
  3501						STOP^
  3502	032241	254 04 0 00 032242 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3503	032242	324 00 0 00 032243 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3504									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3505									;IN THE SUBTEST) TO LOOP ON ERROR^
  3506
  3507					;**********
  3508
  3509					;THIS TEST VERIFIES THAT HLLE PLACES THE LEFT HALF OF C(E)
  3510					;INTO THE LEFT HALF OF THE AC
  3511					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3512					;IN THIS CASE C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1
  3513					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3514
  3515	032243	400 00 0 00 000000 	B42200:	SETZ			;PRELOAD AC WITH 0		
  3516	032244	530 00 0 00 033731 		HLLE	[XWD -1,0]	;*HLLE SHOULD PLACE -1,,-1 INTO THE AC
  3517	032245	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3518						STOP^
  3519	032246	254 04 0 00 032247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3520	032247	324 00 0 00 032250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3521									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3522									;IN THE SUBTEST) TO LOOP ON ERROR^
  3523
  3524					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 77
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0104

  3525					;THIS TEST VERIFIES THAT HRRE PLACES THE RIGHT HALF OF C(E)
  3526					;INTO THE RIGHT HALF OF THE AC.
  3527					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC.
  3528					;IN THIS CASE, AC=E AND C(AC)=C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3529					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  3530
  3531	032250	400 00 0 00 000000 	B42300:	SETZ			;PRELOAD AC,E WITH 0		
  3532	032251	570 00 0 00 000000 		HRRE			;*HRRE SHOULD PLACE 0 INTO THE AC
  3533	032252	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3534						STOP^
  3535	032253	254 04 0 00 032254 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3536	032254	324 00 0 00 032255 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3537									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3538									;IN THE SUBTEST) TO LOOP ON ERROR^
  3539
  3540					;*****     FAILURE ANALYSIS     *****
  3541					;C(AC0)		C(AC1)		FAILING SIGNAL
  3542
  3543					;E				SW: FCE
  3544					;-1,,0				ET2: AR RT AD EN
  3545					;0,,-1				ET2: AR18(1): AR LT AD EN
  3546					;0,,-1				FC: AR RT AR + EN
  3547
  3548					;**********
  3549
  3550					;THIS TEST VERIFIES THAT HRRE PLACES THE RIGHT HALF OF C(E)
  3551					;INTO THE RIGHT HALF OF THE AC.
  3552					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC.
  3553					;IN THIS CASE C(AC)=0 AND C(E)=-1,,0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3554					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES.
  3555
  3556	032255	400 00 0 00 000000 	B42500:	SETZ			;PRELOAD AC WITH 0		
  3557	032256	570 00 0 00 033731 		HRRE	[XWD -1,0]	;*HRRE SHOULD PLACE 0 INTO THE AC
  3558	032257	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3559						STOP^
  3560	032260	254 04 0 00 032261 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3561	032261	324 00 0 00 032262 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3562									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3563									;IN THE SUBTEST) TO LOOP ON ERROR^
  3564
  3565					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 78
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0105

  3566					;THIS TEST VERIFIES THAT HRREI PLACES E INTO THE RIGHT HALF OF THE AC
  3567					;AND PLACES THE LEFTMOST BIT OF E INTO ALL BITS OF THE LEFT HALF OF THE AC
  3568					;IN THIS CASE, C(AC)=0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  3569					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES.
  3570
  3571	032262	400 00 0 00 000000 	B42700:	SETZ			;PRELOAD AC WITH 0		
  3572	032263	571 00 0 00 777777 		HRREI	-1		;*HRREI SHOULD PLACE -1,,-1 INTO THE AC
  3573	032264	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3574						STOP^
  3575	032265	254 04 0 00 032266 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3576	032266	324 00 0 00 032267 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3577									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3578									;IN THE SUBTEST) TO LOOP ON ERROR^
  3579
  3580					;*****     FAILURE ANALYSIS     *****
  3581					;C(AC0)		C(AC1)		FAILING SIGNAL
  3582
  3583					;-1,,0				ET2: AR RT AD EN
  3584					;0,,-1				ET2: AR18(1): AR LT AD EN
  3585
  3586					;**********
  3587
  3588					;THIS TEST VERIFIES THAT HLLEI ALWAYS CLEARS THE AC.
  3589					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,-1.
  3590					;THE RESULT IN THE AC SHOULD BE 0
  3591					;THE AC IS CHECKED FOR 0.
  3592					;IF C(AC)=0, THIS TEST PASSES.
  3593
  3594	032267	474 00 0 00 000000 	B43000:	SETO			;PRELOAD AC WITH -1,,-1
  3595	032270	531 00 0 00 777777 		HLLEI	-1		;*HLLEI SHOULD CLEAR THE AC
  3596	032271	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3597						STOP^
  3598	032272	254 04 0 00 032273 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3599	032273	324 00 0 00 032274 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3600									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3601									;IN THE SUBTEST) TO LOOP ON ERROR^
  3602
  3603					;*****     FAILURE ANALYSIS     *****
  3604					;C(AC0)		C(AC1)		FAILING SIGNAL
  3605
  3606					;-1,,0				FC: AD LT AR + EN
  3607					;0,,-1				ET2: AR LT AD EN
  3608
  3609					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 79
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0106

  3610					;THIS TEST VERIFIES THAT HLLEI ALWAYS CLEARS THE AC.
  3611					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,400000.
  3612					;THE RESULT IN THE AC SHOULD BE 0
  3613					;THE AC IS CHECKED FOR 0.
  3614					;IF C(AC) = ZERO, THIS TEST PASSES.
  3615
  3616	032274	474 00 0 00 000000 	B43100:	SETO			;PRELOAD AC WITH -1,,-1
  3617	032275	531 00 0 00 400000 		HLLEI	400000		;*HLLEI SHOULD CLEAR THE AC
  3618	032276	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0.
  3619						STOP^
  3620	032277	254 04 0 00 032300 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3621	032300	324 00 0 00 032301 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3622									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3623									;IN THE SUBTEST) TO LOOP ON ERROR^
  3624
  3625					;**********
  3626
  3627					;THIS TEST VERIFIES THAT HRLE PLACES THE RIGHT HALF OF C(E)
  3628					;INTO THE LEFT HALF OF THE AC
  3629					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3630					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3631					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST FAILS
  3632
  3633	032301	400 00 0 00 000000 	B43400:	SETZ			;PRELOAD AC WITH 0
  3634	032302	534 00 0 00 000000 		HRLE			;*HRLE SHOULD PLACE 0 INTO THE AC
  3635	032303	332 00 0 00 000000 		SKIPE			;FAIL IF C(AC)=0,,-1
  3636						STOP^
  3637	032304	254 04 0 00 032305 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3638	032305	324 00 0 00 032306 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3639									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3640									;IN THE SUBTEST) TO LOOP ON ERROR^
  3641
  3642					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 80
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0107

  3643					;THIS TEST VERIFIES THAT HRLEI PLACES E INTO THE LEFT HALF OF THE AC
  3644					;AND PLACES THE LEFTMOST BIT OF E INTO ALL BITS OF THE RIGHT HALF OF THE AC
  3645					;IN THIS CASE, C(AC)=0 AND E=0,,-1.  HENCE, THE RESULT IN THE AC SHOULD -1,,-1
  3646					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=1,,-1, THIS TEST PASSES.
  3647
  3648	032306	400 00 0 00 000000 	B43500:	SETZ			;PRELOAD AC WITH 0		
  3649	032307	535 00 0 00 777777 		HRLEI	-1		;*HRLEI SHOULD PLACE -1,,-1 INTO THE AC
  3650	032310	312 00 0 00 033730 		CAME	[XWD -1,-1]	;PASS IF C(AC)=-1,,-1
  3651						STOP^
  3652	032311	254 04 0 00 032312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3653	032312	324 00 0 00 032313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3654									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3655									;IN THE SUBTEST) TO LOOP ON ERROR^
  3656
  3657					;*****     FAILURE ANALYSIS     *****
  3658					;C(AC0)		C(AC1)		FAILING SIGNAL
  3659
  3660					;-1,,0				ET2: AR LT AR RT EN
  3661					;-1,,0				ET2: AR 18(1): AR RT AD EN
  3662
  3663					;**********
  3664
  3665					;THIS TEST VERIFIES THAT HRLE PLACES THE RIGHT HALF OF C(E)
  3666					;INTO THE LEFT HALF OF THE AC
  3667					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3668					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3669					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST FAILS
  3670
  3671	032313	534 00 0 00 033732 	B43600:	HRLE	[0]		;*HRLE SHOULD PLACE 0 INTO THE AC	
  3672	032314	332 00 0 00 000000 		SKIPE			;FAIL IF C(AC)=0,,-1
  3673						STOP^
  3674	032315	254 04 0 00 032316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3675	032316	324 00 0 00 032317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3676									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3677									;IN THE SUBTEST) TO LOOP ON ERROR^
  3678
  3679					;*****     FAILURE ANALYSIS     *****
  3680					;C(AC0)		C(AC1)		FAILING SIGNAL
  3681
  3682					;E,,0				SW: FCE
  3683
  3684					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 81
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0108

  3685					;THIS TEST VERIFIES THAT HRLE PLACES THE RIGHT HALF OF C(E)
  3686					;INTO THE LEFT HALF OF THE AC
  3687					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3688					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3689					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST FAILS
  3690
  3691	032317	534 00 0 00 033730 	B43700:	HRLE	[-1]		;PRELOAD AC WITH 0	
  3692	032320	312 00 0 00 033730 		CAME	[-1]		;*HRLE SHOULD PLACE 0 INTO THE AC
  3693						STOP			^;FAIL IF C(AC)=0,,-1
  3694
  3695	032321	254 04 0 00 032322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3696	032322	324 00 0 00 032323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3697									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3698									;IN THE SUBTEST) TO LOOP ON ERROR
  3699
  3700					;*****     FAILURE ANALYSIS     *****
  3701					;C(AC0)		C(AC1)		FAILING SIGNAL
  3702
  3703					;-1,,0				ET2: AR LT AR RT EN
  3704					;-1,,0				ET2: AR18(1): AR RT AD EN
  3705
  3706					;**********
  3707
  3708					;THIS TEST VERIFIES THAT HRLE PLACES THE RIGHT HALF OF C(E)
  3709					;INTO THE LEFT HALF OF THE AC
  3710					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3711					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3712					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST FAILS
  3713
  3714	032323	534 00 0 00 033731 	B44000:	HRLE	[XWD -1,0]	;PRELOAD AC WITH 0
  3715	032324	332 00 0 00 000000 		SKIPE			;*HRLE SHOULD PLACE 0 INTO THE AC
  3716						STOP			^;FAIL IF C(AC)=0,,-1
  3717
  3718	032325	254 04 0 00 032326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3719	032326	324 00 0 00 032327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3720									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3721									;IN THE SUBTEST) TO LOOP ON ERROR
  3722
  3723					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 82
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0109

  3724					;THIS TEST VERIFIES THAT HRLE PLACES THE RIGHT HALF OF C(E)
  3725					;INTO THE LEFT HALF OF THE AC
  3726					;AND PLACES BIT 18 OF C(E) INTO ALL BITS OF THE RIGHT HALF OF THE AC.
  3727					;IN THIS CASE, C(AC)=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3728					;THE AC IS CHECKED FOR 0,,-1.  IF C(AC)=0,,-1, THIS TEST FAILS
  3729
  3730	032327	534 00 0 00 033733 	B44100:	HRLE	[XWD 0,-1]	;PRELOAD AC WITH 0
  3731	032330	312 00 0 00 033730 		CAME	[-1]		;*HRLE SHOULD PLACE 0 INTO THE AC
  3732						STOP			^;FAIL IF C(AC)=0,,-1
  3733
  3734	032331	254 04 0 00 032332 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3735	032332	324 00 0 00 032333 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3736									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3737									;IN THE SUBTEST) TO LOOP ON ERROR
  3738
  3739					;**********
  3740
  3741					;THIS TEST VERIFIES THAT HLRE PLACES THE LEFT HALF OF C(E)
  3742					;INTO THE RIGHT HALF OF THE AC
  3743					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC
  3744					;IN THIS CASE, C(AC=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3745					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  3746
  3747
  3748	032333	400 00 0 00 000000 	B44200:	SETZ			;PRELOAD AC WITH 0
  3749	032334	574 00 0 00 000000 		HLRE			;*HLRE SHOULD PLACE 0 INTO THE AC
  3750	032335	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3751						STOP^
  3752	032336	254 04 0 00 032337 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3753	032337	324 00 0 00 032340 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3754									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3755									;IN THE SUBTEST) TO LOOP ON ERROR^
  3756
  3757					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 83
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0110

  3758					;THIS TEST VERIFIES THAT HLRE PLACES THE LEFT HALF OF C(E)
  3759					;INTO THE RIGHT HALF OF THE AC
  3760					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC
  3761					;IN THIS CASE, C(AC=0 AND C(E)=0.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3762					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  3763
  3764
  3765	032340	400 00 0 00 000000 	B44300:	SETZ			;PRELOAD AC WITH 0
  3766	032341	574 00 0 00 033730 		HLRE	[-1]		;*HLRE SHOULD PLACE -1,,-1 INTO THE AC
  3767	032342	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1	
  3768						STOP^
  3769	032343	254 04 0 00 032344 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3770	032344	324 00 0 00 032345 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3771									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3772									;IN THE SUBTEST) TO LOOP ON ERROR^
  3773
  3774					;*****     FAILURE ANALYSIS     *****
  3775					;C(AC0)		C(AC1)		FAILING SIGNAL
  3776
  3777					;0				SW: FCE
  3778					;-1,,0				ET2: AR RT AR LT EN
  3779					;0,,-1				ET2: AR0(1): AR LT AD EN
  3780
  3781					;**********
  3782
  3783					;THIS TEST VERIFIES THAT HLREI CLEARS THE AC
  3784					;IN THIS CASE C(AC)=-1,,-1 AND E=0,,-1
  3785					;THE RESULT IN THE AC SHOULD BE 0
  3786					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THEN TEST PASSES
  3787
  3788	032345	474 00 0 00 000000 	B44500:	SETO			;PRELOAD AC WITH -1,,-1
  3789	032346	575 00 0 00 777777 		HLREI	-1		;*HLREI SHOULD CLEAR THE AC
  3790	032347	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3791						STOP^
  3792	032350	254 04 0 00 032351 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3793	032351	324 00 0 00 032352 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3794									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3795									;IN THE SUBTEST) TO LOOP ON ERROR^
  3796
  3797					;*****     FAILURE ANALYSIS     *****
  3798					;C(AC0)		C(AC1)		FAILING SIGNAL
  3799
  3800					;0,,1				ET2: AR RT AR LT EN
  3801
  3802					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 84
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0111

  3803					;THIS TEST VERIFIES THAT HLREI CLEARS THE AC
  3804					;IN THIS CASE C(AC)=0 AND E=0
  3805					;THE RESULT IN THE AC SHOULD BE 0
  3806					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THE TEST PASSES
  3807
  3808	032352	575 00 0 00 000000 	B44600:	HLREI			;*HLREI SHOULD CLEAR THE AC		
  3809	032353	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3810						STOP^
  3811	032354	254 04 0 00 032355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3812	032355	324 00 0 00 032356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3813									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3814									;IN THE SUBTEST) TO LOOP ON ERROR^
  3815
  3816					;**********
  3817
  3818					;THIS TEST VERIFIES THAT HLRE PLACES THE LEFT HALF OF C(E)
  3819					;INTO THE RIGHT HALF OF THE AC
  3820					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC
  3821					;IN THIS CASE, C(E)=-1,,0.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  3822					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3823
  3824
  3825	032356	574 00 0 00 033731 	B44700:	HLRE	[XWD -1,0]	;*HLRE SHOULD PLACE -1,,0 INTO THE AC
  3826	032357	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3827						STOP^
  3828	032360	254 04 0 00 032361 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3829	032361	324 00 0 00 032362 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3830									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3831									;IN THE SUBTEST) TO LOOP ON ERROR^
  3832
  3833					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 85
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0112

  3834					;THIS TEST VERIFIES THAT HLRE PLACES THE LEFT HALF OF C(E)
  3835					;INTO THE RIGHT HALF OF THE AC
  3836					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC
  3837					;IN THIS CASE, C(E)=0,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE 0.
  3838					;THE AC IS CHECKED FOR 0.  IF C(AC)=0, THIS TEST PASSES
  3839
  3840	032362	574 00 0 00 033733 	B45000:	HLRE	[XWD 0,-1]	;*HLRE SHOULD PLACE 0,,-1 INTO THE AC
  3841	032363	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0
  3842						STOP^
  3843	032364	254 04 0 00 032365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3844	032365	324 00 0 00 032366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3845									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3846									;IN THE SUBTEST) TO LOOP ON ERROR^
  3847
  3848					;**********
  3849
  3850					;THIS TEST VERIFIES THAT HLRE PLACES THE LEFT HALF OF C(E)
  3851					;INTO THE RIGHT HALF OF THE AC
  3852					;AND PLACES BIT 0 OF C(E) INTO ALL BITS OF THE LEFT HALF OF THE AC
  3853					;IN THIS CASE, C(E)=-1,,-1.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,-1.
  3854					;THE AC IS CHECKED FOR -1,,-1.  IF C(AC)=-1,,-1, THIS TEST PASSES
  3855
  3856	032366	574 00 0 00 033730 	B45100:	HLRE	[-1]		;*HLRE SHOULD PLACE -1,,-1 INTO THE AC
  3857	032367	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  3858						STOP^
  3859	032370	254 04 0 00 032371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3860	032371	324 00 0 00 032372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3861									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3862									;IN THE SUBTEST) TO LOOP ON ERROR^
  3863
  3864					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 86
DSKAC1	MAC	28-Mar-78 12:49		TEST OF HWT INSTRUCTIONS                                                           SEQ 0113

  3865					;THIS TEST VERIFIES THAT HLREM PLACES THE LEFT HALF OF C(AC)
  3866					;INTO THE RIGHT HALF OF E
  3867					;AND PLACES BIT 0 OF C(AC) INTO ALL BITS OF THE LEFT HALF OF E.
  3868					;IN THIS CASE, C(AC)=1,,0 AND C(E)=0.  HENCE, THE RESULT IN E SHOULD BE -1,,-1.
  3869					;E IS CHECKED FOR -1,,-1.  IF C(E)=-1,,-1, THIS TEST PASSES
  3870
  3871	032372	400 00 0 00 000000 	B45200:	SETZ			;PRELOAD E WITH 0
  3872	032373	200 01 0 00 033731 		MOVE	1,[XWD -1,0]	;PRELOAD AC WITH -1,,0
  3873	032374	576 01 0 00 000000 		HLREM	1,		;*HLREM SHOULD PLACE -1,,-1 INTO E
  3874	032375	312 00 0 00 033730 		CAME	[-1]		;PASS IF C(E)=-1,,-1
  3875						STOP^
  3876	032376	254 04 0 00 032377 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3877	032377	324 00 0 00 032400 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3878									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3879									;IN THE SUBTEST) TO LOOP ON ERROR^
  3880
  3881					;*****     FAILURE ANALYSIS     *****
  3882					;C(AC0)		C(AC1)		FAILING SIGNAL
  3883
  3884					;0		-1,,0		SW: SCE
  3885					;0		-1,,0		SW: ET0
  3886					;0		-1,,0		ET0: AR AD EN
  3887					;-1,,0		-1,,0		ET2: AR RT AR + EN
  3888					;0,,-1		-1,,0		ET2: AR0(1): AR LT AD EN
  3889
  3890					;**********
  3891
  3892					;THIS TEST VERIFIES THAT HRLM PLACES THE RIGHT HALF OF C(AC) INTO THE LEFT HALF OF E.
  3893					;THE RIGHT HALF OF E IS UNAFFECTED
  3894					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=0.  HENCE, THE RESULT IN E SHOULD BE -1,,0.
  3895					;E IS CHECKED FOR -1,,0.  IF C(E)=-1,,0, THIS  TEST PASSES.
  3896
  3897	032400	400 00 0 00 000000 	B45400:	SETZ			;PRELOAD E WITH 0
  3898	032401	201 01 0 00 777777 		MOVEI	1,-1		;PRELOAD AC WITH 0,,-1
  3899	032402	506 01 0 00 000000 		HRLM	1,		;*HRLM SHOULD PLACE -1,,0 INTO E
  3900	032403	312 00 0 00 033731 		CAME	[XWD -1,0]	;PASS IF C(E)=-1,,0
  3901						STOP^
  3902	032404	254 04 0 00 032405 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3903	032405	324 00 0 00 032406 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3904									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3905									;IN THE SUBTEST) TO LOOP ON ERROR^
  3906
  3907					;*****     FAILURE ANALYSIS     *****
  3908					;C(AC0)		C(AC1)		FAILING SIGNAL
  3909
  3910					;0		0,,-1		SW: FCE PSE
  3911					;0,,-1		0,,-1		SW: ET0
  3912					;-1,,-1		0,,-1		ET0: AD RT BR + EN
  3913					;-1,,B45400	0,,-1		ET0: BR AR EN
  3914					;0		0,,-1		ET0: AR AD EN
  3915					;0		0,,-1		ET2: AR LT AR RT EN
  3916
  3917					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0114

  3918					SUBTTL	SUPPLEMENTARY ADDER TESTS - FLT 1 + 0
  3919
  3920					;**********
  3921
  3922			045500		SN=45500
  3923			000000			XX=0
  3924
  3925					B45500:	REPEAT	^D18,<
  3926					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  3927					;IS THE FLOATING ONE.
  3928					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  3929					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  3930					
  3931					SN=SN+1
  3932						XX=XX+XX
  3933						IFE	XX,<XX=1>
  3934						HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  3935						ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  3936						CAME	[XX]		;CHECK ADDER UPON FAILURE	
  3937						STOP
  3938					
  3939					;**********
  3940					>
  3941
  3942					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  3943					;IS THE FLOATING ONE.
  3944					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  3945					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  3946
  3947			045501		SN=SN+1
  3948			000000			XX=XX+XX
  3949			000001			IFE	XX,<XX=1>
  3950	032406	551 00 0 00 000001 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  3951	032407	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  3952	032410	312 00 0 00 033735 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  3953						STOP^
  3954	032411	254 04 0 00 032412 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3955	032412	324 00 0 00 032413 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3956									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3957									;IN THE SUBTEST) TO LOOP ON ERROR^
  3958
  3959					;**********
  3960
  3961
  3962					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  3963					;IS THE FLOATING ONE.
  3964					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  3965					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  3966
  3967			045502		SN=SN+1
  3968			000002			XX=XX+XX
  3969						IFE	XX,<XX=1>
  3970	032413	551 00 0 00 000002 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  3971	032414	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  3972	032415	312 00 0 00 033736 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-1
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0115

  3973						STOP^
  3974	032416	254 04 0 00 032417 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3975	032417	324 00 0 00 032420 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3976									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3977									;IN THE SUBTEST) TO LOOP ON ERROR^
  3978
  3979					;**********
  3980
  3981
  3982					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  3983					;IS THE FLOATING ONE.
  3984					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  3985					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  3986
  3987			045503		SN=SN+1
  3988			000004			XX=XX+XX
  3989						IFE	XX,<XX=1>
  3990	032420	551 00 0 00 000004 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  3991	032421	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  3992	032422	312 00 0 00 033737 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  3993						STOP^
  3994	032423	254 04 0 00 032424 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3995	032424	324 00 0 00 032425 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3996									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3997									;IN THE SUBTEST) TO LOOP ON ERROR^
  3998
  3999					;**********
  4000
  4001
  4002					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4003					;IS THE FLOATING ONE.
  4004					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4005					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4006
  4007			045504		SN=SN+1
  4008			000010			XX=XX+XX
  4009						IFE	XX,<XX=1>
  4010	032425	551 00 0 00 000010 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4011	032426	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4012	032427	312 00 0 00 033740 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4013						STOP^
  4014	032430	254 04 0 00 032431 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4015	032431	324 00 0 00 032432 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4017									;IN THE SUBTEST) TO LOOP ON ERROR^
  4018
  4019					;**********
  4020
  4021
  4022					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4023					;IS THE FLOATING ONE.
  4024					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4025					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4026
  4027			045505		SN=SN+1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-2
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0116

  4028			000020			XX=XX+XX
  4029						IFE	XX,<XX=1>
  4030	032432	551 00 0 00 000020 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4031	032433	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4032	032434	312 00 0 00 033741 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4033						STOP^
  4034	032435	254 04 0 00 032436 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4035	032436	324 00 0 00 032437 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4037									;IN THE SUBTEST) TO LOOP ON ERROR^
  4038
  4039					;**********
  4040
  4041
  4042					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4043					;IS THE FLOATING ONE.
  4044					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4045					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4046
  4047			045506		SN=SN+1
  4048			000040			XX=XX+XX
  4049						IFE	XX,<XX=1>
  4050	032437	551 00 0 00 000040 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4051	032440	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4052	032441	312 00 0 00 033742 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4053						STOP^
  4054	032442	254 04 0 00 032443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4055	032443	324 00 0 00 032444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4056									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4057									;IN THE SUBTEST) TO LOOP ON ERROR^
  4058
  4059					;**********
  4060
  4061
  4062					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4063					;IS THE FLOATING ONE.
  4064					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4065					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4066
  4067			045507		SN=SN+1
  4068			000100			XX=XX+XX
  4069						IFE	XX,<XX=1>
  4070	032444	551 00 0 00 000100 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4071	032445	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4072	032446	312 00 0 00 033743 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4073						STOP^
  4074	032447	254 04 0 00 032450 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4075	032450	324 00 0 00 032451 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4076									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4077									;IN THE SUBTEST) TO LOOP ON ERROR^
  4078
  4079					;**********
  4080
  4081
  4082					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-3
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0117

  4083					;IS THE FLOATING ONE.
  4084					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4085					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4086
  4087			045510		SN=SN+1
  4088			000200			XX=XX+XX
  4089						IFE	XX,<XX=1>
  4090	032451	551 00 0 00 000200 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4091	032452	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4092	032453	312 00 0 00 033744 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4093						STOP^
  4094	032454	254 04 0 00 032455 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4095	032455	324 00 0 00 032456 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4096									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4097									;IN THE SUBTEST) TO LOOP ON ERROR^
  4098
  4099					;**********
  4100
  4101
  4102					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4103					;IS THE FLOATING ONE.
  4104					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4105					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4106
  4107			045511		SN=SN+1
  4108			000400			XX=XX+XX
  4109						IFE	XX,<XX=1>
  4110	032456	551 00 0 00 000400 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4111	032457	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4112	032460	312 00 0 00 033745 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4113						STOP^
  4114	032461	254 04 0 00 032462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4115	032462	324 00 0 00 032463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4116									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4117									;IN THE SUBTEST) TO LOOP ON ERROR^
  4118
  4119					;**********
  4120
  4121
  4122					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4123					;IS THE FLOATING ONE.
  4124					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4125					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4126
  4127			045512		SN=SN+1
  4128			001000			XX=XX+XX
  4129						IFE	XX,<XX=1>
  4130	032463	551 00 0 00 001000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4131	032464	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4132	032465	312 00 0 00 033746 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4133						STOP^
  4134	032466	254 04 0 00 032467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4135	032467	324 00 0 00 032470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4136									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4137									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-4
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0118

  4138
  4139					;**********
  4140
  4141
  4142					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4143					;IS THE FLOATING ONE.
  4144					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4145					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4146
  4147			045513		SN=SN+1
  4148			002000			XX=XX+XX
  4149						IFE	XX,<XX=1>
  4150	032470	551 00 0 00 002000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4151	032471	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4152	032472	312 00 0 00 033747 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4153						STOP^
  4154	032473	254 04 0 00 032474 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4155	032474	324 00 0 00 032475 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4156									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4157									;IN THE SUBTEST) TO LOOP ON ERROR^
  4158
  4159					;**********
  4160
  4161
  4162					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4163					;IS THE FLOATING ONE.
  4164					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4165					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4166
  4167			045514		SN=SN+1
  4168			004000			XX=XX+XX
  4169						IFE	XX,<XX=1>
  4170	032475	551 00 0 00 004000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4171	032476	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4172	032477	312 00 0 00 033750 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4173						STOP^
  4174	032500	254 04 0 00 032501 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4175	032501	324 00 0 00 032502 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4176									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4177									;IN THE SUBTEST) TO LOOP ON ERROR^
  4178
  4179					;**********
  4180
  4181
  4182					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4183					;IS THE FLOATING ONE.
  4184					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4185					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4186
  4187			045515		SN=SN+1
  4188			010000			XX=XX+XX
  4189						IFE	XX,<XX=1>
  4190	032502	551 00 0 00 010000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4191	032503	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4192	032504	312 00 0 00 033751 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-5
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0119

  4193						STOP^
  4194	032505	254 04 0 00 032506 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4195	032506	324 00 0 00 032507 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4196									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4197									;IN THE SUBTEST) TO LOOP ON ERROR^
  4198
  4199					;**********
  4200
  4201
  4202					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4203					;IS THE FLOATING ONE.
  4204					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4205					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4206
  4207			045516		SN=SN+1
  4208			020000			XX=XX+XX
  4209						IFE	XX,<XX=1>
  4210	032507	551 00 0 00 020000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4211	032510	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4212	032511	312 00 0 00 033752 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4213						STOP^
  4214	032512	254 04 0 00 032513 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4215	032513	324 00 0 00 032514 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4216									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4217									;IN THE SUBTEST) TO LOOP ON ERROR^
  4218
  4219					;**********
  4220
  4221
  4222					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4223					;IS THE FLOATING ONE.
  4224					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4225					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4226
  4227			045517		SN=SN+1
  4228			040000			XX=XX+XX
  4229						IFE	XX,<XX=1>
  4230	032514	551 00 0 00 040000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4231	032515	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4232	032516	312 00 0 00 033753 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4233						STOP^
  4234	032517	254 04 0 00 032520 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4235	032520	324 00 0 00 032521 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4236									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4237									;IN THE SUBTEST) TO LOOP ON ERROR^
  4238
  4239					;**********
  4240
  4241
  4242					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4243					;IS THE FLOATING ONE.
  4244					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4245					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4246
  4247			045520		SN=SN+1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-6
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0120

  4248			100000			XX=XX+XX
  4249						IFE	XX,<XX=1>
  4250	032521	551 00 0 00 100000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4251	032522	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4252	032523	312 00 0 00 033754 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4253						STOP^
  4254	032524	254 04 0 00 032525 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4255	032525	324 00 0 00 032526 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4256									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4257									;IN THE SUBTEST) TO LOOP ON ERROR^
  4258
  4259					;**********
  4260
  4261
  4262					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4263					;IS THE FLOATING ONE.
  4264					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4265					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4266
  4267			045521		SN=SN+1
  4268			200000			XX=XX+XX
  4269						IFE	XX,<XX=1>
  4270	032526	551 00 0 00 200000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4271	032527	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4272	032530	312 00 0 00 033755 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4273						STOP^
  4274	032531	254 04 0 00 032532 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4275	032532	324 00 0 00 032533 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4276									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4277									;IN THE SUBTEST) TO LOOP ON ERROR^
  4278
  4279					;**********
  4280
  4281
  4282					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4283					;IS THE FLOATING ONE.
  4284					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4285					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4286
  4287			045522		SN=SN+1
  4288			400000			XX=XX+XX
  4289						IFE	XX,<XX=1>
  4290	032533	551 00 0 00 400000 		HRRZI	XX		;PRELOAD AC WITH FLOATING ONE
  4291	032534	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4292	032535	312 00 0 00 033756 		CAME	[XX]		;CHECK ADDER UPON FAILURE	
  4293						STOP^
  4294	032536	254 04 0 00 032537 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4295	032537	324 00 0 00 032540 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4296									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4297									;IN THE SUBTEST) TO LOOP ON ERROR^
  4298
  4299					;**********
  4300
  4301					PAGE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-7
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0121

  4302			000000			XX=0
  4303
  4304						REPEAT	^D18,<
  4305					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4306					;IS THE FLOATING ONE.
  4307					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4308					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4309					
  4310					SN=SN+1
  4311						XX=XX+XX
  4312						IFE	XX,<XX=1>
  4313						HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4314						ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4315						CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4316						STOP		
  4317					
  4318					;**********
  4319					>
  4320
  4321					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4322					;IS THE FLOATING ONE.
  4323					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4324					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4325
  4326			045523		SN=SN+1
  4327			000000			XX=XX+XX
  4328			000001			IFE	XX,<XX=1>
  4329	032540	515 00 0 00 000001 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4330	032541	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4331	032542	312 00 0 00 033757 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4332						STOP		^
  4333	032543	254 04 0 00 032544 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4334	032544	324 00 0 00 032545 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4335									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4336									;IN THE SUBTEST) TO LOOP ON ERROR^
  4337
  4338					;**********
  4339
  4340
  4341					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4342					;IS THE FLOATING ONE.
  4343					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4344					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4345
  4346			045524		SN=SN+1
  4347			000002			XX=XX+XX
  4348						IFE	XX,<XX=1>
  4349	032545	515 00 0 00 000002 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4350	032546	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4351	032547	312 00 0 00 033760 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4352						STOP		^
  4353	032550	254 04 0 00 032551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4354	032551	324 00 0 00 032552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4355									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4356									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-8
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0122

  4357
  4358					;**********
  4359
  4360
  4361					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4362					;IS THE FLOATING ONE.
  4363					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4364					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4365
  4366			045525		SN=SN+1
  4367			000004			XX=XX+XX
  4368						IFE	XX,<XX=1>
  4369	032552	515 00 0 00 000004 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4370	032553	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4371	032554	312 00 0 00 033761 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4372						STOP		^
  4373	032555	254 04 0 00 032556 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4374	032556	324 00 0 00 032557 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4375									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4376									;IN THE SUBTEST) TO LOOP ON ERROR^
  4377
  4378					;**********
  4379
  4380
  4381					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4382					;IS THE FLOATING ONE.
  4383					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4384					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4385
  4386			045526		SN=SN+1
  4387			000010			XX=XX+XX
  4388						IFE	XX,<XX=1>
  4389	032557	515 00 0 00 000010 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4390	032560	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4391	032561	312 00 0 00 033762 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4392						STOP		^
  4393	032562	254 04 0 00 032563 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4394	032563	324 00 0 00 032564 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4395									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4396									;IN THE SUBTEST) TO LOOP ON ERROR^
  4397
  4398					;**********
  4399
  4400
  4401					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4402					;IS THE FLOATING ONE.
  4403					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4404					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4405
  4406			045527		SN=SN+1
  4407			000020			XX=XX+XX
  4408						IFE	XX,<XX=1>
  4409	032564	515 00 0 00 000020 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4410	032565	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4411	032566	312 00 0 00 033763 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-9
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0123

  4412						STOP		^
  4413	032567	254 04 0 00 032570 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4414	032570	324 00 0 00 032571 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4415									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4416									;IN THE SUBTEST) TO LOOP ON ERROR^
  4417
  4418					;**********
  4419
  4420
  4421					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4422					;IS THE FLOATING ONE.
  4423					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4424					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4425
  4426			045530		SN=SN+1
  4427			000040			XX=XX+XX
  4428						IFE	XX,<XX=1>
  4429	032571	515 00 0 00 000040 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4430	032572	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4431	032573	312 00 0 00 033764 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4432						STOP		^
  4433	032574	254 04 0 00 032575 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4434	032575	324 00 0 00 032576 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4436									;IN THE SUBTEST) TO LOOP ON ERROR^
  4437
  4438					;**********
  4439
  4440
  4441					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4442					;IS THE FLOATING ONE.
  4443					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4444					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4445
  4446			045531		SN=SN+1
  4447			000100			XX=XX+XX
  4448						IFE	XX,<XX=1>
  4449	032576	515 00 0 00 000100 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4450	032577	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4451	032600	312 00 0 00 033765 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4452						STOP		^
  4453	032601	254 04 0 00 032602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4454	032602	324 00 0 00 032603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4455									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4456									;IN THE SUBTEST) TO LOOP ON ERROR^
  4457
  4458					;**********
  4459
  4460
  4461					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4462					;IS THE FLOATING ONE.
  4463					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4464					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4465
  4466			045532		SN=SN+1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-10
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0124

  4467			000200			XX=XX+XX
  4468						IFE	XX,<XX=1>
  4469	032603	515 00 0 00 000200 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4470	032604	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4471	032605	312 00 0 00 033766 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4472						STOP		^
  4473	032606	254 04 0 00 032607 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4474	032607	324 00 0 00 032610 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4475									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4476									;IN THE SUBTEST) TO LOOP ON ERROR^
  4477
  4478					;**********
  4479
  4480
  4481					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4482					;IS THE FLOATING ONE.
  4483					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4484					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4485
  4486			045533		SN=SN+1
  4487			000400			XX=XX+XX
  4488						IFE	XX,<XX=1>
  4489	032610	515 00 0 00 000400 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4490	032611	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4491	032612	312 00 0 00 033767 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4492						STOP		^
  4493	032613	254 04 0 00 032614 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4494	032614	324 00 0 00 032615 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4495									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4496									;IN THE SUBTEST) TO LOOP ON ERROR^
  4497
  4498					;**********
  4499
  4500
  4501					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4502					;IS THE FLOATING ONE.
  4503					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4504					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4505
  4506			045534		SN=SN+1
  4507			001000			XX=XX+XX
  4508						IFE	XX,<XX=1>
  4509	032615	515 00 0 00 001000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4510	032616	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4511	032617	312 00 0 00 033770 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4512						STOP		^
  4513	032620	254 04 0 00 032621 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4514	032621	324 00 0 00 032622 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4515									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4516									;IN THE SUBTEST) TO LOOP ON ERROR^
  4517
  4518					;**********
  4519
  4520
  4521					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-11
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0125

  4522					;IS THE FLOATING ONE.
  4523					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4524					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4525
  4526			045535		SN=SN+1
  4527			002000			XX=XX+XX
  4528						IFE	XX,<XX=1>
  4529	032622	515 00 0 00 002000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4530	032623	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4531	032624	312 00 0 00 033771 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4532						STOP		^
  4533	032625	254 04 0 00 032626 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4534	032626	324 00 0 00 032627 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4535									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4536									;IN THE SUBTEST) TO LOOP ON ERROR^
  4537
  4538					;**********
  4539
  4540
  4541					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4542					;IS THE FLOATING ONE.
  4543					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4544					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4545
  4546			045536		SN=SN+1
  4547			004000			XX=XX+XX
  4548						IFE	XX,<XX=1>
  4549	032627	515 00 0 00 004000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4550	032630	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4551	032631	312 00 0 00 033772 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4552						STOP		^
  4553	032632	254 04 0 00 032633 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4554	032633	324 00 0 00 032634 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4556									;IN THE SUBTEST) TO LOOP ON ERROR^
  4557
  4558					;**********
  4559
  4560
  4561					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4562					;IS THE FLOATING ONE.
  4563					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4564					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4565
  4566			045537		SN=SN+1
  4567			010000			XX=XX+XX
  4568						IFE	XX,<XX=1>
  4569	032634	515 00 0 00 010000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4570	032635	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4571	032636	312 00 0 00 033773 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4572						STOP		^
  4573	032637	254 04 0 00 032640 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4574	032640	324 00 0 00 032641 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4575									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4576									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-12
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0126

  4577
  4578					;**********
  4579
  4580
  4581					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4582					;IS THE FLOATING ONE.
  4583					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4584					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4585
  4586			045540		SN=SN+1
  4587			020000			XX=XX+XX
  4588						IFE	XX,<XX=1>
  4589	032641	515 00 0 00 020000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4590	032642	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4591	032643	312 00 0 00 033774 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4592						STOP		^
  4593	032644	254 04 0 00 032645 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4594	032645	324 00 0 00 032646 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4595									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4596									;IN THE SUBTEST) TO LOOP ON ERROR^
  4597
  4598					;**********
  4599
  4600
  4601					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4602					;IS THE FLOATING ONE.
  4603					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4604					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4605
  4606			045541		SN=SN+1
  4607			040000			XX=XX+XX
  4608						IFE	XX,<XX=1>
  4609	032646	515 00 0 00 040000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4610	032647	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4611	032650	312 00 0 00 033775 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4612						STOP		^
  4613	032651	254 04 0 00 032652 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4614	032652	324 00 0 00 032653 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4615									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4616									;IN THE SUBTEST) TO LOOP ON ERROR^
  4617
  4618					;**********
  4619
  4620
  4621					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4622					;IS THE FLOATING ONE.
  4623					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4624					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4625
  4626			045542		SN=SN+1
  4627			100000			XX=XX+XX
  4628						IFE	XX,<XX=1>
  4629	032653	515 00 0 00 100000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4630	032654	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4631	032655	312 00 0 00 033776 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 87-13
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + 0                                              SEQ 0127

  4632						STOP		^
  4633	032656	254 04 0 00 032657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4634	032657	324 00 0 00 032660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4635									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4636									;IN THE SUBTEST) TO LOOP ON ERROR^
  4637
  4638					;**********
  4639
  4640
  4641					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4642					;IS THE FLOATING ONE.
  4643					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4644					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4645
  4646			045543		SN=SN+1
  4647			200000			XX=XX+XX
  4648						IFE	XX,<XX=1>
  4649	032660	515 00 0 00 200000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4650	032661	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4651	032662	312 00 0 00 033777 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4652						STOP		^
  4653	032663	254 04 0 00 032664 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4654	032664	324 00 0 00 032665 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4655									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4656									;IN THE SUBTEST) TO LOOP ON ERROR^
  4657
  4658					;**********
  4659
  4660
  4661					;THIS TEST VERIFIES THAT THE RESULT OF A ZERO ADDED TO A FLOATING ONE
  4662					;IS THE FLOATING ONE.
  4663					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  4664					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4665
  4666			045544		SN=SN+1
  4667			400000			XX=XX+XX
  4668						IFE	XX,<XX=1>
  4669	032665	515 00 0 00 400000 		HRLZI	XX		;PRELOAD AC WITH FLOATING ONE
  4670	032666	270 00 0 00 033732 		ADD	[0]		;ADD ZERO TO A FLOATING ONE	
  4671	032667	312 00 0 00 034000 		CAME	[XX,,0]		;CHECK ADDER UPON FALIRE
  4672						STOP		^
  4673	032670	254 04 0 00 032671 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4674	032671	324 00 0 00 032672 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4675									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4676									;IN THE SUBTEST) TO LOOP ON ERROR^
  4677
  4678					;**********
  4679
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0128

  4680					SUBTTL	SUPPLEMENTARY ADDER TESTS - O + FLT 0
  4681
  4682					;**********
  4683
  4684			045600		SN=45600
  4685					B45600:	REPEAT	^D18,<
  4686					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4687					;IS THE FLOATING ZERO.
  4688					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4689					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4690					
  4691					SN=SN+1
  4692						XX=<XX+XX+1>&777777
  4693						IFE	<XX-1>,<XX=777776>
  4694						SETZ			;PRELOAD AC WITH 0
  4695						ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4696						CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4697						STOP		
  4698					
  4699					;**********
  4700					>
  4701
  4702					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4703					;IS THE FLOATING ZERO.
  4704					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4705					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4706
  4707			045601		SN=SN+1
  4708			000001			XX=<XX+XX+1>&777777
  4709			777776			IFE	<XX-1>,<XX=777776>
  4710	032672	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4711	032673	270 00 0 00 034001 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4712	032674	312 00 0 00 034001 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4713						STOP		^
  4714	032675	254 04 0 00 032676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4715	032676	324 00 0 00 032677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4716									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4717									;IN THE SUBTEST) TO LOOP ON ERROR^
  4718
  4719					;**********
  4720
  4721
  4722					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4723					;IS THE FLOATING ZERO.
  4724					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4725					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4726
  4727			045602		SN=SN+1
  4728			777775			XX=<XX+XX+1>&777777
  4729						IFE	<XX-1>,<XX=777776>
  4730	032677	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4731	032700	270 00 0 00 034002 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4732	032701	312 00 0 00 034002 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4733						STOP		^
  4734	032702	254 04 0 00 032703 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-1
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0129

  4735	032703	324 00 0 00 032704 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4736									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4737									;IN THE SUBTEST) TO LOOP ON ERROR^
  4738
  4739					;**********
  4740
  4741
  4742					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4743					;IS THE FLOATING ZERO.
  4744					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4745					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4746
  4747			045603		SN=SN+1
  4748			777773			XX=<XX+XX+1>&777777
  4749						IFE	<XX-1>,<XX=777776>
  4750	032704	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4751	032705	270 00 0 00 034003 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4752	032706	312 00 0 00 034003 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4753						STOP		^
  4754	032707	254 04 0 00 032710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4755	032710	324 00 0 00 032711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4756									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4757									;IN THE SUBTEST) TO LOOP ON ERROR^
  4758
  4759					;**********
  4760
  4761
  4762					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4763					;IS THE FLOATING ZERO.
  4764					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4765					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4766
  4767			045604		SN=SN+1
  4768			777767			XX=<XX+XX+1>&777777
  4769						IFE	<XX-1>,<XX=777776>
  4770	032711	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4771	032712	270 00 0 00 034004 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4772	032713	312 00 0 00 034004 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4773						STOP		^
  4774	032714	254 04 0 00 032715 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4775	032715	324 00 0 00 032716 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4777									;IN THE SUBTEST) TO LOOP ON ERROR^
  4778
  4779					;**********
  4780
  4781
  4782					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4783					;IS THE FLOATING ZERO.
  4784					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4785					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4786
  4787			045605		SN=SN+1
  4788			777757			XX=<XX+XX+1>&777777
  4789						IFE	<XX-1>,<XX=777776>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-2
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0130

  4790	032716	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4791	032717	270 00 0 00 034005 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4792	032720	312 00 0 00 034005 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4793						STOP		^
  4794	032721	254 04 0 00 032722 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4795	032722	324 00 0 00 032723 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4797									;IN THE SUBTEST) TO LOOP ON ERROR^
  4798
  4799					;**********
  4800
  4801
  4802					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4803					;IS THE FLOATING ZERO.
  4804					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4805					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4806
  4807			045606		SN=SN+1
  4808			777737			XX=<XX+XX+1>&777777
  4809						IFE	<XX-1>,<XX=777776>
  4810	032723	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4811	032724	270 00 0 00 034006 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4812	032725	312 00 0 00 034006 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4813						STOP		^
  4814	032726	254 04 0 00 032727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4815	032727	324 00 0 00 032730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4816									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4817									;IN THE SUBTEST) TO LOOP ON ERROR^
  4818
  4819					;**********
  4820
  4821
  4822					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4823					;IS THE FLOATING ZERO.
  4824					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4825					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4826
  4827			045607		SN=SN+1
  4828			777677			XX=<XX+XX+1>&777777
  4829						IFE	<XX-1>,<XX=777776>
  4830	032730	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4831	032731	270 00 0 00 034007 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4832	032732	312 00 0 00 034007 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4833						STOP		^
  4834	032733	254 04 0 00 032734 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4835	032734	324 00 0 00 032735 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4836									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4837									;IN THE SUBTEST) TO LOOP ON ERROR^
  4838
  4839					;**********
  4840
  4841
  4842					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4843					;IS THE FLOATING ZERO.
  4844					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-3
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0131

  4845					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4846
  4847			045610		SN=SN+1
  4848			777577			XX=<XX+XX+1>&777777
  4849						IFE	<XX-1>,<XX=777776>
  4850	032735	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4851	032736	270 00 0 00 034010 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4852	032737	312 00 0 00 034010 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4853						STOP		^
  4854	032740	254 04 0 00 032741 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4855	032741	324 00 0 00 032742 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4856									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4857									;IN THE SUBTEST) TO LOOP ON ERROR^
  4858
  4859					;**********
  4860
  4861
  4862					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4863					;IS THE FLOATING ZERO.
  4864					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4865					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4866
  4867			045611		SN=SN+1
  4868			777377			XX=<XX+XX+1>&777777
  4869						IFE	<XX-1>,<XX=777776>
  4870	032742	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4871	032743	270 00 0 00 034011 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4872	032744	312 00 0 00 034011 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4873						STOP		^
  4874	032745	254 04 0 00 032746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4875	032746	324 00 0 00 032747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4876									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4877									;IN THE SUBTEST) TO LOOP ON ERROR^
  4878
  4879					;**********
  4880
  4881
  4882					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4883					;IS THE FLOATING ZERO.
  4884					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4885					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4886
  4887			045612		SN=SN+1
  4888			776777			XX=<XX+XX+1>&777777
  4889						IFE	<XX-1>,<XX=777776>
  4890	032747	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4891	032750	270 00 0 00 034012 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4892	032751	312 00 0 00 034012 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4893						STOP		^
  4894	032752	254 04 0 00 032753 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4895	032753	324 00 0 00 032754 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4896									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4897									;IN THE SUBTEST) TO LOOP ON ERROR^
  4898
  4899					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-4
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0132

  4900
  4901
  4902					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4903					;IS THE FLOATING ZERO.
  4904					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4905					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4906
  4907			045613		SN=SN+1
  4908			775777			XX=<XX+XX+1>&777777
  4909						IFE	<XX-1>,<XX=777776>
  4910	032754	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4911	032755	270 00 0 00 034013 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4912	032756	312 00 0 00 034013 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4913						STOP		^
  4914	032757	254 04 0 00 032760 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4915	032760	324 00 0 00 032761 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4916									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4917									;IN THE SUBTEST) TO LOOP ON ERROR^
  4918
  4919					;**********
  4920
  4921
  4922					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4923					;IS THE FLOATING ZERO.
  4924					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4925					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4926
  4927			045614		SN=SN+1
  4928			773777			XX=<XX+XX+1>&777777
  4929						IFE	<XX-1>,<XX=777776>
  4930	032761	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4931	032762	270 00 0 00 034014 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4932	032763	312 00 0 00 034014 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4933						STOP		^
  4934	032764	254 04 0 00 032765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4935	032765	324 00 0 00 032766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4936									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4937									;IN THE SUBTEST) TO LOOP ON ERROR^
  4938
  4939					;**********
  4940
  4941
  4942					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4943					;IS THE FLOATING ZERO.
  4944					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4945					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4946
  4947			045615		SN=SN+1
  4948			767777			XX=<XX+XX+1>&777777
  4949						IFE	<XX-1>,<XX=777776>
  4950	032766	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4951	032767	270 00 0 00 034015 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4952	032770	312 00 0 00 034015 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4953						STOP		^
  4954	032771	254 04 0 00 032772 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-5
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0133

  4955	032772	324 00 0 00 032773 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4956									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4957									;IN THE SUBTEST) TO LOOP ON ERROR^
  4958
  4959					;**********
  4960
  4961
  4962					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4963					;IS THE FLOATING ZERO.
  4964					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4965					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4966
  4967			045616		SN=SN+1
  4968			757777			XX=<XX+XX+1>&777777
  4969						IFE	<XX-1>,<XX=777776>
  4970	032773	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4971	032774	270 00 0 00 034016 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4972	032775	312 00 0 00 034016 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4973						STOP		^
  4974	032776	254 04 0 00 032777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4975	032777	324 00 0 00 033000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4976									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4977									;IN THE SUBTEST) TO LOOP ON ERROR^
  4978
  4979					;**********
  4980
  4981
  4982					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  4983					;IS THE FLOATING ZERO.
  4984					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  4985					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  4986
  4987			045617		SN=SN+1
  4988			737777			XX=<XX+XX+1>&777777
  4989						IFE	<XX-1>,<XX=777776>
  4990	033000	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  4991	033001	270 00 0 00 034017 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  4992	033002	312 00 0 00 034017 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  4993						STOP		^
  4994	033003	254 04 0 00 033004 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4995	033004	324 00 0 00 033005 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4996									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4997									;IN THE SUBTEST) TO LOOP ON ERROR^
  4998
  4999					;**********
  5000
  5001
  5002					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5003					;IS THE FLOATING ZERO.
  5004					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  5005					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5006
  5007			045620		SN=SN+1
  5008			677777			XX=<XX+XX+1>&777777
  5009						IFE	<XX-1>,<XX=777776>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-6
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0134

  5010	033005	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5011	033006	270 00 0 00 034020 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  5012	033007	312 00 0 00 034020 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  5013						STOP		^
  5014	033010	254 04 0 00 033011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5015	033011	324 00 0 00 033012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5017									;IN THE SUBTEST) TO LOOP ON ERROR^
  5018
  5019					;**********
  5020
  5021
  5022					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5023					;IS THE FLOATING ZERO.
  5024					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  5025					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5026
  5027			045621		SN=SN+1
  5028			577777			XX=<XX+XX+1>&777777
  5029						IFE	<XX-1>,<XX=777776>
  5030	033012	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5031	033013	270 00 0 00 034021 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  5032	033014	312 00 0 00 034021 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  5033						STOP		^
  5034	033015	254 04 0 00 033016 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5035	033016	324 00 0 00 033017 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5037									;IN THE SUBTEST) TO LOOP ON ERROR^
  5038
  5039					;**********
  5040
  5041
  5042					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5043					;IS THE FLOATING ZERO.
  5044					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  5045					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5046
  5047			045622		SN=SN+1
  5048			377777			XX=<XX+XX+1>&777777
  5049						IFE	<XX-1>,<XX=777776>
  5050	033017	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5051	033020	270 00 0 00 034022 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ZERO
  5052	033021	312 00 0 00 034022 		CAME	[-1,,XX]	;CHECK ADDER UPON FAILURE
  5053						STOP		^
  5054	033022	254 04 0 00 033023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5055	033023	324 00 0 00 033024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5056									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5057									;IN THE SUBTEST) TO LOOP ON ERROR^
  5058
  5059					;**********
  5060
  5061					PAGE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-7
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0135

  5062			000000			XX=0
  5063
  5064						REPEAT	^D18,<
  5065					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5066					;IS THE FLOATING ZERO.
  5067					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5068					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5069					
  5070					SN=SN+1
  5071						XX=<XX+XX+1>&777777
  5072						IFE	<XX-1>,<XX=777776>
  5073						SETZ			;PRELOAD AC WITH 0
  5074						ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5075						CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5076						STOP		
  5077					
  5078					;**********
  5079					>
  5080
  5081					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5082					;IS THE FLOATING ZERO.
  5083					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5084					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5085
  5086			045623		SN=SN+1
  5087			000001			XX=<XX+XX+1>&777777
  5088			777776			IFE	<XX-1>,<XX=777776>
  5089	033024	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5090	033025	270 00 0 00 034023 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5091	033026	312 00 0 00 034023 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5092						STOP		^
  5093	033027	254 04 0 00 033030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5094	033030	324 00 0 00 033031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5095									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5096									;IN THE SUBTEST) TO LOOP ON ERROR^
  5097
  5098					;**********
  5099
  5100
  5101					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5102					;IS THE FLOATING ZERO.
  5103					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5104					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5105
  5106			045624		SN=SN+1
  5107			777775			XX=<XX+XX+1>&777777
  5108						IFE	<XX-1>,<XX=777776>
  5109	033031	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5110	033032	270 00 0 00 034024 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5111	033033	312 00 0 00 034024 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5112						STOP		^
  5113	033034	254 04 0 00 033035 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5114	033035	324 00 0 00 033036 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5115									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5116									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-8
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0136

  5117
  5118					;**********
  5119
  5120
  5121					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5122					;IS THE FLOATING ZERO.
  5123					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5124					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5125
  5126			045625		SN=SN+1
  5127			777773			XX=<XX+XX+1>&777777
  5128						IFE	<XX-1>,<XX=777776>
  5129	033036	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5130	033037	270 00 0 00 034025 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5131	033040	312 00 0 00 034025 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5132						STOP		^
  5133	033041	254 04 0 00 033042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5134	033042	324 00 0 00 033043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5135									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5136									;IN THE SUBTEST) TO LOOP ON ERROR^
  5137
  5138					;**********
  5139
  5140
  5141					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5142					;IS THE FLOATING ZERO.
  5143					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5144					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5145
  5146			045626		SN=SN+1
  5147			777767			XX=<XX+XX+1>&777777
  5148						IFE	<XX-1>,<XX=777776>
  5149	033043	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5150	033044	270 00 0 00 034026 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5151	033045	312 00 0 00 034026 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5152						STOP		^
  5153	033046	254 04 0 00 033047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5154	033047	324 00 0 00 033050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5155									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5156									;IN THE SUBTEST) TO LOOP ON ERROR^
  5157
  5158					;**********
  5159
  5160
  5161					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5162					;IS THE FLOATING ZERO.
  5163					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5164					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5165
  5166			045627		SN=SN+1
  5167			777757			XX=<XX+XX+1>&777777
  5168						IFE	<XX-1>,<XX=777776>
  5169	033050	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5170	033051	270 00 0 00 034027 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5171	033052	312 00 0 00 034027 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-9
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0137

  5172						STOP		^
  5173	033053	254 04 0 00 033054 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5174	033054	324 00 0 00 033055 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5175									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5176									;IN THE SUBTEST) TO LOOP ON ERROR^
  5177
  5178					;**********
  5179
  5180
  5181					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5182					;IS THE FLOATING ZERO.
  5183					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5184					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5185
  5186			045630		SN=SN+1
  5187			777737			XX=<XX+XX+1>&777777
  5188						IFE	<XX-1>,<XX=777776>
  5189	033055	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5190	033056	270 00 0 00 034030 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5191	033057	312 00 0 00 034030 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5192						STOP		^
  5193	033060	254 04 0 00 033061 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5194	033061	324 00 0 00 033062 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5195									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5196									;IN THE SUBTEST) TO LOOP ON ERROR^
  5197
  5198					;**********
  5199
  5200
  5201					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5202					;IS THE FLOATING ZERO.
  5203					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5204					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5205
  5206			045631		SN=SN+1
  5207			777677			XX=<XX+XX+1>&777777
  5208						IFE	<XX-1>,<XX=777776>
  5209	033062	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5210	033063	270 00 0 00 034031 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5211	033064	312 00 0 00 034031 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5212						STOP		^
  5213	033065	254 04 0 00 033066 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5214	033066	324 00 0 00 033067 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5215									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5216									;IN THE SUBTEST) TO LOOP ON ERROR^
  5217
  5218					;**********
  5219
  5220
  5221					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5222					;IS THE FLOATING ZERO.
  5223					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5224					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5225
  5226			045632		SN=SN+1
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-10
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0138

  5227			777577			XX=<XX+XX+1>&777777
  5228						IFE	<XX-1>,<XX=777776>
  5229	033067	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5230	033070	270 00 0 00 034032 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5231	033071	312 00 0 00 034032 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5232						STOP		^
  5233	033072	254 04 0 00 033073 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5234	033073	324 00 0 00 033074 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5235									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5236									;IN THE SUBTEST) TO LOOP ON ERROR^
  5237
  5238					;**********
  5239
  5240
  5241					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5242					;IS THE FLOATING ZERO.
  5243					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5244					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5245
  5246			045633		SN=SN+1
  5247			777377			XX=<XX+XX+1>&777777
  5248						IFE	<XX-1>,<XX=777776>
  5249	033074	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5250	033075	270 00 0 00 034033 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5251	033076	312 00 0 00 034033 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5252						STOP		^
  5253	033077	254 04 0 00 033100 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5254	033100	324 00 0 00 033101 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5255									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5256									;IN THE SUBTEST) TO LOOP ON ERROR^
  5257
  5258					;**********
  5259
  5260
  5261					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5262					;IS THE FLOATING ZERO.
  5263					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5264					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5265
  5266			045634		SN=SN+1
  5267			776777			XX=<XX+XX+1>&777777
  5268						IFE	<XX-1>,<XX=777776>
  5269	033101	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5270	033102	270 00 0 00 034034 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5271	033103	312 00 0 00 034034 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5272						STOP		^
  5273	033104	254 04 0 00 033105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5274	033105	324 00 0 00 033106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5275									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5276									;IN THE SUBTEST) TO LOOP ON ERROR^
  5277
  5278					;**********
  5279
  5280
  5281					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-11
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0139

  5282					;IS THE FLOATING ZERO.
  5283					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5284					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5285
  5286			045635		SN=SN+1
  5287			775777			XX=<XX+XX+1>&777777
  5288						IFE	<XX-1>,<XX=777776>
  5289	033106	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5290	033107	270 00 0 00 034035 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5291	033110	312 00 0 00 034035 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5292						STOP		^
  5293	033111	254 04 0 00 033112 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5294	033112	324 00 0 00 033113 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5295									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5296									;IN THE SUBTEST) TO LOOP ON ERROR^
  5297
  5298					;**********
  5299
  5300
  5301					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5302					;IS THE FLOATING ZERO.
  5303					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5304					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5305
  5306			045636		SN=SN+1
  5307			773777			XX=<XX+XX+1>&777777
  5308						IFE	<XX-1>,<XX=777776>
  5309	033113	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5310	033114	270 00 0 00 034036 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5311	033115	312 00 0 00 034036 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5312						STOP		^
  5313	033116	254 04 0 00 033117 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5314	033117	324 00 0 00 033120 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5315									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5316									;IN THE SUBTEST) TO LOOP ON ERROR^
  5317
  5318					;**********
  5319
  5320
  5321					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5322					;IS THE FLOATING ZERO.
  5323					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5324					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5325
  5326			045637		SN=SN+1
  5327			767777			XX=<XX+XX+1>&777777
  5328						IFE	<XX-1>,<XX=777776>
  5329	033120	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5330	033121	270 00 0 00 034037 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5331	033122	312 00 0 00 034037 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5332						STOP		^
  5333	033123	254 04 0 00 033124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5334	033124	324 00 0 00 033125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5335									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5336									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-12
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0140

  5337
  5338					;**********
  5339
  5340
  5341					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5342					;IS THE FLOATING ZERO.
  5343					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5344					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5345
  5346			045640		SN=SN+1
  5347			757777			XX=<XX+XX+1>&777777
  5348						IFE	<XX-1>,<XX=777776>
  5349	033125	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5350	033126	270 00 0 00 034040 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5351	033127	312 00 0 00 034040 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5352						STOP		^
  5353	033130	254 04 0 00 033131 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5354	033131	324 00 0 00 033132 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5355									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5356									;IN THE SUBTEST) TO LOOP ON ERROR^
  5357
  5358					;**********
  5359
  5360
  5361					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5362					;IS THE FLOATING ZERO.
  5363					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5364					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5365
  5366			045641		SN=SN+1
  5367			737777			XX=<XX+XX+1>&777777
  5368						IFE	<XX-1>,<XX=777776>
  5369	033132	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5370	033133	270 00 0 00 034041 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5371	033134	312 00 0 00 034041 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5372						STOP		^
  5373	033135	254 04 0 00 033136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5374	033136	324 00 0 00 033137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5375									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5376									;IN THE SUBTEST) TO LOOP ON ERROR^
  5377
  5378					;**********
  5379
  5380
  5381					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5382					;IS THE FLOATING ZERO.
  5383					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5384					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5385
  5386			045642		SN=SN+1
  5387			677777			XX=<XX+XX+1>&777777
  5388						IFE	<XX-1>,<XX=777776>
  5389	033137	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5390	033140	270 00 0 00 034042 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5391	033141	312 00 0 00 034042 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 88-13
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - O + FLT 0                                              SEQ 0141

  5392						STOP		^
  5393	033142	254 04 0 00 033143 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5394	033143	324 00 0 00 033144 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5395									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5396									;IN THE SUBTEST) TO LOOP ON ERROR^
  5397
  5398					;**********
  5399
  5400
  5401					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5402					;IS THE FLOATING ZERO.
  5403					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5404					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5405
  5406			045643		SN=SN+1
  5407			577777			XX=<XX+XX+1>&777777
  5408						IFE	<XX-1>,<XX=777776>
  5409	033144	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5410	033145	270 00 0 00 034043 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5411	033146	312 00 0 00 034043 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5412						STOP		^
  5413	033147	254 04 0 00 033150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5414	033150	324 00 0 00 033151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5415									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5416									;IN THE SUBTEST) TO LOOP ON ERROR^
  5417
  5418					;**********
  5419
  5420
  5421					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO ADDED TO A ZERO
  5422					;IS THE FLOATING ZERO.
  5423					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5424					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5425
  5426			045644		SN=SN+1
  5427			377777			XX=<XX+XX+1>&777777
  5428						IFE	<XX-1>,<XX=777776>
  5429	033151	400 00 0 00 000000 		SETZ			;PRELOAD AC WITH 0
  5430	033152	270 00 0 00 034044 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ZERO
  5431	033153	312 00 0 00 034044 		CAME	[XX,,-1]	;CHECK ADDER UPON FAILURE
  5432						STOP		^
  5433	033154	254 04 0 00 033155 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5434	033155	324 00 0 00 033156 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5436									;IN THE SUBTEST) TO LOOP ON ERROR^
  5437
  5438					;**********
  5439
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0142

  5440					SUBTTL	SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1
  5441
  5442					;**********
  5443
  5444			045700		SN=45700
  5445			000000			XX=0
  5446
  5447					B45700:	REPEAT	^D17,<
  5448					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5449					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5450					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5451					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5452					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5453					
  5454					SN=SN+1
  5455						XX=XX+XX
  5456						IFE	XX,<XX=1>
  5457						HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5458						ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5459						CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5460						STOP		
  5461					
  5462					;**********
  5463					>
  5464
  5465					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5466					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5467					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5468					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5469					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5470
  5471			045701		SN=SN+1
  5472			000000			XX=XX+XX
  5473			000001			IFE	XX,<XX=1>
  5474	033156	551 00 0 00 000001 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5475	033157	270 00 0 00 033735 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5476	033160	312 00 0 00 033736 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5477						STOP		^
  5478	033161	254 04 0 00 033162 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5479	033162	324 00 0 00 033163 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5480									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5481									;IN THE SUBTEST) TO LOOP ON ERROR^
  5482
  5483					;**********
  5484
  5485
  5486					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5487					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5488					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5489					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5490					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5491
  5492			045702		SN=SN+1
  5493			000002			XX=XX+XX
  5494						IFE	XX,<XX=1>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-1
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0143

  5495	033163	551 00 0 00 000002 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5496	033164	270 00 0 00 033736 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5497	033165	312 00 0 00 033737 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5498						STOP		^
  5499	033166	254 04 0 00 033167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5500	033167	324 00 0 00 033170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5501									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5502									;IN THE SUBTEST) TO LOOP ON ERROR^
  5503
  5504					;**********
  5505
  5506
  5507					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5508					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5509					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5510					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5511					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5512
  5513			045703		SN=SN+1
  5514			000004			XX=XX+XX
  5515						IFE	XX,<XX=1>
  5516	033170	551 00 0 00 000004 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5517	033171	270 00 0 00 033737 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5518	033172	312 00 0 00 033740 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5519						STOP		^
  5520	033173	254 04 0 00 033174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5521	033174	324 00 0 00 033175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5522									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5523									;IN THE SUBTEST) TO LOOP ON ERROR^
  5524
  5525					;**********
  5526
  5527
  5528					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5529					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5530					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5531					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5532					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5533
  5534			045704		SN=SN+1
  5535			000010			XX=XX+XX
  5536						IFE	XX,<XX=1>
  5537	033175	551 00 0 00 000010 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5538	033176	270 00 0 00 033740 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5539	033177	312 00 0 00 033741 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5540						STOP		^
  5541	033200	254 04 0 00 033201 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5542	033201	324 00 0 00 033202 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5543									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5544									;IN THE SUBTEST) TO LOOP ON ERROR^
  5545
  5546					;**********
  5547
  5548
  5549					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-2
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0144

  5550					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5551					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5552					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5553					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5554
  5555			045705		SN=SN+1
  5556			000020			XX=XX+XX
  5557						IFE	XX,<XX=1>
  5558	033202	551 00 0 00 000020 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5559	033203	270 00 0 00 033741 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5560	033204	312 00 0 00 033742 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5561						STOP		^
  5562	033205	254 04 0 00 033206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5563	033206	324 00 0 00 033207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5564									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5565									;IN THE SUBTEST) TO LOOP ON ERROR^
  5566
  5567					;**********
  5568
  5569
  5570					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5571					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5572					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5573					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5574					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5575
  5576			045706		SN=SN+1
  5577			000040			XX=XX+XX
  5578						IFE	XX,<XX=1>
  5579	033207	551 00 0 00 000040 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5580	033210	270 00 0 00 033742 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5581	033211	312 00 0 00 033743 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5582						STOP		^
  5583	033212	254 04 0 00 033213 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5584	033213	324 00 0 00 033214 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5585									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5586									;IN THE SUBTEST) TO LOOP ON ERROR^
  5587
  5588					;**********
  5589
  5590
  5591					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5592					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5593					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5594					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5595					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5596
  5597			045707		SN=SN+1
  5598			000100			XX=XX+XX
  5599						IFE	XX,<XX=1>
  5600	033214	551 00 0 00 000100 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5601	033215	270 00 0 00 033743 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5602	033216	312 00 0 00 033744 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5603						STOP		^
  5604	033217	254 04 0 00 033220 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-3
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0145

  5605	033220	324 00 0 00 033221 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5606									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5607									;IN THE SUBTEST) TO LOOP ON ERROR^
  5608
  5609					;**********
  5610
  5611
  5612					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5613					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5614					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5615					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5616					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5617
  5618			045710		SN=SN+1
  5619			000200			XX=XX+XX
  5620						IFE	XX,<XX=1>
  5621	033221	551 00 0 00 000200 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5622	033222	270 00 0 00 033744 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5623	033223	312 00 0 00 033745 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5624						STOP		^
  5625	033224	254 04 0 00 033225 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5626	033225	324 00 0 00 033226 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5627									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5628									;IN THE SUBTEST) TO LOOP ON ERROR^
  5629
  5630					;**********
  5631
  5632
  5633					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5634					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5635					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5636					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5637					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5638
  5639			045711		SN=SN+1
  5640			000400			XX=XX+XX
  5641						IFE	XX,<XX=1>
  5642	033226	551 00 0 00 000400 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5643	033227	270 00 0 00 033745 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5644	033230	312 00 0 00 033746 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5645						STOP		^
  5646	033231	254 04 0 00 033232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5647	033232	324 00 0 00 033233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5648									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5649									;IN THE SUBTEST) TO LOOP ON ERROR^
  5650
  5651					;**********
  5652
  5653
  5654					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5655					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5656					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5657					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5658					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5659
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-4
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0146

  5660			045712		SN=SN+1
  5661			001000			XX=XX+XX
  5662						IFE	XX,<XX=1>
  5663	033233	551 00 0 00 001000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5664	033234	270 00 0 00 033746 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5665	033235	312 00 0 00 033747 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5666						STOP		^
  5667	033236	254 04 0 00 033237 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5668	033237	324 00 0 00 033240 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5669									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5670									;IN THE SUBTEST) TO LOOP ON ERROR^
  5671
  5672					;**********
  5673
  5674
  5675					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5676					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5677					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5678					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5679					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5680
  5681			045713		SN=SN+1
  5682			002000			XX=XX+XX
  5683						IFE	XX,<XX=1>
  5684	033240	551 00 0 00 002000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5685	033241	270 00 0 00 033747 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5686	033242	312 00 0 00 033750 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5687						STOP		^
  5688	033243	254 04 0 00 033244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5689	033244	324 00 0 00 033245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5690									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5691									;IN THE SUBTEST) TO LOOP ON ERROR^
  5692
  5693					;**********
  5694
  5695
  5696					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5697					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5698					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5699					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5700					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5701
  5702			045714		SN=SN+1
  5703			004000			XX=XX+XX
  5704						IFE	XX,<XX=1>
  5705	033245	551 00 0 00 004000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5706	033246	270 00 0 00 033750 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5707	033247	312 00 0 00 033751 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5708						STOP		^
  5709	033250	254 04 0 00 033251 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5710	033251	324 00 0 00 033252 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5711									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5712									;IN THE SUBTEST) TO LOOP ON ERROR^
  5713
  5714					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-5
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0147

  5715
  5716
  5717					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5718					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5719					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5720					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5721					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5722
  5723			045715		SN=SN+1
  5724			010000			XX=XX+XX
  5725						IFE	XX,<XX=1>
  5726	033252	551 00 0 00 010000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5727	033253	270 00 0 00 033751 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5728	033254	312 00 0 00 033752 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5729						STOP		^
  5730	033255	254 04 0 00 033256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5731	033256	324 00 0 00 033257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5732									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5733									;IN THE SUBTEST) TO LOOP ON ERROR^
  5734
  5735					;**********
  5736
  5737
  5738					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5739					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5740					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5741					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5742					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5743
  5744			045716		SN=SN+1
  5745			020000			XX=XX+XX
  5746						IFE	XX,<XX=1>
  5747	033257	551 00 0 00 020000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5748	033260	270 00 0 00 033752 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5749	033261	312 00 0 00 033753 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5750						STOP		^
  5751	033262	254 04 0 00 033263 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5752	033263	324 00 0 00 033264 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5753									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5754									;IN THE SUBTEST) TO LOOP ON ERROR^
  5755
  5756					;**********
  5757
  5758
  5759					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5760					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5761					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5762					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5763					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5764
  5765			045717		SN=SN+1
  5766			040000			XX=XX+XX
  5767						IFE	XX,<XX=1>
  5768	033264	551 00 0 00 040000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5769	033265	270 00 0 00 033753 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-6
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0148

  5770	033266	312 00 0 00 033754 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5771						STOP		^
  5772	033267	254 04 0 00 033270 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5773	033270	324 00 0 00 033271 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5774									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5775									;IN THE SUBTEST) TO LOOP ON ERROR^
  5776
  5777					;**********
  5778
  5779
  5780					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5781					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5782					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5783					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5784					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5785
  5786			045720		SN=SN+1
  5787			100000			XX=XX+XX
  5788						IFE	XX,<XX=1>
  5789	033271	551 00 0 00 100000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5790	033272	270 00 0 00 033754 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5791	033273	312 00 0 00 033755 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5792						STOP		^
  5793	033274	254 04 0 00 033275 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5794	033275	324 00 0 00 033276 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5795									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5796									;IN THE SUBTEST) TO LOOP ON ERROR^
  5797
  5798					;**********
  5799
  5800
  5801					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5802					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5803					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5804					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5805					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5806
  5807			045721		SN=SN+1
  5808			200000			XX=XX+XX
  5809						IFE	XX,<XX=1>
  5810	033276	551 00 0 00 200000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5811	033277	270 00 0 00 033755 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5812	033300	312 00 0 00 033756 		CAME	[XX+XX]		;CHECK ADDER UPON FAILURE
  5813						STOP		^
  5814	033301	254 04 0 00 033302 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5815	033302	324 00 0 00 033303 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5816									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5817									;IN THE SUBTEST) TO LOOP ON ERROR^
  5818
  5819					;**********
  5820
  5821					PAGE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-7
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0149

  5822					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5823					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5824					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5825					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5826					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5827			045722		SN=SN+1
  5828			400000			XX=XX+XX
  5829	033303	551 00 0 00 400000 		HRRZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5830	033304	270 00 0 00 033756 		ADD	[XX]		;ADD A FLOATING ONE TO ITSELF	
  5831	033305	312 00 0 00 033757 		CAME	[1,,0]		;CHECK ADDRESS UPON FAILURE
  5832						STOP		^
  5833	033306	254 04 0 00 033307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5834	033307	324 00 0 00 033310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5835									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5836									;IN THE SUBTEST) TO LOOP ON ERROR^
  5837
  5838					;**********
  5839
  5840			000000			XX=0
  5841
  5842						REPEAT	^D17,<
  5843					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5844					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5845					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5846					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5847					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5848					
  5849					SN=SN+1
  5850						XX=XX+XX
  5851						IFE	XX,<XX=1>
  5852						HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5853						ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5854						CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5855						STOP		
  5856					
  5857					;**********
  5858					>
  5859
  5860					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5861					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5862					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5863					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5864					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5865
  5866			045723		SN=SN+1
  5867			000000			XX=XX+XX
  5868			000001			IFE	XX,<XX=1>
  5869	033310	515 00 0 00 000001 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5870	033311	270 00 0 00 033757 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5871	033312	312 00 0 00 033760 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5872						STOP		^
  5873	033313	254 04 0 00 033314 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5874	033314	324 00 0 00 033315 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5875									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5876									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-8
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0150

  5877
  5878					;**********
  5879
  5880
  5881					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5882					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5883					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5884					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5885					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5886
  5887			045724		SN=SN+1
  5888			000002			XX=XX+XX
  5889						IFE	XX,<XX=1>
  5890	033315	515 00 0 00 000002 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5891	033316	270 00 0 00 033760 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5892	033317	312 00 0 00 033761 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5893						STOP		^
  5894	033320	254 04 0 00 033321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5895	033321	324 00 0 00 033322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5896									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5897									;IN THE SUBTEST) TO LOOP ON ERROR^
  5898
  5899					;**********
  5900
  5901
  5902					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5903					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5904					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5905					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5906					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5907
  5908			045725		SN=SN+1
  5909			000004			XX=XX+XX
  5910						IFE	XX,<XX=1>
  5911	033322	515 00 0 00 000004 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5912	033323	270 00 0 00 033761 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5913	033324	312 00 0 00 033762 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5914						STOP		^
  5915	033325	254 04 0 00 033326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5916	033326	324 00 0 00 033327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5917									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5918									;IN THE SUBTEST) TO LOOP ON ERROR^
  5919
  5920					;**********
  5921
  5922
  5923					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5924					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5925					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5926					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5927					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5928
  5929			045726		SN=SN+1
  5930			000010			XX=XX+XX
  5931						IFE	XX,<XX=1>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-9
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0151

  5932	033327	515 00 0 00 000010 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5933	033330	270 00 0 00 033762 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5934	033331	312 00 0 00 033763 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5935						STOP		^
  5936	033332	254 04 0 00 033333 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5937	033333	324 00 0 00 033334 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5938									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5939									;IN THE SUBTEST) TO LOOP ON ERROR^
  5940
  5941					;**********
  5942
  5943
  5944					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5945					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5946					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5947					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5948					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5949
  5950			045727		SN=SN+1
  5951			000020			XX=XX+XX
  5952						IFE	XX,<XX=1>
  5953	033334	515 00 0 00 000020 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5954	033335	270 00 0 00 033763 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5955	033336	312 00 0 00 033764 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5956						STOP		^
  5957	033337	254 04 0 00 033340 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5958	033340	324 00 0 00 033341 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5959									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5960									;IN THE SUBTEST) TO LOOP ON ERROR^
  5961
  5962					;**********
  5963
  5964
  5965					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  5966					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5967					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5968					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5969					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5970
  5971			045730		SN=SN+1
  5972			000040			XX=XX+XX
  5973						IFE	XX,<XX=1>
  5974	033341	515 00 0 00 000040 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5975	033342	270 00 0 00 033764 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5976	033343	312 00 0 00 033765 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5977						STOP		^
  5978	033344	254 04 0 00 033345 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5979	033345	324 00 0 00 033346 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5980									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5981									;IN THE SUBTEST) TO LOOP ON ERROR^
  5982
  5983					;**********
  5984
  5985
  5986					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-10
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0152

  5987					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  5988					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  5989					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  5990					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  5991
  5992			045731		SN=SN+1
  5993			000100			XX=XX+XX
  5994						IFE	XX,<XX=1>
  5995	033346	515 00 0 00 000100 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  5996	033347	270 00 0 00 033765 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  5997	033350	312 00 0 00 033766 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  5998						STOP		^
  5999	033351	254 04 0 00 033352 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6000	033352	324 00 0 00 033353 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6002									;IN THE SUBTEST) TO LOOP ON ERROR^
  6003
  6004					;**********
  6005
  6006
  6007					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6008					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6009					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6010					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6011					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6012
  6013			045732		SN=SN+1
  6014			000200			XX=XX+XX
  6015						IFE	XX,<XX=1>
  6016	033353	515 00 0 00 000200 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6017	033354	270 00 0 00 033766 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6018	033355	312 00 0 00 033767 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6019						STOP		^
  6020	033356	254 04 0 00 033357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6021	033357	324 00 0 00 033360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6022									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6023									;IN THE SUBTEST) TO LOOP ON ERROR^
  6024
  6025					;**********
  6026
  6027
  6028					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6029					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6030					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6031					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6032					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6033
  6034			045733		SN=SN+1
  6035			000400			XX=XX+XX
  6036						IFE	XX,<XX=1>
  6037	033360	515 00 0 00 000400 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6038	033361	270 00 0 00 033767 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6039	033362	312 00 0 00 033770 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6040						STOP		^
  6041	033363	254 04 0 00 033364 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-11
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0153

  6042	033364	324 00 0 00 033365 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6043									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6044									;IN THE SUBTEST) TO LOOP ON ERROR^
  6045
  6046					;**********
  6047
  6048
  6049					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6050					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6051					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6052					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6053					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6054
  6055			045734		SN=SN+1
  6056			001000			XX=XX+XX
  6057						IFE	XX,<XX=1>
  6058	033365	515 00 0 00 001000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6059	033366	270 00 0 00 033770 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6060	033367	312 00 0 00 033771 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6061						STOP		^
  6062	033370	254 04 0 00 033371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6063	033371	324 00 0 00 033372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6064									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6065									;IN THE SUBTEST) TO LOOP ON ERROR^
  6066
  6067					;**********
  6068
  6069
  6070					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6071					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6072					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6073					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6074					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6075
  6076			045735		SN=SN+1
  6077			002000			XX=XX+XX
  6078						IFE	XX,<XX=1>
  6079	033372	515 00 0 00 002000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6080	033373	270 00 0 00 033771 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6081	033374	312 00 0 00 033772 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6082						STOP		^
  6083	033375	254 04 0 00 033376 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6084	033376	324 00 0 00 033377 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6085									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6086									;IN THE SUBTEST) TO LOOP ON ERROR^
  6087
  6088					;**********
  6089
  6090
  6091					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6092					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6093					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6094					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6095					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6096
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-12
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0154

  6097			045736		SN=SN+1
  6098			004000			XX=XX+XX
  6099						IFE	XX,<XX=1>
  6100	033377	515 00 0 00 004000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6101	033400	270 00 0 00 033772 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6102	033401	312 00 0 00 033773 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6103						STOP		^
  6104	033402	254 04 0 00 033403 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6105	033403	324 00 0 00 033404 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6106									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6107									;IN THE SUBTEST) TO LOOP ON ERROR^
  6108
  6109					;**********
  6110
  6111
  6112					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6113					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6114					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6115					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6116					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6117
  6118			045737		SN=SN+1
  6119			010000			XX=XX+XX
  6120						IFE	XX,<XX=1>
  6121	033404	515 00 0 00 010000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6122	033405	270 00 0 00 033773 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6123	033406	312 00 0 00 033774 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6124						STOP		^
  6125	033407	254 04 0 00 033410 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6126	033410	324 00 0 00 033411 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6127									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6128									;IN THE SUBTEST) TO LOOP ON ERROR^
  6129
  6130					;**********
  6131
  6132
  6133					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6134					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6135					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6136					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6137					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6138
  6139			045740		SN=SN+1
  6140			020000			XX=XX+XX
  6141						IFE	XX,<XX=1>
  6142	033411	515 00 0 00 020000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6143	033412	270 00 0 00 033774 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6144	033413	312 00 0 00 033775 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6145						STOP		^
  6146	033414	254 04 0 00 033415 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6147	033415	324 00 0 00 033416 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6148									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6149									;IN THE SUBTEST) TO LOOP ON ERROR^
  6150
  6151					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-13
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0155

  6152
  6153
  6154					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6155					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6156					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6157					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6158					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6159
  6160			045741		SN=SN+1
  6161			040000			XX=XX+XX
  6162						IFE	XX,<XX=1>
  6163	033416	515 00 0 00 040000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6164	033417	270 00 0 00 033775 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6165	033420	312 00 0 00 033776 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6166						STOP		^
  6167	033421	254 04 0 00 033422 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6168	033422	324 00 0 00 033423 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6169									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6170									;IN THE SUBTEST) TO LOOP ON ERROR^
  6171
  6172					;**********
  6173
  6174
  6175					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6176					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6177					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6178					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6179					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6180
  6181			045742		SN=SN+1
  6182			100000			XX=XX+XX
  6183						IFE	XX,<XX=1>
  6184	033423	515 00 0 00 100000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6185	033424	270 00 0 00 033776 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6186	033425	312 00 0 00 033777 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6187						STOP		^
  6188	033426	254 04 0 00 033427 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6189	033427	324 00 0 00 033430 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6190									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6191									;IN THE SUBTEST) TO LOOP ON ERROR^
  6192
  6193					;**********
  6194
  6195
  6196					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6197					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6198					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6199					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6200					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6201
  6202			045743		SN=SN+1
  6203			200000			XX=XX+XX
  6204						IFE	XX,<XX=1>
  6205	033430	515 00 0 00 200000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6206	033431	270 00 0 00 033777 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 89-14
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 1 + FLT 1                                          SEQ 0156

  6207	033432	312 00 0 00 034000 		CAME	[XX+XX,,0]	;CHECK ADDER UPON FAILURE
  6208						STOP		^
  6209	033433	254 04 0 00 033434 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6210	033434	324 00 0 00 033435 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6211									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6212									;IN THE SUBTEST) TO LOOP ON ERROR^
  6213
  6214					;**********
  6215
  6216					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ONE
  6217					;ADDED TO A FLOATING ONE IS A FLOATING ONE
  6218					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ONE.
  6219					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ONE THRU ALL 36 BITS OF THE ADDER.
  6220					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6221
  6222			045744		SN=SN+1
  6223			400000			XX=XX+XX
  6224						IFE	XX,<XX=1>
  6225	033435	515 00 0 00 400000 		HRLZI	XX		;PRELOAD AC WITH A FLOATING ONE
  6226	033436	270 00 0 00 034000 		ADD	[XX,,0]		;ADD A FLOATING ONE TO ITSELF	
  6227	033437	312 00 0 00 033732 		CAME	[0,,0]		;CHECK ADDER UPON FAILURE
  6228						STOP		^
  6229	033440	254 04 0 00 033441 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6230	033441	324 00 0 00 033442 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6231									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6232									;IN THE SUBTEST) TO LOOP ON ERROR^
  6233
  6234					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0157

  6235					SUBTTL	SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT 
  6236
  6237					;**********
  6238
  6239			046000		SN=46000
  6240			000000			XX=0
  6241
  6242					B46000:	REPEAT	^D17,<
  6243					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6244					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6245					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6246					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6247					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6248					
  6249					SN=SN+1
  6250						XX=<XX+XX+1>&777777
  6251						IFE	<XX-1>,<XX=777776>
  6252						HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6253						ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6254						CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6255						STOP		
  6256					
  6257					;**********
  6258					>
  6259
  6260					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6261					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6262					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6263					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6264					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6265
  6266			046001		SN=SN+1
  6267			000001			XX=<XX+XX+1>&777777
  6268			777776			IFE	<XX-1>,<XX=777776>
  6269	033442	561 00 0 00 777776 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6270	033443	270 00 0 00 034001 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6271	033444	312 00 0 00 034045 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6272						STOP		^
  6273	033445	254 04 0 00 033446 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6274	033446	324 00 0 00 033447 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6275									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6276									;IN THE SUBTEST) TO LOOP ON ERROR^
  6277
  6278					;**********
  6279
  6280
  6281					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6282					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6283					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6284					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6285					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6286
  6287			046002		SN=SN+1
  6288			777775			XX=<XX+XX+1>&777777
  6289						IFE	<XX-1>,<XX=777776>
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-1
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0158

  6290	033447	561 00 0 00 777775 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6291	033450	270 00 0 00 034002 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6292	033451	312 00 0 00 034046 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6293						STOP		^
  6294	033452	254 04 0 00 033453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6295	033453	324 00 0 00 033454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6296									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6297									;IN THE SUBTEST) TO LOOP ON ERROR^
  6298
  6299					;**********
  6300
  6301
  6302					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6303					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6304					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6305					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6306					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6307
  6308			046003		SN=SN+1
  6309			777773			XX=<XX+XX+1>&777777
  6310						IFE	<XX-1>,<XX=777776>
  6311	033454	561 00 0 00 777773 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6312	033455	270 00 0 00 034003 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6313	033456	312 00 0 00 034047 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6314						STOP		^
  6315	033457	254 04 0 00 033460 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6316	033460	324 00 0 00 033461 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6318									;IN THE SUBTEST) TO LOOP ON ERROR^
  6319
  6320					;**********
  6321
  6322
  6323					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6324					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6325					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6326					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6327					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6328
  6329			046004		SN=SN+1
  6330			777767			XX=<XX+XX+1>&777777
  6331						IFE	<XX-1>,<XX=777776>
  6332	033461	561 00 0 00 777767 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6333	033462	270 00 0 00 034004 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6334	033463	312 00 0 00 034050 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6335						STOP		^
  6336	033464	254 04 0 00 033465 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6337	033465	324 00 0 00 033466 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6338									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6339									;IN THE SUBTEST) TO LOOP ON ERROR^
  6340
  6341					;**********
  6342
  6343
  6344					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-2
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0159

  6345					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6346					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6347					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6348					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6349
  6350			046005		SN=SN+1
  6351			777757			XX=<XX+XX+1>&777777
  6352						IFE	<XX-1>,<XX=777776>
  6353	033466	561 00 0 00 777757 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6354	033467	270 00 0 00 034005 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6355	033470	312 00 0 00 034051 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6356						STOP		^
  6357	033471	254 04 0 00 033472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6358	033472	324 00 0 00 033473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6359									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6360									;IN THE SUBTEST) TO LOOP ON ERROR^
  6361
  6362					;**********
  6363
  6364
  6365					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6366					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6367					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6368					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6369					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6370
  6371			046006		SN=SN+1
  6372			777737			XX=<XX+XX+1>&777777
  6373						IFE	<XX-1>,<XX=777776>
  6374	033473	561 00 0 00 777737 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6375	033474	270 00 0 00 034006 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6376	033475	312 00 0 00 034052 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6377						STOP		^
  6378	033476	254 04 0 00 033477 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6379	033477	324 00 0 00 033500 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6380									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6381									;IN THE SUBTEST) TO LOOP ON ERROR^
  6382
  6383					;**********
  6384
  6385
  6386					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6387					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6388					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6389					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6390					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6391
  6392			046007		SN=SN+1
  6393			777677			XX=<XX+XX+1>&777777
  6394						IFE	<XX-1>,<XX=777776>
  6395	033500	561 00 0 00 777677 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6396	033501	270 00 0 00 034007 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6397	033502	312 00 0 00 034053 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6398						STOP		^
  6399	033503	254 04 0 00 033504 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-3
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0160

  6400	033504	324 00 0 00 033505 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6401									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6402									;IN THE SUBTEST) TO LOOP ON ERROR^
  6403
  6404					;**********
  6405
  6406
  6407					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6408					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6409					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6410					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6411					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6412
  6413			046010		SN=SN+1
  6414			777577			XX=<XX+XX+1>&777777
  6415						IFE	<XX-1>,<XX=777776>
  6416	033505	561 00 0 00 777577 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6417	033506	270 00 0 00 034010 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6418	033507	312 00 0 00 034054 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6419						STOP		^
  6420	033510	254 04 0 00 033511 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6421	033511	324 00 0 00 033512 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6422									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6423									;IN THE SUBTEST) TO LOOP ON ERROR^
  6424
  6425					;**********
  6426
  6427
  6428					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6429					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6430					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6431					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6432					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6433
  6434			046011		SN=SN+1
  6435			777377			XX=<XX+XX+1>&777777
  6436						IFE	<XX-1>,<XX=777776>
  6437	033512	561 00 0 00 777377 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6438	033513	270 00 0 00 034011 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6439	033514	312 00 0 00 034055 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6440						STOP		^
  6441	033515	254 04 0 00 033516 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6442	033516	324 00 0 00 033517 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6443									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6444									;IN THE SUBTEST) TO LOOP ON ERROR^
  6445
  6446					;**********
  6447
  6448
  6449					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6450					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6451					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6452					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6453					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6454
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-4
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0161

  6455			046012		SN=SN+1
  6456			776777			XX=<XX+XX+1>&777777
  6457						IFE	<XX-1>,<XX=777776>
  6458	033517	561 00 0 00 776777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6459	033520	270 00 0 00 034012 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6460	033521	312 00 0 00 034056 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6461						STOP		^
  6462	033522	254 04 0 00 033523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6463	033523	324 00 0 00 033524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6464									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6465									;IN THE SUBTEST) TO LOOP ON ERROR^
  6466
  6467					;**********
  6468
  6469
  6470					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6471					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6472					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6473					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6474					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6475
  6476			046013		SN=SN+1
  6477			775777			XX=<XX+XX+1>&777777
  6478						IFE	<XX-1>,<XX=777776>
  6479	033524	561 00 0 00 775777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6480	033525	270 00 0 00 034013 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6481	033526	312 00 0 00 034057 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6482						STOP		^
  6483	033527	254 04 0 00 033530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6484	033530	324 00 0 00 033531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6485									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6486									;IN THE SUBTEST) TO LOOP ON ERROR^
  6487
  6488					;**********
  6489
  6490
  6491					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6492					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6493					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6494					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6495					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6496
  6497			046014		SN=SN+1
  6498			773777			XX=<XX+XX+1>&777777
  6499						IFE	<XX-1>,<XX=777776>
  6500	033531	561 00 0 00 773777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6501	033532	270 00 0 00 034014 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6502	033533	312 00 0 00 034060 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6503						STOP		^
  6504	033534	254 04 0 00 033535 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6505	033535	324 00 0 00 033536 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6506									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6507									;IN THE SUBTEST) TO LOOP ON ERROR^
  6508
  6509					;**********
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-5
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0162

  6510
  6511
  6512					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6513					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6514					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6515					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6516					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6517
  6518			046015		SN=SN+1
  6519			767777			XX=<XX+XX+1>&777777
  6520						IFE	<XX-1>,<XX=777776>
  6521	033536	561 00 0 00 767777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6522	033537	270 00 0 00 034015 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6523	033540	312 00 0 00 034061 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6524						STOP		^
  6525	033541	254 04 0 00 033542 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6526	033542	324 00 0 00 033543 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6527									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6528									;IN THE SUBTEST) TO LOOP ON ERROR^
  6529
  6530					;**********
  6531
  6532
  6533					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6534					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6535					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6536					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6537					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6538
  6539			046016		SN=SN+1
  6540			757777			XX=<XX+XX+1>&777777
  6541						IFE	<XX-1>,<XX=777776>
  6542	033543	561 00 0 00 757777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6543	033544	270 00 0 00 034016 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6544	033545	312 00 0 00 034062 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6545						STOP		^
  6546	033546	254 04 0 00 033547 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6547	033547	324 00 0 00 033550 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6548									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6549									;IN THE SUBTEST) TO LOOP ON ERROR^
  6550
  6551					;**********
  6552
  6553
  6554					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6555					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6556					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6557					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6558					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6559
  6560			046017		SN=SN+1
  6561			737777			XX=<XX+XX+1>&777777
  6562						IFE	<XX-1>,<XX=777776>
  6563	033550	561 00 0 00 737777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6564	033551	270 00 0 00 034017 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-6
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0163

  6565	033552	312 00 0 00 034063 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6566						STOP		^
  6567	033553	254 04 0 00 033554 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6568	033554	324 00 0 00 033555 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6569									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6570									;IN THE SUBTEST) TO LOOP ON ERROR^
  6571
  6572					;**********
  6573
  6574
  6575					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6576					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6577					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6578					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6579					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6580
  6581			046020		SN=SN+1
  6582			677777			XX=<XX+XX+1>&777777
  6583						IFE	<XX-1>,<XX=777776>
  6584	033555	561 00 0 00 677777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6585	033556	270 00 0 00 034020 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6586	033557	312 00 0 00 034064 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6587						STOP		^
  6588	033560	254 04 0 00 033561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6589	033561	324 00 0 00 033562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6590									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6591									;IN THE SUBTEST) TO LOOP ON ERROR^
  6592
  6593					;**********
  6594
  6595
  6596					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6597					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6598					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6599					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6600					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6601
  6602			046021		SN=SN+1
  6603			577777			XX=<XX+XX+1>&777777
  6604						IFE	<XX-1>,<XX=777776>
  6605	033562	561 00 0 00 577777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6606	033563	270 00 0 00 034021 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6607	033564	312 00 0 00 034065 		CAME	[-1,,<XX+XX>&777777]	;CHECK ADDER UPON FAILURE
  6608						STOP		^
  6609	033565	254 04 0 00 033566 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6610	033566	324 00 0 00 033567 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6611									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6612									;IN THE SUBTEST) TO LOOP ON ERROR^
  6613
  6614					;**********
  6615
  6616					PAGE
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-7
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0164

  6617					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6618					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6619					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6620					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6621					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6622
  6623			046022		SN=SN+1
  6624			377777			XX=<XX+XX+1>&777777
  6625	033567	561 00 0 00 377777 		HRROI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6626	033570	270 00 0 00 034022 		ADD	[-1,,XX]	;ADD A FLOATING ZERO TO ITSELF
  6627	033571	312 00 0 00 034066 		CAME	[-2,,-2]	;CHECK ADDER UPON FAILURE
  6628						STOP		^
  6629	033572	254 04 0 00 033573 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6630	033573	324 00 0 00 033574 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6631									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6632									;IN THE SUBTEST) TO LOOP ON ERROR^
  6633
  6634					;**********
  6635
  6636			000000			XX=0
  6637
  6638						REPEAT	^D18,<
  6639					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6640					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6641					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6642					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6643					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6644					
  6645					SN=SN+1
  6646						XX=<XX+XX+1>&777777
  6647						IFE	<XX-1>,<XX=777776>
  6648						HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6649						ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6650						CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6651						STOP		
  6652					
  6653					;**********
  6654					>
  6655
  6656					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6657					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6658					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6659					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6660					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6661
  6662			046023		SN=SN+1
  6663			000001			XX=<XX+XX+1>&777777
  6664			777776			IFE	<XX-1>,<XX=777776>
  6665	033574	525 00 0 00 777776 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6666	033575	270 00 0 00 034023 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6667	033576	312 00 0 00 034067 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6668						STOP		^
  6669	033577	254 04 0 00 033600 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6670	033600	324 00 0 00 033601 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6671									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-8
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0165

  6672									;IN THE SUBTEST) TO LOOP ON ERROR^
  6673
  6674					;**********
  6675
  6676
  6677					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6678					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6679					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6680					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6681					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6682
  6683			046024		SN=SN+1
  6684			777775			XX=<XX+XX+1>&777777
  6685						IFE	<XX-1>,<XX=777776>
  6686	033601	525 00 0 00 777775 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6687	033602	270 00 0 00 034024 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6688	033603	312 00 0 00 034070 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6689						STOP		^
  6690	033604	254 04 0 00 033605 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6691	033605	324 00 0 00 033606 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6692									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6693									;IN THE SUBTEST) TO LOOP ON ERROR^
  6694
  6695					;**********
  6696
  6697
  6698					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6699					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6700					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6701					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6702					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6703
  6704			046025		SN=SN+1
  6705			777773			XX=<XX+XX+1>&777777
  6706						IFE	<XX-1>,<XX=777776>
  6707	033606	525 00 0 00 777773 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6708	033607	270 00 0 00 034025 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6709	033610	312 00 0 00 034071 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6710						STOP		^
  6711	033611	254 04 0 00 033612 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6712	033612	324 00 0 00 033613 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6713									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6714									;IN THE SUBTEST) TO LOOP ON ERROR^
  6715
  6716					;**********
  6717
  6718
  6719					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6720					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6721					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6722					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6723					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6724
  6725			046026		SN=SN+1
  6726			777767			XX=<XX+XX+1>&777777
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-9
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0166

  6727						IFE	<XX-1>,<XX=777776>
  6728	033613	525 00 0 00 777767 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6729	033614	270 00 0 00 034026 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6730	033615	312 00 0 00 034072 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6731						STOP		^
  6732	033616	254 04 0 00 033617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6733	033617	324 00 0 00 033620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6734									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6735									;IN THE SUBTEST) TO LOOP ON ERROR^
  6736
  6737					;**********
  6738
  6739
  6740					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6741					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6742					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6743					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6744					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6745
  6746			046027		SN=SN+1
  6747			777757			XX=<XX+XX+1>&777777
  6748						IFE	<XX-1>,<XX=777776>
  6749	033620	525 00 0 00 777757 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6750	033621	270 00 0 00 034027 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6751	033622	312 00 0 00 034073 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6752						STOP		^
  6753	033623	254 04 0 00 033624 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6754	033624	324 00 0 00 033625 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6755									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6756									;IN THE SUBTEST) TO LOOP ON ERROR^
  6757
  6758					;**********
  6759
  6760
  6761					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6762					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6763					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6764					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6765					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6766
  6767			046030		SN=SN+1
  6768			777737			XX=<XX+XX+1>&777777
  6769						IFE	<XX-1>,<XX=777776>
  6770	033625	525 00 0 00 777737 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6771	033626	270 00 0 00 034030 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6772	033627	312 00 0 00 034074 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6773						STOP		^
  6774	033630	254 04 0 00 033631 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6775	033631	324 00 0 00 033632 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6777									;IN THE SUBTEST) TO LOOP ON ERROR^
  6778
  6779					;**********
  6780
  6781
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-10
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0167

  6782					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6783					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6784					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6785					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6786					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6787
  6788			046031		SN=SN+1
  6789			777677			XX=<XX+XX+1>&777777
  6790						IFE	<XX-1>,<XX=777776>
  6791	033632	525 00 0 00 777677 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6792	033633	270 00 0 00 034031 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6793	033634	312 00 0 00 034075 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6794						STOP		^
  6795	033635	254 04 0 00 033636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6796	033636	324 00 0 00 033637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6797									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6798									;IN THE SUBTEST) TO LOOP ON ERROR^
  6799
  6800					;**********
  6801
  6802
  6803					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6804					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6805					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6806					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6807					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6808
  6809			046032		SN=SN+1
  6810			777577			XX=<XX+XX+1>&777777
  6811						IFE	<XX-1>,<XX=777776>
  6812	033637	525 00 0 00 777577 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6813	033640	270 00 0 00 034032 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6814	033641	312 00 0 00 034076 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6815						STOP		^
  6816	033642	254 04 0 00 033643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6817	033643	324 00 0 00 033644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6818									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6819									;IN THE SUBTEST) TO LOOP ON ERROR^
  6820
  6821					;**********
  6822
  6823
  6824					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6825					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6826					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6827					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6828					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6829
  6830			046033		SN=SN+1
  6831			777377			XX=<XX+XX+1>&777777
  6832						IFE	<XX-1>,<XX=777776>
  6833	033644	525 00 0 00 777377 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6834	033645	270 00 0 00 034033 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6835	033646	312 00 0 00 034077 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6836						STOP		^
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-11
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0168

  6837	033647	254 04 0 00 033650 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6838	033650	324 00 0 00 033651 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6839									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6840									;IN THE SUBTEST) TO LOOP ON ERROR^
  6841
  6842					;**********
  6843
  6844
  6845					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6846					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6847					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6848					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6849					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6850
  6851			046034		SN=SN+1
  6852			776777			XX=<XX+XX+1>&777777
  6853						IFE	<XX-1>,<XX=777776>
  6854	033651	525 00 0 00 776777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6855	033652	270 00 0 00 034034 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6856	033653	312 00 0 00 034100 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6857						STOP		^
  6858	033654	254 04 0 00 033655 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6859	033655	324 00 0 00 033656 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6860									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6861									;IN THE SUBTEST) TO LOOP ON ERROR^
  6862
  6863					;**********
  6864
  6865
  6866					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6867					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6868					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6869					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6870					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6871
  6872			046035		SN=SN+1
  6873			775777			XX=<XX+XX+1>&777777
  6874						IFE	<XX-1>,<XX=777776>
  6875	033656	525 00 0 00 775777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6876	033657	270 00 0 00 034035 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6877	033660	312 00 0 00 034101 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6878						STOP		^
  6879	033661	254 04 0 00 033662 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6880	033662	324 00 0 00 033663 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6882									;IN THE SUBTEST) TO LOOP ON ERROR^
  6883
  6884					;**********
  6885
  6886
  6887					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6888					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6889					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6890					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6891					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-12
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0169

  6892
  6893			046036		SN=SN+1
  6894			773777			XX=<XX+XX+1>&777777
  6895						IFE	<XX-1>,<XX=777776>
  6896	033663	525 00 0 00 773777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6897	033664	270 00 0 00 034036 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6898	033665	312 00 0 00 034102 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6899						STOP		^
  6900	033666	254 04 0 00 033667 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6901	033667	324 00 0 00 033670 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6902									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6903									;IN THE SUBTEST) TO LOOP ON ERROR^
  6904
  6905					;**********
  6906
  6907
  6908					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6909					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6910					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6911					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6912					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6913
  6914			046037		SN=SN+1
  6915			767777			XX=<XX+XX+1>&777777
  6916						IFE	<XX-1>,<XX=777776>
  6917	033670	525 00 0 00 767777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6918	033671	270 00 0 00 034037 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6919	033672	312 00 0 00 034103 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6920						STOP		^
  6921	033673	254 04 0 00 033674 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6922	033674	324 00 0 00 033675 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6923									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6924									;IN THE SUBTEST) TO LOOP ON ERROR^
  6925
  6926					;**********
  6927
  6928
  6929					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6930					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6931					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6932					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6933					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6934
  6935			046040		SN=SN+1
  6936			757777			XX=<XX+XX+1>&777777
  6937						IFE	<XX-1>,<XX=777776>
  6938	033675	525 00 0 00 757777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6939	033676	270 00 0 00 034040 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6940	033677	312 00 0 00 034104 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6941						STOP		^
  6942	033700	254 04 0 00 033701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6943	033701	324 00 0 00 033702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6944									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6945									;IN THE SUBTEST) TO LOOP ON ERROR^
  6946
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-13
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0170

  6947					;**********
  6948
  6949
  6950					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6951					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6952					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6953					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6954					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6955
  6956			046041		SN=SN+1
  6957			737777			XX=<XX+XX+1>&777777
  6958						IFE	<XX-1>,<XX=777776>
  6959	033702	525 00 0 00 737777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6960	033703	270 00 0 00 034041 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6961	033704	312 00 0 00 034105 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6962						STOP		^
  6963	033705	254 04 0 00 033706 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6964	033706	324 00 0 00 033707 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6965									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6966									;IN THE SUBTEST) TO LOOP ON ERROR^
  6967
  6968					;**********
  6969
  6970
  6971					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6972					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6973					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6974					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6975					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6976
  6977			046042		SN=SN+1
  6978			677777			XX=<XX+XX+1>&777777
  6979						IFE	<XX-1>,<XX=777776>
  6980	033707	525 00 0 00 677777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  6981	033710	270 00 0 00 034042 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  6982	033711	312 00 0 00 034106 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  6983						STOP		^
  6984	033712	254 04 0 00 033713 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6985	033713	324 00 0 00 033714 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6986									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6987									;IN THE SUBTEST) TO LOOP ON ERROR^
  6988
  6989					;**********
  6990
  6991
  6992					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  6993					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  6994					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  6995					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  6996					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  6997
  6998			046043		SN=SN+1
  6999			577777			XX=<XX+XX+1>&777777
  7000						IFE	<XX-1>,<XX=777776>
  7001	033714	525 00 0 00 577777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 90-14
DSKAC1	MAC	28-Mar-78 12:49		SUPPLEMENTARY ADDER TESTS - FLT 0 + 0FLT                                           SEQ 0171

  7002	033715	270 00 0 00 034043 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  7003	033716	312 00 0 00 034107 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  7004						STOP		^
  7005	033717	254 04 0 00 033720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7006	033720	324 00 0 00 033721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7007									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7008									;IN THE SUBTEST) TO LOOP ON ERROR^
  7009
  7010					;**********
  7011
  7012
  7013					;THIS TEST VERIFIES THAT THE RESULT OF A FLOATING ZERO
  7014					;ADDED TO A FLOATING ZERO IS A FLOATING ZERO
  7015					;PLACED ONE BIT POSITION LEFT OF THE ORIGINAL FLOATING ZERO.
  7016					;THIS TEST IS REPEATED 36 TIMES TO FLOAT A ZERO THRU ALL 36 BITS OF THE ADDER.
  7017					;THIS TEST IS DESIGNED TO TEST THE ADDER AND RELATED DATA PATHS ONLY.
  7018
  7019			046044		SN=SN+1
  7020			377777			XX=<XX+XX+1>&777777
  7021						IFE	<XX-1>,<XX=777776>
  7022	033721	525 00 0 00 377777 		HRLOI	XX		;PRELOAD AC WITH A FLOATING ZERO
  7023	033722	270 00 0 00 034044 		ADD	[XX,,-1]	;ADD A FLOATING ZERO TO ITSELF
  7024	033723	312 00 0 00 034001 		CAME	[<XX+XX+1>&777777,,-2]	;CHECK ADDER UPON FAILURE
  7025						STOP		^
  7026	033724	254 04 0 00 033725 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7027	033725	324 00 0 00 033726 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7028									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7029									;IN THE SUBTEST) TO LOOP ON ERROR^
  7030
  7031					;**********
  7032
  7033	033726	402 00 0 00 034111 	ENDIT:	SETZM	TNUMB#
  7034	033727	254 00 0 00 030057 		JRST	BEGEND
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0172

  7035					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  7036
  7037					;PROGRAM LITERALS
  7038
  7039						XLIST
  7040					IFNDEF	$LPAPER,<LIST>
  7041	033730					LIT
  7042	033730	777777	777777
  7043	033731	777777	000000
  7044	033732	000000	000000
  7045	033733	000000	777777
  7046	033734	707070	707070
  7047	033735	000000	000001
  7048	033736	000000	000002
  7049	033737	000000	000004
  7050	033740	000000	000010
  7051	033741	000000	000020
  7052	033742	000000	000040
  7053	033743	000000	000100
  7054	033744	000000	000200
  7055	033745	000000	000400
  7056	033746	000000	001000
  7057	033747	000000	002000
  7058	033750	000000	004000
  7059	033751	000000	010000
  7060	033752	000000	020000
  7061	033753	000000	040000
  7062	033754	000000	100000
  7063	033755	000000	200000
  7064	033756	000000	400000
  7065	033757	000001	000000
  7066	033760	000002	000000
  7067	033761	000004	000000
  7068	033762	000010	000000
  7069	033763	000020	000000
  7070	033764	000040	000000
  7071	033765	000100	000000
  7072	033766	000200	000000
  7073	033767	000400	000000
  7074	033770	001000	000000
  7075	033771	002000	000000
  7076	033772	004000	000000
  7077	033773	010000	000000
  7078	033774	020000	000000
  7079	033775	040000	000000
  7080	033776	100000	000000
  7081	033777	200000	000000
  7082	034000	400000	000000
  7083	034001	777777	777776
  7084	034002	777777	777775
  7085	034003	777777	777773
  7086	034004	777777	777767
  7087	034005	777777	777757
  7088	034006	777777	777737
  7089	034007	777777	777677
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0173

  7090	034010	777777	777577
  7091	034011	777777	777377
  7092	034012	777777	776777
  7093	034013	777777	775777
  7094	034014	777777	773777
  7095	034015	777777	767777
  7096	034016	777777	757777
  7097	034017	777777	737777
  7098	034020	777777	677777
  7099	034021	777777	577777
  7100	034022	777777	377777
  7101	034023	777776	777777
  7102	034024	777775	777777
  7103	034025	777773	777777
  7104	034026	777767	777777
  7105	034027	777757	777777
  7106	034030	777737	777777
  7107	034031	777677	777777
  7108	034032	777577	777777
  7109	034033	777377	777777
  7110	034034	776777	777777
  7111	034035	775777	777777
  7112	034036	773777	777777
  7113	034037	767777	777777
  7114	034040	757777	777777
  7115	034041	737777	777777
  7116	034042	677777	777777
  7117	034043	577777	777777
  7118	034044	377777	777777
  7119	034045	777777	777774
  7120	034046	777777	777772
  7121	034047	777777	777766
  7122	034050	777777	777756
  7123	034051	777777	777736
  7124	034052	777777	777676
  7125	034053	777777	777576
  7126	034054	777777	777376
  7127	034055	777777	776776
  7128	034056	777777	775776
  7129	034057	777777	773776
  7130	034060	777777	767776
  7131	034061	777777	757776
  7132	034062	777777	737776
  7133	034063	777777	677776
  7134	034064	777777	577776
  7135	034065	777777	377776
  7136	034066	777776	777776
  7137	034067	777775	777776
  7138	034070	777773	777776
  7139	034071	777767	777776
  7140	034072	777757	777776
  7141	034073	777737	777776
  7142	034074	777677	777776
  7143	034075	777577	777776
  7144	034076	777377	777776
DSKAC DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (3) 0,1	MACRO %53(1020) 14:04 28-Mar-78 Page 1-2
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0174

  7145	034077	776777	777776
  7146	034100	775777	777776
  7147	034101	773777	777776
  7148	034102	767777	777776
  7149	034103	757777	777776
  7150	034104	737777	777776
  7151	034105	677777	777776
  7152	034106	577777	777776
  7153	034107	377777	777776
  7154						LIST
  7155	034110	000000	000000		ENDSLD:	0
  7156
  7157					IFDEF	DEBUG,<
  7158					PATCH:	BLOCK DEBUG		;PATCHING AREA
  7159					>
  7160
  7161					;PROGRAM VARIABLES
  7162	034111					VAR
  7163
  7164					IFDEF	PGMEND,<
  7165	034112	000000	000000		END:	0
  7166			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 034113
CPU TIME USED 00:19.023

22P CORE USED

ABORT	    92#
AC0	   687#                                                                                                            SEQ 0175
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
B12600	   816#
B12700	   839#
B13000	   856#
B13100	   874#
B13200	   890#
B13300	   916#
B13400	   937#
B13600	   955#
B14000	   971#
B14100	   994#
B14200	  1016#
B14400	  1040#
B14500	  1056#
B14600	  1074#
B14700	  1089#
B15000	  1113#
B15400	  1134#
B15500	  1151#
B15600	  1172#
B15700	  1188#
B16000	  1210#
B16100	  1225#
B16200	  1242#
B16300	  1268#
B16400	  1290#
B16500	  1312#
B16600	  1327#
B16700	  1351#
B17000	  1367#
B17300	  1385#
B17400	  1398#
B17700	  1412#
B20000	  1424#
B20400	  1439#
B20600	  1454#
B20700	  1469#
B21000	  1489#
B21100	  1510#
B21400	  1527#
B21500	  1561#
B21600	  1578#
B21700	  1596#
B22200	  1613#
B22300	  1631#
B22400	  1654#
B22500	  1672#
B22600	  1689#                                                                                                            SEQ 0176
B22700	  1708#
B23000	  1731#
B23200	  1752#
B23400	  1769#
B23600	  1785#
B23700	  1802#
B24000	  1817#
B24300	  1839#
B24400	  1861#
B24500	  1878#
B24600	  1894#
B24700	  1910#
B25000	  1931#
B25100	  1948#
B25200	  1964#
B25300	  1981#
B25400	  1997#
B25500	  2014#
B25600	  2030#
B25700	  2047#
B26000	  2062#
B26100	  2079#
B26200	  2094#
B26300	  2110#
B26500	  2131#
B26600	  2152#
B26700	  2167#
B27000	  2188#
B27100	  2208#
B27200	  2224#
B27300	  2239#
B27400	  2260#
B27500	  2275#
B27600	  2291#
B27700	  2306#
B30000	  2322#
B30100	  2337#
B30400	  2358#
B30500	  2373#
B30600	  2394#
B30700	  2415#
B31000	  2431#
B31100	  2446#
B31200	  2462#
B31300	  2477#
B31400	  2493#
B31500	  2508#
B31600	  2524#
B31700	  2539#
B32000	  2555#
B32100	  2570#
B32200	  2594#
B32300	  2609#                                                                                                            SEQ 0177
B32600	  2630#
B32700	  2645#
B33000	  2668#
B33100	  2689#
B33200	  2705#
B33300	  2721#
B33400	  2742#
B33500	  2763#
B33600	  2779#
B33700	  2795#
B34000	  2816#
B34100	  2832#
B34200	  2848#
B34300	  2863#
B34400	  2879#
B34500	  2894#
B34600	  2910#
B34700	  2925#
B35000	  2941#
B35500	  2964#
B35600	  2989#
B35700	  3006#
B36000	  3036#
B36100	  3052#
B36200	  3073#
B36300	  3093#
B36400	  3114#
B36500	  3134#
B36600	  3155#
B37100	  3175#
B37200	  3197#
B37300	  3218#
B37400	  3234#
B37500	  3249#
B37600	  3265#
B37700	  3280#
B40000	  3296#
B40100	  3311#
B40200	  3327#
B40300	  3343#
B40400	  3360#
B40700	  3376#
B41000	  3398#
B41100	  3420#
B41200	  3437#
B41500	  3453#
B41600	  3475#
B42000	  3498#
B42200	  3515#
B42300	  3531#
B42500	  3556#
B42700	  3571#
B43000	  3594#                                                                                                            SEQ 0178
B43100	  3616#
B43400	  3633#
B43500	  3648#
B43600	  3671#
B43700	  3691#
B44000	  3714#
B44100	  3730#
B44200	  3748#
B44300	  3765#
B44500	  3788#
B44600	  3808#
B44700	  3825#
B45000	  3840#
B45100	  3856#
B45200	  3871#
B45400	  3897#
B45500	  3925#
B45600	  4685#
B45700	  5447#
B46000	  6242#
BEGEND	   438#	  7034
BEGIN	   307	   308	   369#	   708	   771	  7166
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#
CCA	   356#
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  7157
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#                                                                                                            SEQ 0179
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  7165#
ENDFIX	   684#
ENDIT	  7033#
ENDSLD	  7155#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#                                                                                                            SEQ 0180
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#                                                                                                            SEQ 0181
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494                                                                                                     SEQ 0182
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#                                                                                                            SEQ 0183
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  7164
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#                                                                                                            SEQ 0184
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SN	  3922#	  3947	  3947#	  3967	  3967#	  3987	  3987#	  4007	  4007#	  4027	  4027#	  4047	  4047#	  4067
	  4067#	  4087	  4087#	  4107	  4107#	  4127	  4127#	  4147	  4147#	  4167	  4167#	  4187	  4187#	  4207
	  4207#	  4227	  4227#	  4247	  4247#	  4267	  4267#	  4287	  4287#	  4326	  4326#	  4346	  4346#	  4366
	  4366#	  4386	  4386#	  4406	  4406#	  4426	  4426#	  4446	  4446#	  4466	  4466#	  4486	  4486#	  4506
	  4506#	  4526	  4526#	  4546	  4546#	  4566	  4566#	  4586	  4586#	  4606	  4606#	  4626	  4626#	  4646
	  4646#	  4666	  4666#	  4684#	  4707	  4707#	  4727	  4727#	  4747	  4747#	  4767	  4767#	  4787	  4787#
	  4807	  4807#	  4827	  4827#	  4847	  4847#	  4867	  4867#	  4887	  4887#	  4907	  4907#	  4927	  4927#
	  4947	  4947#	  4967	  4967#	  4987	  4987#	  5007	  5007#	  5027	  5027#	  5047	  5047#	  5086	  5086#
	  5106	  5106#	  5126	  5126#	  5146	  5146#	  5166	  5166#	  5186	  5186#	  5206	  5206#	  5226	  5226#
	  5246	  5246#	  5266	  5266#	  5286	  5286#	  5306	  5306#	  5326	  5326#	  5346	  5346#	  5366	  5366#
	  5386	  5386#	  5406	  5406#	  5426	  5426#	  5444#	  5471	  5471#	  5492	  5492#	  5513	  5513#	  5534
	  5534#	  5555	  5555#	  5576	  5576#	  5597	  5597#	  5618	  5618#	  5639	  5639#	  5660	  5660#	  5681
	  5681#	  5702	  5702#	  5723	  5723#	  5744	  5744#	  5765	  5765#	  5786	  5786#	  5807	  5807#	  5827
	  5827#	  5866	  5866#	  5887	  5887#	  5908	  5908#	  5929	  5929#	  5950	  5950#	  5971	  5971#	  5992
	  5992#	  6013	  6013#	  6034	  6034#	  6055	  6055#	  6076	  6076#	  6097	  6097#	  6118	  6118#	  6139
	  6139#	  6160	  6160#	  6181	  6181#	  6202	  6202#	  6222	  6222#	  6239#	  6266	  6266#	  6287	  6287#
	  6308	  6308#	  6329	  6329#	  6350	  6350#	  6371	  6371#	  6392	  6392#	  6413	  6413#	  6434	  6434#
	  6455	  6455#	  6476	  6476#	  6497	  6497#	  6518	  6518#	  6539	  6539#	  6560	  6560#	  6581	  6581#
	  6602	  6602#	  6623	  6623#	  6662	  6662#	  6683	  6683#	  6704	  6704#	  6725	  6725#	  6746	  6746#
	  6767	  6767#	  6788	  6788#	  6809	  6809#	  6830	  6830#	  6851	  6851#	  6872	  6872#	  6893	  6893#
	  6914	  6914#	  6935	  6935#	  6956	  6956#	  6977	  6977#	  6998	  6998#	  7019	  7019#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#                                                                                                            SEQ 0185
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  7033#	  7033
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
XX	  3923#	  3948	  3948#	  3949	  3949#	  3950	  3952	  3968	  3968#	  3969	  3970	  3972	  3988	  3988#
	  3989	  3990	  3992	  4008	  4008#	  4009	  4010	  4012	  4028	  4028#	  4029	  4030	  4032	  4048
	  4048#	  4049	  4050	  4052	  4068	  4068#	  4069	  4070	  4072	  4088	  4088#	  4089	  4090	  4092
	  4108	  4108#	  4109	  4110	  4112	  4128	  4128#	  4129	  4130	  4132	  4148	  4148#	  4149	  4150
	  4152	  4168	  4168#	  4169	  4170	  4172	  4188	  4188#	  4189	  4190	  4192	  4208	  4208#	  4209
	  4210	  4212	  4228	  4228#	  4229	  4230	  4232	  4248	  4248#	  4249	  4250	  4252	  4268	  4268#
	  4269	  4270	  4272	  4288	  4288#	  4289	  4290	  4292	  4302#	  4327	  4327#	  4328	  4328#	  4329
	  4331	  4347	  4347#	  4348	  4349	  4351	  4367	  4367#	  4368	  4369	  4371	  4387	  4387#	  4388
	  4389	  4391	  4407	  4407#	  4408	  4409	  4411	  4427	  4427#	  4428	  4429	  4431	  4447	  4447#
	  4448	  4449	  4451	  4467	  4467#	  4468	  4469	  4471	  4487	  4487#	  4488	  4489	  4491	  4507
	  4507#	  4508	  4509	  4511	  4527	  4527#	  4528	  4529	  4531	  4547	  4547#	  4548	  4549	  4551
	  4567	  4567#	  4568	  4569	  4571	  4587	  4587#	  4588	  4589	  4591	  4607	  4607#	  4608	  4609
	  4611	  4627	  4627#	  4628	  4629	  4631	  4647	  4647#	  4648	  4649	  4651	  4667	  4667#	  4668
	  4669	  4671	  4708	  4708#	  4709	  4709#	  4711	  4712	  4728	  4728#	  4729	  4731	  4732	  4748
	  4748#	  4749	  4751	  4752	  4768	  4768#	  4769	  4771	  4772	  4788	  4788#	  4789	  4791	  4792
	  4808	  4808#	  4809	  4811	  4812	  4828	  4828#	  4829	  4831	  4832	  4848	  4848#	  4849	  4851
	  4852	  4868	  4868#	  4869	  4871	  4872	  4888	  4888#	  4889	  4891	  4892	  4908	  4908#	  4909
	  4911	  4912	  4928	  4928#	  4929	  4931	  4932	  4948	  4948#	  4949	  4951	  4952	  4968	  4968#
	  4969	  4971	  4972	  4988	  4988#	  4989	  4991	  4992	  5008	  5008#	  5009	  5011	  5012	  5028
	  5028#	  5029	  5031	  5032	  5048	  5048#	  5049	  5051	  5052	  5062#	  5087	  5087#	  5088	  5088#
	  5090	  5091	  5107	  5107#	  5108	  5110	  5111	  5127	  5127#	  5128	  5130	  5131	  5147	  5147#
	  5148	  5150	  5151	  5167	  5167#	  5168	  5170	  5171	  5187	  5187#	  5188	  5190	  5191	  5207
	  5207#	  5208	  5210	  5211	  5227	  5227#	  5228	  5230	  5231	  5247	  5247#	  5248	  5250	  5251
	  5267	  5267#	  5268	  5270	  5271	  5287	  5287#	  5288	  5290	  5291	  5307	  5307#	  5308	  5310     SEQ 0186
	  5311	  5327	  5327#	  5328	  5330	  5331	  5347	  5347#	  5348	  5350	  5351	  5367	  5367#	  5368
	  5370	  5371	  5387	  5387#	  5388	  5390	  5391	  5407	  5407#	  5408	  5410	  5411	  5427	  5427#
	  5428	  5430	  5431	  5445#	  5472	  5472#	  5473	  5473#	  5474	  5475	  5476	  5493	  5493#	  5494
	  5495	  5496	  5497	  5514	  5514#	  5515	  5516	  5517	  5518	  5535	  5535#	  5536	  5537	  5538
	  5539	  5556	  5556#	  5557	  5558	  5559	  5560	  5577	  5577#	  5578	  5579	  5580	  5581	  5598
	  5598#	  5599	  5600	  5601	  5602	  5619	  5619#	  5620	  5621	  5622	  5623	  5640	  5640#	  5641
	  5642	  5643	  5644	  5661	  5661#	  5662	  5663	  5664	  5665	  5682	  5682#	  5683	  5684	  5685
	  5686	  5703	  5703#	  5704	  5705	  5706	  5707	  5724	  5724#	  5725	  5726	  5727	  5728	  5745
	  5745#	  5746	  5747	  5748	  5749	  5766	  5766#	  5767	  5768	  5769	  5770	  5787	  5787#	  5788
	  5789	  5790	  5791	  5808	  5808#	  5809	  5810	  5811	  5812	  5828	  5828#	  5829	  5830	  5840#
	  5867	  5867#	  5868	  5868#	  5869	  5870	  5871	  5888	  5888#	  5889	  5890	  5891	  5892	  5909
	  5909#	  5910	  5911	  5912	  5913	  5930	  5930#	  5931	  5932	  5933	  5934	  5951	  5951#	  5952
	  5953	  5954	  5955	  5972	  5972#	  5973	  5974	  5975	  5976	  5993	  5993#	  5994	  5995	  5996
	  5997	  6014	  6014#	  6015	  6016	  6017	  6018	  6035	  6035#	  6036	  6037	  6038	  6039	  6056
	  6056#	  6057	  6058	  6059	  6060	  6077	  6077#	  6078	  6079	  6080	  6081	  6098	  6098#	  6099
	  6100	  6101	  6102	  6119	  6119#	  6120	  6121	  6122	  6123	  6140	  6140#	  6141	  6142	  6143
	  6144	  6161	  6161#	  6162	  6163	  6164	  6165	  6182	  6182#	  6183	  6184	  6185	  6186	  6203
	  6203#	  6204	  6205	  6206	  6207	  6223	  6223#	  6224	  6225	  6226	  6240#	  6267	  6267#	  6268
	  6268#	  6269	  6270	  6271	  6288	  6288#	  6289	  6290	  6291	  6292	  6309	  6309#	  6310	  6311
	  6312	  6313	  6330	  6330#	  6331	  6332	  6333	  6334	  6351	  6351#	  6352	  6353	  6354	  6355
	  6372	  6372#	  6373	  6374	  6375	  6376	  6393	  6393#	  6394	  6395	  6396	  6397	  6414	  6414#
	  6415	  6416	  6417	  6418	  6435	  6435#	  6436	  6437	  6438	  6439	  6456	  6456#	  6457	  6458
	  6459	  6460	  6477	  6477#	  6478	  6479	  6480	  6481	  6498	  6498#	  6499	  6500	  6501	  6502
	  6519	  6519#	  6520	  6521	  6522	  6523	  6540	  6540#	  6541	  6542	  6543	  6544	  6561	  6561#
	  6562	  6563	  6564	  6565	  6582	  6582#	  6583	  6584	  6585	  6586	  6603	  6603#	  6604	  6605
	  6606	  6607	  6624	  6624#	  6625	  6626	  6636#	  6663	  6663#	  6664	  6664#	  6665	  6666	  6667
	  6684	  6684#	  6685	  6686	  6687	  6688	  6705	  6705#	  6706	  6707	  6708	  6709	  6726	  6726#
	  6727	  6728	  6729	  6730	  6747	  6747#	  6748	  6749	  6750	  6751	  6768	  6768#	  6769	  6770
	  6771	  6772	  6789	  6789#	  6790	  6791	  6792	  6793	  6810	  6810#	  6811	  6812	  6813	  6814
	  6831	  6831#	  6832	  6833	  6834	  6835	  6852	  6852#	  6853	  6854	  6855	  6856	  6873	  6873#
	  6874	  6875	  6876	  6877	  6894	  6894#	  6895	  6896	  6897	  6898	  6915	  6915#	  6916	  6917
	  6918	  6919	  6936	  6936#	  6937	  6938	  6939	  6940	  6957	  6957#	  6958	  6959	  6960	  6961
	  6978	  6978#	  6979	  6980	  6981	  6982	  6999	  6999#	  7000	  7001	  7002	  7003	  7020	  7020#
	  7021	  7022	  7023	  7024
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#                                                                                                            SEQ 0187
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	  7040
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#                                                                                                            SEQ 0188
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0189
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   821	   844	   861	   879	   895	   921
	   942	   960	   976	   999	  1021	  1045	  1061	  1079	  1094	  1118	  1139	  1156	  1177	  1191
	  1214	  1229	  1246	  1271	  1294	  1315	  1330	  1354	  1370	  1389	  1402	  1415	  1427	  1443
	  1457	  1473	  1493	  1514	  1531	  1565	  1582	  1600	  1617	  1635	  1658	  1676	  1693	  1712
	  1735	  1756	  1773	  1789	  1806	  1821	  1843	  1865	  1882	  1898	  1914	  1935	  1952	  1968
	  1985	  2001	  2018	  2034	  2051	  2066	  2083	  2098	  2114	  2135	  2156	  2171	  2192	  2212
	  2228	  2243	  2264	  2279	  2295	  2310	  2326	  2341	  2362	  2377	  2398	  2419	  2435	  2450
	  2466	  2481	  2497	  2512	  2528	  2543	  2559	  2574	  2598	  2613	  2634	  2649	  2672	  2693
	  2709	  2725	  2746	  2767	  2783	  2799	  2820	  2836	  2852	  2867	  2883	  2898	  2914	  2929
	  2945	  2969	  2994	  3011	  3041	  3056	  3077	  3097	  3118	  3138	  3159	  3179	  3201	  3222
	  3238	  3253	  3269	  3284	  3300	  3315	  3331	  3347	  3364	  3380	  3402	  3424	  3441	  3457
	  3479	  3502	  3519	  3535	  3560	  3575	  3598	  3620	  3637	  3652	  3674	  3695	  3718	  3734
	  3752	  3769	  3792	  3811	  3828	  3843	  3859	  3876	  3902	  3954	  3974	  3994	  4014	  4034
	  4054	  4074	  4094	  4114	  4134	  4154	  4174	  4194	  4214	  4234	  4254	  4274	  4294	  4333
	  4353	  4373	  4393	  4413	  4433	  4453	  4473	  4493	  4513	  4533	  4553	  4573	  4593	  4613
	  4633	  4653	  4673	  4714	  4734	  4754	  4774	  4794	  4814	  4834	  4854	  4874	  4894	  4914
	  4934	  4954	  4974	  4994	  5014	  5034	  5054	  5093	  5113	  5133	  5153	  5173	  5193	  5213
	  5233	  5253	  5273	  5293	  5313	  5333	  5353	  5373	  5393	  5413	  5433	  5478	  5499	  5520
	  5541	  5562	  5583	  5604	  5625	  5646	  5667	  5688	  5709	  5730	  5751	  5772	  5793	  5814
	  5833	  5873	  5894	  5915	  5936	  5957	  5978	  5999	  6020	  6041	  6062	  6083	  6104	  6125
	  6146	  6167	  6188	  6209	  6229	  6273	  6294	  6315	  6336	  6357	  6378	  6399	  6420	  6441
	  6462	  6483	  6504	  6525	  6546	  6567	  6588	  6609	  6629	  6669	  6690	  6711	  6732	  6753
	  6774	  6795	  6816	  6837	  6858	  6879	  6900	  6921	  6942	  6963	  6984	  7005	  7026
JEN	   160#
JRSTF	   159#
MAPADR	   295#
MAPCNK	   296#                                                                                                            SEQ 0190
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#
PNTHWF	   229#                                                                                                            SEQ 0191
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#
SIXBTZ	   261#
STOP	    48#	   820	   843	   860	   878	   894	   920	   941	   959	   975	   998	  1020	  1044	  1060
	  1078	  1093	  1117	  1138	  1155	  1176	  1190	  1213	  1228	  1245	  1270	  1293	  1314	  1329
	  1353	  1369	  1388	  1401	  1414	  1426	  1442	  1456	  1472	  1492	  1513	  1530	  1564	  1581
	  1599	  1616	  1634	  1657	  1675	  1692	  1711	  1734	  1755	  1772	  1788	  1805	  1820	  1842
	  1864	  1881	  1897	  1913	  1934	  1951	  1967	  1984	  2000	  2017	  2033	  2050	  2065	  2082
	  2097	  2113	  2134	  2155	  2170	  2191	  2211	  2227	  2242	  2263	  2278	  2294	  2309	  2325
	  2340	  2361	  2376	  2397	  2418	  2434	  2449	  2465	  2480	  2496	  2511	  2527	  2542	  2558
	  2573	  2597	  2612	  2633	  2648	  2671	  2692	  2708	  2724	  2745	  2766	  2782	  2798	  2819
	  2835	  2851	  2866	  2882	  2897	  2913	  2928	  2944	  2968	  2993	  3010	  3040	  3055	  3076
	  3096	  3117	  3137	  3158	  3178	  3200	  3221	  3237	  3252	  3268	  3283	  3299	  3314	  3330
	  3346	  3363	  3379	  3401	  3423	  3440	  3456	  3478	  3501	  3518	  3534	  3559	  3574	  3597
	  3619	  3636	  3651	  3673	  3693	  3716	  3732	  3751	  3768	  3791	  3810	  3827	  3842	  3858
	  3875	  3901	  3953	  3973	  3993	  4013	  4033	  4053	  4073	  4093	  4113	  4133	  4153	  4173
	  4193	  4213	  4233	  4253	  4273	  4293	  4332	  4352	  4372	  4392	  4412	  4432	  4452	  4472     SEQ 0192
	  4492	  4512	  4532	  4552	  4572	  4592	  4612	  4632	  4652	  4672	  4713	  4733	  4753	  4773
	  4793	  4813	  4833	  4853	  4873	  4893	  4913	  4933	  4953	  4973	  4993	  5013	  5033	  5053
	  5092	  5112	  5132	  5152	  5172	  5192	  5212	  5232	  5252	  5272	  5292	  5312	  5332	  5352
	  5372	  5392	  5412	  5432	  5477	  5498	  5519	  5540	  5561	  5582	  5603	  5624	  5645	  5666
	  5687	  5708	  5729	  5750	  5771	  5792	  5813	  5832	  5872	  5893	  5914	  5935	  5956	  5977
	  5998	  6019	  6040	  6061	  6082	  6103	  6124	  6145	  6166	  6187	  6208	  6228	  6272	  6293
	  6314	  6335	  6356	  6377	  6398	  6419	  6440	  6461	  6482	  6503	  6524	  6545	  6566	  6587
	  6608	  6628	  6668	  6689	  6710	  6731	  6752	  6773	  6794	  6815	  6836	  6857	  6878	  6899
	  6920	  6941	  6962	  6983	  7004	  7025
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#
WRTIM	   356#
WRUBR	   356#

ADD	  3951	  3971	  3991	  4011	  4031	  4051	  4071	  4091	  4111	  4131	  4151	  4171	  4191	  4211
	  4231	  4251	  4271	  4291	  4330	  4350	  4370	  4390	  4410	  4430	  4450	  4470	  4490	  4510     SEQ 0193
	  4530	  4550	  4570	  4590	  4610	  4630	  4650	  4670	  4711	  4731	  4751	  4771	  4791	  4811
	  4831	  4851	  4871	  4891	  4911	  4931	  4951	  4971	  4991	  5011	  5031	  5051	  5090	  5110
	  5130	  5150	  5170	  5190	  5210	  5230	  5250	  5270	  5290	  5310	  5330	  5350	  5370	  5390
	  5410	  5430	  5475	  5496	  5517	  5538	  5559	  5580	  5601	  5622	  5643	  5664	  5685	  5706
	  5727	  5748	  5769	  5790	  5811	  5830	  5870	  5891	  5912	  5933	  5954	  5975	  5996	  6017
	  6038	  6059	  6080	  6101	  6122	  6143	  6164	  6185	  6206	  6226	  6270	  6291	  6312	  6333
	  6354	  6375	  6396	  6417	  6438	  6459	  6480	  6501	  6522	  6543	  6564	  6585	  6606	  6626
	  6666	  6687	  6708	  6729	  6750	  6771	  6792	  6813	  6834	  6855	  6876	  6897	  6918	  6939
	  6960	  6981	  7002	  7023
AOS	   444	   757
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAI	   892	   918	   939	   957	   973	   996	  1018	  1042	  1058	  1076	  1091	  1115	  1136	  1153
	  1174
CAIE	   819	   859	  1733	  1804	  2226	  2241	  2308	  2360	  2417	  2433	  2448	  2464	  2479	  2510
	  2526	  2541	  2596	  2647	  2691	  2818	  2865	  2881	  2967	  3039	  3075	  3136	  3177	  3251
	  3329	  3400	  3439
CAM	   818	   841	   858	   876
CAME	   842	   877	   893	   958	   974	  1019	  1077	  1092	  1154	  1175	  1512	  1529	  1563	  1598
	  1615	  1633	  1656	  1674	  1691	  1754	  1771	  1787	  1841	  1863	  1950	  1966	  1983	  1999
	  2049	  2081	  2133	  2154	  2169	  2190	  2293	  2324	  2572	  2611	  2632	  2670	  2744	  2765
	  2781	  2797	  2850	  2896	  2912	  2927	  2992	  3009	  3054	  3095	  3116	  3157	  3199	  3220
	  3236	  3267	  3282	  3298	  3313	  3378	  3422	  3477	  3500	  3517	  3573	  3650	  3692	  3731
	  3767	  3826	  3857	  3874	  3900	  3952	  3972	  3992	  4012	  4032	  4052	  4072	  4092	  4112
	  4132	  4152	  4172	  4192	  4212	  4232	  4252	  4272	  4292	  4331	  4351	  4371	  4391	  4411
	  4431	  4451	  4471	  4491	  4511	  4531	  4551	  4571	  4591	  4611	  4631	  4651	  4671	  4712
	  4732	  4752	  4772	  4792	  4812	  4832	  4852	  4872	  4892	  4912	  4932	  4952	  4972	  4992
	  5012	  5032	  5052	  5091	  5111	  5131	  5151	  5171	  5191	  5211	  5231	  5251	  5271	  5291
	  5311	  5331	  5351	  5371	  5391	  5411	  5431	  5476	  5497	  5518	  5539	  5560	  5581	  5602
	  5623	  5644	  5665	  5686	  5707	  5728	  5749	  5770	  5791	  5812	  5831	  5871	  5892	  5913
	  5934	  5955	  5976	  5997	  6018	  6039	  6060	  6081	  6102	  6123	  6144	  6165	  6186	  6207
	  6227	  6271	  6292	  6313	  6334	  6355	  6376	  6397	  6418	  6439	  6460	  6481	  6502	  6523
	  6544	  6565	  6586	  6607	  6627	  6667	  6688	  6709	  6730	  6751	  6772	  6793	  6814	  6835
	  6856	  6877	  6898	  6919	  6940	  6961	  6982	  7003	  7024
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  7166
HLL	  1709	  1732	  1753	  1770	  1786	  1803
HLLE	  3454	  3476	  3516
HLLEI	  3595	  3617
HLLM	  2942	  2966	  2991
HLLO	  3053	  3074	  3135	  3219	  3281	  3328
HLLOI	  3176	  3250
HLLZ	  1818	  1840	  1862	  1879	  1895	  1949	  1965	  1982	  1998	  2015	  2031	  2048	  2080
HLLZI	  1911	  1932	  2063	  2095
HLR	  2610	  2646	  2690	  2764	  2864	  2895	  2926
HLRE	  3749	  3766	  3825	  3840	  3856
HLREI	  3789	  3808
HLREM	  3873
HLRI	  2722	  2796	  2833
HLRZ	  3361	  3399	  3438                                                                                             SEQ 0194
HRL	  2556	  2571	  2595	  2631	  2706	  2780	  2817	  2849	  2880	  2911
HRLE	  3634	  3671	  3691	  3714	  3730
HRLEI	  3649
HRLI	  2669	  2743
HRLM	  3899
HRLOI	  6665	  6686	  6707	  6728	  6749	  6770	  6791	  6812	  6833	  6854	  6875	  6896	  6917	  6938
	  6959	  6980	  7001	  7022
HRLZ	  3344
HRLZI	  3377	  3421	  4329	  4349	  4369	  4389	  4409	  4429	  4449	  4469	  4489	  4509	  4529	  4549
	  4569	  4589	  4609	  4629	  4649	  4669	  5869	  5890	  5911	  5932	  5953	  5974	  5995	  6016
	  6037	  6058	  6079	  6100	  6121	  6142	  6163	  6184	  6205	  6225
HRR	  2111	  2132	  2153	  2189	  2209	  2225	  2261	  2276	  2323
HRRE	  3499	  3532	  3557
HRREI	  3572
HRRI	  2168	  2240	  2292	  2307
HRRM	  3008	  3038
HRRO	  3094	  3115	  3156
HRROI	  3198	  3235	  3266	  3297	  3312	  6269	  6290	  6311	  6332	  6353	  6374	  6395	  6416	  6437
	  6458	  6479	  6500	  6521	  6542	  6563	  6584	  6605	  6625
HRRZ	  2338	  2395	  2416	  2432	  2447	  2463	  2478	  2494	  2509	  2540
HRRZI	  2359	  2374	  2525	  3950	  3970	  3990	  4010	  4030	  4050	  4070	  4090	  4110	  4130	  4150
	  4170	  4190	  4210	  4230	  4250	  4270	  4290	  5474	  5495	  5516	  5537	  5558	  5579	  5600
	  5621	  5642	  5663	  5684	  5705	  5726	  5747	  5768	  5789	  5810	  5829
IFDEF	   356	   407	   408	   409	   410	  7157	  7164
IFE	  3949	  3969	  3989	  4009	  4029	  4049	  4069	  4089	  4109	  4129	  4149	  4169	  4189	  4209
	  4229	  4249	  4269	  4289	  4328	  4348	  4368	  4388	  4408	  4428	  4448	  4468	  4488	  4508
	  4528	  4548	  4568	  4588	  4608	  4628	  4648	  4668	  4709	  4729	  4749	  4769	  4789	  4809
	  4829	  4849	  4869	  4889	  4909	  4929	  4949	  4969	  4989	  5009	  5029	  5049	  5088	  5108
	  5128	  5148	  5168	  5188	  5208	  5228	  5248	  5268	  5288	  5308	  5328	  5348	  5368	  5388
	  5408	  5428	  5473	  5494	  5515	  5536	  5557	  5578	  5599	  5620	  5641	  5662	  5683	  5704
	  5725	  5746	  5767	  5788	  5809	  5868	  5889	  5910	  5931	  5952	  5973	  5994	  6015	  6036
	  6057	  6078	  6099	  6120	  6141	  6162	  6183	  6204	  6224	  6268	  6289	  6310	  6331	  6352
	  6373	  6394	  6415	  6436	  6457	  6478	  6499	  6520	  6541	  6562	  6583	  6604	  6664	  6685
	  6706	  6727	  6748	  6769	  6790	  6811	  6832	  6853	  6874	  6895	  6916	  6937	  6958	  6979
	  7000	  7021
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  7040
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	  7034
JSP	   166	   743	   776
JUMPA	   822	   845	   862	   880	   896	   922	   943	   961	   977	  1000	  1022	  1046	  1062	  1080
	  1095	  1119	  1140	  1157	  1178	  1192	  1215	  1230	  1247	  1272	  1295	  1316	  1331	  1355
	  1371	  1390	  1403	  1416	  1428	  1444	  1458	  1474	  1494	  1515	  1532	  1566	  1583	  1601
	  1618	  1636	  1659	  1677	  1694	  1713	  1736	  1757	  1774	  1790	  1807	  1822	  1844	  1866
	  1883	  1899	  1915	  1936	  1953	  1969	  1986	  2002	  2019	  2035	  2052	  2067	  2084	  2099
	  2115	  2136	  2157	  2172	  2193	  2213	  2229	  2244	  2265	  2280	  2296	  2311	  2327	  2342
	  2363	  2378	  2399	  2420	  2436	  2451	  2467	  2482	  2498	  2513	  2529	  2544	  2560	  2575
	  2599	  2614	  2635	  2650	  2673	  2694	  2710	  2726	  2747	  2768	  2784	  2800	  2821	  2837
	  2853	  2868	  2884	  2899	  2915	  2930	  2946	  2970	  2995	  3012	  3042	  3057	  3078	  3098
	  3119	  3139	  3160	  3180	  3202	  3223	  3239	  3254	  3270	  3285	  3301	  3316	  3332	  3348
	  3365	  3381	  3403	  3425	  3442	  3458	  3480	  3503	  3520	  3536	  3561	  3576	  3599	  3621
	  3638	  3653	  3675	  3696	  3719	  3735	  3753	  3770	  3793	  3812	  3829	  3844	  3860	  3877     SEQ 0195
	  3903	  3955	  3975	  3995	  4015	  4035	  4055	  4075	  4095	  4115	  4135	  4155	  4175	  4195
	  4215	  4235	  4255	  4275	  4295	  4334	  4354	  4374	  4394	  4414	  4434	  4454	  4474	  4494
	  4514	  4534	  4554	  4574	  4594	  4614	  4634	  4654	  4674	  4715	  4735	  4755	  4775	  4795
	  4815	  4835	  4855	  4875	  4895	  4915	  4935	  4955	  4975	  4995	  5015	  5035	  5055	  5094
	  5114	  5134	  5154	  5174	  5194	  5214	  5234	  5254	  5274	  5294	  5314	  5334	  5354	  5374
	  5394	  5414	  5434	  5479	  5500	  5521	  5542	  5563	  5584	  5605	  5626	  5647	  5668	  5689
	  5710	  5731	  5752	  5773	  5794	  5815	  5834	  5874	  5895	  5916	  5937	  5958	  5979	  6000
	  6021	  6042	  6063	  6084	  6105	  6126	  6147	  6168	  6189	  6210	  6230	  6274	  6295	  6316
	  6337	  6358	  6379	  6400	  6421	  6442	  6463	  6484	  6505	  6526	  6547	  6568	  6589	  6610
	  6630	  6670	  6691	  6712	  6733	  6754	  6775	  6796	  6817	  6838	  6859	  6880	  6901	  6922
	  6943	  6964	  6985	  7006	  7027
LALL	    10
LIST	     9	   318	   356	   489	  7040	  7154
LIT	  7041
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
MOVE	  1242	  1327	  1613	  1654	  1689	  3872
MOVEI	  1631	  1672	  1981	  2014	  2047	  2062	  2275	  2306	  2431	  2446	  2493	  2524	  2816	  2832
	  2848	  2863	  3311	  3898
MOVSI	  1997	  2030	  2079	  2094	  2291	  2322	  2462	  2477	  2508	  2539	  2879	  2894	  2910	  2925
	  3327
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
PAGE	  4301	  5061	  5821	  6616
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
REPEAT	  3925	  4304	  4685	  5064	  5447	  5842	  6242	  6638
SETO	   839	   874	   955	   971	  1016	  1040	  1074	  1089	  1134	  1172	  1210	  1312	  1351	  1385
	  1412	  1439	  1454	  1489	  1596	  1731	  1752	  1802	  1839	  1878	  1910	  1948	  2131	  2152
	  2167	  2188	  2358	  2373	  2394	  2415	  2570	  2594	  2609	  2742	  2763	  2779	  2795	  2965
	  2989	  3007	  3036	  3052	  3093	  3249	  3265	  3280	  3296	  3420	  3437	  3594	  3616	  3788
SETOM	   745	   752	   778
SETZ	   816	   856	   890	   916	   937	   994	  1056	  1113	  1151	  1188	  1225	  1268	  1290	  1367
	  1398	  1424	  1469	  1510	  1527	  1561	  1578	  1708	  1769	  1785	  1817	  1861	  1894	  1931
	  1964	  2110	  2208	  2224	  2239	  2260	  2337	  2555	  2630	  2645	  2668	  2689	  2705	  2721
	  2941	  2964	  2990	  3006	  3037	  3073	  3114	  3134	  3155	  3175	  3197	  3218	  3234	  3343
	  3360	  3376	  3398	  3453	  3475	  3498	  3515	  3531	  3556	  3571	  3633	  3648	  3748	  3765
	  3871	  3897	  4710	  4730	  4750	  4770	  4790	  4810	  4830	  4850	  4870	  4890	  4910	  4930
	  4950	  4970	  4990	  5010	  5030	  5050	  5089	  5109	  5129	  5149	  5169	  5189	  5209	  5229
	  5249	  5269	  5289	  5309	  5329	  5349	  5369	  5389	  5409	  5429
SETZM	   742	   747	   775	   780	  7033
SIXBIT	    77	    78	   574	   575	   583	   584
SKIPA	  1212	  1227	  1244	  1292	  1387	  1400	  1441	  1471	  1491
SKIPE	   748	   762	   768	   919	   940	   997	  1043	  1059	  1116	  1137	  1580	  1710	  1819	  1880
	  1896	  1912	  1933	  2016	  2032	  2064	  2096	  2112	  2210	  2262	  2277	  2339	  2375	  2396     SEQ 0196
	  2495	  2557	  2707	  2723	  2834	  2943	  3345	  3362	  3455	  3533	  3558	  3596	  3618	  3635
	  3672	  3715	  3750	  3790	  3809	  3841
SKIPL	   783
SKIPN	   746	   751	   759	   764	   770	   779	   781
SOS	   758
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	  1699	  3918	  4680	  5440	  6235
	  7035
TDC	  1090	  1114	  1135	  1152	  1173
TDN	   817	  1211	  1226	  1386	  1399
TDNA	  1189	  1313	  1413	  1425
TDNE	  1243	  1269	  1352	  1368	  1440
TDNN	  1291	  1328	  1455	  1470	  1490
TDO	   891	   917	   938	   956	   972	  1511
TDZ	   995	  1017	  1041	  1057	  1075
TITLE	    14
TLN	   875
TLNE	   744	   777
TRN	   857
TSN	   840
TSO	  1528	  1562	  1579	  1597	  1614	  1632	  1655	  1673	  1690
TTCALL	   784
VAR	  7162
XLIST	     8	   317	   355	   488	  7039
XWD	   840	  1017	  1090	  1242	  1327	  1511	  1512	  1528	  1529	  1562	  1563	  1613	  1614	  1633
	  1654	  1656	  1689	  1771	  1786	  1787	  1803	  1841	  1863	  1949	  1950	  1965	  1966	  1983
	  1999	  2048	  2049	  2080	  2081	  2153	  2154	  2190	  2261	  2276	  2323	  2324	  2395	  2494
	  2509	  2540	  2670	  2690	  2706	  2764	  2780	  2781	  2797	  2896	  2912	  2992	  3009	  3074
	  3115	  3199	  3219	  3267	  3281	  3313	  3328	  3378	  3399	  3422	  3438	  3477	  3516	  3557
	  3650	  3714	  3730	  3825	  3840	  3872	  3900

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0197
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0198

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0199

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0200

*030662  TDN 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030663  CAM 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030664  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030666  JUMPA	0,030667

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030667 
----------

*030667  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*030670  TSN 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0201

*030671  CAM 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030672  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030674  JUMPA	0,030675

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030675 
----------

*030675  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030676  TRN 	0,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 123456 
FINAL
C(AC)= 000000 000000 
----------

*030677  CAM 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0202

*030700  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030702  JUMPA	0,030703

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030703 
----------

*030703  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*030704  TLN 	0,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 123456 
FINAL
C(AC)= 777777 777777 
----------

*030705  CAM 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030706  CAME	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0203

*030710  JUMPA	0,030711

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030711 
----------

*030711  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030712  TDO 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030713  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*030714  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030716  JUMPA	0,030717

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030717 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0204

*030717  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030720  TDO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030721  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030722  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030724  JUMPA	0,030725

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030725 
----------

*030725  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0205

*030726  TDO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030727  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030730  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030732  JUMPA	0,030733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030733 
----------

*030733  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*030734  TDO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0206

*030735  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*030736  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030740  JUMPA	0,030741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030741 
----------

*030741  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030742  TDO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*030743  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0207

*030744  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030746  JUMPA	0,030747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030747 
----------

*030747  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030750  TDZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030751  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030752  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0208

*030754  JUMPA	0,030755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030755 
----------

*030755  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*030756  TDZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*030757  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000000 
----------

*030760  CAME	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*030762  JUMPA	0,030763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 030763 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0209

*030763  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*030764  TDZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030765  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030766  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030770  JUMPA	0,030771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030771 
----------

*030771  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0210

*030772  TDZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030773  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*030774  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030776  JUMPA	0,030777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030777 
----------

*030777  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031000  TDZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0211

*031001  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*031002  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031004  JUMPA	0,031005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031005 
----------

*031005  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031006  TDC 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031007  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0212

*031010  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031012  JUMPA	0,031013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031013 
----------

*031013  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031014  TDC 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031015  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031016  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0213

*031020  JUMPA	0,031021

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031021 
----------

*031021  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031022  TDC 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031023  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031024  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031026  JUMPA	0,031027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031027 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0214

*031027  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031030  TDC 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031031  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*031032  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031034  JUMPA	0,031035

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031035 
----------

*031035  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0215

*031036  TDC 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031037  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
----------

*031040  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031042  JUMPA	0,031043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031043 
----------

*031043  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031044  TDNA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0216

*031046  JUMPA	0,031047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031047 
----------

*031047  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031050  TDN 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031051  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031053  JUMPA	0,031054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031054 
----------

*031054  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0217

*031055  TDN 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031056  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031060  JUMPA	0,031061

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031061 
----------

*031061  MOVE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031062  TDNE	0,033734

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 707070 707070 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0218

*031063  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031065  JUMPA	0,031066

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031066 
----------

*031066  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031067  TDNE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031071  JUMPA	0,031072

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031072 
----------

*031072  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0219

*031073  TDNN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031074  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031076  JUMPA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031077 
----------

*031077  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031100  TDNA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0220

*031102  JUMPA	0,031103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031103 
----------

*031103  MOVE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031104  TDNN	0,033734

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 707070 707070 
FINAL
C(AC)= 777777 000000 
----------

*031106  JUMPA	0,031107

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031107 
----------

*031107  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*031110  TDNE	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0221

*031112  JUMPA	0,031113

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031113 
----------

*031113  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031114  TDNE	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031116  JUMPA	0,031117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031117 
----------

*031117  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031120  TDN 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0222

*031121  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031123  JUMPA	0,031124

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031124 
----------

*031124  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031125  TDN 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031126  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0223

*031130  JUMPA	0,031131

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031131 
----------

*031131  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031132  TDNA	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031134  JUMPA	0,031135

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031135 
----------

*031135  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031136  TDNA	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0224

*031140  JUMPA	0,031141

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031141 
----------

*031141  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031142  TDNE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031143  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031145  JUMPA	0,031146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031146 
----------

*031146  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0225

*031147  TDNN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031151  JUMPA	0,031152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031152 
----------

*031152  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031153  TDNN	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031154  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0226

*031156  JUMPA	0,031157

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031157 
----------

*031157  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031160  TDNN	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031161  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031163  JUMPA	0,031164

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031164 
----------

*031164  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0227

*031165  TDO 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031166  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031170  JUMPA	0,031171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031171 
----------

*031171  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031172  TSO 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*031173  CAME	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0228

*031175  JUMPA	0,031176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031176 
----------

*031176  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031177  TSO 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031200  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031202  JUMPA	0,031203

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031203 
----------

*031203  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0229

*031204  TSO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031205  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031207  JUMPA	0,031210

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031210 
----------

*031210  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031211  TSO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0230

*031212  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031214  JUMPA	0,031215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031215 
----------

*031215  MOVE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031216  TSO 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031217  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031221  JUMPA	0,031222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031222 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0231

*031222  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031223  TSO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*031224  CAME	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*031226  JUMPA	0,031227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031227 
----------

*031227  MOVE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031230  TSO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0232

*031231  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031233  JUMPA	0,031234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031234 
----------

*031234  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031235  TSO 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031236  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031240  JUMPA	0,031241

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031241 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0233

*031241  MOVE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031242  TSO 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031243  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031245  JUMPA	0,031246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031246 
----------

*031246  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031247  HLL 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0234

*031250  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031252  JUMPA	0,031253

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031253 
----------

*031253  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031254  HLL 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*031255  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031257  JUMPA	0,031260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031260 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0235

*031260  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*031261  HLL 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031262  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031264  JUMPA	0,031265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031265 
----------

*031265  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031266  HLL 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0236

*031267  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031271  JUMPA	0,031272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031272 
----------

*031272  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031273  HLL 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031274  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031276  JUMPA	0,031277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031277 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0237

*031277  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*031300  HLL 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031301  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031303  JUMPA	0,031304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031304 
----------

*031304  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031305  HLLZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0238

*031306  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031310  JUMPA	0,031311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031311 
----------

*031311  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031312  HLLZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

*031313  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031315  JUMPA	0,031316

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031316 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0239

*031316  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031317  HLLZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

*031320  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031322  JUMPA	0,031323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031323 
----------

*031323  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*031324  HLLZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0240

*031325  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031327  JUMPA	0,031330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031330 
----------

*031330  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031331  HLLZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031332  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0241

*031334  JUMPA	0,031335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031335 
----------

*031335  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031336  HLLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031337  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031341  JUMPA	0,031342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031342 
----------

*031342  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0242

*031343  HLLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031344  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031346  JUMPA	0,031347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031347 
----------

*031347  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031350  HLLZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0243

*031351  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031353  JUMPA	0,031354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031354 
----------

*031354  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031355  HLLZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031356  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031360  JUMPA	0,031361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031361 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0244

*031361  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031362  HLLZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

*031363  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031365  JUMPA	0,031366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031366 
----------

*031366  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031367  HLLZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0245

*031370  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031372  JUMPA	0,031373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031373 
----------

*031373  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031374  HLLZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031375  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031377  JUMPA	0,031400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0246

*031400  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031401  HLLZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031402  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031404  JUMPA	0,031405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031405 
----------

*031405  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0247

*031406  HLLZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031407  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031411  JUMPA	0,031412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031412 
----------

*031412  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031413  HLLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031414  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0248

*031416  JUMPA	0,031417

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031417 
----------

*031417  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031420  HLLZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031421  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031423  JUMPA	0,031424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031424 
----------

*031424  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0249

*031425  HLLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031426  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031430  JUMPA	0,031431

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031431 
----------

*031431  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031432  HRR 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0250

*031433  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031435  JUMPA	0,031436

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031436 
----------

*031436  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031437  HRR 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031440  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031442  JUMPA	0,031443

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031443 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0251

*031443  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031444  HRR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031445  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031447  JUMPA	0,031450

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031450 
----------

*031450  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*031451  HRRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0252

*031452  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031454  JUMPA	0,031455

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031455 
----------

*031455  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031456  HRR 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*031457  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031461  JUMPA	0,031462

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031462 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0253

*031462  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031463  HRR 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031464  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031466  JUMPA	0,031467

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031467 
----------

*031467  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0254

*031470  HRR 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

*031471  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031473  JUMPA	0,031474

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031474 
----------

*031474  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031475  HRRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031476  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0255

*031500  JUMPA	0,031501

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031501 
----------

*031501  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031502  HRR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031503  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031505  JUMPA	0,031506

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031506 
----------

*031506  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0256

*031507  HRR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031510  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031512  JUMPA	0,031513

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031513 
----------

*031513  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031514  HRRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0257

*031515  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031517  JUMPA	0,031520

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031520 
----------

*031520  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031521  HRRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031522  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031524  JUMPA	0,031525

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0258

*031525  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031526  HRR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031527  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031531  JUMPA	0,031532

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031532 
----------

*031532  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031533  HRRZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0259

*031534  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031536  JUMPA	0,031537

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031537 
----------

*031537  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031540  HRRZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031541  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031543  JUMPA	0,031544

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031544 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0260

*031544  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*031545  HRRZI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031546  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031550  JUMPA	0,031551

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031551 
----------

*031551  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0261

*031552  HRRZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031553  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031555  JUMPA	0,031556

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031556 
----------

*031556  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031557  HRRZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0262

*031560  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031562  JUMPA	0,031563

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031563 
----------

*031563  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031564  HRRZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

*031565  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031567  JUMPA	0,031570

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031570 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0263

*031570  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031571  HRRZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031572  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031574  JUMPA	0,031575

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031575 
----------

*031575  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031576  HRRZ 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0264

*031577  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031601  JUMPA	0,031602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031602 
----------

*031602  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031603  HRRZ 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031604  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031606  JUMPA	0,031607

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031607 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0265

*031607  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031610  HRRZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031611  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031613  JUMPA	0,031614

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031614 
----------

*031614  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0266

*031615  HRRZ 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031616  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031620  JUMPA	0,031621

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031621 
----------

*031621  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031622  HRRZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031623  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0267

*031625  JUMPA	0,031626

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031626 
----------

*031626  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031627  HRRZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031630  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031632  JUMPA	0,031633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031633 
----------

*031633  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0268

*031634  HRL 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031635  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031637  JUMPA	0,031640

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031640 
----------

*031640  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*031641  HRL 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0269

*031642  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031644  JUMPA	0,031645

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031645 
----------

*031645  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031646  HRL 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*031647  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031651  JUMPA	0,031652

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031652 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0270

*031652  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*031653  HLR 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*031654  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031656  JUMPA	0,031657

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031657 
----------

*031657  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031660  HRL 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0271

*031661  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031663  JUMPA	0,031664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031664 
----------

*031664  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031665  HLR 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

*031666  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031670  JUMPA	0,031671

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031671 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0272

*031671  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031672  HRLI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031673  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031675  JUMPA	0,031676

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031676 
----------

*031676  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031677  HLR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0273

*031700  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*031702  JUMPA	0,031703

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031703 
----------

*031703  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031704  HRL 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*031705  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031707  JUMPA	0,031710

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031710 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0274

*031710  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031711  HLRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*031712  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031714  JUMPA	0,031715

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031715 
----------

*031715  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0275

*031716  HRLI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*031717  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031721  JUMPA	0,031722

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031722 
----------

*031722  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031723  HLR 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*031724  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0276

*031726  JUMPA	0,031727

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031727 
----------

*031727  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031730  HRL 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*031731  CAME	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*031733  JUMPA	0,031734

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031734 
----------

*031734  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0277

*031735  HLRI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031736  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031740  JUMPA	0,031741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031741 
----------

*031741  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031742  HRL 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*031743  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0278

*031745  JUMPA	0,031746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031746 
----------

*031746  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031747  HLRI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031750  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031752  JUMPA	0,031753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031753 
----------

*031753  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0279

*031754  HRL 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031755  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031757  JUMPA	0,031760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031760 
----------

*031760  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031761  HLR 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 777777 
----------

*031762  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0280

*031764  JUMPA	0,031765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 031765 
----------

*031765  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031766  HRL 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031767  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031771  JUMPA	0,031772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031772 
----------

*031772  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0281

*031773  HLR 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*031774  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*031776  JUMPA	0,031777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 031777 
----------

*031777  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032000  HRL 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 000000 
----------

*032001  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0282

*032003  JUMPA	0,032004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032004 
----------

*032004  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032005  HLR 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032006  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032010  JUMPA	0,032011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032011 
----------

*032011  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0283

*032012  HLLM	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*032013  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032015  JUMPA	0,032016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032016 
----------

*032016  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032017  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0284

*032020  HLLM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 000000 777777 
----------

*032021  CAIE	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032023  JUMPA	0,032024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032024 
----------

*032024  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032025  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032026  HLLM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0285

*032027  CAME	1,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032031  JUMPA	0,032032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032032 
----------

*032032  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032033  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032034  HRRM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 777777 000000 
----------

*032035  CAME	1,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0286

*032037  JUMPA	0,032040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032040 
----------

*032040  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032041  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032042  HRRM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 000000 777777 
----------

*032043  CAIE	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032045  JUMPA	0,032046

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032046 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0287

*032046  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032047  HLLO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032050  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032052  JUMPA	0,032053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032053 
----------

*032053  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032054  HLLO 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0288

*032055  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032057  JUMPA	0,032060

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032060 
----------

*032060  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032061  HRRO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032062  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032064  JUMPA	0,032065

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032065 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*032065  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032066  HRRO 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*032067  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032071  JUMPA	0,032072

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032072 
----------

*032072  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*032073  HLLO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*032074  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032076  JUMPA	0,032077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032077 
----------

*032077  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032100  HRRO 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*032101  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032103  JUMPA	0,032104

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032104 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*032104  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*032105  HLLOI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

*032106  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032110  JUMPA	0,032111

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032111 
----------

*032111  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032112  HRROI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*032113  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032115  JUMPA	0,032116

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032116 
----------

*032116  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*032117  HLLO 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032120  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032122  JUMPA	0,032123

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032123 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*032123  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032124  HRROI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032125  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032127  JUMPA	0,032130

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032130 
----------

*032130  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032131  HLLOI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*032132  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032134  JUMPA	0,032135

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032135 
----------

*032135  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032136  HRROI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*032137  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032141  JUMPA	0,032142

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032142 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*032142  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032143  HLLO 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032144  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032146  JUMPA	0,032147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032147 
----------

*032147  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032150  HRROI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*032151  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032153  JUMPA	0,032154

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032154 
----------

*032154  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*032155  HRROI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*032156  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032160  JUMPA	0,032161

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032161 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*032161  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032162  HLLO 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*032163  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032165  JUMPA	0,032166

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032166 
----------

*032166  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032167  HRLZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*032170  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032172  JUMPA	0,032173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032173 
----------

*032173  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032174  HLRZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032175  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*032177  JUMPA	0,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032200 
----------

*032200  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032201  HRLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032202  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032204  JUMPA	0,032205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032205 
----------

*032205  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*032206  HLRZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*032207  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032211  JUMPA	0,032212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032212 
----------

*032212  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032213  HRLZI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032214  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*032216  JUMPA	0,032217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032217 
----------

*032217  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032220  HLRZ 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*032221  CAIE	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032223  JUMPA	0,032224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032224 
----------

*032224  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*032225  HLLE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032226  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032230  JUMPA	0,032231

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032231 
----------

*032231  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032232  HLLE 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*032233  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032235  JUMPA	0,032236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032236 
----------

*032236  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032237  HRRE 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032240  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032242  JUMPA	0,032243

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032243 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*032243  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032244  HLLE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032245  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032247  JUMPA	0,032250

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032250 
----------

*032250  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032251  HRRE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*032252  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032254  JUMPA	0,032255

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032255 
----------

*032255  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032256  HRRE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*032257  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*032261  JUMPA	0,032262

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032262 
----------

*032262  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032263  HRREI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032264  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032266  JUMPA	0,032267

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032267 
----------

*032267  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*032270  HLLEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032271  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032273  JUMPA	0,032274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032274 
----------

*032274  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032275  HLLEI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 400000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*032276  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032300  JUMPA	0,032301

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032301 
----------

*032301  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032302  HRLE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032303  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*032305  JUMPA	0,032306

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032306 
----------

*032306  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032307  HRLEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032310  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032312  JUMPA	0,032313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032313 
----------

*032313  HRLE 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*032314  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032316  JUMPA	0,032317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032317 
----------

*032317  HRLE 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032320  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032322  JUMPA	0,032323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032323 
----------

*032323  HRLE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*032324  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032326  JUMPA	0,032327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032327 
----------

*032327  HRLE 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777 
----------

*032330  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032332  JUMPA	0,032333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032333 
----------

*032333  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*032334  HLRE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032335  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032337  JUMPA	0,032340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032340 
----------

*032340  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032341  HLRE 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*032342  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032344  JUMPA	0,032345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032345 
----------

*032345  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032346  HLREI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032347  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032351  JUMPA	0,032352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032352 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*032352  HLREI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032353  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032355  JUMPA	0,032356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032356 
----------

*032356  HLRE 	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777 
----------

*032357  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032361  JUMPA	0,032362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032362 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*032362  HLRE 	0,033733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032363  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032365  JUMPA	0,032366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032366 
----------

*032366  HLRE 	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032367  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032371  JUMPA	0,032372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032372 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*032372  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032373  MOVE 	1,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*032374  HLREM	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*032375  CAME	0,033730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032377  JUMPA	0,032400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032400 
----------

*032400  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*032401  MOVEI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*032402  HRLM	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
 C(E)= 777777 000000 
----------

*032403  CAME	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032405  JUMPA	0,032406

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032406 
----------

*032406  HRRZI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032407  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*032410  CAME	0,033735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*032412  JUMPA	0,032413

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 032413 
----------

*032413  HRRZI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032414  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000002 
----------

*032415  CAME	0,033736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
----------

*032417  JUMPA	0,032420

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 032420 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*032420  HRRZI	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032421  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000004 
----------

*032422  CAME	0,033737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
----------

*032424  JUMPA	0,032425

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 032425 
----------

*032425  HRRZI	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032426  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*032427  CAME	0,033740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
----------

*032431  JUMPA	0,032432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 032432 
----------

*032432  HRRZI	0,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*032433  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000020 
----------

*032434  CAME	0,033741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
----------

*032436  JUMPA	0,032437

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 032437 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*032437  HRRZI	0,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*032440  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000040 
----------

*032441  CAME	0,033742

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
----------

*032443  JUMPA	0,032444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 032444 
----------

*032444  HRRZI	0,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*032445  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*032446  CAME	0,033743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
----------

*032450  JUMPA	0,032451

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 032451 
----------

*032451  HRRZI	0,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*032452  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000200 
----------

*032453  CAME	0,033744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
----------

*032455  JUMPA	0,032456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 032456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*032456  HRRZI	0,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*032457  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000400 
----------

*032460  CAME	0,033745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
----------

*032462  JUMPA	0,032463

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 032463 
----------

*032463  HRRZI	0,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032464  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*032465  CAME	0,033746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
----------

*032467  JUMPA	0,032470

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 032470 
----------

*032470  HRRZI	0,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032471  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 002000 
----------

*032472  CAME	0,033747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
----------

*032474  JUMPA	0,032475

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 032475 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*032475  HRRZI	0,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*032476  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 004000 
----------

*032477  CAME	0,033750

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
----------

*032501  JUMPA	0,032502

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 032502 
----------

*032502  HRRZI	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*032503  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*032504  CAME	0,033751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
----------

*032506  JUMPA	0,032507

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 032507 
----------

*032507  HRRZI	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*032510  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 020000 
----------

*032511  CAME	0,033752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
----------

*032513  JUMPA	0,032514

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 032514 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*032514  HRRZI	0,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032515  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 040000 
----------

*032516  CAME	0,033753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
----------

*032520  JUMPA	0,032521

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 032521 
----------

*032521  HRRZI	0,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*032522  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*032523  CAME	0,033754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
----------

*032525  JUMPA	0,032526

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 032526 
----------

*032526  HRRZI	0,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*032527  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 200000 
----------

*032530  CAME	0,033755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
----------

*032532  JUMPA	0,032533

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 032533 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*032533  HRRZI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*032534  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 400000 
----------

*032535  CAME	0,033756

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
----------

*032537  JUMPA	0,032540

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 032540 
----------

*032540  HRLZI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

*032541  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*032542  CAME	0,033757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*032544  JUMPA	0,032545

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 032545 
----------

*032545  HRLZI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 000002 
FINAL
C(AC)= 000002 000000 
----------

*032546  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000002 000000 
----------

*032547  CAME	0,033760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
----------

*032551  JUMPA	0,032552

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 032552 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*032552  HRLZI	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 000004 
FINAL
C(AC)= 000004 000000 
----------

*032553  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000004 000000 
----------

*032554  CAME	0,033761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
----------

*032556  JUMPA	0,032557

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 032557 
----------

*032557  HRLZI	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 000010 
FINAL
C(AC)= 000010 000000 
----------

*032560  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*032561  CAME	0,033762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
----------

*032563  JUMPA	0,032564

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 032564 
----------

*032564  HRLZI	0,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 000020 
FINAL
C(AC)= 000020 000000 
----------

*032565  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000020 000000 
----------

*032566  CAME	0,033763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
----------

*032570  JUMPA	0,032571

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 032571 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*032571  HRLZI	0,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

*032572  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000040 000000 
----------

*032573  CAME	0,033764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
----------

*032575  JUMPA	0,032576

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 032576 
----------

*032576  HRLZI	0,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*032577  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*032600  CAME	0,033765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
----------

*032602  JUMPA	0,032603

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 032603 
----------

*032603  HRLZI	0,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 000200 
FINAL
C(AC)= 000200 000000 
----------

*032604  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000200 000000 
----------

*032605  CAME	0,033766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
----------

*032607  JUMPA	0,032610

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 032610 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*032610  HRLZI	0,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 000400 
FINAL
C(AC)= 000400 000000 
----------

*032611  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000400 000000 
----------

*032612  CAME	0,033767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
----------

*032614  JUMPA	0,032615

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 032615 
----------

*032615  HRLZI	0,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 001000 
FINAL
C(AC)= 001000 000000 
----------

*032616  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*032617  CAME	0,033770

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
----------

*032621  JUMPA	0,032622

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 032622 
----------

*032622  HRLZI	0,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 002000 
FINAL
C(AC)= 002000 000000 
----------

*032623  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 002000 000000 
----------

*032624  CAME	0,033771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
----------

*032626  JUMPA	0,032627

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 032627 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*032627  HRLZI	0,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 004000 
FINAL
C(AC)= 004000 000000 
----------

*032630  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032631  CAME	0,033772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
----------

*032633  JUMPA	0,032634

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 032634 
----------

*032634  HRLZI	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 010000 
FINAL
C(AC)= 010000 000000 
----------

*032635  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*032636  CAME	0,033773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
----------

*032640  JUMPA	0,032641

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 032641 
----------

*032641  HRLZI	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*032642  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 020000 000000 
----------

*032643  CAME	0,033774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
----------

*032645  JUMPA	0,032646

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 032646 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*032646  HRLZI	0,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*032647  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 040000 000000 
----------

*032650  CAME	0,033775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
----------

*032652  JUMPA	0,032653

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 032653 
----------

*032653  HRLZI	0,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*032654  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 100000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0340

*032655  CAME	0,033776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
----------

*032657  JUMPA	0,032660

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 032660 
----------

*032660  HRLZI	0,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*032661  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032662  CAME	0,033777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
----------

*032664  JUMPA	0,032665

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 032665 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0341

*032665  HRLZI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*032666  ADD 	0,033732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 400000 000000 
----------

*032667  CAME	0,034000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

*032671  JUMPA	0,032672

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 032672 
----------

*032672  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032673  ADD 	0,034001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0342

*032674  CAME	0,034001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*032676  JUMPA	0,032677

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776     E= 000000 032677 
----------

*032677  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
FINAL
C(AC)= 000000 000000 
----------

*032700  ADD 	0,034002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777775 
FINAL
C(AC)= 777777 777775 
----------

*032701  CAME	0,034002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
----------

*032703  JUMPA	0,032704

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775     E= 000000 032704 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0343

*032704  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
FINAL
C(AC)= 000000 000000 
----------

*032705  ADD 	0,034003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777773 
FINAL
C(AC)= 777777 777773 
----------

*032706  CAME	0,034003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773  C(E)= 777777 777773 
----------

*032710  JUMPA	0,032711

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773     E= 000000 032711 
----------

*032711  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773  C(E)= 777777 777773 
FINAL
C(AC)= 000000 000000 
----------

*032712  ADD 	0,034004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777767 
FINAL
C(AC)= 777777 777767 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0344

*032713  CAME	0,034004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777767  C(E)= 777777 777767 
----------

*032715  JUMPA	0,032716

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777767     E= 000000 032716 
----------

*032716  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777767  C(E)= 777777 777767 
FINAL
C(AC)= 000000 000000 
----------

*032717  ADD 	0,034005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777757 
FINAL
C(AC)= 777777 777757 
----------

*032720  CAME	0,034005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777757  C(E)= 777777 777757 
----------

*032722  JUMPA	0,032723

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777757     E= 000000 032723 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0345

*032723  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777757  C(E)= 777777 777757 
FINAL
C(AC)= 000000 000000 
----------

*032724  ADD 	0,034006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777737 
FINAL
C(AC)= 777777 777737 
----------

*032725  CAME	0,034006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777737  C(E)= 777777 777737 
----------

*032727  JUMPA	0,032730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777737     E= 000000 032730 
----------

*032730  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777737  C(E)= 777777 777737 
FINAL
C(AC)= 000000 000000 
----------

*032731  ADD 	0,034007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777677 
FINAL
C(AC)= 777777 777677 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0346

*032732  CAME	0,034007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777677  C(E)= 777777 777677 
----------

*032734  JUMPA	0,032735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777677     E= 000000 032735 
----------

*032735  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777677  C(E)= 777777 777677 
FINAL
C(AC)= 000000 000000 
----------

*032736  ADD 	0,034010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777577 
FINAL
C(AC)= 777777 777577 
----------

*032737  CAME	0,034010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777577  C(E)= 777777 777577 
----------

*032741  JUMPA	0,032742

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777577     E= 000000 032742 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0347

*032742  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777577  C(E)= 777777 777577 
FINAL
C(AC)= 000000 000000 
----------

*032743  ADD 	0,034011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777377 
FINAL
C(AC)= 777777 777377 
----------

*032744  CAME	0,034011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777377  C(E)= 777777 777377 
----------

*032746  JUMPA	0,032747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777377     E= 000000 032747 
----------

*032747  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777377  C(E)= 777777 777377 
FINAL
C(AC)= 000000 000000 
----------

*032750  ADD 	0,034012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 776777 
FINAL
C(AC)= 777777 776777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0348

*032751  CAME	0,034012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777  C(E)= 777777 776777 
----------

*032753  JUMPA	0,032754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777     E= 000000 032754 
----------

*032754  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777  C(E)= 777777 776777 
FINAL
C(AC)= 000000 000000 
----------

*032755  ADD 	0,034013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 775777 
FINAL
C(AC)= 777777 775777 
----------

*032756  CAME	0,034013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 775777  C(E)= 777777 775777 
----------

*032760  JUMPA	0,032761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 775777     E= 000000 032761 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0349

*032761  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 775777  C(E)= 777777 775777 
FINAL
C(AC)= 000000 000000 
----------

*032762  ADD 	0,034014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 773777 
FINAL
C(AC)= 777777 773777 
----------

*032763  CAME	0,034014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 773777  C(E)= 777777 773777 
----------

*032765  JUMPA	0,032766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 773777     E= 000000 032766 
----------

*032766  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 773777  C(E)= 777777 773777 
FINAL
C(AC)= 000000 000000 
----------

*032767  ADD 	0,034015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 767777 
FINAL
C(AC)= 777777 767777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0350

*032770  CAME	0,034015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 767777  C(E)= 777777 767777 
----------

*032772  JUMPA	0,032773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 767777     E= 000000 032773 
----------

*032773  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 767777  C(E)= 777777 767777 
FINAL
C(AC)= 000000 000000 
----------

*032774  ADD 	0,034016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 757777 
FINAL
C(AC)= 777777 757777 
----------

*032775  CAME	0,034016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 757777  C(E)= 777777 757777 
----------

*032777  JUMPA	0,033000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 757777     E= 000000 033000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0351

*033000  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 757777  C(E)= 777777 757777 
FINAL
C(AC)= 000000 000000 
----------

*033001  ADD 	0,034017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 737777 
FINAL
C(AC)= 777777 737777 
----------

*033002  CAME	0,034017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 737777  C(E)= 777777 737777 
----------

*033004  JUMPA	0,033005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 737777     E= 000000 033005 
----------

*033005  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 737777  C(E)= 777777 737777 
FINAL
C(AC)= 000000 000000 
----------

*033006  ADD 	0,034020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 677777 
FINAL
C(AC)= 777777 677777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0352

*033007  CAME	0,034020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 677777  C(E)= 777777 677777 
----------

*033011  JUMPA	0,033012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 677777     E= 000000 033012 
----------

*033012  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 677777  C(E)= 777777 677777 
FINAL
C(AC)= 000000 000000 
----------

*033013  ADD 	0,034021

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 577777 
FINAL
C(AC)= 777777 577777 
----------

*033014  CAME	0,034021

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 577777  C(E)= 777777 577777 
----------

*033016  JUMPA	0,033017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 577777     E= 000000 033017 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0353

*033017  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 577777  C(E)= 777777 577777 
FINAL
C(AC)= 000000 000000 
----------

*033020  ADD 	0,034022

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 377777 
FINAL
C(AC)= 777777 377777 
----------

*033021  CAME	0,034022

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 377777  C(E)= 777777 377777 
----------

*033023  JUMPA	0,033024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 377777     E= 000000 033024 
----------

*033024  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 377777  C(E)= 777777 377777 
FINAL
C(AC)= 000000 000000 
----------

*033025  ADD 	0,034023

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777776 777777 
FINAL
C(AC)= 777776 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0354

*033026  CAME	0,034023

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777  C(E)= 777776 777777 
----------

*033030  JUMPA	0,033031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777     E= 000000 033031 
----------

*033031  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777  C(E)= 777776 777777 
FINAL
C(AC)= 000000 000000 
----------

*033032  ADD 	0,034024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777775 777777 
FINAL
C(AC)= 777775 777777 
----------

*033033  CAME	0,034024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777775 777777  C(E)= 777775 777777 
----------

*033035  JUMPA	0,033036

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777775 777777     E= 000000 033036 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0355

*033036  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777775 777777  C(E)= 777775 777777 
FINAL
C(AC)= 000000 000000 
----------

*033037  ADD 	0,034025

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777773 777777 
FINAL
C(AC)= 777773 777777 
----------

*033040  CAME	0,034025

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777773 777777  C(E)= 777773 777777 
----------

*033042  JUMPA	0,033043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777773 777777     E= 000000 033043 
----------

*033043  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777773 777777  C(E)= 777773 777777 
FINAL
C(AC)= 000000 000000 
----------

*033044  ADD 	0,034026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777767 777777 
FINAL
C(AC)= 777767 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0356

*033045  CAME	0,034026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777767 777777  C(E)= 777767 777777 
----------

*033047  JUMPA	0,033050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777767 777777     E= 000000 033050 
----------

*033050  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777767 777777  C(E)= 777767 777777 
FINAL
C(AC)= 000000 000000 
----------

*033051  ADD 	0,034027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777757 777777 
FINAL
C(AC)= 777757 777777 
----------

*033052  CAME	0,034027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777757 777777  C(E)= 777757 777777 
----------

*033054  JUMPA	0,033055

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777757 777777     E= 000000 033055 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0357

*033055  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777757 777777  C(E)= 777757 777777 
FINAL
C(AC)= 000000 000000 
----------

*033056  ADD 	0,034030

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777737 777777 
FINAL
C(AC)= 777737 777777 
----------

*033057  CAME	0,034030

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777737 777777  C(E)= 777737 777777 
----------

*033061  JUMPA	0,033062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777737 777777     E= 000000 033062 
----------

*033062  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777737 777777  C(E)= 777737 777777 
FINAL
C(AC)= 000000 000000 
----------

*033063  ADD 	0,034031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777677 777777 
FINAL
C(AC)= 777677 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0358

*033064  CAME	0,034031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777677 777777  C(E)= 777677 777777 
----------

*033066  JUMPA	0,033067

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777677 777777     E= 000000 033067 
----------

*033067  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777677 777777  C(E)= 777677 777777 
FINAL
C(AC)= 000000 000000 
----------

*033070  ADD 	0,034032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777577 777777 
FINAL
C(AC)= 777577 777777 
----------

*033071  CAME	0,034032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777577 777777  C(E)= 777577 777777 
----------

*033073  JUMPA	0,033074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777577 777777     E= 000000 033074 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0359

*033074  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777577 777777  C(E)= 777577 777777 
FINAL
C(AC)= 000000 000000 
----------

*033075  ADD 	0,034033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777377 777777 
FINAL
C(AC)= 777377 777777 
----------

*033076  CAME	0,034033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777377 777777  C(E)= 777377 777777 
----------

*033100  JUMPA	0,033101

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777377 777777     E= 000000 033101 
----------

*033101  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777377 777777  C(E)= 777377 777777 
FINAL
C(AC)= 000000 000000 
----------

*033102  ADD 	0,034034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 776777 777777 
FINAL
C(AC)= 776777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0360

*033103  CAME	0,034034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776777 777777  C(E)= 776777 777777 
----------

*033105  JUMPA	0,033106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776777 777777     E= 000000 033106 
----------

*033106  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776777 777777  C(E)= 776777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033107  ADD 	0,034035

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 775777 777777 
FINAL
C(AC)= 775777 777777 
----------

*033110  CAME	0,034035

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 775777 777777  C(E)= 775777 777777 
----------

*033112  JUMPA	0,033113

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 775777 777777     E= 000000 033113 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0361

*033113  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 775777 777777  C(E)= 775777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033114  ADD 	0,034036

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 773777 777777 
FINAL
C(AC)= 773777 777777 
----------

*033115  CAME	0,034036

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 773777 777777  C(E)= 773777 777777 
----------

*033117  JUMPA	0,033120

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 773777 777777     E= 000000 033120 
----------

*033120  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 773777 777777  C(E)= 773777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033121  ADD 	0,034037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 767777 777777 
FINAL
C(AC)= 767777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0362

*033122  CAME	0,034037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 767777 777777  C(E)= 767777 777777 
----------

*033124  JUMPA	0,033125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 767777 777777     E= 000000 033125 
----------

*033125  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 767777 777777  C(E)= 767777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033126  ADD 	0,034040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 757777 777777 
FINAL
C(AC)= 757777 777777 
----------

*033127  CAME	0,034040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 757777 777777  C(E)= 757777 777777 
----------

*033131  JUMPA	0,033132

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 757777 777777     E= 000000 033132 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0363

*033132  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 757777 777777  C(E)= 757777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033133  ADD 	0,034041

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 737777 777777 
FINAL
C(AC)= 737777 777777 
----------

*033134  CAME	0,034041

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 737777 777777  C(E)= 737777 777777 
----------

*033136  JUMPA	0,033137

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 737777 777777     E= 000000 033137 
----------

*033137  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 737777 777777  C(E)= 737777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033140  ADD 	0,034042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 677777 777777 
FINAL
C(AC)= 677777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0364

*033141  CAME	0,034042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777  C(E)= 677777 777777 
----------

*033143  JUMPA	0,033144

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777     E= 000000 033144 
----------

*033144  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777  C(E)= 677777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033145  ADD 	0,034043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 577777 777777 
FINAL
C(AC)= 577777 777777 
----------

*033146  CAME	0,034043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 577777 777777  C(E)= 577777 777777 
----------

*033150  JUMPA	0,033151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 577777 777777     E= 000000 033151 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0365

*033151  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 577777 777777  C(E)= 577777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033152  ADD 	0,034044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033153  CAME	0,034044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
----------

*033155  JUMPA	0,033156

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033156 
----------

*033156  HRRZI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033157  ADD 	0,033735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0366

*033160  CAME	0,033736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
----------

*033162  JUMPA	0,033163

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 033163 
----------

*033163  HRRZI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033164  ADD 	0,033736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000004 
----------

*033165  CAME	0,033737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
----------

*033167  JUMPA	0,033170

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 033170 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0367

*033170  HRRZI	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*033171  ADD 	0,033737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000010 
----------

*033172  CAME	0,033740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
----------

*033174  JUMPA	0,033175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 033175 
----------

*033175  HRRZI	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033176  ADD 	0,033740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0368

*033177  CAME	0,033741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
----------

*033201  JUMPA	0,033202

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 033202 
----------

*033202  HRRZI	0,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*033203  ADD 	0,033741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000040 
----------

*033204  CAME	0,033742

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
----------

*033206  JUMPA	0,033207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 033207 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0369

*033207  HRRZI	0,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033210  ADD 	0,033742

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000100 
----------

*033211  CAME	0,033743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
----------

*033213  JUMPA	0,033214

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 033214 
----------

*033214  HRRZI	0,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*033215  ADD 	0,033743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0370

*033216  CAME	0,033744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
----------

*033220  JUMPA	0,033221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 033221 
----------

*033221  HRRZI	0,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*033222  ADD 	0,033744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000400 
----------

*033223  CAME	0,033745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
----------

*033225  JUMPA	0,033226

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 033226 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0371

*033226  HRRZI	0,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*033227  ADD 	0,033745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 001000 
----------

*033230  CAME	0,033746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
----------

*033232  JUMPA	0,033233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 033233 
----------

*033233  HRRZI	0,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033234  ADD 	0,033746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0372

*033235  CAME	0,033747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
----------

*033237  JUMPA	0,033240

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 033240 
----------

*033240  HRRZI	0,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*033241  ADD 	0,033747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 004000 
----------

*033242  CAME	0,033750

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
----------

*033244  JUMPA	0,033245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 033245 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0373

*033245  HRRZI	0,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033246  ADD 	0,033750

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 010000 
----------

*033247  CAME	0,033751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
----------

*033251  JUMPA	0,033252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 033252 
----------

*033252  HRRZI	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033253  ADD 	0,033751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 178
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0374

*033254  CAME	0,033752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
----------

*033256  JUMPA	0,033257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 033257 
----------

*033257  HRRZI	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033260  ADD 	0,033752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 040000 
----------

*033261  CAME	0,033753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
----------

*033263  JUMPA	0,033264

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 033264 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 179
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0375

*033264  HRRZI	0,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*033265  ADD 	0,033753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 100000 
----------

*033266  CAME	0,033754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
----------

*033270  JUMPA	0,033271

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 033271 
----------

*033271  HRRZI	0,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033272  ADD 	0,033754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 180
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0376

*033273  CAME	0,033755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
----------

*033275  JUMPA	0,033276

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 033276 
----------

*033276  HRRZI	0,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*033277  ADD 	0,033755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 400000 
----------

*033300  CAME	0,033756

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
----------

*033302  JUMPA	0,033303

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 033303 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 181
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0377

*033303  HRRZI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033304  ADD 	0,033756

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000001 000000 
----------

*033305  CAME	0,033757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*033307  JUMPA	0,033310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 033310 
----------

*033310  HRLZI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

*033311  ADD 	0,033757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 182
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0378

*033312  CAME	0,033760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
----------

*033314  JUMPA	0,033315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 033315 
----------

*033315  HRLZI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 000002 
FINAL
C(AC)= 000002 000000 
----------

*033316  ADD 	0,033760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000004 000000 
----------

*033317  CAME	0,033761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
----------

*033321  JUMPA	0,033322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 033322 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 183
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0379

*033322  HRLZI	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 000004 
FINAL
C(AC)= 000004 000000 
----------

*033323  ADD 	0,033761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000010 000000 
----------

*033324  CAME	0,033762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
----------

*033326  JUMPA	0,033327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 033327 
----------

*033327  HRLZI	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 000010 
FINAL
C(AC)= 000010 000000 
----------

*033330  ADD 	0,033762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 184
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0380

*033331  CAME	0,033763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
----------

*033333  JUMPA	0,033334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 033334 
----------

*033334  HRLZI	0,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 000020 
FINAL
C(AC)= 000020 000000 
----------

*033335  ADD 	0,033763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000040 000000 
----------

*033336  CAME	0,033764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
----------

*033340  JUMPA	0,033341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 033341 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 185
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0381

*033341  HRLZI	0,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

*033342  ADD 	0,033764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000100 000000 
----------

*033343  CAME	0,033765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
----------

*033345  JUMPA	0,033346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 033346 
----------

*033346  HRLZI	0,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*033347  ADD 	0,033765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 186
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0382

*033350  CAME	0,033766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
----------

*033352  JUMPA	0,033353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 033353 
----------

*033353  HRLZI	0,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 000200 
FINAL
C(AC)= 000200 000000 
----------

*033354  ADD 	0,033766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000400 000000 
----------

*033355  CAME	0,033767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
----------

*033357  JUMPA	0,033360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 033360 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 187
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0383

*033360  HRLZI	0,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 000400 
FINAL
C(AC)= 000400 000000 
----------

*033361  ADD 	0,033767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 001000 000000 
----------

*033362  CAME	0,033770

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
----------

*033364  JUMPA	0,033365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 033365 
----------

*033365  HRLZI	0,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 001000 
FINAL
C(AC)= 001000 000000 
----------

*033366  ADD 	0,033770

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 188
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0384

*033367  CAME	0,033771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
----------

*033371  JUMPA	0,033372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 033372 
----------

*033372  HRLZI	0,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 002000 
FINAL
C(AC)= 002000 000000 
----------

*033373  ADD 	0,033771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033374  CAME	0,033772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
----------

*033376  JUMPA	0,033377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 033377 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 189
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0385

*033377  HRLZI	0,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 004000 
FINAL
C(AC)= 004000 000000 
----------

*033400  ADD 	0,033772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033401  CAME	0,033773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
----------

*033403  JUMPA	0,033404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 033404 
----------

*033404  HRLZI	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 010000 
FINAL
C(AC)= 010000 000000 
----------

*033405  ADD 	0,033773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 190
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0386

*033406  CAME	0,033774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
----------

*033410  JUMPA	0,033411

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 033411 
----------

*033411  HRLZI	0,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*033412  ADD 	0,033774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033413  CAME	0,033775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
----------

*033415  JUMPA	0,033416

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 033416 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 191
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0387

*033416  HRLZI	0,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*033417  ADD 	0,033775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033420  CAME	0,033776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
----------

*033422  JUMPA	0,033423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 033423 
----------

*033423  HRLZI	0,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*033424  ADD 	0,033776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 192
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0388

*033425  CAME	0,033777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
----------

*033427  JUMPA	0,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 033430 
----------

*033430  HRLZI	0,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*033431  ADD 	0,033777

FLAGS - INT/FINAL   000000 500200 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033432  CAME	0,034000

FLAGS - INT/FINAL   500200 500200 
INITIAL
C(AC)= 400000 000000 
----------

*033432  JFCL	0,000000

FLAGS - INT/FINAL   500200 500000 
INITIAL
    E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 193
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0389

*033432  CAME	0,034000

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

*033434  JUMPA	0,033435

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 400000 000000     E= 000000 033435 
----------

*033435  HRLZI	0,400000

FLAGS - INT/FINAL   500000 500000 
INITIAL
C(AC)= 400000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*033436  ADD 	0,034000

FLAGS - INT/FINAL   500000 700200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033437  CAME	0,033732

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 000000 000000 
----------

*033437  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 194
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0390

*033437  CAME	0,033732

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033441  JUMPA	0,033442

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 033442 
----------

*033442  HRROI	0,777776

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 000000 000000     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*033443  ADD 	0,034001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777774 
----------

*033444  CAME	0,034045

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777774  C(E)= 777777 777774 
----------

*033446  JUMPA	0,033447

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777774     E= 000000 033447 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 195
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0391

*033447  HRROI	0,777775

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777774     E= 000000 777775 
FINAL
C(AC)= 777777 777775 
----------

*033450  ADD 	0,034002

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
FINAL
C(AC)= 777777 777772 
----------

*033451  CAME	0,034046

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777772  C(E)= 777777 777772 
----------

*033453  JUMPA	0,033454

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777772     E= 000000 033454 
----------

*033454  HRROI	0,777773

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777772     E= 000000 777773 
FINAL
C(AC)= 777777 777773 
----------

*033455  ADD 	0,034003

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777773  C(E)= 777777 777773 
FINAL
C(AC)= 777777 777766 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 196
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0392

*033456  CAME	0,034047

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777766  C(E)= 777777 777766 
----------

*033460  JUMPA	0,033461

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777766     E= 000000 033461 
----------

*033461  HRROI	0,777767

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777766     E= 000000 777767 
FINAL
C(AC)= 777777 777767 
----------

*033462  ADD 	0,034004

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777767  C(E)= 777777 777767 
FINAL
C(AC)= 777777 777756 
----------

*033463  CAME	0,034050

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777756  C(E)= 777777 777756 
----------

*033465  JUMPA	0,033466

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777756     E= 000000 033466 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 197
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0393

*033466  HRROI	0,777757

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777756     E= 000000 777757 
FINAL
C(AC)= 777777 777757 
----------

*033467  ADD 	0,034005

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777757  C(E)= 777777 777757 
FINAL
C(AC)= 777777 777736 
----------

*033470  CAME	0,034051

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777736  C(E)= 777777 777736 
----------

*033472  JUMPA	0,033473

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777736     E= 000000 033473 
----------

*033473  HRROI	0,777737

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777736     E= 000000 777737 
FINAL
C(AC)= 777777 777737 
----------

*033474  ADD 	0,034006

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777737  C(E)= 777777 777737 
FINAL
C(AC)= 777777 777676 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 198
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0394

*033475  CAME	0,034052

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777676  C(E)= 777777 777676 
----------

*033477  JUMPA	0,033500

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777676     E= 000000 033500 
----------

*033500  HRROI	0,777677

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777676     E= 000000 777677 
FINAL
C(AC)= 777777 777677 
----------

*033501  ADD 	0,034007

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777677  C(E)= 777777 777677 
FINAL
C(AC)= 777777 777576 
----------

*033502  CAME	0,034053

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777576  C(E)= 777777 777576 
----------

*033504  JUMPA	0,033505

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777576     E= 000000 033505 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 199
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0395

*033505  HRROI	0,777577

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777576     E= 000000 777577 
FINAL
C(AC)= 777777 777577 
----------

*033506  ADD 	0,034010

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777577  C(E)= 777777 777577 
FINAL
C(AC)= 777777 777376 
----------

*033507  CAME	0,034054

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777376  C(E)= 777777 777376 
----------

*033511  JUMPA	0,033512

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777376     E= 000000 033512 
----------

*033512  HRROI	0,777377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777376     E= 000000 777377 
FINAL
C(AC)= 777777 777377 
----------

*033513  ADD 	0,034011

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777377  C(E)= 777777 777377 
FINAL
C(AC)= 777777 776776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 200
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0396

*033514  CAME	0,034055

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776776  C(E)= 777777 776776 
----------

*033516  JUMPA	0,033517

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776776     E= 000000 033517 
----------

*033517  HRROI	0,776777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776776     E= 000000 776777 
FINAL
C(AC)= 777777 776777 
----------

*033520  ADD 	0,034012

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 776777  C(E)= 777777 776777 
FINAL
C(AC)= 777777 775776 
----------

*033521  CAME	0,034056

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 775776  C(E)= 777777 775776 
----------

*033523  JUMPA	0,033524

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 775776     E= 000000 033524 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 201
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0397

*033524  HRROI	0,775777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 775776     E= 000000 775777 
FINAL
C(AC)= 777777 775777 
----------

*033525  ADD 	0,034013

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 775777  C(E)= 777777 775777 
FINAL
C(AC)= 777777 773776 
----------

*033526  CAME	0,034057

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 773776  C(E)= 777777 773776 
----------

*033530  JUMPA	0,033531

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 773776     E= 000000 033531 
----------

*033531  HRROI	0,773777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 773776     E= 000000 773777 
FINAL
C(AC)= 777777 773777 
----------

*033532  ADD 	0,034014

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 773777  C(E)= 777777 773777 
FINAL
C(AC)= 777777 767776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 202
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0398

*033533  CAME	0,034060

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 767776  C(E)= 777777 767776 
----------

*033535  JUMPA	0,033536

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 767776     E= 000000 033536 
----------

*033536  HRROI	0,767777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 767776     E= 000000 767777 
FINAL
C(AC)= 777777 767777 
----------

*033537  ADD 	0,034015

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 767777  C(E)= 777777 767777 
FINAL
C(AC)= 777777 757776 
----------

*033540  CAME	0,034061

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 757776  C(E)= 777777 757776 
----------

*033542  JUMPA	0,033543

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 757776     E= 000000 033543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 203
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0399

*033543  HRROI	0,757777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 757776     E= 000000 757777 
FINAL
C(AC)= 777777 757777 
----------

*033544  ADD 	0,034016

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 757777  C(E)= 777777 757777 
FINAL
C(AC)= 777777 737776 
----------

*033545  CAME	0,034062

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 737776  C(E)= 777777 737776 
----------

*033547  JUMPA	0,033550

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 737776     E= 000000 033550 
----------

*033550  HRROI	0,737777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 737776     E= 000000 737777 
FINAL
C(AC)= 777777 737777 
----------

*033551  ADD 	0,034017

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 737777  C(E)= 777777 737777 
FINAL
C(AC)= 777777 677776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 204
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0400

*033552  CAME	0,034063

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 677776  C(E)= 777777 677776 
----------

*033554  JUMPA	0,033555

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 677776     E= 000000 033555 
----------

*033555  HRROI	0,677777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 677776     E= 000000 677777 
FINAL
C(AC)= 777777 677777 
----------

*033556  ADD 	0,034020

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 677777  C(E)= 777777 677777 
FINAL
C(AC)= 777777 577776 
----------

*033557  CAME	0,034064

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 577776  C(E)= 777777 577776 
----------

*033561  JUMPA	0,033562

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 577776     E= 000000 033562 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 205
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0401

*033562  HRROI	0,577777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 577776     E= 000000 577777 
FINAL
C(AC)= 777777 577777 
----------

*033563  ADD 	0,034021

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 577777  C(E)= 777777 577777 
FINAL
C(AC)= 777777 377776 
----------

*033564  CAME	0,034065

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 377776  C(E)= 777777 377776 
----------

*033566  JUMPA	0,033567

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 377776     E= 000000 033567 
----------

*033567  HRROI	0,377777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 377776     E= 000000 377777 
FINAL
C(AC)= 777777 377777 
----------

*033570  ADD 	0,034022

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 377777  C(E)= 777777 377777 
FINAL
C(AC)= 777776 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 206
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0402

*033571  CAME	0,034066

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776  C(E)= 777776 777776 
----------

*033573  JUMPA	0,033574

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776     E= 000000 033574 
----------

*033574  HRLOI	0,777776

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777776     E= 000000 777776 
FINAL
C(AC)= 777776 777777 
----------

*033575  ADD 	0,034023

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777776 777777  C(E)= 777776 777777 
FINAL
C(AC)= 777775 777776 
----------

*033576  CAME	0,034067

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777776  C(E)= 777775 777776 
----------

*033600  JUMPA	0,033601

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777776     E= 000000 033601 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 207
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0403

*033601  HRLOI	0,777775

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777776     E= 000000 777775 
FINAL
C(AC)= 777775 777777 
----------

*033602  ADD 	0,034024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777775 777777  C(E)= 777775 777777 
FINAL
C(AC)= 777773 777776 
----------

*033603  CAME	0,034070

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777776  C(E)= 777773 777776 
----------

*033605  JUMPA	0,033606

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777776     E= 000000 033606 
----------

*033606  HRLOI	0,777773

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777776     E= 000000 777773 
FINAL
C(AC)= 777773 777777 
----------

*033607  ADD 	0,034025

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777773 777777  C(E)= 777773 777777 
FINAL
C(AC)= 777767 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 208
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0404

*033610  CAME	0,034071

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777776  C(E)= 777767 777776 
----------

*033612  JUMPA	0,033613

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777776     E= 000000 033613 
----------

*033613  HRLOI	0,777767

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777776     E= 000000 777767 
FINAL
C(AC)= 777767 777777 
----------

*033614  ADD 	0,034026

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777767 777777  C(E)= 777767 777777 
FINAL
C(AC)= 777757 777776 
----------

*033615  CAME	0,034072

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777776  C(E)= 777757 777776 
----------

*033617  JUMPA	0,033620

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777776     E= 000000 033620 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 209
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0405

*033620  HRLOI	0,777757

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777776     E= 000000 777757 
FINAL
C(AC)= 777757 777777 
----------

*033621  ADD 	0,034027

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777757 777777  C(E)= 777757 777777 
FINAL
C(AC)= 777737 777776 
----------

*033622  CAME	0,034073

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777776  C(E)= 777737 777776 
----------

*033624  JUMPA	0,033625

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777776     E= 000000 033625 
----------

*033625  HRLOI	0,777737

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777776     E= 000000 777737 
FINAL
C(AC)= 777737 777777 
----------

*033626  ADD 	0,034030

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777737 777777  C(E)= 777737 777777 
FINAL
C(AC)= 777677 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 210
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0406

*033627  CAME	0,034074

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777776  C(E)= 777677 777776 
----------

*033631  JUMPA	0,033632

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777776     E= 000000 033632 
----------

*033632  HRLOI	0,777677

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777776     E= 000000 777677 
FINAL
C(AC)= 777677 777777 
----------

*033633  ADD 	0,034031

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777677 777777  C(E)= 777677 777777 
FINAL
C(AC)= 777577 777776 
----------

*033634  CAME	0,034075

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777776  C(E)= 777577 777776 
----------

*033636  JUMPA	0,033637

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777776     E= 000000 033637 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 211
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0407

*033637  HRLOI	0,777577

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777776     E= 000000 777577 
FINAL
C(AC)= 777577 777777 
----------

*033640  ADD 	0,034032

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777577 777777  C(E)= 777577 777777 
FINAL
C(AC)= 777377 777776 
----------

*033641  CAME	0,034076

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777776  C(E)= 777377 777776 
----------

*033643  JUMPA	0,033644

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777776     E= 000000 033644 
----------

*033644  HRLOI	0,777377

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777776     E= 000000 777377 
FINAL
C(AC)= 777377 777777 
----------

*033645  ADD 	0,034033

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777377 777777  C(E)= 777377 777777 
FINAL
C(AC)= 776777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 212
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0408

*033646  CAME	0,034077

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 777776  C(E)= 776777 777776 
----------

*033650  JUMPA	0,033651

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 777776     E= 000000 033651 
----------

*033651  HRLOI	0,776777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 777776     E= 000000 776777 
FINAL
C(AC)= 776777 777777 
----------

*033652  ADD 	0,034034

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 776777 777777  C(E)= 776777 777777 
FINAL
C(AC)= 775777 777776 
----------

*033653  CAME	0,034100

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 777776  C(E)= 775777 777776 
----------

*033655  JUMPA	0,033656

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 777776     E= 000000 033656 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 213
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0409

*033656  HRLOI	0,775777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 777776     E= 000000 775777 
FINAL
C(AC)= 775777 777777 
----------

*033657  ADD 	0,034035

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 775777 777777  C(E)= 775777 777777 
FINAL
C(AC)= 773777 777776 
----------

*033660  CAME	0,034101

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 777776  C(E)= 773777 777776 
----------

*033662  JUMPA	0,033663

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 777776     E= 000000 033663 
----------

*033663  HRLOI	0,773777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 777776     E= 000000 773777 
FINAL
C(AC)= 773777 777777 
----------

*033664  ADD 	0,034036

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 773777 777777  C(E)= 773777 777777 
FINAL
C(AC)= 767777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 214
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0410

*033665  CAME	0,034102

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 777776  C(E)= 767777 777776 
----------

*033667  JUMPA	0,033670

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 777776     E= 000000 033670 
----------

*033670  HRLOI	0,767777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 777776     E= 000000 767777 
FINAL
C(AC)= 767777 777777 
----------

*033671  ADD 	0,034037

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 767777 777777  C(E)= 767777 777777 
FINAL
C(AC)= 757777 777776 
----------

*033672  CAME	0,034103

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 777776  C(E)= 757777 777776 
----------

*033674  JUMPA	0,033675

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 777776     E= 000000 033675 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 215
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0411

*033675  HRLOI	0,757777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 777776     E= 000000 757777 
FINAL
C(AC)= 757777 777777 
----------

*033676  ADD 	0,034040

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 757777 777777  C(E)= 757777 777777 
FINAL
C(AC)= 737777 777776 
----------

*033677  CAME	0,034104

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 777776  C(E)= 737777 777776 
----------

*033701  JUMPA	0,033702

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 777776     E= 000000 033702 
----------

*033702  HRLOI	0,737777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 777776     E= 000000 737777 
FINAL
C(AC)= 737777 777777 
----------

*033703  ADD 	0,034041

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 737777 777777  C(E)= 737777 777777 
FINAL
C(AC)= 677777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 216
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0412

*033704  CAME	0,034105

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 777776  C(E)= 677777 777776 
----------

*033706  JUMPA	0,033707

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 777776     E= 000000 033707 
----------

*033707  HRLOI	0,677777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 777776     E= 000000 677777 
FINAL
C(AC)= 677777 777777 
----------

*033710  ADD 	0,034042

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 677777 777777  C(E)= 677777 777777 
FINAL
C(AC)= 577777 777776 
----------

*033711  CAME	0,034106

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 777776  C(E)= 577777 777776 
----------

*033713  JUMPA	0,033714

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 777776     E= 000000 033714 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 217
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0413

*033714  HRLOI	0,577777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 577777 777776     E= 000000 577777 
FINAL
C(AC)= 577777 777777 
----------

*033715  ADD 	0,034043

FLAGS - INT/FINAL   700000 700200 
INITIAL
C(AC)= 577777 777777  C(E)= 577777 777777 
FINAL
C(AC)= 377777 777776 
----------

*033716  CAME	0,034107

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 377777 777776 
----------

*033716  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

*033716  CAME	0,034107

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777776  C(E)= 377777 777776 
----------

*033720  JUMPA	0,033721

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777776     E= 000000 033721 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 218
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0414

*033721  HRLOI	0,377777

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 377777 777776     E= 000000 377777 
FINAL
C(AC)= 377777 777777 
----------

*033722  ADD 	0,034044

FLAGS - INT/FINAL   700000 700200 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 777777 777776 
----------

*033723  CAME	0,034001

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 777777 777776 
----------

*033723  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

*033723  CAME	0,034001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*033725  JUMPA	0,033726

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776     E= 000000 033726 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 219
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0415

*033726  SETZM	0,034111

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*033727  JRST	0,030057

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777776  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777776  C(E)= 000000 000000 
----------

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 220
DSKAC	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0416

*030616  JRST	0,030624

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777776 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777776 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 431110 
----------

