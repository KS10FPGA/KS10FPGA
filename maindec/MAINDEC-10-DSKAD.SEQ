;DSKAD







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E303A-DD

	DIAGNOSTIC CODE:	DSKAD

	PRODUCT NAME:	 	DSKADA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (4)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAD.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAD.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE FOURTH IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS REGISTER ADDRESSING, JFCL,
	AR FLAGS, ASO, SOS, JRST, AOBJX, JSP, XCT, INDIRECT AND
	INDEXED ADDRESSING.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAD.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAD.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAD                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAD

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (4)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
DSKADT	MAC	28-Mar-78 13:50		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAD
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 2
DSKADT	MAC	28-Mar-78 13:50		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 3
DSKADT	MAC	28-Mar-78 13:50		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414400		PAREA3=SIXBIT/DSKAD/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414400		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
DSKAD1	MAC	28-Mar-78 13:50		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) [DSKAD]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 064 051 040 
   798	030656	133 104 123 113 101 
   799	030657	104 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (4)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0029

   807					SUBTTL	TEST OF AC HARDWARE AND INDEX REGISTERS
   808
   809					;NOTE:	AN "*" IN THE COMMENT FIELD OF AN INSTRUCTION INDICATES THAT
   810					;	IT IS THE TESTED INSTRUCTION.
   811
   812
   813					;**********
   814
   815					;THIS TEST VERIFIES THAT AC1 IS ACCESSABLE
   816					;IN THIS CASE, AC1 IS PRELOADED WITH 1.
   817					;C(AC1) IS THEN CHECKED FOR A1.  THIS TEST PASSES IF C(AC1)=1.
   818					;IF THIS TEST FAILS, THE AC HARDWARE IS PROBABLY FAULTY
   819
   820	030661	400 00 0 00 000000 	C100:	SETZ			;CLEAR AC0
   821	030662	201 01 0 00 000001 		MOVEI	1,1		;PRELOAD AC1 UMTH 1
   822	030663	302 01 0 00 000001 		CAIE	1,1		;PASS IF C(AC1)=1
   823						STOP^
   824	030664	254 04 0 00 030665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   825	030665	324 00 0 00 030666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   826									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   827									;IN THE SUBTEST) TO LOOP ON ERROR^
   828
   829					;**********
   830
   831					;THIS TEST VERIFIES THAT AC2 IS ACCESSABLE.
   832					;IN THIS CASE, AC2 IS PRELOADED WITH 2.
   833					;C(AC2) IS THEN CHECKED FOR 2.  THIS TEST PASSES IF C(AC2)=2.
   834					;IF THIS TEST FAILS, THE AC HARDWARE IS PROBABLY FAULTY
   835
   836	030666	201 02 0 00 000002 	C200:	MOVEI	2,2		;PRELOAD AC2 WITH 2
   837	030667	302 02 0 00 000002 		CAIE	2,2		;PASS IF C(AC2)=2
   838						STOP^
   839	030670	254 04 0 00 030671 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   840	030671	324 00 0 00 030672 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   841									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   842									;IN THE SUBTEST) TO LOOP ON ERROR^
   843
   844					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0030

   845					;THIS TEST VERIFIES THAT AC4 IS ACCESSABLE.
   846					;IN THIS CASE, AC4 IS PRELOADED WITH 4.
   847					;C(AC4) IS THEN CHECKED FOR 4.  THIS TEST PASSES IF C(AC4)=4.
   848					;IF THIS TEST FAILS, THE AC HARDWARE IS PROBABLY FAULTY
   849
   850	030672	201 04 0 00 000004 	C300:	MOVEI	4,4		;PRELOAD AC4 WITH 4 
   851	030673	302 04 0 00 000004 		CAIE	4,4		;PASS IF C(AC4)=4
   852						STOP^
   853	030674	254 04 0 00 030675 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   854	030675	324 00 0 00 030676 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   855									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   856									;IN THE SUBTEST) TO LOOP ON ERROR^
   857
   858					;**********
   859
   860					;THIS TEST VERIFIES THAT AC10 IS ACCESSABLE.
   861					;IN THIS CASE, AC10 IS PRELOADED WITH 10.
   862					;C(AC10) IS THEN CHECKED FOR 10.  THIS TEST PASSES IF C(AC10)=10.
   863					;IF THIS TEST FAILS, THE AC HARDWARE IS PROBABLY FAULTY
   864
   865	030676	201 10 0 00 000010 	C400:	MOVEI	10,10		;PRELOAD AC10 WITH 10
   866	030677	302 10 0 00 000010 		CAIE	10,10		;PASS IF C(AC10)=10
   867						STOP^
   868	030700	254 04 0 00 030701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   869	030701	324 00 0 00 030702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   870									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   871									;IN THE SUBTEST) TO LOOP ON ERROR^
   872
   873					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0031

   874			000500		SN=500
   875		777777	777777			ZZ=-1
   876
   877					;THIS TEST VERIFIES THAT ALL ACS EXIST
   878					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
   879					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   880					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   881
   882					C500:	REPEAT	^D16,
   883					<	ZZ=ZZ+1
   884						MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR>
   885			000000			ZZ=ZZ+1
   886	030702	201 00 0 00 000000 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   887			000001			ZZ=ZZ+1
   888	030703	201 01 0 00 000001 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   889			000002			ZZ=ZZ+1
   890	030704	201 02 0 00 000002 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   891			000003			ZZ=ZZ+1
   892	030705	201 03 0 00 000003 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   893			000004			ZZ=ZZ+1
   894	030706	201 04 0 00 000004 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   895			000005			ZZ=ZZ+1
   896	030707	201 05 0 00 000005 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   897			000006			ZZ=ZZ+1
   898	030710	201 06 0 00 000006 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   899			000007			ZZ=ZZ+1
   900	030711	201 07 0 00 000007 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   901			000010			ZZ=ZZ+1
   902	030712	201 10 0 00 000010 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   903			000011			ZZ=ZZ+1
   904	030713	201 11 0 00 000011 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   905			000012			ZZ=ZZ+1
   906	030714	201 12 0 00 000012 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   907			000013			ZZ=ZZ+1
   908	030715	201 13 0 00 000013 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   909			000014			ZZ=ZZ+1
   910	030716	201 14 0 00 000014 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   911			000015			ZZ=ZZ+1
   912	030717	201 15 0 00 000015 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   913			000016			ZZ=ZZ+1
   914	030720	201 16 0 00 000016 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   915			000017			ZZ=ZZ+1
   916	030721	201 17 0 00 000017 		MOVEI	ZZ,ZZ		;PRELOAD EACH AC WITH ITS ADDR
   917					PAGE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0032

   918			000020			ZZ=20
   919
   920						REPEAT	^D16,<
   921					;THIS TEST VERIFIES THAT ALL ACS EXIST.
   922					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
   923					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   924					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   925					
   926					SN=SN+1
   927						ZZ=ZZ-1
   928						CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
   929						STOP
   930									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
   931					
   932					;**********
   933					>
   934
   935					;THIS TEST VERIFIES THAT ALL ACS EXIST.
   936					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
   937					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   938					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   939
   940			000501		SN=SN+1
   941			000017			ZZ=ZZ-1
   942	030722	302 17 0 00 000017 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
   943						STOP^
   944	030723	254 04 0 00 030724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   945	030724	324 00 0 00 030725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   946									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   947									;IN THE SUBTEST) TO LOOP ON ERROR^
   948									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
   949
   950					;**********
   951
   952
   953					;THIS TEST VERIFIES THAT ALL ACS EXIST.
   954					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
   955					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   956					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   957
   958			000502		SN=SN+1
   959			000016			ZZ=ZZ-1
   960	030725	302 16 0 00 000016 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
   961						STOP^
   962	030726	254 04 0 00 030727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   963	030727	324 00 0 00 030730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   964									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   965									;IN THE SUBTEST) TO LOOP ON ERROR^
   966									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
   967
   968					;**********
   969
   970
   971					;THIS TEST VERIFIES THAT ALL ACS EXIST.
   972					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0033

   973					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   974					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   975
   976			000503		SN=SN+1
   977			000015			ZZ=ZZ-1
   978	030730	302 15 0 00 000015 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
   979						STOP^
   980	030731	254 04 0 00 030732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   981	030732	324 00 0 00 030733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   982									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   983									;IN THE SUBTEST) TO LOOP ON ERROR^
   984									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
   985
   986					;**********
   987
   988
   989					;THIS TEST VERIFIES THAT ALL ACS EXIST.
   990					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
   991					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
   992					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
   993
   994			000504		SN=SN+1
   995			000014			ZZ=ZZ-1
   996	030733	302 14 0 00 000014 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
   997						STOP^
   998	030734	254 04 0 00 030735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   999	030735	324 00 0 00 030736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1000									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1001									;IN THE SUBTEST) TO LOOP ON ERROR^
  1002									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1003
  1004					;**********
  1005
  1006
  1007					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1008					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1009					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1010					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1011
  1012			000505		SN=SN+1
  1013			000013			ZZ=ZZ-1
  1014	030736	302 13 0 00 000013 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1015						STOP^
  1016	030737	254 04 0 00 030740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1017	030740	324 00 0 00 030741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1018									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1019									;IN THE SUBTEST) TO LOOP ON ERROR^
  1020									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1021
  1022					;**********
  1023
  1024
  1025					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1026					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1027					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0034

  1028					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1029
  1030			000506		SN=SN+1
  1031			000012			ZZ=ZZ-1
  1032	030741	302 12 0 00 000012 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1033						STOP^
  1034	030742	254 04 0 00 030743 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1035	030743	324 00 0 00 030744 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1037									;IN THE SUBTEST) TO LOOP ON ERROR^
  1038									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1039
  1040					;**********
  1041
  1042
  1043					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1044					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1045					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1046					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1047
  1048			000507		SN=SN+1
  1049			000011			ZZ=ZZ-1
  1050	030744	302 11 0 00 000011 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1051						STOP^
  1052	030745	254 04 0 00 030746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1053	030746	324 00 0 00 030747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1054									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1055									;IN THE SUBTEST) TO LOOP ON ERROR^
  1056									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1057
  1058					;**********
  1059
  1060
  1061					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1062					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1063					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1064					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1065
  1066			000510		SN=SN+1
  1067			000010			ZZ=ZZ-1
  1068	030747	302 10 0 00 000010 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1069						STOP^
  1070	030750	254 04 0 00 030751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1071	030751	324 00 0 00 030752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1072									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1073									;IN THE SUBTEST) TO LOOP ON ERROR^
  1074									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1075
  1076					;**********
  1077
  1078
  1079					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1080					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1081					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1082					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0035

  1083
  1084			000511		SN=SN+1
  1085			000007			ZZ=ZZ-1
  1086	030752	302 07 0 00 000007 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1087						STOP^
  1088	030753	254 04 0 00 030754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1089	030754	324 00 0 00 030755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1090									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1091									;IN THE SUBTEST) TO LOOP ON ERROR^
  1092									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1093
  1094					;**********
  1095
  1096
  1097					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1098					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1099					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1100					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1101
  1102			000512		SN=SN+1
  1103			000006			ZZ=ZZ-1
  1104	030755	302 06 0 00 000006 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1105						STOP^
  1106	030756	254 04 0 00 030757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1107	030757	324 00 0 00 030760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1108									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1109									;IN THE SUBTEST) TO LOOP ON ERROR^
  1110									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1111
  1112					;**********
  1113
  1114
  1115					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1116					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1117					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1118					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1119
  1120			000513		SN=SN+1
  1121			000005			ZZ=ZZ-1
  1122	030760	302 05 0 00 000005 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1123						STOP^
  1124	030761	254 04 0 00 030762 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1125	030762	324 00 0 00 030763 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1126									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1127									;IN THE SUBTEST) TO LOOP ON ERROR^
  1128									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1129
  1130					;**********
  1131
  1132
  1133					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1134					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1135					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1136					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1137
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0036

  1138			000514		SN=SN+1
  1139			000004			ZZ=ZZ-1
  1140	030763	302 04 0 00 000004 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1141						STOP^
  1142	030764	254 04 0 00 030765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1143	030765	324 00 0 00 030766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1144									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1145									;IN THE SUBTEST) TO LOOP ON ERROR^
  1146									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1147
  1148					;**********
  1149
  1150
  1151					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1152					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1153					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1154					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1155
  1156			000515		SN=SN+1
  1157			000003			ZZ=ZZ-1
  1158	030766	302 03 0 00 000003 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1159						STOP^
  1160	030767	254 04 0 00 030770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1161	030770	324 00 0 00 030771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1162									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1163									;IN THE SUBTEST) TO LOOP ON ERROR^
  1164									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1165
  1166					;**********
  1167
  1168
  1169					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1170					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1171					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1172					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1173
  1174			000516		SN=SN+1
  1175			000002			ZZ=ZZ-1
  1176	030771	302 02 0 00 000002 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1177						STOP^
  1178	030772	254 04 0 00 030773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1179	030773	324 00 0 00 030774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1180									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1181									;IN THE SUBTEST) TO LOOP ON ERROR^
  1182									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1183
  1184					;**********
  1185
  1186
  1187					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1188					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1189					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1190					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1191
  1192			000517		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 4-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0037

  1193			000001			ZZ=ZZ-1
  1194	030774	302 01 0 00 000001 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1195						STOP^
  1196	030775	254 04 0 00 030776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1197	030776	324 00 0 00 030777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1198									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1199									;IN THE SUBTEST) TO LOOP ON ERROR^
  1200									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1201
  1202					;**********
  1203
  1204
  1205					;THIS TEST VERIFIES THAT ALL ACS EXIST.
  1206					;FIRST, EACH AC IS PRELOADED WITH ITS OWN ADDRESS;
  1207					;THEN, THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1208					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS
  1209
  1210			000520		SN=SN+1
  1211			000000			ZZ=ZZ-1
  1212	030777	302 00 0 00 000000 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1213						STOP^
  1214	031000	254 04 0 00 031001 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1215	031001	324 00 0 00 031002 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1216									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1217									;IN THE SUBTEST) TO LOOP ON ERROR^
  1218									;IN CASE OF FAILURE, LOOP TO C500 ADDRESS
  1219
  1220					;**********
  1221
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0038

  1222			000600		SN=600
  1223			000000			ZZ=0
  1224
  1225					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1226					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1227					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS; THEN THE CONTENTS OF EACH
  1228					;AC IS CHECKED FOR ITS ADDRESS.  IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1229
  1230					C600:	REPEAT	^D15,
  1231					<	ZZ=ZZ+1
  1232						MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1233						MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.>
  1234			000001			ZZ=ZZ+1
  1235	031002	201 00 0 00 000001 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1236	031003	202 00 0 00 000001 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1237			000002			ZZ=ZZ+1
  1238	031004	201 00 0 00 000002 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1239	031005	202 00 0 00 000002 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1240			000003			ZZ=ZZ+1
  1241	031006	201 00 0 00 000003 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1242	031007	202 00 0 00 000003 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1243			000004			ZZ=ZZ+1
  1244	031010	201 00 0 00 000004 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1245	031011	202 00 0 00 000004 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1246			000005			ZZ=ZZ+1
  1247	031012	201 00 0 00 000005 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1248	031013	202 00 0 00 000005 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1249			000006			ZZ=ZZ+1
  1250	031014	201 00 0 00 000006 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1251	031015	202 00 0 00 000006 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1252			000007			ZZ=ZZ+1
  1253	031016	201 00 0 00 000007 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1254	031017	202 00 0 00 000007 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1255			000010			ZZ=ZZ+1
  1256	031020	201 00 0 00 000010 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1257	031021	202 00 0 00 000010 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1258			000011			ZZ=ZZ+1
  1259	031022	201 00 0 00 000011 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1260	031023	202 00 0 00 000011 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1261			000012			ZZ=ZZ+1
  1262	031024	201 00 0 00 000012 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1263	031025	202 00 0 00 000012 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1264			000013			ZZ=ZZ+1
  1265	031026	201 00 0 00 000013 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1266	031027	202 00 0 00 000013 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1267			000014			ZZ=ZZ+1
  1268	031030	201 00 0 00 000014 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1269	031031	202 00 0 00 000014 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1270			000015			ZZ=ZZ+1
  1271	031032	201 00 0 00 000015 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1272	031033	202 00 0 00 000015 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1273			000016			ZZ=ZZ+1
  1274	031034	201 00 0 00 000016 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1275	031035	202 00 0 00 000016 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1276			000017			ZZ=ZZ+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0039

  1277	031036	201 00 0 00 000017 		MOVEI	ZZ		;PRELOAD EACH AC WITH ITS ADDRESS
  1278	031037	202 00 0 00 000017 		MOVEM	ZZ		;BY REFERENCING EACH AC AS MEMORY.
  1279
  1280			000020			ZZ=20
  1281
  1282						REPEAT	^D15,<
  1283					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1284					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1285					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1286					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1287					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1288					
  1289					SN=SN+1
  1290						ZZ=ZZ-1
  1291						CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1292						STOP
  1293									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1294					
  1295					;**********
  1296					>
  1297
  1298					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1299					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1300					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1301					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1302					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1303
  1304			000601		SN=SN+1
  1305			000017			ZZ=ZZ-1
  1306	031040	302 17 0 00 000017 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1307						STOP^
  1308	031041	254 04 0 00 031042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1309	031042	324 00 0 00 031043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1310									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1311									;IN THE SUBTEST) TO LOOP ON ERROR^
  1312									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1313
  1314					;**********
  1315
  1316
  1317					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1318					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1319					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1320					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1321					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1322
  1323			000602		SN=SN+1
  1324			000016			ZZ=ZZ-1
  1325	031043	302 16 0 00 000016 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1326						STOP^
  1327	031044	254 04 0 00 031045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1328	031045	324 00 0 00 031046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1329									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1330									;IN THE SUBTEST) TO LOOP ON ERROR^
  1331									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0040

  1332
  1333					;**********
  1334
  1335
  1336					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1337					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1338					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1339					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1340					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1341
  1342			000603		SN=SN+1
  1343			000015			ZZ=ZZ-1
  1344	031046	302 15 0 00 000015 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1345						STOP^
  1346	031047	254 04 0 00 031050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1347	031050	324 00 0 00 031051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1348									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1349									;IN THE SUBTEST) TO LOOP ON ERROR^
  1350									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1351
  1352					;**********
  1353
  1354
  1355					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1356					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1357					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1358					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1359					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1360
  1361			000604		SN=SN+1
  1362			000014			ZZ=ZZ-1
  1363	031051	302 14 0 00 000014 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1364						STOP^
  1365	031052	254 04 0 00 031053 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1366	031053	324 00 0 00 031054 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1367									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1368									;IN THE SUBTEST) TO LOOP ON ERROR^
  1369									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1370
  1371					;**********
  1372
  1373
  1374					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1375					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1376					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1377					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1378					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1379
  1380			000605		SN=SN+1
  1381			000013			ZZ=ZZ-1
  1382	031054	302 13 0 00 000013 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1383						STOP^
  1384	031055	254 04 0 00 031056 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1385	031056	324 00 0 00 031057 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1386									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0041

  1387									;IN THE SUBTEST) TO LOOP ON ERROR^
  1388									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1389
  1390					;**********
  1391
  1392
  1393					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1394					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1395					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1396					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1397					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1398
  1399			000606		SN=SN+1
  1400			000012			ZZ=ZZ-1
  1401	031057	302 12 0 00 000012 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1402						STOP^
  1403	031060	254 04 0 00 031061 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1404	031061	324 00 0 00 031062 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1405									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1406									;IN THE SUBTEST) TO LOOP ON ERROR^
  1407									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1408
  1409					;**********
  1410
  1411
  1412					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1413					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1414					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1415					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1416					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1417
  1418			000607		SN=SN+1
  1419			000011			ZZ=ZZ-1
  1420	031062	302 11 0 00 000011 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1421						STOP^
  1422	031063	254 04 0 00 031064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1423	031064	324 00 0 00 031065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1424									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1425									;IN THE SUBTEST) TO LOOP ON ERROR^
  1426									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1427
  1428					;**********
  1429
  1430
  1431					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1432					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1433					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1434					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1435					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1436
  1437			000610		SN=SN+1
  1438			000010			ZZ=ZZ-1
  1439	031065	302 10 0 00 000010 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1440						STOP^
  1441	031066	254 04 0 00 031067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0042

  1442	031067	324 00 0 00 031070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1443									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1444									;IN THE SUBTEST) TO LOOP ON ERROR^
  1445									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1446
  1447					;**********
  1448
  1449
  1450					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1451					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1452					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1453					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1454					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1455
  1456			000611		SN=SN+1
  1457			000007			ZZ=ZZ-1
  1458	031070	302 07 0 00 000007 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1459						STOP^
  1460	031071	254 04 0 00 031072 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1461	031072	324 00 0 00 031073 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1462									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1463									;IN THE SUBTEST) TO LOOP ON ERROR^
  1464									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1465
  1466					;**********
  1467
  1468
  1469					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1470					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1471					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1472					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1473					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1474
  1475			000612		SN=SN+1
  1476			000006			ZZ=ZZ-1
  1477	031073	302 06 0 00 000006 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1478						STOP^
  1479	031074	254 04 0 00 031075 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1480	031075	324 00 0 00 031076 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1481									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1482									;IN THE SUBTEST) TO LOOP ON ERROR^
  1483									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1484
  1485					;**********
  1486
  1487
  1488					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1489					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1490					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1491					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1492					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1493
  1494			000613		SN=SN+1
  1495			000005			ZZ=ZZ-1
  1496	031076	302 05 0 00 000005 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0043

  1497						STOP^
  1498	031077	254 04 0 00 031100 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1499	031100	324 00 0 00 031101 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1500									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1501									;IN THE SUBTEST) TO LOOP ON ERROR^
  1502									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1503
  1504					;**********
  1505
  1506
  1507					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1508					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1509					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1510					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1511					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1512
  1513			000614		SN=SN+1
  1514			000004			ZZ=ZZ-1
  1515	031101	302 04 0 00 000004 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1516						STOP^
  1517	031102	254 04 0 00 031103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1518	031103	324 00 0 00 031104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1519									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1520									;IN THE SUBTEST) TO LOOP ON ERROR^
  1521									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1522
  1523					;**********
  1524
  1525
  1526					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1527					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1528					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1529					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1530					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1531
  1532			000615		SN=SN+1
  1533			000003			ZZ=ZZ-1
  1534	031104	302 03 0 00 000003 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1535						STOP^
  1536	031105	254 04 0 00 031106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1537	031106	324 00 0 00 031107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1538									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1539									;IN THE SUBTEST) TO LOOP ON ERROR^
  1540									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1541
  1542					;**********
  1543
  1544
  1545					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1546					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1547					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1548					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1549					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1550
  1551			000616		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 5-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0044

  1552			000002			ZZ=ZZ-1
  1553	031107	302 02 0 00 000002 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1554						STOP^
  1555	031110	254 04 0 00 031111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1556	031111	324 00 0 00 031112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1557									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1558									;IN THE SUBTEST) TO LOOP ON ERROR^
  1559									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1560
  1561					;**********
  1562
  1563
  1564					;THIS TEST VERIFIES THAT AN ADDRESS WITHIN THE AC RANGE MAY BE ACCESSED AS
  1565					;EITHER AN AC OR A MEMORY LOCATION AND THAT EITHER REFERENCE REFERS TO THE
  1566					;SAME HARDWARE.  EACH AC IS PRELOADED WITH ITS ADDRESS
  1567					;THEN THE CONTENTS OF EACH AC IS CHECKED FOR ITS ADDRESS.
  1568					;IF ANY AC DOES NOT CONTAIN ITS ADDRESS, THIS TEST FAILS.
  1569
  1570			000617		SN=SN+1
  1571			000001			ZZ=ZZ-1
  1572	031112	302 01 0 00 000001 		CAIE	ZZ,ZZ		;CHECK THAT EACH AC CONTAINS ITS OWN ADDRESS
  1573						STOP^
  1574	031113	254 04 0 00 031114 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1575	031114	324 00 0 00 031115 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1576									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1577									;IN THE SUBTEST) TO LOOP ON ERROR^
  1578									;IN CASE OF FAILURE, LOOP TO C600 ADDRESS
  1579
  1580					;**********
  1581
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0045

  1582			000700		SN=700
  1583			000000			ZZ=0
  1584
  1585					C700:	REPEAT	^D15,<
  1586					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1587					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1588					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1589					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1590					
  1591					SN=SN+1
  1592						ZZ=ZZ+1
  1593						MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1594						CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1595						STOP
  1596					
  1597					;**********
  1598					>
  1599
  1600					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1601					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1602					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1603					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1604
  1605			000701		SN=SN+1
  1606			000001			ZZ=ZZ+1
  1607	031115	201 01 0 00 000001 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1608	031116	302 01 0 01 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1609						STOP^
  1610	031117	254 04 0 00 031120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1611	031120	324 00 0 00 031121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1612									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1613									;IN THE SUBTEST) TO LOOP ON ERROR^
  1614
  1615					;**********
  1616
  1617
  1618					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1619					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1620					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1621					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1622
  1623			000702		SN=SN+1
  1624			000002			ZZ=ZZ+1
  1625	031121	201 02 0 00 000002 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1626	031122	302 02 0 02 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1627						STOP^
  1628	031123	254 04 0 00 031124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1629	031124	324 00 0 00 031125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1630									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1631									;IN THE SUBTEST) TO LOOP ON ERROR^
  1632
  1633					;**********
  1634
  1635
  1636					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0046

  1637					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1638					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1639					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1640
  1641			000703		SN=SN+1
  1642			000003			ZZ=ZZ+1
  1643	031125	201 03 0 00 000003 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1644	031126	302 03 0 03 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1645						STOP^
  1646	031127	254 04 0 00 031130 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1647	031130	324 00 0 00 031131 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1648									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1649									;IN THE SUBTEST) TO LOOP ON ERROR^
  1650
  1651					;**********
  1652
  1653
  1654					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1655					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1656					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1657					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1658
  1659			000704		SN=SN+1
  1660			000004			ZZ=ZZ+1
  1661	031131	201 04 0 00 000004 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1662	031132	302 04 0 04 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1663						STOP^
  1664	031133	254 04 0 00 031134 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1665	031134	324 00 0 00 031135 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1666									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1667									;IN THE SUBTEST) TO LOOP ON ERROR^
  1668
  1669					;**********
  1670
  1671
  1672					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1673					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1674					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1675					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1676
  1677			000705		SN=SN+1
  1678			000005			ZZ=ZZ+1
  1679	031135	201 05 0 00 000005 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1680	031136	302 05 0 05 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1681						STOP^
  1682	031137	254 04 0 00 031140 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1683	031140	324 00 0 00 031141 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1684									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1685									;IN THE SUBTEST) TO LOOP ON ERROR^
  1686
  1687					;**********
  1688
  1689
  1690					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1691					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0047

  1692					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1693					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1694
  1695			000706		SN=SN+1
  1696			000006			ZZ=ZZ+1
  1697	031141	201 06 0 00 000006 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1698	031142	302 06 0 06 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1699						STOP^
  1700	031143	254 04 0 00 031144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1701	031144	324 00 0 00 031145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1702									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1703									;IN THE SUBTEST) TO LOOP ON ERROR^
  1704
  1705					;**********
  1706
  1707
  1708					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1709					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1710					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1711					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1712
  1713			000707		SN=SN+1
  1714			000007			ZZ=ZZ+1
  1715	031145	201 07 0 00 000007 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1716	031146	302 07 0 07 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1717						STOP^
  1718	031147	254 04 0 00 031150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1719	031150	324 00 0 00 031151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1720									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1721									;IN THE SUBTEST) TO LOOP ON ERROR^
  1722
  1723					;**********
  1724
  1725
  1726					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1727					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1728					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1729					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1730
  1731			000710		SN=SN+1
  1732			000010			ZZ=ZZ+1
  1733	031151	201 10 0 00 000010 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1734	031152	302 10 0 10 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1735						STOP^
  1736	031153	254 04 0 00 031154 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1737	031154	324 00 0 00 031155 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1738									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1739									;IN THE SUBTEST) TO LOOP ON ERROR^
  1740
  1741					;**********
  1742
  1743
  1744					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1745					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1746					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0048

  1747					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1748
  1749			000711		SN=SN+1
  1750			000011			ZZ=ZZ+1
  1751	031155	201 11 0 00 000011 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1752	031156	302 11 0 11 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1753						STOP^
  1754	031157	254 04 0 00 031160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1755	031160	324 00 0 00 031161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1756									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1757									;IN THE SUBTEST) TO LOOP ON ERROR^
  1758
  1759					;**********
  1760
  1761
  1762					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1763					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1764					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1765					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1766
  1767			000712		SN=SN+1
  1768			000012			ZZ=ZZ+1
  1769	031161	201 12 0 00 000012 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1770	031162	302 12 0 12 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1771						STOP^
  1772	031163	254 04 0 00 031164 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1773	031164	324 00 0 00 031165 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1774									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1775									;IN THE SUBTEST) TO LOOP ON ERROR^
  1776
  1777					;**********
  1778
  1779
  1780					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1781					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1782					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1783					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1784
  1785			000713		SN=SN+1
  1786			000013			ZZ=ZZ+1
  1787	031165	201 13 0 00 000013 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1788	031166	302 13 0 13 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1789						STOP^
  1790	031167	254 04 0 00 031170 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1791	031170	324 00 0 00 031171 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1792									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1793									;IN THE SUBTEST) TO LOOP ON ERROR^
  1794
  1795					;**********
  1796
  1797
  1798					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1799					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1800					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1801					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0049

  1802
  1803			000714		SN=SN+1
  1804			000014			ZZ=ZZ+1
  1805	031171	201 14 0 00 000014 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1806	031172	302 14 0 14 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1807						STOP^
  1808	031173	254 04 0 00 031174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1809	031174	324 00 0 00 031175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1810									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1811									;IN THE SUBTEST) TO LOOP ON ERROR^
  1812
  1813					;**********
  1814
  1815
  1816					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1817					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1818					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1819					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1820
  1821			000715		SN=SN+1
  1822			000015			ZZ=ZZ+1
  1823	031175	201 15 0 00 000015 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1824	031176	302 15 0 15 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1825						STOP^
  1826	031177	254 04 0 00 031200 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1827	031200	324 00 0 00 031201 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1828									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1829									;IN THE SUBTEST) TO LOOP ON ERROR^
  1830
  1831					;**********
  1832
  1833
  1834					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1835					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1836					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1837					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1838
  1839			000716		SN=SN+1
  1840			000016			ZZ=ZZ+1
  1841	031201	201 16 0 00 000016 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1842	031202	302 16 0 16 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1843						STOP^
  1844	031203	254 04 0 00 031204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1845	031204	324 00 0 00 031205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1846									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1847									;IN THE SUBTEST) TO LOOP ON ERROR^
  1848
  1849					;**********
  1850
  1851
  1852					;THIS TEST VERIFIES THAT THE INDEX REGISTERS ARE ACCESSABLE.
  1853					;FIRST, AN INDEX REGISTER IS PRELOADED WITH ITS ADDRESS; THEN,
  1854					;IT IS REFERENCED AS AN INDEX REGISTER.  IF IT CONTAINS ITS ADDRESS, THIS TEST PASSES.
  1855					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER.
  1856
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 6-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0050

  1857			000717		SN=SN+1
  1858			000017			ZZ=ZZ+1
  1859	031205	201 17 0 00 000017 		MOVEI	ZZ,ZZ		;PRELOAD INDEX REGISTER WITH ITS ADDRESS
  1860	031206	302 17 0 17 000000 		CAIE	ZZ,(ZZ)		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1861						STOP^
  1862	031207	254 04 0 00 031210 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1863	031210	324 00 0 00 031211 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1864									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1865									;IN THE SUBTEST) TO LOOP ON ERROR^
  1866
  1867					;**********
  1868
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0051

  1869			001000		SN=1000
  1870			000000			ZZ=0
  1871
  1872					C1000:	REPEAT	^D15,<
  1873					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1874					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1875					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1876					.
  1877					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  1878					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1879					
  1880					SN=SN+1
  1881						ZZ=ZZ+1
  1882						MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1883						HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1884						CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1885						STOP
  1886					
  1887					;**********
  1888					>
  1889
  1890					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1891					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1892					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1893					.
  1894					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  1895					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1896
  1897			001001		SN=SN+1
  1898			000001			ZZ=ZZ+1
  1899	031211	201 01 0 00 000001 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1900	031212	505 01 0 00 000001 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1901	031213	312 01 0 01 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1902						STOP^
  1903	031214	254 04 0 00 031215 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1904	031215	324 00 0 00 031216 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1906									;IN THE SUBTEST) TO LOOP ON ERROR^
  1907
  1908					;**********
  1909
  1910
  1911					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1912					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1913					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1914					.
  1915					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  1916					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1917
  1918			001002		SN=SN+1
  1919			000002			ZZ=ZZ+1
  1920	031216	201 02 0 00 000002 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1921	031217	505 02 0 00 000002 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1922	031220	312 02 0 02 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1923						STOP^
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0052

  1924	031221	254 04 0 00 031222 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1925	031222	324 00 0 00 031223 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1926									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1927									;IN THE SUBTEST) TO LOOP ON ERROR^
  1928
  1929					;**********
  1930
  1931
  1932					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1933					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1934					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1935					.
  1936					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  1937					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1938
  1939			001003		SN=SN+1
  1940			000003			ZZ=ZZ+1
  1941	031223	201 03 0 00 000003 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1942	031224	505 03 0 00 000003 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1943	031225	312 03 0 03 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1944						STOP^
  1945	031226	254 04 0 00 031227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1946	031227	324 00 0 00 031230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1947									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1948									;IN THE SUBTEST) TO LOOP ON ERROR^
  1949
  1950					;**********
  1951
  1952
  1953					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1954					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1955					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1956					.
  1957					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  1958					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1959
  1960			001004		SN=SN+1
  1961			000004			ZZ=ZZ+1
  1962	031230	201 04 0 00 000004 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1963	031231	505 04 0 00 000004 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1964	031232	312 04 0 04 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1965						STOP^
  1966	031233	254 04 0 00 031234 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1967	031234	324 00 0 00 031235 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1968									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1969									;IN THE SUBTEST) TO LOOP ON ERROR^
  1970
  1971					;**********
  1972
  1973
  1974					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1975					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1976					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1977					.
  1978					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0053

  1979					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  1980
  1981			001005		SN=SN+1
  1982			000005			ZZ=ZZ+1
  1983	031235	201 05 0 00 000005 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  1984	031236	505 05 0 00 000005 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  1985	031237	312 05 0 05 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  1986						STOP^
  1987	031240	254 04 0 00 031241 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1988	031241	324 00 0 00 031242 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1989									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1990									;IN THE SUBTEST) TO LOOP ON ERROR^
  1991
  1992					;**********
  1993
  1994
  1995					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  1996					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  1997					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  1998					.
  1999					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2000					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2001
  2002			001006		SN=SN+1
  2003			000006			ZZ=ZZ+1
  2004	031242	201 06 0 00 000006 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2005	031243	505 06 0 00 000006 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2006	031244	312 06 0 06 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2007						STOP^
  2008	031245	254 04 0 00 031246 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2009	031246	324 00 0 00 031247 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2010									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2011									;IN THE SUBTEST) TO LOOP ON ERROR^
  2012
  2013					;**********
  2014
  2015
  2016					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2017					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2018					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2019					.
  2020					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2021					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2022
  2023			001007		SN=SN+1
  2024			000007			ZZ=ZZ+1
  2025	031247	201 07 0 00 000007 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2026	031250	505 07 0 00 000007 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2027	031251	312 07 0 07 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2028						STOP^
  2029	031252	254 04 0 00 031253 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2030	031253	324 00 0 00 031254 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2031									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2032									;IN THE SUBTEST) TO LOOP ON ERROR^
  2033
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0054

  2034					;**********
  2035
  2036
  2037					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2038					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2039					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2040					.
  2041					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2042					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2043
  2044			001010		SN=SN+1
  2045			000010			ZZ=ZZ+1
  2046	031254	201 10 0 00 000010 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2047	031255	505 10 0 00 000010 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2048	031256	312 10 0 10 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2049						STOP^
  2050	031257	254 04 0 00 031260 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2051	031260	324 00 0 00 031261 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2052									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2053									;IN THE SUBTEST) TO LOOP ON ERROR^
  2054
  2055					;**********
  2056
  2057
  2058					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2059					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2060					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2061					.
  2062					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2063					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2064
  2065			001011		SN=SN+1
  2066			000011			ZZ=ZZ+1
  2067	031261	201 11 0 00 000011 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2068	031262	505 11 0 00 000011 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2069	031263	312 11 0 11 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2070						STOP^
  2071	031264	254 04 0 00 031265 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2072	031265	324 00 0 00 031266 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2073									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2074									;IN THE SUBTEST) TO LOOP ON ERROR^
  2075
  2076					;**********
  2077
  2078
  2079					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2080					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2081					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2082					.
  2083					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2084					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2085
  2086			001012		SN=SN+1
  2087			000012			ZZ=ZZ+1
  2088	031266	201 12 0 00 000012 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0055

  2089	031267	505 12 0 00 000012 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2090	031270	312 12 0 12 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2091						STOP^
  2092	031271	254 04 0 00 031272 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2093	031272	324 00 0 00 031273 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2094									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2095									;IN THE SUBTEST) TO LOOP ON ERROR^
  2096
  2097					;**********
  2098
  2099
  2100					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2101					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2102					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2103					.
  2104					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2105					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2106
  2107			001013		SN=SN+1
  2108			000013			ZZ=ZZ+1
  2109	031273	201 13 0 00 000013 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2110	031274	505 13 0 00 000013 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2111	031275	312 13 0 13 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2112						STOP^
  2113	031276	254 04 0 00 031277 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2114	031277	324 00 0 00 031300 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2115									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2116									;IN THE SUBTEST) TO LOOP ON ERROR^
  2117
  2118					;**********
  2119
  2120
  2121					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2122					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2123					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2124					.
  2125					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2126					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2127
  2128			001014		SN=SN+1
  2129			000014			ZZ=ZZ+1
  2130	031300	201 14 0 00 000014 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2131	031301	505 14 0 00 000014 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2132	031302	312 14 0 14 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2133						STOP^
  2134	031303	254 04 0 00 031304 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2135	031304	324 00 0 00 031305 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2136									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2137									;IN THE SUBTEST) TO LOOP ON ERROR^
  2138
  2139					;**********
  2140
  2141
  2142					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2143					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0056

  2144					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2145					.
  2146					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2147					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2148
  2149			001015		SN=SN+1
  2150			000015			ZZ=ZZ+1
  2151	031305	201 15 0 00 000015 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2152	031306	505 15 0 00 000015 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2153	031307	312 15 0 15 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2154						STOP^
  2155	031310	254 04 0 00 031311 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2156	031311	324 00 0 00 031312 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2157									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2158									;IN THE SUBTEST) TO LOOP ON ERROR^
  2159
  2160					;**********
  2161
  2162
  2163					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2164					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2165					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2166					.
  2167					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2168					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2169
  2170			001016		SN=SN+1
  2171			000016			ZZ=ZZ+1
  2172	031312	201 16 0 00 000016 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2173	031313	505 16 0 00 000016 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2174	031314	312 16 0 16 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2175						STOP^
  2176	031315	254 04 0 00 031316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2177	031316	324 00 0 00 031317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2178									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2179									;IN THE SUBTEST) TO LOOP ON ERROR^
  2180
  2181					;**********
  2182
  2183
  2184					;THIS TEST VERIFIES THAT ALL INDEX REGISTERS INDEX CORRECTLY.
  2185					;FIRST, BOTH HALVES OF THE INDEX REGISTER ARE PRELOADED WITH ITS ADDRESS.
  2186					;THEN, THE INDEX REGISTER IS REFERENCED.  IT IS THEN CHECKED FOR ITS ADDRESS IN BOTH HALVES
  2187					.
  2188					;IF IT CONTAINS ITS ADDRESS IN BOTH HALVES THIS TEST PASSES.
  2189					;THIS TEST IS REPEATED 15 TIMES IN ORDER TO TEST EACH INDEX REGISTER
  2190
  2191			001017		SN=SN+1
  2192			000017			ZZ=ZZ+1
  2193	031317	201 17 0 00 000017 		MOVEI	ZZ,ZZ		;PRELOAD BOTH HALVES OF INDEX REG WITH ITS ADDRESS
  2194	031320	505 17 0 00 000017 		HRLI	ZZ,ZZ		;PASS IF INDEX REGISTER CONTAINS ITS ADDRESS
  2195	031321	312 17 0 17 000000 		CAME	ZZ,(ZZ)		;IN BOTH HALVES
  2196						STOP^
  2197	031322	254 04 0 00 031323 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2198	031323	324 00 0 00 031324 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 7-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AC HARDWARE AND INDEX REGISTERS                                            SEQ 0057

  2199									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2200									;IN THE SUBTEST) TO LOOP ON ERROR^
  2201
  2202					;**********
  2203
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0058

  2204					SUBTTL	TEST OF INDEX REGISTER ADDRESSING
  2205
  2206					;**********
  2207
  2208					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2209					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2210					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2211					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A 0,
  2212					;THE FINAL RESULT IN AC3 SHOULD BE 0.  IF C(AC3)=0, THIS TEST PASSES.
  2213
  2214	031324	476 00 0 00 000003 	C1100:	SETOM	3		;PRELOAD AC3 WITH -1,,1
  2215	031325	402 00 0 00 000001 		SETZM	1		;PRELOAD AC1 WITH 0
  2216	031326	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER 2 WITH 1
  2217	031327	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2218	031330	332 00 0 00 000003 		SKIPE	3		;TEST INDEXING
  2219						STOP^
  2220	031331	254 04 0 00 031332 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2221	031332	324 00 0 00 031333 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2223									;IN THE SUBTEST) TO LOOP ON ERROR^
  2224
  2225					;**********
  2226
  2227			001200		SN=1200
  2228			000000			ZZ=0
  2229
  2230					C1200:	REPEAT	^D18,<
  2231					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2232					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2233					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2234					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2235					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2236					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2237					
  2238					SN=SN+1
  2239						ZZ=ZZ+ZZ
  2240						IFE	ZZ,<ZZ=1>
  2241						SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2242						MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2243						MOVEI	2,1		;SETUP INDEX REGISTER
  2244						MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2245						CAIE	3,ZZ		;TEST INDEXING
  2246						STOP
  2247					
  2248					;**********
  2249					>
  2250
  2251					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2252					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2253					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2254					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2255					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2256					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2257
  2258			001201		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0059

  2259			000000			ZZ=ZZ+ZZ
  2260			000001			IFE	ZZ,<ZZ=1>
  2261	031333	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2262	031334	201 01 0 00 000001 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2263	031335	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2264	031336	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2265	031337	302 03 0 00 000001 		CAIE	3,ZZ		;TEST INDEXING
  2266						STOP^
  2267	031340	254 04 0 00 031341 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2268	031341	324 00 0 00 031342 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2269									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2270									;IN THE SUBTEST) TO LOOP ON ERROR^
  2271
  2272					;**********
  2273
  2274
  2275					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2276					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2277					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2278					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2279					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2280					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2281
  2282			001202		SN=SN+1
  2283			000002			ZZ=ZZ+ZZ
  2284						IFE	ZZ,<ZZ=1>
  2285	031342	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2286	031343	201 01 0 00 000002 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2287	031344	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2288	031345	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2289	031346	302 03 0 00 000002 		CAIE	3,ZZ		;TEST INDEXING
  2290						STOP^
  2291	031347	254 04 0 00 031350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2292	031350	324 00 0 00 031351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2293									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2294									;IN THE SUBTEST) TO LOOP ON ERROR^
  2295
  2296					;**********
  2297
  2298
  2299					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2300					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2301					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2302					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2303					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2304					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2305
  2306			001203		SN=SN+1
  2307			000004			ZZ=ZZ+ZZ
  2308						IFE	ZZ,<ZZ=1>
  2309	031351	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2310	031352	201 01 0 00 000004 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2311	031353	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2312	031354	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2313	031355	302 03 0 00 000004 		CAIE	3,ZZ		;TEST INDEXING
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0060

  2314						STOP^
  2315	031356	254 04 0 00 031357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2316	031357	324 00 0 00 031360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2318									;IN THE SUBTEST) TO LOOP ON ERROR^
  2319
  2320					;**********
  2321
  2322
  2323					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2324					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2325					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2326					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2327					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2328					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2329
  2330			001204		SN=SN+1
  2331			000010			ZZ=ZZ+ZZ
  2332						IFE	ZZ,<ZZ=1>
  2333	031360	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2334	031361	201 01 0 00 000010 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2335	031362	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2336	031363	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2337	031364	302 03 0 00 000010 		CAIE	3,ZZ		;TEST INDEXING
  2338						STOP^
  2339	031365	254 04 0 00 031366 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2340	031366	324 00 0 00 031367 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2341									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2342									;IN THE SUBTEST) TO LOOP ON ERROR^
  2343
  2344					;**********
  2345
  2346
  2347					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2348					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2349					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2350					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2351					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2352					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2353
  2354			001205		SN=SN+1
  2355			000020			ZZ=ZZ+ZZ
  2356						IFE	ZZ,<ZZ=1>
  2357	031367	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2358	031370	201 01 0 00 000020 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2359	031371	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2360	031372	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2361	031373	302 03 0 00 000020 		CAIE	3,ZZ		;TEST INDEXING
  2362						STOP^
  2363	031374	254 04 0 00 031375 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2364	031375	324 00 0 00 031376 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2365									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2366									;IN THE SUBTEST) TO LOOP ON ERROR^
  2367
  2368					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0061

  2369
  2370
  2371					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2372					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2373					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2374					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2375					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2376					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2377
  2378			001206		SN=SN+1
  2379			000040			ZZ=ZZ+ZZ
  2380						IFE	ZZ,<ZZ=1>
  2381	031376	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2382	031377	201 01 0 00 000040 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2383	031400	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2384	031401	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2385	031402	302 03 0 00 000040 		CAIE	3,ZZ		;TEST INDEXING
  2386						STOP^
  2387	031403	254 04 0 00 031404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2388	031404	324 00 0 00 031405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2389									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2390									;IN THE SUBTEST) TO LOOP ON ERROR^
  2391
  2392					;**********
  2393
  2394
  2395					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2396					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2397					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2398					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2399					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2400					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2401
  2402			001207		SN=SN+1
  2403			000100			ZZ=ZZ+ZZ
  2404						IFE	ZZ,<ZZ=1>
  2405	031405	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2406	031406	201 01 0 00 000100 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2407	031407	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2408	031410	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2409	031411	302 03 0 00 000100 		CAIE	3,ZZ		;TEST INDEXING
  2410						STOP^
  2411	031412	254 04 0 00 031413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2412	031413	324 00 0 00 031414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2413									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2414									;IN THE SUBTEST) TO LOOP ON ERROR^
  2415
  2416					;**********
  2417
  2418
  2419					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2420					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2421					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2422					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2423					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0062

  2424					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2425
  2426			001210		SN=SN+1
  2427			000200			ZZ=ZZ+ZZ
  2428						IFE	ZZ,<ZZ=1>
  2429	031414	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2430	031415	201 01 0 00 000200 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2431	031416	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2432	031417	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2433	031420	302 03 0 00 000200 		CAIE	3,ZZ		;TEST INDEXING
  2434						STOP^
  2435	031421	254 04 0 00 031422 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2436	031422	324 00 0 00 031423 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2437									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2438									;IN THE SUBTEST) TO LOOP ON ERROR^
  2439
  2440					;**********
  2441
  2442
  2443					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2444					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2445					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2446					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2447					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2448					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2449
  2450			001211		SN=SN+1
  2451			000400			ZZ=ZZ+ZZ
  2452						IFE	ZZ,<ZZ=1>
  2453	031423	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2454	031424	201 01 0 00 000400 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2455	031425	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2456	031426	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2457	031427	302 03 0 00 000400 		CAIE	3,ZZ		;TEST INDEXING
  2458						STOP^
  2459	031430	254 04 0 00 031431 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2460	031431	324 00 0 00 031432 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2461									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2462									;IN THE SUBTEST) TO LOOP ON ERROR^
  2463
  2464					;**********
  2465
  2466
  2467					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2468					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2469					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2470					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2471					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2472					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2473
  2474			001212		SN=SN+1
  2475			001000			ZZ=ZZ+ZZ
  2476						IFE	ZZ,<ZZ=1>
  2477	031432	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2478	031433	201 01 0 00 001000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0063

  2479	031434	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2480	031435	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2481	031436	302 03 0 00 001000 		CAIE	3,ZZ		;TEST INDEXING
  2482						STOP^
  2483	031437	254 04 0 00 031440 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2484	031440	324 00 0 00 031441 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2485									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2486									;IN THE SUBTEST) TO LOOP ON ERROR^
  2487
  2488					;**********
  2489
  2490
  2491					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2492					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2493					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2494					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2495					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2496					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2497
  2498			001213		SN=SN+1
  2499			002000			ZZ=ZZ+ZZ
  2500						IFE	ZZ,<ZZ=1>
  2501	031441	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2502	031442	201 01 0 00 002000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2503	031443	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2504	031444	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2505	031445	302 03 0 00 002000 		CAIE	3,ZZ		;TEST INDEXING
  2506						STOP^
  2507	031446	254 04 0 00 031447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2508	031447	324 00 0 00 031450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2509									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2510									;IN THE SUBTEST) TO LOOP ON ERROR^
  2511
  2512					;**********
  2513
  2514
  2515					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2516					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2517					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2518					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2519					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2520					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2521
  2522			001214		SN=SN+1
  2523			004000			ZZ=ZZ+ZZ
  2524						IFE	ZZ,<ZZ=1>
  2525	031450	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2526	031451	201 01 0 00 004000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2527	031452	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2528	031453	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2529	031454	302 03 0 00 004000 		CAIE	3,ZZ		;TEST INDEXING
  2530						STOP^
  2531	031455	254 04 0 00 031456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2532	031456	324 00 0 00 031457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2533									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0064

  2534									;IN THE SUBTEST) TO LOOP ON ERROR^
  2535
  2536					;**********
  2537
  2538
  2539					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2540					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2541					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2542					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2543					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2544					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2545
  2546			001215		SN=SN+1
  2547			010000			ZZ=ZZ+ZZ
  2548						IFE	ZZ,<ZZ=1>
  2549	031457	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2550	031460	201 01 0 00 010000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2551	031461	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2552	031462	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2553	031463	302 03 0 00 010000 		CAIE	3,ZZ		;TEST INDEXING
  2554						STOP^
  2555	031464	254 04 0 00 031465 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2556	031465	324 00 0 00 031466 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2557									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2558									;IN THE SUBTEST) TO LOOP ON ERROR^
  2559
  2560					;**********
  2561
  2562
  2563					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2564					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2565					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2566					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2567					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2568					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2569
  2570			001216		SN=SN+1
  2571			020000			ZZ=ZZ+ZZ
  2572						IFE	ZZ,<ZZ=1>
  2573	031466	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2574	031467	201 01 0 00 020000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2575	031470	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2576	031471	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2577	031472	302 03 0 00 020000 		CAIE	3,ZZ		;TEST INDEXING
  2578						STOP^
  2579	031473	254 04 0 00 031474 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2580	031474	324 00 0 00 031475 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2581									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2582									;IN THE SUBTEST) TO LOOP ON ERROR^
  2583
  2584					;**********
  2585
  2586
  2587					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2588					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0065

  2589					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2590					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2591					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2592					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2593
  2594			001217		SN=SN+1
  2595			040000			ZZ=ZZ+ZZ
  2596						IFE	ZZ,<ZZ=1>
  2597	031475	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2598	031476	201 01 0 00 040000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2599	031477	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2600	031500	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2601	031501	302 03 0 00 040000 		CAIE	3,ZZ		;TEST INDEXING
  2602						STOP^
  2603	031502	254 04 0 00 031503 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2604	031503	324 00 0 00 031504 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2605									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2606									;IN THE SUBTEST) TO LOOP ON ERROR^
  2607
  2608					;**********
  2609
  2610
  2611					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2612					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2613					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2614					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2615					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2616					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2617
  2618			001220		SN=SN+1
  2619			100000			ZZ=ZZ+ZZ
  2620						IFE	ZZ,<ZZ=1>
  2621	031504	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2622	031505	201 01 0 00 100000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2623	031506	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2624	031507	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2625	031510	302 03 0 00 100000 		CAIE	3,ZZ		;TEST INDEXING
  2626						STOP^
  2627	031511	254 04 0 00 031512 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2628	031512	324 00 0 00 031513 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2629									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2630									;IN THE SUBTEST) TO LOOP ON ERROR^
  2631
  2632					;**********
  2633
  2634
  2635					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2636					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2637					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2638					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2639					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2640					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2641
  2642			001221		SN=SN+1
  2643			200000			ZZ=ZZ+ZZ
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 8-8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0066

  2644						IFE	ZZ,<ZZ=1>
  2645	031513	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2646	031514	201 01 0 00 200000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2647	031515	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2648	031516	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2649	031517	302 03 0 00 200000 		CAIE	3,ZZ		;TEST INDEXING
  2650						STOP^
  2651	031520	254 04 0 00 031521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2652	031521	324 00 0 00 031522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2653									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2654									;IN THE SUBTEST) TO LOOP ON ERROR^
  2655
  2656					;**********
  2657
  2658
  2659					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2660					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2661					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2662					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2663					;FLOATING 1.  THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2664					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2665
  2666			001222		SN=SN+1
  2667			400000			ZZ=ZZ+ZZ
  2668						IFE	ZZ,<ZZ=1>
  2669	031522	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2670	031523	201 01 0 00 400000 		MOVEI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2671	031524	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2672	031525	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2673	031526	302 03 0 00 400000 		CAIE	3,ZZ		;TEST INDEXING
  2674						STOP^
  2675	031527	254 04 0 00 031530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2676	031530	324 00 0 00 031531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2677									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2678									;IN THE SUBTEST) TO LOOP ON ERROR^
  2679
  2680					;**********
  2681
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0067

  2682			001300		SN=1300
  2683			000000			ZZ=0
  2684
  2685					C1300:	REPEAT	^D18,<
  2686					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2687					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2688					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2689					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2690					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2691					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2692					
  2693					SN=SN+1
  2694						ZZ=ZZ+ZZ
  2695						IFE	ZZ,<ZZ=1>
  2696						SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2697						MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2698						MOVEI	2,1		;SETUP INDEX REGISTER
  2699						MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2700						CAME	3,[ZZ,,0]	;TEST INDEXING
  2701						STOP
  2702					
  2703					;**********
  2704					>
  2705
  2706					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2707					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2708					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2709					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2710					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2711					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2712
  2713			001301		SN=SN+1
  2714			000000			ZZ=ZZ+ZZ
  2715			000001			IFE	ZZ,<ZZ=1>
  2716	031531	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2717	031532	205 01 0 00 000001 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2718	031533	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2719	031534	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2720	031535	312 03 0 00 034362 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2721						STOP^
  2722	031536	254 04 0 00 031537 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2723	031537	324 00 0 00 031540 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2724									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2725									;IN THE SUBTEST) TO LOOP ON ERROR^
  2726
  2727					;**********
  2728
  2729
  2730					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2731					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2732					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2733					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2734					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2735					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2736
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0068

  2737			001302		SN=SN+1
  2738			000002			ZZ=ZZ+ZZ
  2739						IFE	ZZ,<ZZ=1>
  2740	031540	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2741	031541	205 01 0 00 000002 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2742	031542	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2743	031543	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2744	031544	312 03 0 00 034363 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2745						STOP^
  2746	031545	254 04 0 00 031546 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2747	031546	324 00 0 00 031547 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2748									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2749									;IN THE SUBTEST) TO LOOP ON ERROR^
  2750
  2751					;**********
  2752
  2753
  2754					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2755					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2756					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2757					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2758					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2759					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2760
  2761			001303		SN=SN+1
  2762			000004			ZZ=ZZ+ZZ
  2763						IFE	ZZ,<ZZ=1>
  2764	031547	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2765	031550	205 01 0 00 000004 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2766	031551	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2767	031552	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2768	031553	312 03 0 00 034364 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2769						STOP^
  2770	031554	254 04 0 00 031555 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2771	031555	324 00 0 00 031556 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2772									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2773									;IN THE SUBTEST) TO LOOP ON ERROR^
  2774
  2775					;**********
  2776
  2777
  2778					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2779					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2780					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2781					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2782					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2783					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2784
  2785			001304		SN=SN+1
  2786			000010			ZZ=ZZ+ZZ
  2787						IFE	ZZ,<ZZ=1>
  2788	031556	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2789	031557	205 01 0 00 000010 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2790	031560	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2791	031561	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0069

  2792	031562	312 03 0 00 034365 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2793						STOP^
  2794	031563	254 04 0 00 031564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2795	031564	324 00 0 00 031565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2797									;IN THE SUBTEST) TO LOOP ON ERROR^
  2798
  2799					;**********
  2800
  2801
  2802					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2803					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2804					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2805					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2806					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2807					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2808
  2809			001305		SN=SN+1
  2810			000020			ZZ=ZZ+ZZ
  2811						IFE	ZZ,<ZZ=1>
  2812	031565	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2813	031566	205 01 0 00 000020 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2814	031567	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2815	031570	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2816	031571	312 03 0 00 034366 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2817						STOP^
  2818	031572	254 04 0 00 031573 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2819	031573	324 00 0 00 031574 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2820									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2821									;IN THE SUBTEST) TO LOOP ON ERROR^
  2822
  2823					;**********
  2824
  2825
  2826					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2827					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2828					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2829					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2830					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2831					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2832
  2833			001306		SN=SN+1
  2834			000040			ZZ=ZZ+ZZ
  2835						IFE	ZZ,<ZZ=1>
  2836	031574	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2837	031575	205 01 0 00 000040 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2838	031576	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2839	031577	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2840	031600	312 03 0 00 034367 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2841						STOP^
  2842	031601	254 04 0 00 031602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2843	031602	324 00 0 00 031603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2844									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2845									;IN THE SUBTEST) TO LOOP ON ERROR^
  2846
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0070

  2847					;**********
  2848
  2849
  2850					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2851					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2852					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2853					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2854					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2855					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2856
  2857			001307		SN=SN+1
  2858			000100			ZZ=ZZ+ZZ
  2859						IFE	ZZ,<ZZ=1>
  2860	031603	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2861	031604	205 01 0 00 000100 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2862	031605	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2863	031606	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2864	031607	312 03 0 00 034370 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2865						STOP^
  2866	031610	254 04 0 00 031611 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2867	031611	324 00 0 00 031612 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2868									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2869									;IN THE SUBTEST) TO LOOP ON ERROR^
  2870
  2871					;**********
  2872
  2873
  2874					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2875					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2876					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2877					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2878					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2879					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2880
  2881			001310		SN=SN+1
  2882			000200			ZZ=ZZ+ZZ
  2883						IFE	ZZ,<ZZ=1>
  2884	031612	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2885	031613	205 01 0 00 000200 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2886	031614	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2887	031615	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2888	031616	312 03 0 00 034371 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2889						STOP^
  2890	031617	254 04 0 00 031620 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2891	031620	324 00 0 00 031621 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2892									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2893									;IN THE SUBTEST) TO LOOP ON ERROR^
  2894
  2895					;**********
  2896
  2897
  2898					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2899					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2900					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2901					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0071

  2902					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2903					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2904
  2905			001311		SN=SN+1
  2906			000400			ZZ=ZZ+ZZ
  2907						IFE	ZZ,<ZZ=1>
  2908	031621	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2909	031622	205 01 0 00 000400 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2910	031623	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2911	031624	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2912	031625	312 03 0 00 034372 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2913						STOP^
  2914	031626	254 04 0 00 031627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2915	031627	324 00 0 00 031630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2916									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2917									;IN THE SUBTEST) TO LOOP ON ERROR^
  2918
  2919					;**********
  2920
  2921
  2922					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2923					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2924					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2925					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2926					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2927					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2928
  2929			001312		SN=SN+1
  2930			001000			ZZ=ZZ+ZZ
  2931						IFE	ZZ,<ZZ=1>
  2932	031630	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2933	031631	205 01 0 00 001000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2934	031632	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2935	031633	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2936	031634	312 03 0 00 034373 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2937						STOP^
  2938	031635	254 04 0 00 031636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2939	031636	324 00 0 00 031637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2940									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2941									;IN THE SUBTEST) TO LOOP ON ERROR^
  2942
  2943					;**********
  2944
  2945
  2946					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2947					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2948					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2949					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2950					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2951					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2952
  2953			001313		SN=SN+1
  2954			002000			ZZ=ZZ+ZZ
  2955						IFE	ZZ,<ZZ=1>
  2956	031637	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0072

  2957	031640	205 01 0 00 002000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2958	031641	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2959	031642	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2960	031643	312 03 0 00 034374 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2961						STOP^
  2962	031644	254 04 0 00 031645 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2963	031645	324 00 0 00 031646 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2964									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2965									;IN THE SUBTEST) TO LOOP ON ERROR^
  2966
  2967					;**********
  2968
  2969
  2970					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2971					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2972					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2973					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2974					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2975					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  2976
  2977			001314		SN=SN+1
  2978			004000			ZZ=ZZ+ZZ
  2979						IFE	ZZ,<ZZ=1>
  2980	031646	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  2981	031647	205 01 0 00 004000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  2982	031650	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  2983	031651	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  2984	031652	312 03 0 00 034375 		CAME	3,[ZZ,,0]	;TEST INDEXING
  2985						STOP^
  2986	031653	254 04 0 00 031654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2987	031654	324 00 0 00 031655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2988									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2989									;IN THE SUBTEST) TO LOOP ON ERROR^
  2990
  2991					;**********
  2992
  2993
  2994					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  2995					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  2996					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  2997					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  2998					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  2999					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3000
  3001			001315		SN=SN+1
  3002			010000			ZZ=ZZ+ZZ
  3003						IFE	ZZ,<ZZ=1>
  3004	031655	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3005	031656	205 01 0 00 010000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3006	031657	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3007	031660	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3008	031661	312 03 0 00 034376 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3009						STOP^
  3010	031662	254 04 0 00 031663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3011	031663	324 00 0 00 031664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0073

  3012									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3013									;IN THE SUBTEST) TO LOOP ON ERROR^
  3014
  3015					;**********
  3016
  3017
  3018					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3019					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3020					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3021					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3022					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  3023					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3024
  3025			001316		SN=SN+1
  3026			020000			ZZ=ZZ+ZZ
  3027						IFE	ZZ,<ZZ=1>
  3028	031664	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3029	031665	205 01 0 00 020000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3030	031666	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3031	031667	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3032	031670	312 03 0 00 034377 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3033						STOP^
  3034	031671	254 04 0 00 031672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3035	031672	324 00 0 00 031673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3037									;IN THE SUBTEST) TO LOOP ON ERROR^
  3038
  3039					;**********
  3040
  3041
  3042					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3043					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3044					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3045					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3046					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  3047					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3048
  3049			001317		SN=SN+1
  3050			040000			ZZ=ZZ+ZZ
  3051						IFE	ZZ,<ZZ=1>
  3052	031673	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3053	031674	205 01 0 00 040000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3054	031675	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3055	031676	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3056	031677	312 03 0 00 034400 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3057						STOP^
  3058	031700	254 04 0 00 031701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3059	031701	324 00 0 00 031702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3060									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3061									;IN THE SUBTEST) TO LOOP ON ERROR^
  3062
  3063					;**********
  3064
  3065
  3066					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0074

  3067					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3068					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3069					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3070					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  3071					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3072
  3073			001320		SN=SN+1
  3074			100000			ZZ=ZZ+ZZ
  3075						IFE	ZZ,<ZZ=1>
  3076	031702	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3077	031703	205 01 0 00 100000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3078	031704	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3079	031705	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3080	031706	312 03 0 00 034401 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3081						STOP^
  3082	031707	254 04 0 00 031710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3083	031710	324 00 0 00 031711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3084									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3085									;IN THE SUBTEST) TO LOOP ON ERROR^
  3086
  3087					;**********
  3088
  3089
  3090					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3091					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3092					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3093					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3094					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  3095					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3096
  3097			001321		SN=SN+1
  3098			200000			ZZ=ZZ+ZZ
  3099						IFE	ZZ,<ZZ=1>
  3100	031711	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3101	031712	205 01 0 00 200000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3102	031713	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3103	031714	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3104	031715	312 03 0 00 034402 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3105						STOP^
  3106	031716	254 04 0 00 031717 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3107	031717	324 00 0 00 031720 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3108									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3109									;IN THE SUBTEST) TO LOOP ON ERROR^
  3110
  3111					;**********
  3112
  3113
  3114					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3115					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3116					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3117					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3118					;FLOATING 1, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 1.
  3119					;IF C(AC3)=A FLOATING 1, THIS TEST PASSES.
  3120
  3121			001322		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 9-8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0075

  3122			400000			ZZ=ZZ+ZZ
  3123						IFE	ZZ,<ZZ=1>
  3124	031720	476 00 0 00 000003 		SETOM	3		;PRELOAD AC3 WITH -1,,-1
  3125	031721	205 01 0 00 400000 		MOVSI	1,ZZ		;PRELOAD AC1 WITH FLOATING 1
  3126	031722	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3127	031723	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3128	031724	312 03 0 00 034403 		CAME	3,[ZZ,,0]	;TEST INDEXING
  3129						STOP^
  3130	031725	254 04 0 00 031726 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3131	031726	324 00 0 00 031727 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3132									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3133									;IN THE SUBTEST) TO LOOP ON ERROR^
  3134
  3135					;**********
  3136
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0076

  3137					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3138					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3139					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3140					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH -1,,-1,
  3141					;THE FINAL RESULT IN AC3 SHOULD BE -1,,-1.  IF C(AC3)=-1,,-1, THIS TEST PASSES.
  3142
  3143	031727	402 00 0 00 000003 	C1400:	SETZM	3		;PRELOAD AC3 WITH 0
  3144	031730	476 00 0 00 000001 		SETOM	1		;PRELOAD AC1 WITH -1,,-1
  3145	031731	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3146	031732	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3147	031733	312 03 0 00 034404 		CAME	3,[-1,,-1]	;TEST INDEXING
  3148						STOP^
  3149	031734	254 04 0 00 031735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3150	031735	324 00 0 00 031736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3151									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3152									;IN THE SUBTEST) TO LOOP ON ERROR^
  3153
  3154					;**********
  3155
  3156			001500		SN=1500
  3157			000000			ZZ=0
  3158
  3159					C1500:	REPEAT	^D18,<
  3160					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3161					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3162					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3163					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3164					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3165					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3166					
  3167					SN=SN+1
  3168						ZZ=<ZZ+ZZ+1>&777777
  3169						IFE	<ZZ-1>,<ZZ=777776>
  3170						SETZM	3		;PRELOAD AC3 WITH 0
  3171						HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3172						MOVEI	2,1		;SETUP INDEX REGISTER
  3173						MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3174						CAME	3,[-1,,ZZ]	;TEST INDEXING
  3175						STOP
  3176					
  3177					;**********
  3178					>
  3179
  3180					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3181					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3182					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3183					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3184					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3185					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3186
  3187			001501		SN=SN+1
  3188			000001			ZZ=<ZZ+ZZ+1>&777777
  3189			777776			IFE	<ZZ-1>,<ZZ=777776>
  3190	031736	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3191	031737	561 01 0 00 777776 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0077

  3192	031740	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3193	031741	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3194	031742	312 03 0 00 034405 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3195						STOP^
  3196	031743	254 04 0 00 031744 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3197	031744	324 00 0 00 031745 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3198									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3199									;IN THE SUBTEST) TO LOOP ON ERROR^
  3200
  3201					;**********
  3202
  3203
  3204					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3205					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3206					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3207					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3208					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3209					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3210
  3211			001502		SN=SN+1
  3212			777775			ZZ=<ZZ+ZZ+1>&777777
  3213						IFE	<ZZ-1>,<ZZ=777776>
  3214	031745	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3215	031746	561 01 0 00 777775 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3216	031747	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3217	031750	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3218	031751	312 03 0 00 034406 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3219						STOP^
  3220	031752	254 04 0 00 031753 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3221	031753	324 00 0 00 031754 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3223									;IN THE SUBTEST) TO LOOP ON ERROR^
  3224
  3225					;**********
  3226
  3227
  3228					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3229					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3230					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3231					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3232					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3233					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3234
  3235			001503		SN=SN+1
  3236			777773			ZZ=<ZZ+ZZ+1>&777777
  3237						IFE	<ZZ-1>,<ZZ=777776>
  3238	031754	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3239	031755	561 01 0 00 777773 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3240	031756	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3241	031757	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3242	031760	312 03 0 00 034407 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3243						STOP^
  3244	031761	254 04 0 00 031762 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3245	031762	324 00 0 00 031763 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3246									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0078

  3247									;IN THE SUBTEST) TO LOOP ON ERROR^
  3248
  3249					;**********
  3250
  3251
  3252					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3253					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3254					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3255					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3256					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3257					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3258
  3259			001504		SN=SN+1
  3260			777767			ZZ=<ZZ+ZZ+1>&777777
  3261						IFE	<ZZ-1>,<ZZ=777776>
  3262	031763	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3263	031764	561 01 0 00 777767 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3264	031765	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3265	031766	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3266	031767	312 03 0 00 034410 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3267						STOP^
  3268	031770	254 04 0 00 031771 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3269	031771	324 00 0 00 031772 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3270									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3271									;IN THE SUBTEST) TO LOOP ON ERROR^
  3272
  3273					;**********
  3274
  3275
  3276					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3277					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3278					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3279					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3280					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3281					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3282
  3283			001505		SN=SN+1
  3284			777757			ZZ=<ZZ+ZZ+1>&777777
  3285						IFE	<ZZ-1>,<ZZ=777776>
  3286	031772	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3287	031773	561 01 0 00 777757 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3288	031774	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3289	031775	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3290	031776	312 03 0 00 034411 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3291						STOP^
  3292	031777	254 04 0 00 032000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3293	032000	324 00 0 00 032001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3294									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3295									;IN THE SUBTEST) TO LOOP ON ERROR^
  3296
  3297					;**********
  3298
  3299
  3300					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3301					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0079

  3302					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3303					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3304					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3305					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3306
  3307			001506		SN=SN+1
  3308			777737			ZZ=<ZZ+ZZ+1>&777777
  3309						IFE	<ZZ-1>,<ZZ=777776>
  3310	032001	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3311	032002	561 01 0 00 777737 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3312	032003	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3313	032004	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3314	032005	312 03 0 00 034412 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3315						STOP^
  3316	032006	254 04 0 00 032007 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3317	032007	324 00 0 00 032010 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3318									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3319									;IN THE SUBTEST) TO LOOP ON ERROR^
  3320
  3321					;**********
  3322
  3323
  3324					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3325					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3326					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3327					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3328					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3329					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3330
  3331			001507		SN=SN+1
  3332			777677			ZZ=<ZZ+ZZ+1>&777777
  3333						IFE	<ZZ-1>,<ZZ=777776>
  3334	032010	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3335	032011	561 01 0 00 777677 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3336	032012	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3337	032013	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3338	032014	312 03 0 00 034413 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3339						STOP^
  3340	032015	254 04 0 00 032016 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3341	032016	324 00 0 00 032017 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3342									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3343									;IN THE SUBTEST) TO LOOP ON ERROR^
  3344
  3345					;**********
  3346
  3347
  3348					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3349					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3350					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3351					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3352					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3353					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3354
  3355			001510		SN=SN+1
  3356			777577			ZZ=<ZZ+ZZ+1>&777777
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0080

  3357						IFE	<ZZ-1>,<ZZ=777776>
  3358	032017	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3359	032020	561 01 0 00 777577 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3360	032021	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3361	032022	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3362	032023	312 03 0 00 034414 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3363						STOP^
  3364	032024	254 04 0 00 032025 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3365	032025	324 00 0 00 032026 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3366									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3367									;IN THE SUBTEST) TO LOOP ON ERROR^
  3368
  3369					;**********
  3370
  3371
  3372					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3373					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3374					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3375					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3376					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3377					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3378
  3379			001511		SN=SN+1
  3380			777377			ZZ=<ZZ+ZZ+1>&777777
  3381						IFE	<ZZ-1>,<ZZ=777776>
  3382	032026	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3383	032027	561 01 0 00 777377 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3384	032030	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3385	032031	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3386	032032	312 03 0 00 034415 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3387						STOP^
  3388	032033	254 04 0 00 032034 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3389	032034	324 00 0 00 032035 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3391									;IN THE SUBTEST) TO LOOP ON ERROR^
  3392
  3393					;**********
  3394
  3395
  3396					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3397					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3398					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3399					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3400					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3401					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3402
  3403			001512		SN=SN+1
  3404			776777			ZZ=<ZZ+ZZ+1>&777777
  3405						IFE	<ZZ-1>,<ZZ=777776>
  3406	032035	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3407	032036	561 01 0 00 776777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3408	032037	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3409	032040	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3410	032041	312 03 0 00 034416 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3411						STOP^
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0081

  3412	032042	254 04 0 00 032043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3413	032043	324 00 0 00 032044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3414									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3415									;IN THE SUBTEST) TO LOOP ON ERROR^
  3416
  3417					;**********
  3418
  3419
  3420					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3421					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3422					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3423					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3424					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3425					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3426
  3427			001513		SN=SN+1
  3428			775777			ZZ=<ZZ+ZZ+1>&777777
  3429						IFE	<ZZ-1>,<ZZ=777776>
  3430	032044	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3431	032045	561 01 0 00 775777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3432	032046	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3433	032047	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3434	032050	312 03 0 00 034417 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3435						STOP^
  3436	032051	254 04 0 00 032052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3437	032052	324 00 0 00 032053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3438									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3439									;IN THE SUBTEST) TO LOOP ON ERROR^
  3440
  3441					;**********
  3442
  3443
  3444					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3445					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3446					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3447					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3448					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3449					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3450
  3451			001514		SN=SN+1
  3452			773777			ZZ=<ZZ+ZZ+1>&777777
  3453						IFE	<ZZ-1>,<ZZ=777776>
  3454	032053	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3455	032054	561 01 0 00 773777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3456	032055	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3457	032056	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3458	032057	312 03 0 00 034420 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3459						STOP^
  3460	032060	254 04 0 00 032061 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3461	032061	324 00 0 00 032062 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3462									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3463									;IN THE SUBTEST) TO LOOP ON ERROR^
  3464
  3465					;**********
  3466
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0082

  3467
  3468					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3469					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3470					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3471					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3472					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3473					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3474
  3475			001515		SN=SN+1
  3476			767777			ZZ=<ZZ+ZZ+1>&777777
  3477						IFE	<ZZ-1>,<ZZ=777776>
  3478	032062	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3479	032063	561 01 0 00 767777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3480	032064	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3481	032065	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3482	032066	312 03 0 00 034421 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3483						STOP^
  3484	032067	254 04 0 00 032070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3485	032070	324 00 0 00 032071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3486									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3487									;IN THE SUBTEST) TO LOOP ON ERROR^
  3488
  3489					;**********
  3490
  3491
  3492					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3493					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3494					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3495					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3496					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3497					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3498
  3499			001516		SN=SN+1
  3500			757777			ZZ=<ZZ+ZZ+1>&777777
  3501						IFE	<ZZ-1>,<ZZ=777776>
  3502	032071	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3503	032072	561 01 0 00 757777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3504	032073	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3505	032074	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3506	032075	312 03 0 00 034422 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3507						STOP^
  3508	032076	254 04 0 00 032077 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3509	032077	324 00 0 00 032100 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3510									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3511									;IN THE SUBTEST) TO LOOP ON ERROR^
  3512
  3513					;**********
  3514
  3515
  3516					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3517					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3518					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3519					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3520					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3521					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0083

  3522
  3523			001517		SN=SN+1
  3524			737777			ZZ=<ZZ+ZZ+1>&777777
  3525						IFE	<ZZ-1>,<ZZ=777776>
  3526	032100	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3527	032101	561 01 0 00 737777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3528	032102	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3529	032103	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3530	032104	312 03 0 00 034423 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3531						STOP^
  3532	032105	254 04 0 00 032106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3533	032106	324 00 0 00 032107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3534									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3535									;IN THE SUBTEST) TO LOOP ON ERROR^
  3536
  3537					;**********
  3538
  3539
  3540					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3541					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3542					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3543					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3544					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3545					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3546
  3547			001520		SN=SN+1
  3548			677777			ZZ=<ZZ+ZZ+1>&777777
  3549						IFE	<ZZ-1>,<ZZ=777776>
  3550	032107	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3551	032110	561 01 0 00 677777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3552	032111	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3553	032112	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3554	032113	312 03 0 00 034424 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3555						STOP^
  3556	032114	254 04 0 00 032115 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3557	032115	324 00 0 00 032116 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3558									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3559									;IN THE SUBTEST) TO LOOP ON ERROR^
  3560
  3561					;**********
  3562
  3563
  3564					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3565					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3566					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3567					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3568					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3569					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3570
  3571			001521		SN=SN+1
  3572			577777			ZZ=<ZZ+ZZ+1>&777777
  3573						IFE	<ZZ-1>,<ZZ=777776>
  3574	032116	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3575	032117	561 01 0 00 577777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3576	032120	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 10-8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0084

  3577	032121	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3578	032122	312 03 0 00 034425 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3579						STOP^
  3580	032123	254 04 0 00 032124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3581	032124	324 00 0 00 032125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3582									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3583									;IN THE SUBTEST) TO LOOP ON ERROR^
  3584
  3585					;**********
  3586
  3587
  3588					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3589					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3590					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3591					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3592					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3593					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3594
  3595			001522		SN=SN+1
  3596			377777			ZZ=<ZZ+ZZ+1>&777777
  3597						IFE	<ZZ-1>,<ZZ=777776>
  3598	032125	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3599	032126	561 01 0 00 377777 		HRROI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3600	032127	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3601	032130	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3602	032131	312 03 0 00 034426 		CAME	3,[-1,,ZZ]	;TEST INDEXING
  3603						STOP^
  3604	032132	254 04 0 00 032133 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3605	032133	324 00 0 00 032134 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3606									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3607									;IN THE SUBTEST) TO LOOP ON ERROR^
  3608
  3609					;**********
  3610
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0085

  3611			001600		SN=1600
  3612			000000			ZZ=0 
  3613
  3614					C1600:	REPEAT	^D18,<
  3615					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3616					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3617					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3618					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3619					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3620					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3621					
  3622					SN=SN+1
  3623						ZZ=<ZZ+ZZ+1>&777777
  3624						IFE	<ZZ-1>,<ZZ=777776>
  3625						SETZM	3		;PRELOAD AC3 WITH 0
  3626						HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3627						MOVEI	2,1		;SETUP INDEX REGISTER
  3628						MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3629						CAME	3,[ZZ,,-1]	;TEST INDEXING
  3630						STOP
  3631					
  3632					;**********
  3633					>
  3634
  3635					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3636					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3637					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3638					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3639					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3640					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3641
  3642			001601		SN=SN+1
  3643			000001			ZZ=<ZZ+ZZ+1>&777777
  3644			777776			IFE	<ZZ-1>,<ZZ=777776>
  3645	032134	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3646	032135	525 01 0 00 777776 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3647	032136	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3648	032137	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3649	032140	312 03 0 00 034427 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3650						STOP^
  3651	032141	254 04 0 00 032142 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3652	032142	324 00 0 00 032143 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3653									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3654									;IN THE SUBTEST) TO LOOP ON ERROR^
  3655
  3656					;**********
  3657
  3658
  3659					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3660					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3661					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3662					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3663					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3664					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3665
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0086

  3666			001602		SN=SN+1
  3667			777775			ZZ=<ZZ+ZZ+1>&777777
  3668						IFE	<ZZ-1>,<ZZ=777776>
  3669	032143	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3670	032144	525 01 0 00 777775 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3671	032145	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3672	032146	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3673	032147	312 03 0 00 034430 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3674						STOP^
  3675	032150	254 04 0 00 032151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3676	032151	324 00 0 00 032152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3677									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3678									;IN THE SUBTEST) TO LOOP ON ERROR^
  3679
  3680					;**********
  3681
  3682
  3683					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3684					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3685					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3686					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3687					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3688					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3689
  3690			001603		SN=SN+1
  3691			777773			ZZ=<ZZ+ZZ+1>&777777
  3692						IFE	<ZZ-1>,<ZZ=777776>
  3693	032152	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3694	032153	525 01 0 00 777773 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3695	032154	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3696	032155	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3697	032156	312 03 0 00 034431 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3698						STOP^
  3699	032157	254 04 0 00 032160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3700	032160	324 00 0 00 032161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3701									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3702									;IN THE SUBTEST) TO LOOP ON ERROR^
  3703
  3704					;**********
  3705
  3706
  3707					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3708					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3709					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3710					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3711					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3712					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3713
  3714			001604		SN=SN+1
  3715			777767			ZZ=<ZZ+ZZ+1>&777777
  3716						IFE	<ZZ-1>,<ZZ=777776>
  3717	032161	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3718	032162	525 01 0 00 777767 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3719	032163	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3720	032164	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0087

  3721	032165	312 03 0 00 034432 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3722						STOP^
  3723	032166	254 04 0 00 032167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3724	032167	324 00 0 00 032170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3725									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3726									;IN THE SUBTEST) TO LOOP ON ERROR^
  3727
  3728					;**********
  3729
  3730
  3731					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3732					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3733					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3734					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3735					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3736					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3737
  3738			001605		SN=SN+1
  3739			777757			ZZ=<ZZ+ZZ+1>&777777
  3740						IFE	<ZZ-1>,<ZZ=777776>
  3741	032170	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3742	032171	525 01 0 00 777757 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3743	032172	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3744	032173	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3745	032174	312 03 0 00 034433 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3746						STOP^
  3747	032175	254 04 0 00 032176 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3748	032176	324 00 0 00 032177 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3749									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3750									;IN THE SUBTEST) TO LOOP ON ERROR^
  3751
  3752					;**********
  3753
  3754
  3755					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3756					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3757					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3758					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3759					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3760					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3761
  3762			001606		SN=SN+1
  3763			777737			ZZ=<ZZ+ZZ+1>&777777
  3764						IFE	<ZZ-1>,<ZZ=777776>
  3765	032177	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3766	032200	525 01 0 00 777737 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3767	032201	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3768	032202	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3769	032203	312 03 0 00 034434 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3770						STOP^
  3771	032204	254 04 0 00 032205 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3772	032205	324 00 0 00 032206 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3773									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3774									;IN THE SUBTEST) TO LOOP ON ERROR^
  3775
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0088

  3776					;**********
  3777
  3778
  3779					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3780					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3781					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3782					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3783					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3784					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3785
  3786			001607		SN=SN+1
  3787			777677			ZZ=<ZZ+ZZ+1>&777777
  3788						IFE	<ZZ-1>,<ZZ=777776>
  3789	032206	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3790	032207	525 01 0 00 777677 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3791	032210	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3792	032211	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3793	032212	312 03 0 00 034435 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3794						STOP^
  3795	032213	254 04 0 00 032214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3796	032214	324 00 0 00 032215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3797									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3798									;IN THE SUBTEST) TO LOOP ON ERROR^
  3799
  3800					;**********
  3801
  3802
  3803					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3804					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3805					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3806					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3807					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3808					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3809
  3810			001610		SN=SN+1
  3811			777577			ZZ=<ZZ+ZZ+1>&777777
  3812						IFE	<ZZ-1>,<ZZ=777776>
  3813	032215	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3814	032216	525 01 0 00 777577 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3815	032217	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3816	032220	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3817	032221	312 03 0 00 034436 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3818						STOP^
  3819	032222	254 04 0 00 032223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3820	032223	324 00 0 00 032224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3821									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3822									;IN THE SUBTEST) TO LOOP ON ERROR^
  3823
  3824					;**********
  3825
  3826
  3827					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3828					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3829					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3830					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0089

  3831					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3832					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3833
  3834			001611		SN=SN+1
  3835			777377			ZZ=<ZZ+ZZ+1>&777777
  3836						IFE	<ZZ-1>,<ZZ=777776>
  3837	032224	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3838	032225	525 01 0 00 777377 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3839	032226	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3840	032227	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3841	032230	312 03 0 00 034437 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3842						STOP^
  3843	032231	254 04 0 00 032232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3844	032232	324 00 0 00 032233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3845									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3846									;IN THE SUBTEST) TO LOOP ON ERROR^
  3847
  3848					;**********
  3849
  3850
  3851					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3852					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3853					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3854					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3855					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3856					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3857
  3858			001612		SN=SN+1
  3859			776777			ZZ=<ZZ+ZZ+1>&777777
  3860						IFE	<ZZ-1>,<ZZ=777776>
  3861	032233	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3862	032234	525 01 0 00 776777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3863	032235	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3864	032236	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3865	032237	312 03 0 00 034440 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3866						STOP^
  3867	032240	254 04 0 00 032241 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3868	032241	324 00 0 00 032242 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3869									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3870									;IN THE SUBTEST) TO LOOP ON ERROR^
  3871
  3872					;**********
  3873
  3874
  3875					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3876					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3877					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3878					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3879					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3880					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3881
  3882			001613		SN=SN+1
  3883			775777			ZZ=<ZZ+ZZ+1>&777777
  3884						IFE	<ZZ-1>,<ZZ=777776>
  3885	032242	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0090

  3886	032243	525 01 0 00 775777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3887	032244	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3888	032245	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3889	032246	312 03 0 00 034441 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3890						STOP^
  3891	032247	254 04 0 00 032250 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3892	032250	324 00 0 00 032251 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3893									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3894									;IN THE SUBTEST) TO LOOP ON ERROR^
  3895
  3896					;**********
  3897
  3898
  3899					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3900					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3901					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3902					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3903					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3904					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3905
  3906			001614		SN=SN+1
  3907			773777			ZZ=<ZZ+ZZ+1>&777777
  3908						IFE	<ZZ-1>,<ZZ=777776>
  3909	032251	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3910	032252	525 01 0 00 773777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3911	032253	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3912	032254	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3913	032255	312 03 0 00 034442 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3914						STOP^
  3915	032256	254 04 0 00 032257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3916	032257	324 00 0 00 032260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3917									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3918									;IN THE SUBTEST) TO LOOP ON ERROR^
  3919
  3920					;**********
  3921
  3922
  3923					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3924					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3925					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3926					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3927					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3928					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3929
  3930			001615		SN=SN+1
  3931			767777			ZZ=<ZZ+ZZ+1>&777777
  3932						IFE	<ZZ-1>,<ZZ=777776>
  3933	032260	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3934	032261	525 01 0 00 767777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3935	032262	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3936	032263	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3937	032264	312 03 0 00 034443 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3938						STOP^
  3939	032265	254 04 0 00 032266 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3940	032266	324 00 0 00 032267 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0091

  3941									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3942									;IN THE SUBTEST) TO LOOP ON ERROR^
  3943
  3944					;**********
  3945
  3946
  3947					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3948					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3949					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3950					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3951					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3952					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3953
  3954			001616		SN=SN+1
  3955			757777			ZZ=<ZZ+ZZ+1>&777777
  3956						IFE	<ZZ-1>,<ZZ=777776>
  3957	032267	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3958	032270	525 01 0 00 757777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3959	032271	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3960	032272	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3961	032273	312 03 0 00 034444 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3962						STOP^
  3963	032274	254 04 0 00 032275 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3964	032275	324 00 0 00 032276 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3965									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3966									;IN THE SUBTEST) TO LOOP ON ERROR^
  3967
  3968					;**********
  3969
  3970
  3971					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  3972					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3973					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3974					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3975					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  3976					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  3977
  3978			001617		SN=SN+1
  3979			737777			ZZ=<ZZ+ZZ+1>&777777
  3980						IFE	<ZZ-1>,<ZZ=777776>
  3981	032276	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  3982	032277	525 01 0 00 737777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  3983	032300	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  3984	032301	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  3985	032302	312 03 0 00 034445 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  3986						STOP^
  3987	032303	254 04 0 00 032304 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3988	032304	324 00 0 00 032305 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3989									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3990									;IN THE SUBTEST) TO LOOP ON ERROR^
  3991
  3992					;**********
  3993
  3994
  3995					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0092

  3996					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  3997					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  3998					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  3999					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  4000					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  4001
  4002			001620		SN=SN+1
  4003			677777			ZZ=<ZZ+ZZ+1>&777777
  4004						IFE	<ZZ-1>,<ZZ=777776>
  4005	032305	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  4006	032306	525 01 0 00 677777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  4007	032307	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  4008	032310	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  4009	032311	312 03 0 00 034446 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  4010						STOP^
  4011	032312	254 04 0 00 032313 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4012	032313	324 00 0 00 032314 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4013									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4014									;IN THE SUBTEST) TO LOOP ON ERROR^
  4015
  4016					;**********
  4017
  4018
  4019					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  4020					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  4021					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  4022					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  4023					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  4024					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  4025
  4026			001621		SN=SN+1
  4027			577777			ZZ=<ZZ+ZZ+1>&777777
  4028						IFE	<ZZ-1>,<ZZ=777776>
  4029	032314	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  4030	032315	525 01 0 00 577777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  4031	032316	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  4032	032317	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  4033	032320	312 03 0 00 034447 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  4034						STOP^
  4035	032321	254 04 0 00 032322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4036	032322	324 00 0 00 032323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4037									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4038									;IN THE SUBTEST) TO LOOP ON ERROR^
  4039
  4040					;**********
  4041
  4042
  4043					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  4044					;IN THIS TEST, A MOVE INSTRUCTION USING INDEXING IS EXECUTED.  THE MOVE INSTRUCTION
  4045					;SHOULD PLACE THE CONTENTS OF THE LOCATION SPECIFIED BY INDEX REGISTER 2 INTO AC3.
  4046					;SINCE INDEX REGISTER 2 WAS PRELOADED WITH A 1 AND AC1 WAS PRELOADED WITH A
  4047					;FLOATING 0, THE FINAL RESULT IN AC3 SHOULD BE A FLOATING 0.
  4048					;IF C(AC3)=A FLOATING 0, THIS TEST PASSES.
  4049
  4050			001622		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 11-8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0093

  4051			377777			ZZ=<ZZ+ZZ+1>&777777
  4052						IFE	<ZZ-1>,<ZZ=777776>
  4053	032323	402 00 0 00 000003 		SETZM	3		;PRELOAD AC3 WITH 0
  4054	032324	525 01 0 00 377777 		HRLOI	1,ZZ		;PRELOAD AC1 WITH FLOATING 0
  4055	032325	201 02 0 00 000001 		MOVEI	2,1		;SETUP INDEX REGISTER
  4056	032326	200 03 0 02 000000 		MOVE	3,(2)		;*FWT FROM INDEXED LOCATION
  4057	032327	312 03 0 00 034450 		CAME	3,[ZZ,,-1]	;TEST INDEXING
  4058						STOP^
  4059	032330	254 04 0 00 032331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4060	032331	324 00 0 00 032332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4061									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4062									;IN THE SUBTEST) TO LOOP ON ERROR^
  4063
  4064					;**********
  4065
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0094

  4066					;VERIFY INDEXING WHERE 'E' IS NON-ZERO
  4067
  4068			001700		SN=1700
  4069		777777	777777			ZZ=-1
  4070		777777	777770			XX=-10
  4071
  4072					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  4073					;IN THIS TEST, THE INDEX REG IS SET-UP WITH MOVEI ZZ+1,ZZ-XX,
  4074					;WHERE ZZ+1 IS THE INDEX REG.  THE AC IS PRELOADED WITH ITS OWN ADDRESS, 0,,ZZ.
  4075					;CAIE IS USED TO TEST THE INDEXING OPERATION.
  4076					;IF THE RESULT IN C(AC)=XX+C(ZZ+1 - RIGHT), THIS TEST PASSES.
  4077					;XX+C(ZZ+1 - RIGHT) SHOULD = ZZ.
  4078
  4079					C1700:	REPEAT	^D15,
  4080					<SN=SN+1
  4081						ZZ=ZZ+1
  4082						XX=XX+3
  4083						MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4084						MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4085						CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4086						STOP
  4087					
  4088					;**********
  4089					>
  4090			001701		SN=SN+1
  4091			000000			ZZ=ZZ+1
  4092		777777	777773			XX=XX+3
  4093	032332	201 01 0 00 000005 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4094	032333	201 00 0 00 000000 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4095	032334	302 00 0 01 777773 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4096						STOP^
  4097	032335	254 04 0 00 032336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4098	032336	324 00 0 00 032337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4099									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4100									;IN THE SUBTEST) TO LOOP ON ERROR^
  4101
  4102					;**********
  4103
  4104			001702		SN=SN+1
  4105			000001			ZZ=ZZ+1
  4106		777777	777776			XX=XX+3
  4107	032337	201 02 0 00 000003 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4108	032340	201 01 0 00 000001 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4109	032341	302 01 0 02 777776 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4110						STOP^
  4111	032342	254 04 0 00 032343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4112	032343	324 00 0 00 032344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4113									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4114									;IN THE SUBTEST) TO LOOP ON ERROR^
  4115
  4116					;**********
  4117
  4118			001703		SN=SN+1
  4119			000002			ZZ=ZZ+1
  4120			000001			XX=XX+3
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0095

  4121	032344	201 03 0 00 000001 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4122	032345	201 02 0 00 000002 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4123	032346	302 02 0 03 000001 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4124						STOP^
  4125	032347	254 04 0 00 032350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4126	032350	324 00 0 00 032351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4127									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4128									;IN THE SUBTEST) TO LOOP ON ERROR^
  4129
  4130					;**********
  4131
  4132			001704		SN=SN+1
  4133			000003			ZZ=ZZ+1
  4134			000004			XX=XX+3
  4135	032351	201 04 0 00 777777 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4136	032352	201 03 0 00 000003 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4137	032353	302 03 0 04 000004 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4138						STOP^
  4139	032354	254 04 0 00 032355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4140	032355	324 00 0 00 032356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4141									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4142									;IN THE SUBTEST) TO LOOP ON ERROR^
  4143
  4144					;**********
  4145
  4146			001705		SN=SN+1
  4147			000004			ZZ=ZZ+1
  4148			000007			XX=XX+3
  4149	032356	201 05 0 00 777775 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4150	032357	201 04 0 00 000004 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4151	032360	302 04 0 05 000007 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4152						STOP^
  4153	032361	254 04 0 00 032362 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4154	032362	324 00 0 00 032363 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4155									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4156									;IN THE SUBTEST) TO LOOP ON ERROR^
  4157
  4158					;**********
  4159
  4160			001706		SN=SN+1
  4161			000005			ZZ=ZZ+1
  4162			000012			XX=XX+3
  4163	032363	201 06 0 00 777773 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4164	032364	201 05 0 00 000005 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4165	032365	302 05 0 06 000012 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4166						STOP^
  4167	032366	254 04 0 00 032367 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4168	032367	324 00 0 00 032370 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4169									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4170									;IN THE SUBTEST) TO LOOP ON ERROR^
  4171
  4172					;**********
  4173
  4174			001707		SN=SN+1
  4175			000006			ZZ=ZZ+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-2
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0096

  4176			000015			XX=XX+3
  4177	032370	201 07 0 00 777771 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4178	032371	201 06 0 00 000006 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4179	032372	302 06 0 07 000015 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4180						STOP^
  4181	032373	254 04 0 00 032374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4182	032374	324 00 0 00 032375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4183									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4184									;IN THE SUBTEST) TO LOOP ON ERROR^
  4185
  4186					;**********
  4187
  4188			001710		SN=SN+1
  4189			000007			ZZ=ZZ+1
  4190			000020			XX=XX+3
  4191	032375	201 10 0 00 777767 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4192	032376	201 07 0 00 000007 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4193	032377	302 07 0 10 000020 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4194						STOP^
  4195	032400	254 04 0 00 032401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4196	032401	324 00 0 00 032402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4197									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4198									;IN THE SUBTEST) TO LOOP ON ERROR^
  4199
  4200					;**********
  4201
  4202			001711		SN=SN+1
  4203			000010			ZZ=ZZ+1
  4204			000023			XX=XX+3
  4205	032402	201 11 0 00 777765 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4206	032403	201 10 0 00 000010 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4207	032404	302 10 0 11 000023 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4208						STOP^
  4209	032405	254 04 0 00 032406 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4210	032406	324 00 0 00 032407 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4211									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4212									;IN THE SUBTEST) TO LOOP ON ERROR^
  4213
  4214					;**********
  4215
  4216			001712		SN=SN+1
  4217			000011			ZZ=ZZ+1
  4218			000026			XX=XX+3
  4219	032407	201 12 0 00 777763 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4220	032410	201 11 0 00 000011 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4221	032411	302 11 0 12 000026 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4222						STOP^
  4223	032412	254 04 0 00 032413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4224	032413	324 00 0 00 032414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4225									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4226									;IN THE SUBTEST) TO LOOP ON ERROR^
  4227
  4228					;**********
  4229
  4230			001713		SN=SN+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-3
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0097

  4231			000012			ZZ=ZZ+1
  4232			000031			XX=XX+3
  4233	032414	201 13 0 00 777761 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4234	032415	201 12 0 00 000012 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4235	032416	302 12 0 13 000031 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4236						STOP^
  4237	032417	254 04 0 00 032420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4238	032420	324 00 0 00 032421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4239									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4240									;IN THE SUBTEST) TO LOOP ON ERROR^
  4241
  4242					;**********
  4243
  4244			001714		SN=SN+1
  4245			000013			ZZ=ZZ+1
  4246			000034			XX=XX+3
  4247	032421	201 14 0 00 777757 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4248	032422	201 13 0 00 000013 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4249	032423	302 13 0 14 000034 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4250						STOP^
  4251	032424	254 04 0 00 032425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4252	032425	324 00 0 00 032426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4253									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4254									;IN THE SUBTEST) TO LOOP ON ERROR^
  4255
  4256					;**********
  4257
  4258			001715		SN=SN+1
  4259			000014			ZZ=ZZ+1
  4260			000037			XX=XX+3
  4261	032426	201 15 0 00 777755 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4262	032427	201 14 0 00 000014 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4263	032430	302 14 0 15 000037 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4264						STOP^
  4265	032431	254 04 0 00 032432 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4266	032432	324 00 0 00 032433 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4267									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4268									;IN THE SUBTEST) TO LOOP ON ERROR^
  4269
  4270					;**********
  4271
  4272			001716		SN=SN+1
  4273			000015			ZZ=ZZ+1
  4274			000042			XX=XX+3
  4275	032433	201 16 0 00 777753 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4276	032434	201 15 0 00 000015 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4277	032435	302 15 0 16 000042 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4278						STOP^
  4279	032436	254 04 0 00 032437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4280	032437	324 00 0 00 032440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4281									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4282									;IN THE SUBTEST) TO LOOP ON ERROR^
  4283
  4284					;**********
  4285
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-4
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0098

  4286			001717		SN=SN+1
  4287			000016			ZZ=ZZ+1
  4288			000045			XX=XX+3
  4289	032440	201 17 0 00 777751 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4290	032441	201 16 0 00 000016 		MOVEI	ZZ,ZZ		;PRELOAD AC WITH 0,,ZZ
  4291	032442	302 16 0 17 000045 		CAIE	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4292						STOP^
  4293	032443	254 04 0 00 032444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4294	032444	324 00 0 00 032445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4295									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4296									;IN THE SUBTEST) TO LOOP ON ERROR^
  4297
  4298					;**********
  4299
  4300					PAGE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-5
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0099

  4301			002000		SN=2000
  4302		777777	777777			ZZ=-1
  4303		777777	777760			XX=-20
  4304
  4305					;THIS TEST VERIFIES THAT INDEX REGISTER ADDRESSING FUNCTIONS CORRECTLY.
  4306					;IN THIS TEST, THE INDEX REG IS SET-UP WITH MOVEI ZZ+1,ZZ-XX,
  4307					;WHERE ZZ+1 IS THE INDEX REG.  INDEXING IS TESTED BY LOADING
  4308					;THE AC VIA MOVEI ZZ,XX(ZZ+1), WHERE XX+C(ZZ+1)=ZZ.
  4309					;IF THE RESULT IN THE AC EQUALS 0,,ZZ, THIS TEST PASSES.
  4310
  4311					C2000:	REPEAT	^D15,
  4312					<SN=SN+1
  4313						ZZ=ZZ+1
  4314						XX=XX+5
  4315						MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4316						MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4317						CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4318						STOP
  4319					
  4320					;**********
  4321					>
  4322			002001		SN=SN+1
  4323			000000			ZZ=ZZ+1
  4324		777777	777765			XX=XX+5
  4325	032445	201 01 0 00 000013 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4326	032446	201 00 0 01 777765 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4327	032447	302 00 0 00 000000 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4328						STOP^
  4329	032450	254 04 0 00 032451 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4330	032451	324 00 0 00 032452 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4331									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4332									;IN THE SUBTEST) TO LOOP ON ERROR^
  4333
  4334					;**********
  4335
  4336			002002		SN=SN+1
  4337			000001			ZZ=ZZ+1
  4338		777777	777772			XX=XX+5
  4339	032452	201 02 0 00 000007 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4340	032453	201 01 0 02 777772 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4341	032454	302 01 0 00 000001 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4342						STOP^
  4343	032455	254 04 0 00 032456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4344	032456	324 00 0 00 032457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4345									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4346									;IN THE SUBTEST) TO LOOP ON ERROR^
  4347
  4348					;**********
  4349
  4350			002003		SN=SN+1
  4351			000002			ZZ=ZZ+1
  4352		777777	777777			XX=XX+5
  4353	032457	201 03 0 00 000003 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4354	032460	201 02 0 03 777777 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4355	032461	302 02 0 00 000002 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-6
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0100

  4356						STOP^
  4357	032462	254 04 0 00 032463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4358	032463	324 00 0 00 032464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4359									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4360									;IN THE SUBTEST) TO LOOP ON ERROR^
  4361
  4362					;**********
  4363
  4364			002004		SN=SN+1
  4365			000003			ZZ=ZZ+1
  4366			000004			XX=XX+5
  4367	032464	201 04 0 00 777777 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4368	032465	201 03 0 04 000004 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4369	032466	302 03 0 00 000003 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4370						STOP^
  4371	032467	254 04 0 00 032470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4372	032470	324 00 0 00 032471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4373									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4374									;IN THE SUBTEST) TO LOOP ON ERROR^
  4375
  4376					;**********
  4377
  4378			002005		SN=SN+1
  4379			000004			ZZ=ZZ+1
  4380			000011			XX=XX+5
  4381	032471	201 05 0 00 777773 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4382	032472	201 04 0 05 000011 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4383	032473	302 04 0 00 000004 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4384						STOP^
  4385	032474	254 04 0 00 032475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4386	032475	324 00 0 00 032476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4387									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4388									;IN THE SUBTEST) TO LOOP ON ERROR^
  4389
  4390					;**********
  4391
  4392			002006		SN=SN+1
  4393			000005			ZZ=ZZ+1
  4394			000016			XX=XX+5
  4395	032476	201 06 0 00 777767 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4396	032477	201 05 0 06 000016 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4397	032500	302 05 0 00 000005 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4398						STOP^
  4399	032501	254 04 0 00 032502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4400	032502	324 00 0 00 032503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4401									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4402									;IN THE SUBTEST) TO LOOP ON ERROR^
  4403
  4404					;**********
  4405
  4406			002007		SN=SN+1
  4407			000006			ZZ=ZZ+1
  4408			000023			XX=XX+5
  4409	032503	201 07 0 00 777763 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4410	032504	201 06 0 07 000023 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-7
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0101

  4411	032505	302 06 0 00 000006 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4412						STOP^
  4413	032506	254 04 0 00 032507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4414	032507	324 00 0 00 032510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4415									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4416									;IN THE SUBTEST) TO LOOP ON ERROR^
  4417
  4418					;**********
  4419
  4420			002010		SN=SN+1
  4421			000007			ZZ=ZZ+1
  4422			000030			XX=XX+5
  4423	032510	201 10 0 00 777757 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4424	032511	201 07 0 10 000030 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4425	032512	302 07 0 00 000007 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4426						STOP^
  4427	032513	254 04 0 00 032514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4428	032514	324 00 0 00 032515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4430									;IN THE SUBTEST) TO LOOP ON ERROR^
  4431
  4432					;**********
  4433
  4434			002011		SN=SN+1
  4435			000010			ZZ=ZZ+1
  4436			000035			XX=XX+5
  4437	032515	201 11 0 00 777753 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4438	032516	201 10 0 11 000035 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4439	032517	302 10 0 00 000010 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4440						STOP^
  4441	032520	254 04 0 00 032521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4442	032521	324 00 0 00 032522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4443									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4444									;IN THE SUBTEST) TO LOOP ON ERROR^
  4445
  4446					;**********
  4447
  4448			002012		SN=SN+1
  4449			000011			ZZ=ZZ+1
  4450			000042			XX=XX+5
  4451	032522	201 12 0 00 777747 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4452	032523	201 11 0 12 000042 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4453	032524	302 11 0 00 000011 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4454						STOP^
  4455	032525	254 04 0 00 032526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4456	032526	324 00 0 00 032527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4457									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4458									;IN THE SUBTEST) TO LOOP ON ERROR^
  4459
  4460					;**********
  4461
  4462			002013		SN=SN+1
  4463			000012			ZZ=ZZ+1
  4464			000047			XX=XX+5
  4465	032527	201 13 0 00 777743 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-8
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0102

  4466	032530	201 12 0 13 000047 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4467	032531	302 12 0 00 000012 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4468						STOP^
  4469	032532	254 04 0 00 032533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4470	032533	324 00 0 00 032534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4471									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4472									;IN THE SUBTEST) TO LOOP ON ERROR^
  4473
  4474					;**********
  4475
  4476			002014		SN=SN+1
  4477			000013			ZZ=ZZ+1
  4478			000054			XX=XX+5
  4479	032534	201 14 0 00 777737 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4480	032535	201 13 0 14 000054 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4481	032536	302 13 0 00 000013 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4482						STOP^
  4483	032537	254 04 0 00 032540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4484	032540	324 00 0 00 032541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4485									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4486									;IN THE SUBTEST) TO LOOP ON ERROR^
  4487
  4488					;**********
  4489
  4490			002015		SN=SN+1
  4491			000014			ZZ=ZZ+1
  4492			000061			XX=XX+5
  4493	032541	201 15 0 00 777733 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4494	032542	201 14 0 15 000061 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4495	032543	302 14 0 00 000014 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4496						STOP^
  4497	032544	254 04 0 00 032545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4498	032545	324 00 0 00 032546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4499									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4500									;IN THE SUBTEST) TO LOOP ON ERROR^
  4501
  4502					;**********
  4503
  4504			002016		SN=SN+1
  4505			000015			ZZ=ZZ+1
  4506			000066			XX=XX+5
  4507	032546	201 16 0 00 777727 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4508	032547	201 15 0 16 000066 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4509	032550	302 15 0 00 000015 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4510						STOP^
  4511	032551	254 04 0 00 032552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4512	032552	324 00 0 00 032553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4513									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4514									;IN THE SUBTEST) TO LOOP ON ERROR^
  4515
  4516					;**********
  4517
  4518			002017		SN=SN+1
  4519			000016			ZZ=ZZ+1
  4520			000073			XX=XX+5
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 12-9
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INDEX REGISTER ADDRESSING                                                  SEQ 0103

  4521	032553	201 17 0 00 777723 		MOVEI	ZZ+1,ZZ-XX	;SETUP INDEX REGISTER
  4522	032554	201 16 0 17 000073 		MOVEI	ZZ,XX(ZZ+1)	;*TEST INDEXING
  4523	032555	302 16 0 00 000016 		CAIE	ZZ,ZZ		;PASS IF C(AC)=0,,ADDRESS OF AC
  4524						STOP^
  4525	032556	254 04 0 00 032557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4526	032557	324 00 0 00 032560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4527									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4528									;IN THE SUBTEST) TO LOOP ON ERROR^
  4529
  4530					;**********
  4531
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 13
DSKAD1	MAC	28-Mar-78 13:50		TEST OF EXCH INSTRUCTION                                                           SEQ 0104

  4532					SUBTTL	TEST OF EXCH INSTRUCTION
  4533
  4534					;**********
  4535
  4536					;THIS TEST VERIFIES THAT EXCH MOVES C(E) INTO AC AND
  4537					;MOVES C(AC) INTO E.
  4538					;IN THIS CASE, AC=E=0 AND C(AC)=C(E).  HENCE, THE FINAL RESULT
  4539					;IN AC0 SHOULD BE 0.  IF C(AC)=0, THE TEST PASSES.
  4540
  4541	032560	400 00 0 00 000000 	C2100:	SETZ			;PRELOAD AC,E WITH 0
  4542	032561	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 0 INTO AC0
  4543	032562	332 00 0 00 000000 		SKIPE			;PASS IF C(AC0)=0
  4544						STOP^
  4545	032563	254 04 0 00 032564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4546	032564	324 00 0 00 032565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4547									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4548									;IN THE SUBTEST) TO LOOP ON ERROR^
  4549
  4550					;**********
  4551
  4552					;THIS TEST VERIFIES THAT EXCH MOVES C(E) INTO AC AND
  4553					;MOVES C(AC) INTO E.
  4554					;IN THIS CASE, AC=E=-1,,-1 AND C(AC)=C(E).  HENCE, THE FINAL RESULT
  4555					;IN AC0 SHOULD BE -1,,-1.  IF C(AC)=-1,,-1, THE TEST PASSES.
  4556
  4557	032565	474 00 0 00 000000 	C2200:	SETO			;PRELOAD AC,E WITH -1,,-1
  4558	032566	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE -1,,-1 INTO AC0
  4559	032567	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(AC0)=-1,,-1
  4560						STOP^
  4561	032570	254 04 0 00 032571 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4562	032571	324 00 0 00 032572 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4563									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4564									;IN THE SUBTEST) TO LOOP ON ERROR^
  4565
  4566					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 14
DSKAD1	MAC	28-Mar-78 13:50		TEST OF EXCH INSTRUCTION                                                           SEQ 0105

  4567					;THIS TEST VERIFIES THAT EXCH MOVES C(E) INTO AC AND
  4568					;MOVES C(AC) INTO E.
  4569					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=0,,-1.  HENCE, THE FINAL RESULT
  4570					;IN THE AC SHOULD BE 0,,-1 AND THE RESULT IN E SHOULD BE -1,,0,
  4571					;IF THESE RESULTS OCCUR, THE TEST PASSES.
  4572
  4573	032572	205 00 0 00 777777 	C2400:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  4574	032573	201 01 0 00 777777 		MOVEI	1,-1		;PRELOAD E WITH 0,,-1
  4575	032574	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD PLACE 0,,-1 INTO THE AC AND -1,,0 INTO E
  4576	032575	312 01 0 00 034451 		CAME	1,[-1,,0]	;PASS IF C(E)=-1,,0
  4577						STOP^
  4578	032576	254 04 0 00 032577 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4579	032577	324 00 0 00 032600 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4580									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4581									;IN THE SUBTEST) TO LOOP ON ERROR^
  4582	032600	312 00 0 00 034452 	C2410:	CAME	0,[0,,-1]	;PASS IF C(AC)=0,,-1
  4583						STOP^
  4584	032601	254 04 0 00 032602 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4585	032602	324 00 0 00 032603 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4586									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4587									;IN THE SUBTEST) TO LOOP ON ERROR^
  4588
  4589					;**********
  4590
  4591					;THIS TEST VERIFIES THAT EXCH MOVES C(E) INTO AC AND
  4592					;MOVES C(AC) INTO E.
  4593					;IN THIS CASE, C(AC)=0,,-1 AND C(E)=-1,,0.  HENCE, THE FINAL RESULT
  4594					;IN THE AC SHOULD BE -1,,0 AND THE RESULT IN E SHOULD BE 0,,-1.
  4595					;IF THESE RESULTS OCCUR, THE TEST PASSES.
  4596
  4597	032603	201 00 0 00 777777 	C2700:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  4598	032604	205 01 0 00 777777 		MOVSI	1,-1		;PRELOAD E WITH -1,,0
  4599	032605	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD PLACE -1,,0 INTO THE AC AND 0,,-1 INTO E
  4600	032606	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(E)=0,,-1
  4601						STOP^
  4602	032607	254 04 0 00 032610 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4603	032610	324 00 0 00 032611 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4604									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4605									;IN THE SUBTEST) TO LOOP ON ERROR^
  4606	032611	312 00 0 00 034451 	C2710:	CAME	,[XWD -1,0]	;PASS IF C(AC)=-1,,0
  4607						STOP^
  4608	032612	254 04 0 00 032613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4609	032613	324 00 0 00 032614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4610									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4611									;IN THE SUBTEST) TO LOOP ON ERROR^
  4612
  4613					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 15
DSKAD1	MAC	28-Mar-78 13:50		TEST OF EXCH INSTRUCTION                                                           SEQ 0106

  4614					;THIS TEST IS A RELIABILITY CHECK OF EXCH.
  4615					;FIRST, AC, E ARE PRELOADED WITH 252525,,252525.  THERE, EXCH IS
  4616					;EXECUTED 7 TIMES.  THE AC IS THEN CHECKED FOR 252525,,252525.
  4617					;IF C(AC)=C(E)=252525,,252525, THIS TEST PASSES.
  4618					;IN THIS TEST AC=E=AC0
  4619
  4620	032614	200 00 0 00 034453 	C3000:	MOVE	[252525252525]	;PRELOAD AC,E WITH 252525,,252525
  4621						REPEAT	7,
  4622					<	EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0>
  4623	032615	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4624	032616	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4625	032617	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4626	032620	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4627	032621	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4628	032622	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4629	032623	250 00 0 00 000000 		EXCH			;*EXCH SHOULD PLACE 252525,,252525 INTO AC0
  4630	032624	312 00 0 00 034453 		CAME	[252525252525]	;PASS IF C(AC0)=252525,,252525
  4631						STOP^
  4632	032625	254 04 0 00 032626 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4633	032626	324 00 0 00 032627 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4634									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4635									;IN THE SUBTEST) TO LOOP ON ERROR^
  4636
  4637					;**********
  4638					PAGE
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 15-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF EXCH INSTRUCTION                                                           SEQ 0107

  4639					;THIS TEST VERIFIES THAT EXCH MOVES C(AC) INTO E AND C(E) INTO THE AC.
  4640					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1.  EXCH IS EXECUTED 7 TIMES; THEN,
  4641					;THE AC IS CHECKED FOR -1,,-1 AND E IS CHECKED FOR 0.  IF EITHER OF THESE
  4642					;RESULTS ARE NOT FOUND, THIS TEST FAILS.
  4643
  4644	032627	400 00 0 00 000000 	C3100:	SETZ			;PRELOAD AC WITH 0
  4645	032630	474 01 0 00 000000 		SETO	1,0		;PRELOAD E WITH -1,,-1
  4646						REPEAT	7,
  4647					<	EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)>
  4648	032631	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4649	032632	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4650	032633	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4651	032634	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4652	032635	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4653	032636	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4654	032637	250 00 0 00 000001 		EXCH	1		;*EXCH SHOULD EXCHANGE C(AC) AND C(E)
  4655	032640	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(AC)=-1,,-1
  4656						STOP^
  4657	032641	254 04 0 00 032642 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4658	032642	324 00 0 00 032643 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4659									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4660									;IN THE SUBTEST) TO LOOP ON ERROR^
  4661	032643	312 01 0 00 034454 	C3110:	CAME	1,[0]		;PASS IF C(E)=0
  4662						STOP^
  4663	032644	254 04 0 00 032645 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4664	032645	324 00 0 00 032646 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4665									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4666									;IN THE SUBTEST) TO LOOP ON ERROR^
  4667
  4668					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 16
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MOVEM INSTRUCTION                                                          SEQ 0108

  4669					SUBTTL	TEST OF MOVEM INSTRUCTION
  4670
  4671					;THIS TEST VERIFIES THAT MOVEM PLACES C(AC) INTO E AND DOES NOT MODIFY C(AC)
  4672					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=0.  HENCE, THE RESULT IN AC AND E SHOULD
  4673					;BE -1,,-1.  IF C(AC) AND C(E)=-1,,-1, THIS TEST PASSES
  4674
  4675	032646	474 00 0 00 000000 	C3200:	SETO			;PRELOAD AC WITH -1,,-1
  4676	032647	400 01 0 00 000000 		SETZ	1,0		;PRELOAD E WITH 0
  4677	032650	202 00 0 00 000001 		MOVEM	1		;*MOVEM SHOULD PLACE -1,,-1 INTO E
  4678	032651	312 01 0 00 034404 		CAME	1,[-1]		;PASS IF C(E)=-1,,-1
  4679						STOP^
  4680	032652	254 04 0 00 032653 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4681	032653	324 00 0 00 032654 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4682									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4683									;IN THE SUBTEST) TO LOOP ON ERROR^
  4684	032654	312 00 0 00 034404 	C3210:	CAME	0,[-1]		;PASS IF C(AC)=-1,,-1
  4685						STOP^
  4686	032655	254 04 0 00 032656 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4687	032656	324 00 0 00 032657 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4688									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4689									;IN THE SUBTEST) TO LOOP ON ERROR^
  4690
  4691					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 17
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0109

  4692					SUBTTL	TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS
  4693
  4694					;**********
  4695
  4696					;THIS TEST VERIFIES THAT JFCL 17,.+1 ALWAYS RETURNS TO THE NEXT SEQUENTIAL INSTRUCTION
  4697					;IF JFCL SKIPS THE NEXT INSTRUCTION, THIS TEST FAILS
  4698
  4699	032657	200 00 0 00 034455 	C3300:	MOVE	[HALT .+3]	;THIS INSTRUCTION SHOULD NOT AFFECT THE TEST
  4700	032660	255 17 0 00 032661 		JFCL	17,.+1		;*JFCL SHOULD RETURN TO NEXT SEQUENTIAL INSTRUCTION
  4701	032661	304 00 0 00 000000 		CAIA			;SKIP HALT INSTRUCTION IF JFCL PASSES
  4702						STOP^
  4703	032662	254 04 0 00 032663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4704	032663	324 00 0 00 032664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4705									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4706									;IN THE SUBTEST) TO LOOP ON ERROR^
  4707
  4708					;**********
  4709
  4710					;THIS TEST VERIFIES THAT JFCL 17,.+1 ALWAYS CLEARS THE CRY0 FLAG.
  4711					;ADDI IS USED TO SET CRY0.  THEN, JFCL 17,.+1 IS EXECUTED TO CLEAR CRY0.
  4712					;JFCL 4,.+2 IS EXECUTED TO DETERMINE WHETHER CRY0 WAS RESET BY THE PREVIOUS JFCL.
  4713					;THIS TEST FAILS IF JFCL 17,.+1 DID NOT CLEAR CRY0
  4714
  4715	032664	200 00 0 00 034404 	C3400:	MOVE	[-1]		;PRELOAD AC WITH -1,,-1
  4716	032665	271 00 0 00 000001 		ADDI	1		;SET CRY0 FLAG
  4717	032666	255 17 0 00 032667 		JFCL	17,.+1		;*CLEAR ARITHMETIC FLAGS
  4718	032667	255 04 0 00 032671 		JFCL	4,.+2		;PASS IF CRY0 WAS RESET BY PREVIOUS INSTRUCTION
  4719	032670	334 00 0 00 000000 		SKIPA			;SKIP HALT IF CRY0 WAS CLEARED
  4720						STOP^
  4721	032671	254 04 0 00 032672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4722	032672	324 00 0 00 032673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4723									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4724									;IN THE SUBTEST) TO LOOP ON ERROR^
  4725
  4726					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 18
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0110

  4727					;THIS TEST VERIFIES THAT JFCL 17,.+1 ALWAYS CLEARS THE CRY1 FLAG.
  4728					;ADDI IS USED TO SET CRY1.  THEN, JFCL 17,.+1 IS EXECUTED TO CLEAR CRY1.
  4729					;JFCL 4,.+2 IS EXECUTED TO DETERMINE WHETHER CRY1 WAS RESET BY THE PREVIOUS JFCL.
  4730					;THIS TEST FAILS IF JFCL 17,.+1 DID NOT CLEAR CRY1
  4731
  4732	032673	200 00 0 00 034404 	C3500:	MOVE	[-1]		;PRELOAD AC WITH -1,,-1
  4733	032674	271 00 0 00 000001 		ADDI	1		;SET CRY1 FLAG
  4734	032675	255 17 0 00 032676 		JFCL	17,.+1		;*CLEAR ARITHMETIC FLAGS
  4735	032676	255 02 0 00 032700 		JFCL	2,.+2		;PASS IF CRY1 WAS RESET BY PREVIOUS INSTRUCTION
  4736	032677	334 00 0 00 000000 		SKIPA			;SKIP HALT IF CRY1 WAS CLEARED
  4737						STOP^
  4738	032700	254 04 0 00 032701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4739	032701	324 00 0 00 032702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4740									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4741									;IN THE SUBTEST) TO LOOP ON ERROR^
  4742
  4743					;**********
  4744
  4745					;THIS TEST VERIFIES THAT JFCL 17,.+1 ALWAYS CLEARS THE AROV FLAG.
  4746					;ADDI IS USED TO SET AROV.  THEN, JFCL 17,.+1 IS EXECUTED TO CLEAR AROV.
  4747					;JFCL 4,.+2 IS EXECUTED TO DETERMINE WHETHER AROV WAS RESET BY THE PREVIOUS JFCL.
  4748					;THIS TEST FAILS IF JFCL 17,.+1 DID NOT CLEAR AROV
  4749
  4750	032702	205 00 0 00 400000 	C3600:	MOVSI	400000		;PRELOAD AC WITH -1,,-1
  4751	032703	270 00 0 00 034403 		ADD	[XWD 400000,0]	;SET AROV FLAG
  4752	032704	255 17 0 00 032705 		JFCL	17,.+1		;*CLEAR ARITHMETIC FLAGS
  4753	032705	255 10 0 00 032707 		JFCL	10,.+2		;PASS IF AROV WAS RESET BY PREVIOUS INSTRUCTION
  4754	032706	334 00 0 00 000000 		SKIPA			;SKIP HALT IF AROV WAS CLEARED
  4755						STOP^
  4756	032707	254 04 0 00 032710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4757	032710	324 00 0 00 032711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4758									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4759									;IN THE SUBTEST) TO LOOP ON ERROR^
  4760
  4761					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 19
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0111

  4762					;THIS TEST VERIFIES THAT JFCL 0, IS A NO-OP.
  4763					;IN THIS TEST, ADD IS USED TO SET CRY0.  THEN JFCL 0,.+2 IS EXECUTED.
  4764					;IF JFCL 0,.+2 DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES
  4765
  4766	032711	205 00 0 00 400000 	C3700:	MOVSI	400000		;PRELOAD AC WITH MOST NEGATIVE NUMBER
  4767	032712	270 00 0 00 034404 		ADD	[-1]		;SET CRY0 FLAG
  4768	032713	255 00 0 00 032715 		JFCL	.+2		;*JFCL SHOULD RETURN TO NEXT SEQUENTIAL INSTRUCTION
  4769	032714	334 00 0 00 000000 		SKIPA			;PASS IF JFCL DID NOT SKIP
  4770						STOP^
  4771	032715	254 04 0 00 032716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4772	032716	324 00 0 00 032717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4773									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4774									;IN THE SUBTEST) TO LOOP ON ERROR^
  4775
  4776					;**********
  4777
  4778					;THIS TEST VERIFIES THAT JFCL 0, IS A NO-OP.
  4779					;IN THIS TEST, ADD IS USED TO SET CRY1.  THEN JFCL 0,.+2 IS EXECUTED.
  4780					;IF JFCL 0,.+2 DOES NOT SKIP THE NEXT INSTRUCTION, THIS TEST PASSES
  4781
  4782	032717	205 00 0 00 200000 	C4000:	MOVSI	200000		;PRELOAD AC WITH MOST NEGATIVE NUMBER
  4783	032720	270 00 0 00 034402 		ADD	[XWD 200000,0]	;SET CRY1 FLAG
  4784	032721	255 00 0 00 032723 		JFCL	.+2		;*JFCL SHOULD RETURN TO NEXT SEQUENTIAL INSTRUCTION
  4785	032722	334 00 0 00 000000 		SKIPA			;PASS IF JFCL DID NOT SKIP
  4786						STOP^
  4787	032723	254 04 0 00 032724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4788	032724	324 00 0 00 032725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4789									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4790									;IN THE SUBTEST) TO LOOP ON ERROR^
  4791
  4792					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 20
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0112

  4793					;THIS TEST VERIFIES THAT ADDI HAS THE ABILITY TO SET AN ARITHMETIC FLAG AND
  4794					;THAT 'JFCL 17,.+2' JUMPS WHENEVER ANY ARITHMETIC FLAG IS SET.
  4795					;IN THIS TEST, ADDI SHOULD SET CRY0 AND CRY1.  THEN, JFCL SHOULD SKIP
  4796					;BECAUSE A FLAG WAS SET BY ADDI
  4797					;IF THIS TEST FAILS, ADDI COULD HAVE FAILED TO SET A FLAG OR
  4798					;JFCL COULD HAVE FAILED TO JUMP WHEN A FLAG WAS SET
  4799
  4800	032725	200 00 0 00 034404 	C4100:	MOVE	[-1]		;PRELOAD AC WITH ALL ONES
  4801	032726	271 00 0 00 000001 		ADDI	1		;*ADDI SHOULD SET CRY0/1 FLAGS
  4802	032727	255 17 0 00 032731 		JFCL	17,.+2		;*JFCL SHOULD JUMP BECAUSE FLAGS ARE SET
  4803						STOP^
  4804	032730	254 04 0 00 032731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4805	032731	324 00 0 00 032732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4806									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4807									;IN THE SUBTEST) TO LOOP ON ERROR^
  4808
  4809					;**********
  4810
  4811					;THIS TEST VERIFIES THAT CAI DOES NOT CLEAR ANY ARITHMETIC FLAGS.
  4812					;FIRST, CRY0 AND CRY1 ARE SET BY ADDI; THEN CAI IS EXECUTED.
  4813					;JFCL SHOULD JUMP BECAUSE FLAGS ARE SET.  IF JFCL DOES NOT JUMP,
  4814					;THE FLAGS WERE CLEARED BY CAI.  HENCE, CAI FAILED
  4815
  4816	032732	200 00 0 00 034404 	C4200:	MOVE	[-1]		;PRELOAD AC WITH -1,,-1
  4817	032733	271 00 0 00 000001 		ADDI	1		;SET CYR0/1 FLAGS
  4818	032734	300 17 0 00 000017 		CAI	17,17		;*CAI SHOULD NOT CLEAR FLAGS
  4819	032735	255 17 0 00 032737 		JFCL	17,.+2		;PASS IF CAI CLEARED FLAGS
  4820						STOP^
  4821	032736	254 04 0 00 032737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4822	032737	324 00 0 00 032740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4823									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4824									;IN THE SUBTEST) TO LOOP ON ERROR^
  4825
  4826					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 21
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0113

  4827					;THIS TEST VERIFIES THAT ADDI HAS THE ABILITY TO SET AN ARITHMETIC FLAG AND
  4828					;THAT 'JFCL 17,.+2' JUMPS WHENEVER ANY ARITHMETIC FLAG IS SET.
  4829					;IN THIS TEST, ADDI SHOULD SET CRY0 AND CRY1.  THEN JFCL SHOULD SKIP
  4830					;BECAUSE A FLAG WAS SET BY ADDI
  4831					;IF THIS TEST FAILS, ADDI COULD HAVE FAILED TO SET A FLAG OR
  4832					;JFCL COULD HAVE FAILED TO JUMP WHEN A FLAG WAS SET
  4833
  4834	032740	200 00 0 00 034404 	C4300:	MOVE	[-1]		;PRELOAD AC WITH ALL ONES
  4835	032741	271 00 0 00 000001 		ADDI	1		;*ADDI SHOULD SET CRY1 FLAGS
  4836	032742	255 02 0 00 032744 		JFCL	2,.+2		;*JFCL SHOULD JUMP BECAUSE CRY1 FLAG IS SET
  4837						STOP^
  4838	032743	254 04 0 00 032744 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4839	032744	324 00 0 00 032745 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4840									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4841									;IN THE SUBTEST) TO LOOP ON ERROR^
  4842
  4843					;**********
  4844
  4845					;THIS TEST VERIFIES THAT ADDI HAS THE ABILITY TO SET AN ARITHMETIC FLAG AND
  4846					;THAT 'JFCL 17,.+2' JUMPS WHENEVER ANY ARITHMETIC FLAG IS SET.
  4847					;IN THIS TEST, ADDI SHOULD SET CRY0 AND CRY1.  THEN, JFCL SHOULD SKIP
  4848					;BECAUSE A FLAG WAS SET BY ADDI
  4849					;IF THIS TEST FAILS, ADDI COULD HAVE FAILED TO SET A FLAG OR
  4850					;JFCL COULD HAVE FAILED TO JUMP WHEN A FLAG WAS SET
  4851
  4852	032745	200 00 0 00 034404 	C4400:	MOVE	[-1]		;PRELOAD AC WITH ALL ONES
  4853	032746	271 00 0 00 000001 		ADDI	1		;*ADDI SHOULD SET CRY0 FLAG
  4854	032747	255 04 0 00 032751 		JFCL	4,.+2		;*JFCL SHOULD JUMP BECAUSE CRY0 FLAG IS SET
  4855						STOP^
  4856	032750	254 04 0 00 032751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4857	032751	324 00 0 00 032752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4858									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4859									;IN THE SUBTEST) TO LOOP ON ERROR^
  4860
  4861					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 22
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0114

  4862					;THIS TEST VERIFIES THAT ADDI HAS THE ABILITY TO SET AN ARITHMETIC FLAG AND
  4863					;THAT 'JFCL 17,.+2' JUMPS WHENEVER ANY ARITHMETIC FLAG IS SET.
  4864					;BECAUSE A FLAG WAS SET BY ADD
  4865					;IF THIS TEST FAILS, ADDI COULD HAVE FAILED TO SET A FLAG OR 
  4866					;JFCL COULD HAVE FAILED TO JUMP WHEN A FLAG WAS SET
  4867
  4868	032752	205 00 0 00 400000 	C4500:	MOVSI	400000		;PRELOAD AC WITH ALL ONES
  4869	032753	270 00 0 00 034403 		ADD	[XWD 400000,0]	;*ADD SHOULD SET AROV FLAG
  4870	032754	255 10 0 00 032756 		JFCL	10,.+2		;*JFCL SHOULD JUMP BECAUSE AROV FLAG IS SET
  4871						STOP^
  4872	032755	254 04 0 00 032756 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4873	032756	324 00 0 00 032757 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4874									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4875									;IN THE SUBTEST) TO LOOP ON ERROR^
  4876
  4877					;**********
  4878
  4879					;THIS TEST VERIFIES THAT JFCL 17,.+1 ALWAYS CLEARS THE FLOATING OVERFLOW FLAG (FOV).
  4880					;FIRST JFCL 17,.+1 IS EXECUTED TO CLEAR FOV.  THEN, JFCL 1,.+2 IS EXECUTED TO DETERMINE
  4881					;WHETHER FOV WAS CLEARED.  IF FOV WAS CLEAR, THIS TEST PASSES
  4882
  4883	032757	255 17 0 00 032760 	C4600:	JFCL	17,.+1		;*CLEAR ARITHMETIC FLAGS
  4884	032760	255 01 0 00 032762 		JFCL	1,.+2		;PASS IF FOV WAS CLEARED
  4885	032761	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TEST PASSED
  4886						STOP^
  4887	032762	254 04 0 00 032763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4888	032763	324 00 0 00 032764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4889									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4890									;IN THE SUBTEST) TO LOOP ON ERROR^
  4891
  4892					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 23
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0115

  4893					;THIS TEST VERIFIES THAT JFCL 13, DOES NOT RESET CRY0.
  4894					;FIRST CRY0 AND CRY1 ARE SET BY ADDI; THEN, JFCL 13,.+2 IS EXECUTED
  4895					;TO CLEAR ALL ARITHMETIC FLAGS EXCEPT CRY0.
  4896					;THIS TEST PASSES IF JFCL 13,.+1 DID NOT RESET CRY0.
  4897
  4898	032764	200 00 0 00 034404 	C4700:	MOVE	[-1]		;RELOAD AC WITH -1,,-1
  4899	032765	271 00 0 00 000001 		ADDI	1		;SET CRY0/1
  4900	032766	255 13 0 00 032767 		JFCL	13,.+1		;*JFCL 13, SHOULD NOT RESET CRY0
  4901	032767	255 04 0 00 032771 		JFCL	4,.+2		;FAIL IF CRY 0 WAS RESET
  4902						STOP^
  4903	032770	254 04 0 00 032771 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4904	032771	324 00 0 00 032772 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4906									;IN THE SUBTEST) TO LOOP ON ERROR^
  4907
  4908					;**********
  4909
  4910					;THIS TEST VERIFIES THAT JFCL 15, DOES NOT RESET CRY1.
  4911					;FIRST CRY0 AND CRY1 ARE SET BY ADDI; THEN, JFCL15,.+2 IS EXECUTED
  4912					;TO CLEAR ALL ARITHMETIC FLAGS EXCEPT CRY1.
  4913					;THIS TEST PASSES IF JFCL 15,.+1 DID NOT RESET CRY1.
  4914
  4915	032772	200 00 0 00 034404 	C5000:	MOVE	[-1]		;PRELOAD AC WITH -1,,-1
  4916	032773	271 00 0 00 000001 		ADDI	1		;SET CRY0/1
  4917	032774	255 15 0 00 032775 		JFCL	15,.+1		;*JFCL15, SHOULD NOT RESET CRY0
  4918	032775	255 02 0 00 032777 		JFCL	2,.+2		;FAIL IF CRY1 WAS RESET
  4919						STOP^
  4920	032776	254 04 0 00 032777 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4921	032777	324 00 0 00 033000 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4922									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4923									;IN THE SUBTEST) TO LOOP ON ERROR^
  4924
  4925					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 24
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0116

  4926					;THIS TEST VERIFIES THAT JFCL 17, DOES NOT RESET AROV.
  4927					;FIRST AROV IS SET BY ADD; THEN, JFCL 17,.+2 IS EXECUTED
  4928					;TO CLEAR ALL ARITHMETIC FLAGS EXCEPT AROV.
  4929					;THIS TEST PASSES IF JFCL 17,.+1 DID NOT RESET AROV.
  4930
  4931	033000	205 00 0 00 400000 	C5100:	MOVSI	400000		;PRELOAD AC WITH -1,,-1
  4932	033001	270 00 0 00 034403 		ADD	[XWD 400000,0]	;SET AROV 
  4933	033002	255 07 0 00 033003 		JFCL	7,.+1		;*JFCL 17, SHOULD NOT RESET AROV
  4934	033003	255 10 0 00 033005 		JFCL	10,.+2		;FAIL IF AROV WAS RESET
  4935						STOP^
  4936	033004	254 04 0 00 033005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4937	033005	324 00 0 00 033006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4938									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4939									;IN THE SUBTEST) TO LOOP ON ERROR^
  4940
  4941					;**********
  4942
  4943					;THIS TEST VERIFIES THAT ADD OF 0 TO 0 WILL NOT SET AROV.
  4944					;FIRST, ALL FLAGS ARE RESET, THEN 0 IS ADDED TO 0 VIA ADD.
  4945					;AROV IS THEN CHECKED.  IF AROV IS SET, THIS TEST FAILS.
  4946
  4947	033006	255 17 0 00 033007 	C5200:	JFCL	17,.+1		;RESET ARITHMETIC FLAGS
  4948	033007	400 00 0 00 000000 		SETZ			;PRELOAD AC,E WITH 0
  4949	033010	270 00 0 00 000000 		ADD			;*ADD SHOULD NOT SET AROV
  4950	033011	255 10 0 00 033013 		JFCL	10,.+2		;PASS IF AROV WAS RESET
  4951	033012	334 00 0 00 000000 		SKIPA			;SKIP HALT IF ADD PASSED
  4952						STOP^
  4953	033013	254 04 0 00 033014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4954	033014	324 00 0 00 033015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4955									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4956									;IN THE SUBTEST) TO LOOP ON ERROR^
  4957
  4958					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 25
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0117

  4959					;THIS TEST VERIFIES THAT ADD OF 0 TO 0 WILL NOT SET CRY0.
  4960					;FIRST, ALL FLAGS ARE RESET, THEN 0 IS ADDED TO 0 VIA ADD.
  4961					;CRY0 IS THEN CHECKED.  IF CRY0 IS SET, THIS TEST FAILS.
  4962
  4963
  4964	033015	400 00 0 00 000000 	C5300:	SETZ			;RESET ARITHMETIC FLAGS
  4965	033016	255 17 0 00 033017 		JFCL	17,.+1		;PRELOAD AC,E WITH 0
  4966	033017	270 00 0 00 000000 		ADD			;*ADD SHOULD NOT SET CRY0
  4967	033020	255 04 0 00 033022 		JFCL	4,.+2		;PASS IF CRY0 WAS RESET
  4968	033021	334 00 0 00 000000 		SKIPA			;SKIP HALT IF ADD PASSED
  4969						STOP^
  4970	033022	254 04 0 00 033023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4971	033023	324 00 0 00 033024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4972									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4973									;IN THE SUBTEST) TO LOOP ON ERROR^
  4974
  4975					;**********
  4976
  4977					;THIS TEST VERIFIES THAT ADD OF 0 TO 0 WILL NOT SET CRY1.
  4978					;FIRST, ALL FLAGS ARE RESET, THEN 0 IS ADDED TO 0 VIA ADD.
  4979					;CRY1 IS THEN CHECKED.  IF CRY1 IS SET, THIS TEST FAILS.
  4980
  4981	033024	400 00 0 00 000000 	C5400:	SETZ			;RESET ARITHMETIC FLAGS
  4982	033025	255 17 0 00 033026 		JFCL	17,.+1		;PRELOAD AC,E WITH 0
  4983	033026	270 00 0 00 000000 		ADD			;*ADD SHOULD NOT SET CRY1
  4984	033027	255 02 0 00 033031 		JFCL	2,.+2		;PASS IF CRY1 WAS RESET
  4985	033030	334 00 0 00 000000 		SKIPA			;SKIP HALT IF ADD PASSED
  4986						STOP^
  4987	033031	254 04 0 00 033032 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4988	033032	324 00 0 00 033033 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4989									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4990									;IN THE SUBTEST) TO LOOP ON ERROR^
  4991
  4992					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 26
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0118

  4993					;THIS TEST VERIFIES THAT THE 30X AND THE 31X INSTRUCTION GROUPS DO NOT AFFECT
  4994					;THE ARITHMETIC FLAGS.  FIRST, THE FLAGS ARE CLEARED AND AC0 IS CLEARED; THEN, CAI
  4995					;AND CAM ARE EXECUTED.  THE FLAGS ARE THEN CHECKED.  IF ANY OF THE FLAGS ARE SET,
  4996					;THIS TEST FAILS AND CAI OR CAM IS CONSIDERED TO HAVE ERRONEOUSLY SET THE FLAGS
  4997
  4998	033033	255 17 0 00 033034 	C5500:	JFCL	17,.+1		;CLEAR ALL FLAGS
  4999	033034	400 00 0 00 000000 		SETZ			;CLEAR AC,0
  5000	033035	300 00 0 00 000000 		CAI			;*CAI SHOULD NOT SET ANY ARITHMETIC FLAG
  5001	033036	310 00 0 00 034404 		CAM	[-1]		;*CAM SHOULD NOT SET ANY ARITHMETIC FLAG
  5002	033037	255 17 0 00 033041 		JFCL	17,.+2		;FAIL IF ANY FLAG WAS SET
  5003	033040	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TEST PASSED
  5004						STOP^
  5005	033041	254 04 0 00 033042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5006	033042	324 00 0 00 033043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5007									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5008									;IN THE SUBTEST) TO LOOP ON ERROR^
  5009
  5010					;**********
  5011
  5012					;THIS TEST VERIFIES THAT THE BOOLEAN INSTRUCTION GROUPS DO NOT AFFECT
  5013					;THE ARITHMETIC FLAGS.  FIRST THE FLAGS ARE CLEARED AND AC0 IS CLEARED; THEN, XOR [0]
  5014					;AND XOR [-1] ARE EXECUTED.  THE FLAGS ARE THEN CHECKED.  IF ANY OF THE FLAGS ARE SET,
  5015					;THIS TEST FAILS AND XOR IS CONSIDERED TO HAVE ERRONEOUSLY SET THE FLAGS
  5016
  5017	033043	255 17 0 00 033044 	C5600:	JFCL	17,.+1		;CLEAR ALL FLAGS
  5018	033044	474 00 0 00 000000 		SETO			;CLEAR AC,0
  5019	033045	430 00 0 00 034454 		XOR	[0]		;*XOR SHOULD NOT SET ANY ARITHMETIC FLAG
  5020	033046	430 00 0 00 034404 		XOR	[-1]		;*XOR SHOULD NOT SET ANY ARITHMETIC FLAG
  5021	033047	255 17 0 00 033051 		JFCL	17,.+2		;FAIL IF ANY FLAG WAS SET
  5022	033050	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TEST PASSED
  5023						STOP^
  5024	033051	254 04 0 00 033052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5025	033052	324 00 0 00 033053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5026									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5027									;IN THE SUBTEST) TO LOOP ON ERROR^
  5028
  5029					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 27
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0119

  5030					;THIS TEST VERIFIES THAT THE AOBJX INSTRUCTION GROUP DOES DO NOT AFFECT
  5031					;THE ARITHMETIC FLAGS.  FIRST THE FLAGS ARE CLEARED AND AC0 IS CLEARED; THEN, AOBJN
  5032					;AND AOBJP ARE EXECUTED.  THE FLAGS ARE THEN CHECKED.  IF ANY OF THE FLAGS ARE SET,
  5033					;THIS TEST FAILS AND AOBJN OR AOBJP IS CONSIDERED TO HAVE ERRONEOUSLY SET THE FLAGS
  5034
  5035	033053	474 00 0 00 000000 	C5700:	SETO			;CLEAR ALL FLAGS
  5036	033054	255 17 0 00 033055 		JFCL	17,.+1		;CLEAR AC,0
  5037	033055	253 00 0 00 033056 		AOBJN	.+1		;*AOBJN SHOULD NOT SET ANY ARITHMETIC ARITHMETIC
  5038	033056	252 00 0 00 033057 		AOBJP	.+1		;*AOBJP SHOULD NOT SET ANY ARITHMETIC FLAG
  5039	033057	255 17 0 00 033061 		JFCL	17,.+2		;FAIL IF ANY FLAG WAS SET
  5040	033060	334 00 0 00 000000 		SKIPA			;SKIP HALT IF TST PASSED
  5041						STOP^
  5042	033061	254 04 0 00 033062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5043	033062	324 00 0 00 033063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5045									;IN THE SUBTEST) TO LOOP ON ERROR^
  5046
  5047					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 28
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JFCL INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0120

  5048					;THIS TEST VERIFIES THAT SKIP DOES NOT AFFECT THE FLAGS.
  5049					;FIRST, THE ARITHMETIC FLAGS ARE CLEARED; THEN, SKIP IS EXECUTED.
  5050					;IF SKIP SETS AROV, CRYO, CRY1 OR FOV, THIS TEST FAILS.
  5051
  5052	033063	255 17 0 00 033064 	C5701:	JFCL	17,.+1		;CLEAR ALL FLAGS
  5053	033064	330 00 0 00 034404 		SKIP	0,[-1]		;*SKIP SHOULD NOT SET ANY FLAGS
  5054	033065	255 17 0 00 033067 		JFCL	17,.+2		;FAIL IF ANY FLAG IS SET
  5055	033066	334 00 0 00 000000 		SKIPA			;PASS IF NO FLAG IS SET
  5056						STOP^
  5057	033067	254 04 0 00 033070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5058	033070	324 00 0 00 033071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5059									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5060									;IN THE SUBTEST) TO LOOP ON ERROR^
  5061
  5062					;**********
  5063
  5064					;THIS TEST VERIFIES THAT JUMP DOES NOT AFFECT THE FLAGS.
  5065					;FIRST, THE ARITHMETIC FLAGS ARE CLEARED; THEN, JUMP IS EXECUTED.
  5066					;IF JUMP SETS AROV, CRYO, CRY1 OR FOV, THIS TEST FAILS.
  5067
  5068	033071	255 17 0 00 033072 	C5702:	JFCL	17,.+1		;CLEAR ALL FLAGS
  5069	033072	320 00 0 00 034404 		JUMP	0,[-1]		;*JUMP SHOULD NOT SET ANY FLAGS
  5070	033073	255 17 0 00 033075 		JFCL	17,.+2		;FAIL IF ANY FLAG IS SET
  5071	033074	334 00 0 00 000000 		SKIPA			;PASS IF NO FLAG IS SET
  5072						STOP^
  5073	033075	254 04 0 00 033076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5074	033076	324 00 0 00 033077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5075									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5076									;IN THE SUBTEST) TO LOOP ON ERROR^
  5077
  5078					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 29
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0121

  5079					SUBTTL	TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS
  5080
  5081					;**********
  5082
  5083					;THIS TEST VERIFIES THAT 'JRST, 0' DOES NOT SET ANY FLAGS.
  5084					;FIRST THE ARITHMETIC FLAGS ARE RESET; THEN, 'JRST 0,.+1' IS EXECUTED
  5085					;THE AROV,CRY0 AND CRY1 FLAGS ARE THEN CHECKED. IF ANY
  5086					;OF THESE FLAGS ARE SET, THIS TEST FAILS
  5087
  5088	033077	255 17 0 00 033100 	C6000:	JFCL	17,.+1		;RESET ALL FLAGS
  5089	033100	254 00 0 00 033101 		JRST	.+1		;*JRST SHOULD NOT SET ANY FLAGS
  5090	033101	255 16 0 00 033103 		JFCL	16,.+2		;PASS IF NO FLAGS ARE SET
  5091	033102	334 00 0 00 000000 		SKIPA			;SKIP HALT IF JRST PASSES
  5092						STOP^
  5093	033103	254 04 0 00 033104 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5094	033104	324 00 0 00 033105 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5095									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5096									;IN THE SUBTEST) TO LOOP ON ERROR^
  5097
  5098					;**********
  5099
  5100					;THIS TEST VERIFIES THAT 'MOVE 2,2' DOES NOT SET ANY FLAGS.
  5101					;FIRST, THE ARITHMETIC FLAGS ARE RESET; THEN, 'MOVE 2,2' IS EXECUTED.
  5102					;THE FOV,AROV,CRY0 AND CRY1 FLAGS ARE THEN CHECKED.  IF ANY
  5103					;OF THESE FLAGS ARE SET, THIS TEST FAILS
  5104
  5105	033105	255 17 0 00 033106 	C6100:	JFCL	17,.+1		;RESET ALL FLAGS
  5106	033106	200 02 0 00 000002 		MOVE	2,2		;*MOVE SHOULD NOT SET ANY FLAGS
  5107	033107	255 17 0 00 033111 		JFCL	17,.+2		;PASS IF NO FLAGS ARE SET
  5108	033110	334 00 0 00 000000 		SKIPA			;SKIP HALT IF MOVE PASSED
  5109						STOP^
  5110	033111	254 04 0 00 033112 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5111	033112	324 00 0 00 033113 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5112									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5113									;IN THE SUBTEST) TO LOOP ON ERROR^
  5114
  5115					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 30
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0122

  5116					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5117					;SPECIFIED IN AC1.  IN THIS CASE, AC1 SPECIFIES THE CRY0 FLAG.
  5118					;FIRST, ALL FLAGS ARE RESET; THEN AC1 IS SET TO SPECIFY CRY0.
  5119					;NEXT, JRST 2,.+1(1) IS EXECUTED TO SET CRY0.  CRY0 IS THEN CHECKED.  IF
  5120					;CRY0 IS SET, THIS TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5121
  5122	033113	255 17 0 00 033114 	C6200:	JFCL	17,.+1		;CLEAR ALL FLAGS
  5123						SFLAG	CRY0		^;SET CRY0 FLAG
  5124
  5125	033114	205 01 0 00 200000 		MOVSI	1,CRY0
  5126	033115	255 17 0 00 033116 		JFCL	17,.+1	;RESET ALL FLAGS
  5127	033116	254 02 0 01 033117 		JRST	2,.+1(1)		;SET CRY0 FLAG
  5128	033117	255 04 0 00 033121 		JFCL	4,.+2		;PASS IF CRY0 IS SET
  5129						STOP^
  5130	033120	254 04 0 00 033121 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5131	033121	324 00 0 00 033122 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5132									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5133									;IN THE SUBTEST) TO LOOP ON ERROR^
  5134
  5135					;**********
  5136
  5137					;THIS TEST VERIFIES THAT JRST 2,.+(1) WILL SET THE ARITHMETIC FLAG
  5138					;SPECIFIED IN AC1.  IN THIS CASE, AC1 CONTAIN 0.  HENCE, JRST 2,.+1(1)
  5139					;SHOULD RESET THE ARITHMETIC FLAGS.  FIRST, THE CRY0/1, FLAGS ARE SET BY ADDI;
  5140					;THEN THE FLAGS SHOULD BE CLEARED BY JRST 2,.+1.  IF CRY1 WAS CLEARED, THE
  5141					;TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5142
  5143	033122	200 00 0 00 034404 	C6300:	MOVE	[-1]		;PRELOAD AC0 WITH -1,,-1
  5144	033123	271 00 0 00 000001 		ADDI	1		;SET CRY0/1 FLAGS
  5145						SFLAG	0		^;RESET ALL ARITHMETIC FLAGS
  5146
  5147	033124	205 01 0 00 000000 		MOVSI	1,0
  5148	033125	255 17 0 00 033126 		JFCL	17,.+1	;RESET ALL FLAGS
  5149	033126	254 02 0 01 033127 		JRST	2,.+1(1)		;SET 0 FLAG
  5150	033127	255 02 0 00 033131 		JFCL	2,.+2		;PASS IF CRY1 IS RESET
  5151	033130	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSED
  5152						STOP^
  5153	033131	254 04 0 00 033132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5154	033132	324 00 0 00 033133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5155									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5156									;IN THE SUBTEST) TO LOOP ON ERROR^
  5157
  5158					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 31
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0123

  5159
  5160					;THIS TEST VERIFIES THAT JRST 2,.+(1) WILL SET THE ARITHMETIC FLAG
  5161					;SPECIFIED IN AC1.  IN THIS CASE, AC1 CONTAIN 0.  HENCE, JRST 2,.+1(1)
  5162					;SHOULD RESET THE ARITHMETIC FLAGS.  FIRST, THE CRY0/1, FLAGS ARE SET BY ADD
  5163					;THEN THE FLAGS SHOULD BE CLEARED BY JRST 2,.+1.  IF AROV WAS CLEARED, THE
  5164					;TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5165
  5166	033133	205 00 0 00 400000 	C6400:	MOVSI	400000		;PRELOAD AC0 WITH -1,,-1
  5167	033134	270 00 0 00 034404 		ADD	[-1]		;SET CRY0 AND AROV FLAGS
  5168						SFLAG	0		^;RESET ALL ARITHMETIC FLAGS
  5169
  5170	033135	205 01 0 00 000000 		MOVSI	1,0
  5171	033136	255 17 0 00 033137 		JFCL	17,.+1	;RESET ALL FLAGS
  5172	033137	254 02 0 01 033140 		JRST	2,.+1(1)		;SET 0 FLAG
  5173	033140	255 10 0 00 033142 		JFCL	10,.+2		;PASS IF AROV IS RESET
  5174	033141	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSED
  5175						STOP^
  5176	033142	254 04 0 00 033143 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5177	033143	324 00 0 00 033144 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5178									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5179									;IN THE SUBTEST) TO LOOP ON ERROR^
  5180
  5181					;**********
  5182
  5183					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5184					;SPECIFIED IN AC1.  IN THIS CASE, AC1 SPECIFIES THE AROV FLAG.
  5185					;FIRST, ALL FLAGS ARE RESET; THEN AC1 SET TO SPECIFY AROV.
  5186					;NEXT, JRST 2,.+1(1) IS EXECUTED TO SET AROV.  AROV IS THEN CHECKED.  IF
  5187					;AROV IS SET, THIS TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5188
  5189	033144				C6500:	SFLAG	AROV		^;SET AROV FLAG
  5190
  5191	033144	205 01 0 00 400000 		MOVSI	1,AROV
  5192	033145	255 17 0 00 033146 		JFCL	17,.+1	;RESET ALL FLAGS
  5193	033146	254 02 0 01 033147 		JRST	2,.+1(1)		;SET AROV FLAG
  5194	033147	255 10 0 00 033151 		JFCL	10,.+2		;PASS IF AROV WAS SET
  5195						STOP^
  5196	033150	254 04 0 00 033151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5197	033151	324 00 0 00 033152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5198									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5199									;IN THE SUBTEST) TO LOOP ON ERROR^
  5200
  5201					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 32
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0124

  5202					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5203					;SPECIFIED IN AC1.  IN THIS CASE, AC1 SPECIFIES THE CRY1 FLAG.
  5204					;FIRST, ALL FLAGS ARE RESET; THEN AC1 SET TO SPECIFY CRY1.
  5205					;NEXT, JRST 2,.+1(1) IS EXECUTED TO SET CRY1.  CRY1 IS THEN CHECKED.  IF
  5206					;CRY1 IS SET, THIS TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5207
  5208	033152				C6600:	SFLAG	CRY1		^;SET CRY1 FLAG
  5209
  5210	033152	205 01 0 00 100000 		MOVSI	1,CRY1
  5211	033153	255 17 0 00 033154 		JFCL	17,.+1	;RESET ALL FLAGS
  5212	033154	254 02 0 01 033155 		JRST	2,.+1(1)		;SET CRY1 FLAG
  5213	033155	255 02 0 00 033157 		JFCL	2,.+2		;PASS IF CRY1 WAS SET
  5214						STOP^
  5215	033156	254 04 0 00 033157 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5216	033157	324 00 0 00 033160 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5217									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5218									;IN THE SUBTEST) TO LOOP ON ERROR^
  5219
  5220					;**********
  5221
  5222					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5223					;SPECIFIED IN AC1.  IN THIS CASE, AC1 SPECIFIES THE FOV FLAG.
  5224					;FIRST, ALL FLAGS ARE RESET; THEN AC1 SET TO SPECIFY FOV.
  5225					;NEXT, JRST 2,.+1(1) IS EXECUTED TO SET FOV.  FOV IS THEN CHECKED.  IF
  5226					;FOV IS SET, THIS TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5227
  5228	033160				C6700:	SFLAG	FOV		^;SET FOV FLAG
  5229
  5230	033160	205 01 0 00 040000 		MOVSI	1,FOV
  5231	033161	255 17 0 00 033162 		JFCL	17,.+1	;RESET ALL FLAGS
  5232	033162	254 02 0 01 033163 		JRST	2,.+1(1)		;SET FOV FLAG
  5233	033163	255 01 0 00 033165 		JFCL	1,.+2		;PASS IF FOV WAS SET
  5234						STOP^
  5235	033164	254 04 0 00 033165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5236	033165	324 00 0 00 033166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5237									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5238									;IN THE SUBTEST) TO LOOP ON ERROR^
  5239
  5240					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 33
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0125

  5241					;THIS TEST VERIFIES THAT JFCL 0, SHOULD NEVER JUMP.
  5242					;FIRST, FOV IS SET VIA JRST2, ;THEN JFCL 0,
  5243					;IS EXECUTED.  IF JFCL 0, DOES NOT SKIP, THIS TEST PASSES
  5244
  5245	033166				C7000:	SFLAG	FOV		^;SET FOV FLAG
  5246
  5247	033166	205 01 0 00 040000 		MOVSI	1,FOV
  5248	033167	255 17 0 00 033170 		JFCL	17,.+1	;RESET ALL FLAGS
  5249	033170	254 02 0 01 033171 		JRST	2,.+1(1)		;SET FOV FLAG
  5250	033171	255 00 0 00 033173 		JFCL	,.+2		;*JFCL SHOULD NOT JUMP
  5251	033172	334 00 0 00 000000 		SKIPA			;PASS IF JFCL DID NOT JUMP
  5252						STOP^
  5253	033173	254 04 0 00 033174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5254	033174	324 00 0 00 033175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5255									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5256									;IN THE SUBTEST) TO LOOP ON ERROR^
  5257
  5258					;**********
  5259
  5260					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5261					;SPECIFIED IN AC1.  IN THIS CASE, AC1 CONTAINS 0.  HENCE, JRST 2,.+1(1)
  5262					;SHOULD RESET THE ARITHMETIC FLAGS.  FIRST, THE CRY0, FLAG IS SET BY JRST 2,.+1(1)
  5263					;WITH C(AC1)=CRY0.  THEN, THE FLAGS SHOULD BE CLEARED BY JRST 2,.+1 WITH C(AC1)=0.
  5264					;IF CRY0 WAS CLEARED, THE TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5265
  5266	033175				C7100:	SFLAG	CRY0		^;SET CRY0 FLAGS
  5267
  5268	033175	205 01 0 00 200000 		MOVSI	1,CRY0
  5269	033176	255 17 0 00 033177 		JFCL	17,.+1	;RESET ALL FLAGS
  5270	033177	254 02 0 01 033200 		JRST	2,.+1(1)		;SET CRY0 FLAG
  5271	033200	400 01 0 00 000000 		SETZ	1,		;SETUP MASK TO CLEAR ARITHMETIC FLAGS
  5272	033201	254 02 0 01 033202 		JRST	2,.+1(1)	;*RESET ARITHMETIC FLAGS
  5273	033202	255 04 0 00 033204 		JFCL	4,.+2		;PASS IF CRY0 FLAG WAS RESET
  5274	033203	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PSSED
  5275						STOP^
  5276	033204	254 04 0 00 033205 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5277	033205	324 00 0 00 033206 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5278									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5279									;IN THE SUBTEST) TO LOOP ON ERROR^
  5280
  5281					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 34
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JRST INSTRUCTION AND ARITHMETIC FLAGS                                      SEQ 0126

  5282					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5283					;SPECIFIED IN AC1.  IN THIS CASE, AC1 CONTAINS 0.  HENCE, JRST 2,.+1(1)
  5284					;SHOULD RESET THE ARITHMETIC FLAGS.  FIRST, THE FOV, FLAG IS SET BY JRST 2,.+1(1)
  5285					;WITH C(AC1)=FOV.  THEN, THE FLAGS SHOULD BE CLEARED BY JRST 2,.+1 WITH C(AC1)=0.
  5286					;IF FOV WAS CLEARED, THE TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5287
  5288	033206				C7200:	SFLAG	FOV		^;SET FOV FLAG
  5289
  5290	033206	205 01 0 00 040000 		MOVSI	1,FOV
  5291	033207	255 17 0 00 033210 		JFCL	17,.+1	;RESET ALL FLAGS
  5292	033210	254 02 0 01 033211 		JRST	2,.+1(1)		;SET FOV FLAG
  5293	033211	400 01 0 00 000000 		SETZ	1,		;SETUP MASK TO CLEAR ARITHMETIC FLAGS,
  5294	033212	254 02 0 01 033213 		JRST	2,.+1(1)	;*RESET ARITHMETIC FLAGS
  5295	033213	255 01 0 00 033215 		JFCL	1,.+2		;PASS IF FOV FLAG WAS RESET
  5296	033214	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PSSED
  5297						STOP^
  5298	033215	254 04 0 00 033216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5299	033216	324 00 0 00 033217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5300									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5301									;IN THE SUBTEST) TO LOOP ON ERROR^
  5302
  5303					;**********
  5304
  5305					;THIS TEST VERIFIES THAT JRST 2,.+1(1) WILL SET THE ARITHMETIC FLAG
  5306					;SPECIFIED IN AC1.  IN THIS CASE, AC1 CONTAINS 0.  HENCE, JRST 2,.+1(1)
  5307					;SHOULD RESET THE ARITHMETIC FLAGS.  FIRST, THE ARITHMETIC FLAGS ARE RESET BY
  5308					;JFCL 17,.+1.  THEN, THE FLAGS SHOULD BE CLEARED BY JRST 2,.+1.
  5309					;IF ALL THE ARITHMETIC FLAGS WERE CLEARED,
  5310					;THE TEST PASSES.  OTHERWISE, JRST 2,.+1 IS FAULTY
  5311
  5312	033217	255 17 0 00 033220 	C7300:	JFCL	17,.+1		;CLEAR FLAGS
  5313	033220	400 01 0 00 000000 		SETZ	1,		;SETUP MASK TO CLEAR ARITMETIC FLAGS
  5314	033221	254 02 0 01 033222 		JRST	2,.+1(1)	;*RESET ARITHMETIC FLAGS
  5315	033222	255 17 0 00 033224 		JFCL	17,.+2		;PASS IF ALL FLAGS ARE RESET
  5316	033223	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSED
  5317						STOP^
  5318	033224	254 04 0 00 033225 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5319	033225	324 00 0 00 033226 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5320									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5321									;IN THE SUBTEST) TO LOOP ON ERROR^
  5322
  5323					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 35
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JSP INSTRUCTION                                                            SEQ 0127

  5324					SUBTTL	TEST OF JSP INSTRUCTION
  5325
  5326					;**********
  5327
  5328					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS AND PC IN THE AC.
  5329					;IN THIS CASE, THE FLAGS ARE RESET; THEN, JSP IS EXECUTED.  THE AC IS THEN
  5330					;CHECKED FOR ITS CONTENTS NON-ZERO.  IF C(AC)=0, IT INDICATES
  5331					;THAT NEITHER THE FLAGS NOR THE PC WAS SAVED.  HENCE, THIS TEST FAILS.
  5332
  5333	033226	403 00 0 00 000001 	C7400:	SETZB	1		;CLEAR AC AND SETUP MASK TO RESET FLAGS
  5334	033227	254 02 0 01 033230 		JRST	2,.+1(1)	;RESET FLAGS
  5335	033230	265 00 0 00 033231 		JSP	.+1		;*JSP SHOULD STORE FLAGS AND PC IN THE AC
  5336	033231	336 00 0 00 000000 		SKIPN			;PASS IF C(AC) IS NON-ZERO
  5337						STOP			^;IT DID NOT STORE ANY FLAGS OR PC
  5338
  5339	033232	254 04 0 00 033233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5340	033233	324 00 0 00 033234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5341									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5342									;IN THE SUBTEST) TO LOOP ON ERROR
  5343
  5344					;**********
  5345
  5346					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE PC IN THE RIGHT HALF OF THE AC.
  5347					;IN THIS CASE, THE AC IS CLEARED, THEN, JSP IS EXECUTED.  THE RIGHT HALF OF
  5348					;THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO.  IF C(AC RIGHT HALF)
  5349					;IS NON-ZERO, IT INDICATED THAT THE PC WAS SAVED; AND THIS TEST PASSES.
  5350
  5351	033234	400 00 0 00 000000 	C7500:	SETZ			;CLEAN AC
  5352	033235	265 00 0 00 033236 		JSP	.+1		;*JSP SHOULD STORE THE PC IN THE AC
  5353	033236	606 00 0 00 777777 		TRNN	-1		;PASS IF C(AC) IN NON-ZERO
  5354						STOP^
  5355	033237	254 04 0 00 033240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5356	033240	324 00 0 00 033241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5357									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5358									;IN THE SUBTEST) TO LOOP ON ERROR^
  5359
  5360					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 36
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JSP INSTRUCTION                                                            SEQ 0128

  5361					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS IN THE LEFT HALF OF THE AC.
  5362					;FIST, THE AC IS CLEARED; THEN, SOME FLAGS ARE SET AND JSP IS EXECUTED.
  5363					;THE LEFT HALF OF THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO TO DETERMINE
  5364					;WHETHER THE FLAGS WERE SAVED.  IF C(AC-LEFT) IS NON-ZERO, THIS TEST PASSES
  5365
  5366	033241	402 00 0 00 000000 	C7600:	SETZM	0		;CLEAR AC
  5367	033242	205 01 0 00 740000 		MOVSI	1,740000	;SET UP MASK TO SET FLAGS
  5368	033243	254 02 0 01 033244 		JRST	2,.+1(1)	;SET SOME ARITHMETIC FLAGS
  5369	033244	265 00 0 00 033245 		JSP	.+1		;*JSP SHOULD STORE FLAGS IN THE AC
  5370	033245	607 00 0 00 777777 		TLNN	-1		;PASS IF C(AC) IS NON-ZERO
  5371						STOP^
  5372	033246	254 04 0 00 033247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5373	033247	324 00 0 00 033250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5374									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5375									;IN THE SUBTEST) TO LOOP ON ERROR^
  5376
  5377					;**********
  5378
  5379					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS IN THE LEFT HALF OF THE AC.
  5380					;FIRST, THE AC IS CLEARED; THEN, THE AROV FLAG IS SET AND JSP IS EXECUTED.
  5381					;THEN, THE AROV FLAG BIT OF
  5382					;THE LEFT HALF OF THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO TO DETERMINE
  5383					;WHETHER THE AROV FLAG WAS SAVED.  IF THE AROV FLAG BIT OF THE AC IS SET, THIS TEST PASSES
  5384
  5385	033250	402 00 0 00 000000 	C7700:	SETZM	0		;CLEAR THE AC
  5386						SFLAG	AROV		^;SET AROV FLAG
  5387
  5388	033251	205 01 0 00 400000 		MOVSI	1,AROV
  5389	033252	255 17 0 00 033253 		JFCL	17,.+1	;RESET ALL FLAGS
  5390	033253	254 02 0 01 033254 		JRST	2,.+1(1)		;SET AROV FLAG
  5391	033254	265 00 0 00 033255 		JSP	.+1		;*JSP SHOULD SAVE THE FLAGS IN THE AC-LEFT
  5392	033255	607 00 0 00 400000 		TLNN	AROV		;PASS IF AROV WAS SAVED
  5393						STOP^
  5394	033256	254 04 0 00 033257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5395	033257	324 00 0 00 033260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5396									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5397									;IN THE SUBTEST) TO LOOP ON ERROR^
  5398
  5399					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 37
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JSP INSTRUCTION                                                            SEQ 0129

  5400					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS IN THE LEFT HALF OF THE AC.
  5401					;FIRST, THE AC IS CLEARED; THEN, THE CRY0 FLAG IS SET AND JSP IS EXECUTED.
  5402					;THEN, THE CRY0 FLAG BIT OF
  5403					;THE LEFT HALF OF THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO TO DETERMINE
  5404					;WHETHER THE CRY0 FLAG WAS SAVED.  IF THE CRY0 FLAG BIT OF THE AC IS SET, THIS TEST PASSES
  5405
  5406	033260	402 00 0 00 000000 	C10000:	SETZM	0		;CLEAR THE AC
  5407						SFLAG	CRY0		^;SET CRY0 FLAG
  5408
  5409	033261	205 01 0 00 200000 		MOVSI	1,CRY0
  5410	033262	255 17 0 00 033263 		JFCL	17,.+1	;RESET ALL FLAGS
  5411	033263	254 02 0 01 033264 		JRST	2,.+1(1)		;SET CRY0 FLAG
  5412	033264	265 00 0 00 033265 		JSP	.+1		;*JSP SHOULD SAVE THE FLAGS IN THE AC-LEFT
  5413	033265	607 00 0 00 200000 		TLNN	CRY0		;PASS IF CRY0 WAS SAVED
  5414						STOP^
  5415	033266	254 04 0 00 033267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5416	033267	324 00 0 00 033270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5417									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5418									;IN THE SUBTEST) TO LOOP ON ERROR^
  5419
  5420					;**********
  5421
  5422					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS IN THE LEFT HALF OF THE AC.
  5423					;FIRST, THE AC IS CLEARED; THEN, THE CRY1 FLAG IS SET AND JSP IS EXECUTED.
  5424					;THEN, THE CRY1 FLAG BIT OF
  5425					;THE LEFT HALF OF THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO TO DETERMINE
  5426					;WHETHER THE FLAG WAS SAVED.  IF THE CRY1 FLAG BIT OF THE AC IS SET, THIS TEST PASSES
  5427
  5428	033270	400 00 0 00 000000 	C10100:	SETZ			;CLEAR AC
  5429						SFLAG	CRY1		^;SET CRY1 FLAG
  5430
  5431	033271	205 01 0 00 100000 		MOVSI	1,CRY1
  5432	033272	255 17 0 00 033273 		JFCL	17,.+1	;RESET ALL FLAGS
  5433	033273	254 02 0 01 033274 		JRST	2,.+1(1)		;SET CRY1 FLAG
  5434	033274	265 00 0 00 033275 		JSP	.+1		;*JSP SHOULD SAVE THE FLAGS IN THE AC-LEFT
  5435	033275	607 00 0 00 100000 		TLNN	CRY1		;PASS IF AROV WAS SAVED
  5436						STOP^
  5437	033276	254 04 0 00 033277 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5438	033277	324 00 0 00 033300 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5439									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5440									;IN THE SUBTEST) TO LOOP ON ERROR^
  5441
  5442					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 38
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JSP INSTRUCTION                                                            SEQ 0130

  5443					;THIS TEST VERIFIES THAT JSP ALWAYS STORES THE FLAGS IN THE LEFT HALF OF THE AC.
  5444					;FRIST, THE AC IS CLEARED; THEN, THE FOV FLAG IS SET AND JSP IS EXECUTED.
  5445					;THEN, THE FOV FLAG BIT OF THE LEFT HALF OF THE AC IS CHECKED FOR
  5446					;ITS CONTENTS NON-ZERO TO DETERMINE WHETHER THE FOV FLAG WAS SAVED.
  5447					;IF THE FOV FLAG BIT OF THE AC IS SET, THIS TEST PASSES
  5448
  5449	033300	400 00 0 00 000000 	C10200:	SETZ			;CLEAR THE AC
  5450						SFLAG	FOV		^;SET FOV FLAG
  5451
  5452	033301	205 01 0 00 040000 		MOVSI	1,FOV
  5453	033302	255 17 0 00 033303 		JFCL	17,.+1	;RESET ALL FLAGS
  5454	033303	254 02 0 01 033304 		JRST	2,.+1(1)		;SET FOV FLAG
  5455	033304	265 00 0 00 033305 		JSP	.+1		;*JSP SHOULD SAVE THE FLAGS IN THE AC-LEFT
  5456	033305	607 00 0 00 040000 		TLNN	FOV		;PASS IF FOV WAS SAVED
  5457						STOP^
  5458	033306	254 04 0 00 033307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5459	033307	324 00 0 00 033310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5460									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5461									;IN THE SUBTEST) TO LOOP ON ERROR^
  5462
  5463					;**********
  5464
  5465					;THIS TEST VERIFIES THAT JSP WILL STORE ONLY FLAGS THAT EXIST.
  5466					;I.E. RESET FLAGS WILL NOT BE SET IN THE AC.  ONLY FLAGS THAT ARE
  5467					;CLEARABLE BY JRSTF WILL BE CHECKED HERE.  FIRST ALL CLEARABLE
  5468					;FLAGS ARE RESET BY JRSTF;  THEN JSP IS EXECUTED.  THE AC IS THEN CHECKED.
  5469					;IF ANY CLEARABLE FLAGS ARE SET IN THE AC, THIS TEST FAILS.
  5470
  5471	033310				C10300:	SFLAG	0		^;CLEAR ALL CLEARABLE FLAGS
  5472
  5473	033310	205 01 0 00 000000 		MOVSI	1,0
  5474	033311	255 17 0 00 033312 		JFCL	17,.+1	;RESET ALL FLAGS
  5475	033312	254 02 0 01 033313 		JRST	2,.+1(1)		;SET 0 FLAG
  5476	033313	265 00 0 00 033314 		JSP	.+1		;*JSP SHOULD NOT STORE CLEARABLE FALGS
  5477	033314	603 00 0 00 761777 		TLNE	761777		;FAIL IF ANY CLEARABLE FLAG IS SET
  5478						STOP^
  5479	033315	254 04 0 00 033316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5480	033316	324 00 0 00 033317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5481									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5482									;IN THE SUBTEST) TO LOOP ON ERROR^
  5483
  5484					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 39
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JSP INSTRUCTION                                                            SEQ 0131

  5485					;THIS TEST VERIFIES THAT JSP ALWAYS JUMPS.
  5486					;IN THIS TEST, JSP .+2 IS EXECUTED.  IF JSP JUMPS, THE TEST PASSES;
  5487					;OTHERWISE, THIS TEST HALTS
  5488
  5489	033317	265 00 0 00 033321 	C10400:	JSP	.+2		;*JSP SHOULD ALWAYS JUMP
  5490						STOP^
  5491	033320	254 04 0 00 033321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5492	033321	324 00 0 00 033322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5493									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5494									;IN THE SUBTEST) TO LOOP ON ERROR^
  5495
  5496					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 40
DSKAD1	MAC	28-Mar-78 13:50		TEST JRST INSTRUCTION                                                              SEQ 0132

  5497					SUBTTL	TEST JRST INSTRUCTION
  5498
  5499					;**********
  5500
  5501					;THIS TEST VERIFIES THAT JRST ALWAYS JUMPS.
  5502					;IN THIS TEST, JRST .+2 IS EXECUTED.  IF JRST JUMPS, THE TEST PASSES;
  5503					;OTHERWISE, THIS TEST HALTS
  5504
  5505	033322	254 00 0 00 033324 	C10500:	JRST	.+2		;*JRST 0, SHOULD ALWAYS JUMP
  5506						STOP^
  5507	033323	254 04 0 00 033324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5508	033324	324 00 0 00 033325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5509									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5510									;IN THE SUBTEST) TO LOOP ON ERROR^
  5511
  5512					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 41
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOBJX INSTRUCTIONS                                                         SEQ 0133

  5513					SUBTTL	TEST OF AOBJX INSTRUCTIONS
  5514
  5515					;**********
  5516
  5517					;THIS TEST VERIFIES THAT AOBJN ALWAYS ADDS 1 TO BOTH HALVES OF THE AC.
  5518					;FIRST, THE AC IS CLEARED; THEN, AOBJN IS EXECUTED AND THE AC IS CHECKED
  5519					;FOR 1,,1.  IF C(AC)=1,,1, THIS TEST PASSES.
  5520
  5521	033325	400 00 0 00 000000 	C11200:	SETZ			;CLEAR THE AC
  5522	033326	253 00 0 00 033327 		AOBJN	.+1		;*AOBJN SHOULD ADD 1 TO BOTH HALVES OF THE AC
  5523	033327	312 00 0 00 034456 		CAME	[XWD 1,1]	;PASS IF C(AC)=1,,1
  5524						STOP^
  5525	033330	254 04 0 00 033331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5526	033331	324 00 0 00 033332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5527									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5528									;IN THE SUBTEST) TO LOOP ON ERROR^
  5529
  5530					;**********
  5531
  5532					;THIS TEST VERIFIES THAT AOBJP ALWAYS ADDS 1 TO BOTH HALVES OF THE AC.
  5533					;FIRST, THE AC IS CLEARED; THEN AOBJP IS EXECUTED AND THE AC IS CHECKED
  5534					;FOR 1,,1.  IF C(AC)=1,,1, THIS TEST PASSES.
  5535
  5536	033332	200 00 0 00 034457 	C11300:	MOVE	[XWD 377777,377777]	;PRELOAD AC WITH 377777,,377777
  5537	033333	252 00 0 00 033334 		AOBJP	.+1			;*AOBJP SHOULD ADD, TO BOTH HALVES OF THE AC
  5538	033334	312 00 0 00 034460 		CAME	[XWD 400000,400000]	;PASS IF C(AC)=400000,400000
  5539						STOP^
  5540	033335	254 04 0 00 033336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5541	033336	324 00 0 00 033337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5542									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5543									;IN THE SUBTEST) TO LOOP ON ERROR^
  5544
  5545					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 42
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOBJX INSTRUCTIONS                                                         SEQ 0134

  5546					;THIS TEST VERIFIES THAT AOBJN WILL NOT JUMP WHEN C(AC) IS POSITIVE
  5547					;FIRST, THE AC IS CLEARED; AND AOBJN IS EXECUTED.  AOBJN SHOULD NOT JUMP
  5548					;BECAUSE C(AC) IS POSITIVE.  IF AOBJN JUMPS, THIS TEST FAILS
  5549
  5550	033337	400 00 0 00 000000 	C11400:	SETZ			;CLEAR THE AC
  5551	033340	253 00 0 00 033342 		AOBJN	.+2		;*AOBJN SHOULD NOT JUMP WHEN C(AC) IS POSITIVE
  5552	033341	334 00 0 00 000000 		SKIPA			;PASS IF AOBJN DOES NOT JUMP
  5553						STOP^
  5554	033342	254 04 0 00 033343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5555	033343	324 00 0 00 033344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5556									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5557									;IN THE SUBTEST) TO LOOP ON ERROR^
  5558
  5559					;**********
  5560
  5561					;THIS TEST VERIFIES THAT AOBJP WILL JUMP WHEN C(AC) IS POSITIVE
  5562					;FIRST, THE AC IS CLEARED; AND AOBJP IS EXECUTED.  AOBJP SHOULD JUMP
  5563					;BECAUSE C(AC) IS POSITIVE.  IF AOBJP DOES NOT JUMP, THIS TEST FAILS
  5564
  5565	033344	400 00 0 00 000000 	C11500:	SETZ			;CLEAR THE AC
  5566	033345	252 00 0 00 033347 		AOBJP 	.+2		;*AOBJP SHOULD JUMP BECAUSE C(AC) IS POSITIVE
  5567						STOP^
  5568	033346	254 04 0 00 033347 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5569	033347	324 00 0 00 033350 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5570									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5571									;IN THE SUBTEST) TO LOOP ON ERROR^
  5572
  5573					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 43
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOBJX INSTRUCTIONS                                                         SEQ 0135

  5574					;THIS TEST VERIFIES THAT AOBJN WILL JUMP WHEN C(AC) IS NEGATIVE
  5575					;FIRST, THE AC IS PRELOADED WITH 400000,,0; AND AOBJN IS EXECUTED.  AOBJN SHOULD JUMP
  5576					;BECAUSE C(AC) IS NEGATIVE.  IF AOBJN DOES NOT JUMP, THIS TEST FAILS
  5577
  5578	033350	200 00 0 00 034460 	C11600:	MOVE	[XWD 400000,400000]	;PRELOAD AC WITH 400000,,400000
  5579	033351	253 00 0 00 033353 		AOBJN	.+2		;*AOBJN SHOULD JUMP BECAUSE C(AC) IS NEGATIVE
  5580						STOP^
  5581	033352	254 04 0 00 033353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5582	033353	324 00 0 00 033354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5583									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5584									;IN THE SUBTEST) TO LOOP ON ERROR^
  5585
  5586					;**********
  5587
  5588					;THIS TEST VERIFIES THAT AOBJP WILL NOT JUMP WHEN C(AC) IS NEGATIVE.  FIRST,
  5589					;THE AC IS PRELOADED WITH 400000,,0; AND AOBJP IS EXECUTED.  AOBJP SHOULD NOT JUMP
  5590					;BECAUSE C(AC) IS NEGATIVE.  IF AOBJP JUMPS, THIS TEST FAILS
  5591
  5592	033354	200 00 0 00 034460 	C11700:	MOVE	[XWD 400000,400000]	;PRELOAD AC WITH 400000,,400000
  5593	033355	252 00 0 00 033357 		AOBJP	.+2		;*AOBJP SHOULD NOT JUMP BECAUSE C(AC) IS NEGATIVE
  5594	033356	334 00 0 00 000000 		SKIPA			;PASS IF AOBJP DOES NOT JUMP
  5595						STOP^
  5596	033357	254 04 0 00 033360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5597	033360	324 00 0 00 033361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5598									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5599									;IN THE SUBTEST) TO LOOP ON ERROR^
  5600
  5601					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 44
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOBJX INSTRUCTIONS                                                         SEQ 0136

  5602					;THIS TEST VERIFIES THAT THERE IS NO CARRY FROM BIT 18 TO BIT 17 OF THE AC ON AOBJN.
  5603					;THE AC IS PRELOADED WITH -1,,-1; THEN AOBJN IS EXECUTED. AOBJN SHOULD ADD ONE
  5604					;TO BOTH HALVES OF THE AC WITHOUT GENERATING A CARRY FROM BIT 18 TO BIT 17. IF NO
  5605					;CARRY WAS GENERATED, THIS TEST PASSES
  5606
  5607	033361	474 00 0 00 000000 	C12000:	SETO			;PRELOAD AC WITH -1,, -1
  5608	033362	253 00 0 00 033363 		AOBJN	.+1		;*AOBJN SHOULD NOT GENERATE A CARRY FROM BIT 18 TO 17
  5609	033363	332 00 0 00 000000 		SKIPE			;PASS IF C(AC)=0 (NO CARRY WAS GENERATED)
  5610						STOP^
  5611	033364	254 04 0 00 033365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5612	033365	324 00 0 00 033366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5613									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5614									;IN THE SUBTEST) TO LOOP ON ERROR^
  5615
  5616					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 45
DSKAD1	MAC	28-Mar-78 13:50		TEST SETTING OF ARITHMETIC FLAGS VIA MOVNX AND MOVMX                               SEQ 0137

  5617					SUBTTL	TEST SETTING OF ARITHMETIC FLAGS VIA MOVNX AND MOVMX
  5618
  5619					;THIS TEST VERIFIES THAT MOVNI SETS CRY0 AND CRY1 FLAGS ONLY WHEN THE DATA IS 0.
  5620					;FIRST, THE ARITHMETIC FLAGS ARE RESET; THEN, MOVNI IS EXECUTED WITH DATA OF ZEROS.
  5621					;THE ARITHMETIC FLAGS ARE CHECKED.
  5622					; CRY0/1 ARE SET AND AROV AND FOV RESET, THIS TEST PASSES.
  5623
  5624	033366	255 17 0 00 033367 	C12100:	JFCL	17,.+1		;CLEAR FLAGS
  5625	033367	211 00 0 00 000000 		MOVNI	0		;* MOVNI 0 SHOULD SET CRY0/1
  5626	033370	255 04 0 00 033372 		JCRY0	.+2		;PASS IF CRY0 IS SET
  5627						STOP^
  5628	033371	254 04 0 00 033372 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5629	033372	324 00 0 00 033373 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5630									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5631									;IN THE SUBTEST) TO LOOP ON ERROR^
  5632	033373	255 02 0 00 033375 		JCRY1	.+2		;PASS IF CRY1 IS SET
  5633						STOP^
  5634	033374	254 04 0 00 033375 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5635	033375	324 00 0 00 033376 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5636									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5637									;IN THE SUBTEST) TO LOOP ON ERROR^
  5638	033376	255 10 0 00 033400 		JOV	.+2		;PASS IF AROV RESET
  5639	033377	334 00 0 00 000000 		SKIPA
  5640						STOP^
  5641	033400	254 04 0 00 033401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5642	033401	324 00 0 00 033402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5643									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5644									;IN THE SUBTEST) TO LOOP ON ERROR^
  5645	033402	255 01 0 00 033404 		JFOV	.+2		;PASS IF FOV RESET
  5646	033403	334 00 0 00 000000 		SKIPA
  5647						STOP^
  5648	033404	254 04 0 00 033405 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5649	033405	324 00 0 00 033406 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5650									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5651									;IN THE SUBTEST) TO LOOP ON ERROR^
  5652
  5653					;**********
  5654
  5655					;THIS TEST VERIFIES THAT MOVN WILL NOT SET ARITHMETIC FLAGS WHEN THE DATA IS -1,,-1.
  5656					;FIRST, THE FLAGS ARE RESET; THEN, MOVN [-1,,-1] IS EXECUTED.
  5657					;THE ARITHMETIC FLAGS ARE CHECKED.
  5658					;IF ANY ARITHMETIC FLAG IS SET, THIS TEST FAILS.
  5659
  5660	033406	255 17 0 00 033407 	C12200:	JFCL	17,.+1		;CLEAR FLAGS
  5661	033407	210 00 0 00 034404 		MOVN	[-1]		;*MOVN [-1,,-1] SHOULD SET ARITHMETIC FLAGS
  5662	033410	255 17 0 00 033412 		JFCL	17,.+2		;FAIL IF AN ARITHMETIC FLAG IS SET
  5663	033411	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF MOVN PASSED.
  5664						STOP^
  5665	033412	254 04 0 00 033413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5666	033413	324 00 0 00 033414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5667									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5668									;IN THE SUBTEST) TO LOOP ON ERROR^
  5669
  5670					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 46
DSKAD1	MAC	28-Mar-78 13:50		TEST SETTING OF ARITHMETIC FLAGS VIA MOVNX AND MOVMX                               SEQ 0138

  5671					;THIS TEST VERIFIES THAT MOVN WILL SET THE AROV AND
  5672					;CRY1 FLAGS ONLY WHEN THE DATA IS 400000,,0
  5673					;FIRST, THE FLAGS ARE RESET; THEN, MOVN [400000,,0] IS EXECUTED.
  5674					;THE ARITHMETIC FLAGS ARE CHECKED.
  5675					;IF AROV AND CRY1 ARE SET AND CRY0 AND FOV ARE RESET, THIS TEST PASSES.
  5676
  5677	033414	255 17 0 00 033415 	C12300:	JFCL	17,.+1		;CLEAR ARITHMETIC FLAGS
  5678	033415	210 00 0 00 034403 		MOVN	[XWD 400000,0]	;*MOVN [400000,,0] SHOULD SET AROV AND CRY1 ONLY
  5679	033416	255 10 0 00 033420 		JOV	.+2		;PASS IF AROV IS SET
  5680						STOP^
  5681	033417	254 04 0 00 033420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5682	033420	324 00 0 00 033421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5683									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5684									;IN THE SUBTEST) TO LOOP ON ERROR^
  5685	033421	255 02 0 00 033423 		JCRY1	.+2		;PASS IF CRY0 IS SET
  5686						STOP^
  5687	033422	254 04 0 00 033423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5688	033423	324 00 0 00 033424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5689									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5690									;IN THE SUBTEST) TO LOOP ON ERROR^
  5691	033424	255 04 0 00 033426 		JCRY0	.+2		;PASS IF CRY0 IS RESET
  5692	033425	334 00 0 00 000000 		SKIPA
  5693						STOP^
  5694	033426	254 04 0 00 033427 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5695	033427	324 00 0 00 033430 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5696									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5697									;IN THE SUBTEST) TO LOOP ON ERROR^
  5698	033430	255 01 0 00 033432 		JFOV	.+2		;PASS IF FOV IS RESET
  5699	033431	334 00 0 00 000000 		SKIPA
  5700						STOP^
  5701	033432	254 04 0 00 033433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5702	033433	324 00 0 00 033434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5703									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5704									;IN THE SUBTEST) TO LOOP ON ERROR^
  5705
  5706					;**********
  5707
  5708					;THIS TEST VERIFIES THAT MOVM WILL SET THE AROV AND
  5709					;CRY1 FLAGS ONLY WHEN THE DATA IS 400000,,0
  5710					;FIRST, THE FLAGS ARE RESET; THEN, MOVM [400000,,0] IS EXECUTED.
  5711					;THE ARITHMETIC FLAGS ARE CHECKED.
  5712					;IF AROV AND CRY1 ARE SET AND CRY0 AND FOV ARE RESET, THIS TEST PASSES.
  5713
  5714	033434	255 17 0 00 033435 	C12301:	JFCL	17,.+1		;CLEAR ARITHMETIC FLAGS
  5715	033435	214 00 0 00 034403 		MOVM	[XWD 400000,0]	;*MOVM [400000,,0] SHOULD SET AROV AND CRY1 ONLY
  5716	033436	255 10 0 00 033440 		JOV	.+2		;PASS IF AROV IS SET
  5717						STOP^
  5718	033437	254 04 0 00 033440 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5719	033440	324 00 0 00 033441 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5720									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5721									;IN THE SUBTEST) TO LOOP ON ERROR^
  5722	033441	255 02 0 00 033443 		JCRY1	.+2		;PASS IF CRY0 IS SET
  5723						STOP^
  5724	033442	254 04 0 00 033443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5725	033443	324 00 0 00 033444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 46-1
DSKAD1	MAC	28-Mar-78 13:50		TEST SETTING OF ARITHMETIC FLAGS VIA MOVNX AND MOVMX                               SEQ 0139

  5726									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5727									;IN THE SUBTEST) TO LOOP ON ERROR^
  5728	033444	255 04 0 00 033446 		JCRY0	.+2		;PASS IF CRY0 IS RESET
  5729	033445	334 00 0 00 000000 		SKIPA
  5730						STOP^
  5731	033446	254 04 0 00 033447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5732	033447	324 00 0 00 033450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5733									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5734									;IN THE SUBTEST) TO LOOP ON ERROR^
  5735	033450	255 01 0 00 033452 		JFOV	.+2		;PASS IF FOV IS RESET
  5736	033451	334 00 0 00 000000 		SKIPA
  5737						STOP^
  5738	033452	254 04 0 00 033453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5739	033453	324 00 0 00 033454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5740									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5741									;IN THE SUBTEST) TO LOOP ON ERROR^
  5742
  5743					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 47
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOS AND SOS INSTRUCTIONS                                                   SEQ 0140

  5744					SUBTTL	TEST OF AOS AND SOS INSTRUCTIONS
  5745
  5746					;**********
  5747
  5748					;THIS TEST VERIFIES THAT AOS ADDS 1 TO MEMORY AND DOES NOT SKIP.
  5749					;FIRST, E IS CLEARED; THEN, AOS IS EXECUTED. NEXT E IS CHECKED FOR 1.
  5750					;IF C(E) IS NOT 1 OR AOS SKIPPED, THIS TEST FAILS
  5751
  5752	033454	400 00 0 00 000000 	C12600:	SETZ			;CLEAR E
  5753	033455	350 00 0 00 000000 		AOS			;*AOS SHOULD ADD 1 TO C(E) AND NOT SKIP
  5754	033456	302 00 0 00 000001 		CAIE	1		;PASS IF C(E)=0,,1 ANDAOS DID NOT SKIP
  5755						STOP^
  5756	033457	254 04 0 00 033460 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5757	033460	324 00 0 00 033461 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5758									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5759									;IN THE SUBTEST) TO LOOP ON ERROR^
  5760
  5761					;**********
  5762
  5763					;THIS TEST VERIFIES THAT AOS ADDS 1 TO MEMORY AND DOES NOT SKIP.
  5764					;FIRST, E IS PRELOADED WITH -1,,-1; THEN, AOS IS EXECUTED. NEXT E IS CHECKED FOR 0.
  5765					;IF C(E) IS NOT 0 OR AOS SKIPPED, THIS TEST FAILS
  5766
  5767	033461	474 00 0 00 000000 	C12700:	SETO			;PRELOAD E WITH -1,,-1
  5768	033462	350 00 0 00 000000 		AOS			;*AOS SHOULD ADD 1 TO C(E) AND NOT SKIP
  5769	033463	302 00 0 00 000000 		CAIE			;PASS IF C(E)=0,,0 AND AOS DID NOT SKIP
  5770						STOP^
  5771	033464	254 04 0 00 033465 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5772	033465	324 00 0 00 033466 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5773									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5774									;IN THE SUBTEST) TO LOOP ON ERROR^
  5775
  5776					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 48
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOS AND SOS INSTRUCTIONS                                                   SEQ 0141

  5777					;THIS TEST VERIFIES THAT SOS SUBTRACTS 1 FROM MEMORY AND DOES NOT SKIP.
  5778					;FIRST, E IS CLEARED; THEN, SOS IS EXECUTED. NEXT E IS CHECKED FOR -1,,-1.
  5779					;IF C(E) IS NOT -1,,-1 OR SOS SKIPPED, THIS TEST FAILS
  5780
  5781	033466	400 00 0 00 000000 	C13100:	SETZ			;CLEAR E
  5782	033467	370 00 0 00 000000 		SOS			;*SOS SHOULD SUBTRACT 1 FROM C(E) AND NOT SKIP
  5783	033470	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(E)=-1,,-1 AND SOS DID NOT SKIP
  5784						STOP^
  5785	033471	254 04 0 00 033472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5786	033472	324 00 0 00 033473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5787									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5788									;IN THE SUBTEST) TO LOOP ON ERROR^
  5789
  5790					;**********
  5791
  5792					;THIS TEST VERIFIES THAT SOS SUBTRACTS 1 FROM MEMORY AND DOES NOT SKIP.
  5793					;FIRST, E IS PRELOADED WITH A; THEN, SOS IS EXECUTED. NEXT E IS CHECKED FOR 0.
  5794					;IF C(E) IS NOT 0 OR SOS SKIPPED, THIS TEST FAILS
  5795
  5796	033473	201 00 0 00 000001 	C13200:	MOVEI	1		;PRELOAD E WITH 1
  5797	033474	370 00 0 00 000000 		SOS			;*SOS SHOULD SUBTRACT 1 FROM C(E) AND DID NOT SKIP
  5798	033475	302 00 0 00 000000 		CAIE	0		;PASS IF C(E)=0 AND SOS DID NOT SKIP
  5799						STOP^
  5800	033476	254 04 0 00 033477 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5801	033477	324 00 0 00 033500 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5802									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5803									;IN THE SUBTEST) TO LOOP ON ERROR^
  5804
  5805					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 49
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOS AND SOS INSTRUCTIONS                                                   SEQ 0142

  5806					;THIS TEST VERIFIES THAT SOS SETS CRY0/1 FLAGS IF C(E) IS A NON-ZERO NUMBER OTHER
  5807					;THAN 400000,,0.  IN THIS CASE, C(E)=1.  FIRST THE FLAGS ARE RESET; THEN
  5808					;SOS IS EXECUTED.  THE  FLAGS ARE CHECKED.  IF CRY0 AND CRY1 ARE SET
  5809					;AND AROV AND FOV ARE RESET, THIS TEST PASSES.
  5810
  5811	033500	255 17 0 00 033501 	C13300:	JFCL	17,.+1		;RESET ARITHMETIC FLAGS
  5812	033501	201 00 0 00 000001 		MOVEI	1		;PRELOAD E WITH 1
  5813	033502	370 00 0 00 000000 		SOS			;*SOS SHOULD SET CRY0/1
  5814	033503	255 04 0 00 033505 		JCRY0	.+2		;PASS IF CRY0 IS SET
  5815						STOP^
  5816	033504	254 04 0 00 033505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5817	033505	324 00 0 00 033506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5818									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5819									;IN THE SUBTEST) TO LOOP ON ERROR^
  5820	033506	255 02 0 00 033510 		JCRY1	.+2		;PASS IF CRY1 IS SET
  5821						STOP^
  5822	033507	254 04 0 00 033510 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5823	033510	324 00 0 00 033511 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5824									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5825									;IN THE SUBTEST) TO LOOP ON ERROR^
  5826	033511	255 10 0 00 033513 		JOV	.+2		;PASS IF AROV IS RESET
  5827	033512	334 00 0 00 000000 		SKIPA
  5828						STOP^
  5829	033513	254 04 0 00 033514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5830	033514	324 00 0 00 033515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5831									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5832									;IN THE SUBTEST) TO LOOP ON ERROR^
  5833	033515	255 01 0 00 033517 		JFOV	.+2		;PASS IF FOV IS RESET
  5834	033516	334 00 0 00 000000 		SKIPA
  5835						STOP^
  5836	033517	254 04 0 00 033520 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5837	033520	324 00 0 00 033521 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5838									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5839									;IN THE SUBTEST) TO LOOP ON ERROR^
  5840
  5841					;**********
  5842
  5843					;THIS TEST VERIFIES THAT AOS SETS CRY0 AND CRY1 FLAG IF C(E) IS -1,,-1
  5844					;FIRST THE FLAGS ARE RESET; THEN
  5845					;AOS IS EXECUTED.  THE FLAGS ARE CHECKED.
  5846					;IF CRY0 AND CRY1 ARE SET AND AROV AND FOV ARE RESET, THIS TEST PASSES.
  5847
  5848	033521	255 17 0 00 033522 	C13400:	JFCL	17,.+1		;RESET ARITHMETIC FLAGS
  5849	033522	474 00 0 00 000000 		SETO			;PRELOAD E WITH 1
  5850	033523	350 00 0 00 000000 		AOS			;*AOS SHOULD SET CRY0 AND CRY1
  5851	033524	255 04 0 00 033526 		JCRY0	.+2		;PASS IF CRY0 IS SET
  5852						STOP^
  5853	033525	254 04 0 00 033526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5854	033526	324 00 0 00 033527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5855									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5856									;IN THE SUBTEST) TO LOOP ON ERROR^
  5857	033527	255 02 0 00 033531 		JCRY1	.+2		;PASS IF CRY1 IS SET
  5858						STOP^
  5859	033530	254 04 0 00 033531 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5860	033531	324 00 0 00 033532 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 49-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOS AND SOS INSTRUCTIONS                                                   SEQ 0143

  5861									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5862									;IN THE SUBTEST) TO LOOP ON ERROR^
  5863	033532	255 10 0 00 033534 		JOV	.+2		;PASS IF AROV IS RESET
  5864	033533	334 00 0 00 000000 		SKIPA
  5865						STOP^
  5866	033534	254 04 0 00 033535 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5867	033535	324 00 0 00 033536 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5868									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5869									;IN THE SUBTEST) TO LOOP ON ERROR^
  5870	033536	255 01 0 00 033540 		JFOV	.+2		;PASS IF FOV IS RESET
  5871	033537	334 00 0 00 000000 		SKIPA
  5872						STOP^
  5873	033540	254 04 0 00 033541 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5874	033541	324 00 0 00 033542 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5875									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5876									;IN THE SUBTEST) TO LOOP ON ERROR^
  5877
  5878					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 50
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INTERACTION OF JFCL, JRST, AND JSP WITH ARITHMETIC FLAGS                   SEQ 0144

  5879					SUBTTL	TEST OF INTERACTION OF JFCL, JRST, AND JSP WITH ARITHMETIC FLAGS
  5880
  5881					;**********
  5882
  5883					;THIS TEST VERIFIES THAT JFCL 1, WILL ALWAYS CLEAR FOV FLAG.
  5884					;FIRST, FOV IS SET VIA JRST 2, ;THEN JFCL 1,.+1 IS EXECUTED TO CLEAR FOV.
  5885					;IF FOV WAS CLEARED, THIS TEST PASSES.
  5886
  5887	033542				C13600:	SFLAG	FOV		^;SET FOV FLAG
  5888
  5889	033542	205 01 0 00 040000 		MOVSI	1,FOV
  5890	033543	255 17 0 00 033544 		JFCL	17,.+1	;RESET ALL FLAGS
  5891	033544	254 02 0 01 033545 		JRST	2,.+1(1)		;SET FOV FLAG
  5892	033545	255 01 0 00 033546 		JFCL	1,.+1		;*JFCL SHOULD RESET FOV
  5893	033546	255 01 0 00 033550 		JFCL	1,.+2		;PASS IF FOV IS RESET
  5894	033547	334 00 0 00 000000 		SKIPA			;SKIP HALT IF JFCL 1,.+1 PASSED
  5895						STOP^
  5896	033550	254 04 0 00 033551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5897	033551	324 00 0 00 033552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5898									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5899									;IN THE SUBTEST) TO LOOP ON ERROR^
  5900
  5901					;**********
  5902
  5903					;THIS TEST VERIFIES THAT JRST 2, CAN SET FXU AND JSP CAN SAVE FXU IN THE AC.
  5904					;FIRST, FXU IS SET VIA JRST 2, ;THEN, JSP IS EXECUTED. THE AC IS CHECKED
  5905					;FOR FXU.  IF FXU IS SET, THIS TEST PASSES; OTHERWISE, EITHER JRST 2, OR JSP FAILED.
  5906
  5907	033552				C13700:	SFLAG	FXU		^;*SET FXU FLAG
  5908
  5909	033552	205 01 0 00 000100 		MOVSI	1,FXU
  5910	033553	255 17 0 00 033554 		JFCL	17,.+1	;RESET ALL FLAGS
  5911	033554	254 02 0 01 033555 		JRST	2,.+1(1)		;SET FXU FLAG
  5912	033555	265 00 0 00 033556 		JSP	.+1		;*STORE FXU FLAG IN AC
  5913	033556	607 00 0 00 000100 		TLNN	FXU		;PASS IF FXU IS SET IN THE AC
  5914						STOP^
  5915	033557	254 04 0 00 033560 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5916	033560	324 00 0 00 033561 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5917									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5918									;IN THE SUBTEST) TO LOOP ON ERROR^
  5919
  5920					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 51
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INTERACTION OF JFCL, JRST, AND JSP WITH ARITHMETIC FLAGS                   SEQ 0145

  5921					;THIS TEST VERIFIES THAT JRST 2, CAN RESET FXU AND JSP CAN SAVE FXU IN THE AC.
  5922					;FIRST, FXU IS SET; THEN, FXU IS RESET VIA JRST 2,.  NEXT, JSP IS EXECUTED; AND
  5923					;THE AC IS CHECKED FOR FXU RESET.  IF FXU IS RESET IN THE AC, THIS TEST PASSES;
  5924					;OTHERWISE, JRST 2, FAILED TO CLEAR FXU OR JSP STORED FXU INCORECTLY.
  5925
  5926	033561				C14000:	SFLAG	FXU		^;SET FXU FLAG
  5927
  5928	033561	205 01 0 00 000100 		MOVSI	1,FXU
  5929	033562	255 17 0 00 033563 		JFCL	17,.+1	;RESET ALL FLAGS
  5930	033563	254 02 0 01 033564 		JRST	2,.+1(1)		;SET FXU FLAG
  5931						SFLAG			^;*RESET FXU FLAG
  5932
  5933	033564	205 01 0 00 000000 		MOVSI	1,
  5934	033565	255 17 0 00 033566 		JFCL	17,.+1	;RESET ALL FLAGS
  5935	033566	254 02 0 01 033567 		JRST	2,.+1(1)		;SET  FLAG
  5936	033567	265 00 0 00 033570 		JSP	.+1		;*STORE FXU FLAG IN THE AC
  5937	033570	603 00 0 00 000100 		TLNE	FXU		;PASS IF FXU IS RESET IN THE AC
  5938						STOP^
  5939	033571	254 04 0 00 033572 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5940	033572	324 00 0 00 033573 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5941									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5942									;IN THE SUBTEST) TO LOOP ON ERROR^
  5943
  5944					;**********
  5945
  5946					;THIS TEST VERIFIES THAT JRST 2, CAN SET DCK AND JSP CAN SAVE DCK IN THE AC.
  5947					;FIRST, DCK IS SET VIA JRST 2, ;THEN JSP IS EXECUTED.  THE AC IS CHECKED
  5948					;FOR DCK.  IF DCK IS SET, THIS TEST PASSES, OTHERWISE JRST 2, OR JSP FAILED.
  5949
  5950	033573				C14100:	SFLAG	DCK		^;*SET DCK FLAG
  5951
  5952	033573	205 01 0 00 000040 		MOVSI	1,DCK
  5953	033574	255 17 0 00 033575 		JFCL	17,.+1	;RESET ALL FLAGS
  5954	033575	254 02 0 01 033576 		JRST	2,.+1(1)		;SET DCK FLAG
  5955	033576	265 00 0 00 033577 		JSP	.+1		;*STORE FXU FLAG IN AC
  5956	033577	607 00 0 00 000040 		TLNN	DCK		;PASS IF FXU IS SET IN THE AC
  5957						STOP^
  5958	033600	254 04 0 00 033601 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5959	033601	324 00 0 00 033602 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5960									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5961									;IN THE SUBTEST) TO LOOP ON ERROR^
  5962
  5963					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 52
DSKAD1	MAC	28-Mar-78 13:50		TEST OF INTERACTION OF JFCL, JRST, AND JSP WITH ARITHMETIC FLAGS                   SEQ 0146

  5964					;THIS TEST VERIFIES THAT JRST 2, CAN RESET DCK AND JSP CAN SAVE DCK IN THE AC.
  5965					;FIRST, FXU IS SET; THEN, DCK IS RESET VIA JRST 2,.  NEXT, JSP IS EXPECTED; AND
  5966					;THE AC IS CHECKED FOR DCK RESET.  IF DCK IS RESET IN THE AC, THIS TEST PASSES;
  5967					;OTHERWISE, JRST 2, FAILED TO CLEAR DCK OR JSP STORED DCK INCORRECTLY.
  5968
  5969	033602				C14200:	SFLAG	DCK		^;SET DCK FLAG
  5970
  5971	033602	205 01 0 00 000040 		MOVSI	1,DCK
  5972	033603	255 17 0 00 033604 		JFCL	17,.+1	;RESET ALL FLAGS
  5973	033604	254 02 0 01 033605 		JRST	2,.+1(1)		;SET DCK FLAG
  5974						SFLAG			^;*RESET DCK FLAG
  5975
  5976	033605	205 01 0 00 000000 		MOVSI	1,
  5977	033606	255 17 0 00 033607 		JFCL	17,.+1	;RESET ALL FLAGS
  5978	033607	254 02 0 01 033610 		JRST	2,.+1(1)		;SET  FLAG
  5979	033610	265 00 0 00 033611 		JSP	.+1		;*STORE DCK FLAG IN THE AC
  5980	033611	603 00 0 00 000040 		TLNE	DCK		;PASS IF DCK IS RESET IN THE AC
  5981						STOP^
  5982	033612	254 04 0 00 033613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5983	033613	324 00 0 00 033614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5984									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5985									;IN THE SUBTEST) TO LOOP ON ERROR^
  5986
  5987					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 53
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JUMPX INSTRUCTIONS                                                         SEQ 0147

  5988					SUBTTL	TEST OF JUMPX INSTRUCTIONS
  5989
  5990					;**********
  5991
  5992					;THIS TEST VERIFIES THAT JUMPL IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  5993					;C(AC) IS NEGATIVE.  IN THIS TEST, THE AC CONTAINS -1,,-1.  HENCE,
  5994					;JUMPL SHOULD JUMP.  IF JUMPL JUMPS, THIS TEST PASSES.
  5995
  5996	033614	474 00 0 00 000000 	C14500:	SETO			;PRELOAD AC WITH -1,,-1
  5997	033615	321 00 0 00 033617 		JUMPL	.+2		;*JUMPL SHOULD JUMP BECAUSE C(AC) IS NEGATIVE
  5998						STOP^
  5999	033616	254 04 0 00 033617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6000	033617	324 00 0 00 033620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6002									;IN THE SUBTEST) TO LOOP ON ERROR^
  6003
  6004					;**********
  6005
  6006					;THIS TEST VERIFIES THAT JUMPL IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6007					;C(AC) IS NEGATIVE.  IN THIS TEST, THE AC CONTAINS 0.  HENCE,
  6008					;JUMPL SHOULD NOT JUMP.  IF JUMPL DOES NOT JUMP, THIS TEST PASSES.
  6009
  6010	033620	400 00 0 00 000000 	C14600:	SETZ			;PRELOAD AC WITH 0
  6011	033621	321 00 0 00 033623 		JUMPL	.+2		;*JUMPL SHOULD NOT JUMP
  6012	033622	334 00 0 00 000000 		SKIPA			;PASS IF JUMPL DOES NOT JUMP
  6013						STOP^
  6014	033623	254 04 0 00 033624 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6015	033624	324 00 0 00 033625 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6017									;IN THE SUBTEST) TO LOOP ON ERROR^
  6018
  6019					;**********
  6020
  6021					;THIS TEST VERIFIES THAT JUMPE IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6022					;C(AC)=0.  IN THIS TEST, THE AC CONTAINS 0.  HENCE,
  6023					;JUMPE SHOULD JUMP.  IF JUMPE JUMPS, THIS TEST PASSES.
  6024
  6025	033625	400 00 0 00 000000 	C14700:	SETZ			;PRELOAD AC WITH 0
  6026	033626	322 00 0 00 033630 		JUMPE	.+2		;*JUMPE SHOULD JUMP
  6027						STOP^
  6028	033627	254 04 0 00 033630 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6029	033630	324 00 0 00 033631 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6030									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6031									;IN THE SUBTEST) TO LOOP ON ERROR^
  6032
  6033					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 54
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JUMPX INSTRUCTIONS                                                         SEQ 0148

  6034					;THIS TEST VERIFIES THAT JUMPN IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6035					;C(AC) IS NON-ZERO.  IN THIS TEST, THE AC CONTAINS 1.  HENCE,
  6036					;JUMPN SHOULD JUMP.  IF JUMPN JUMPS, THIS TEST PASSES.
  6037
  6038	033631	201 00 0 00 000001 	C15000:	MOVEI	1		;PRELOAD AC WITH 1
  6039	033632	326 00 0 00 033634 		JUMPN	.+2		;*JUMPN SHOULD JUMP
  6040						STOP^
  6041	033633	254 04 0 00 033634 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6042	033634	324 00 0 00 033635 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6043									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6044									;IN THE SUBTEST) TO LOOP ON ERROR^
  6045
  6046					;**********
  6047
  6048					;THIS TEST VERIFIES THAT JUMPE IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6049					;C(AC)=0.  IN THIS TEST, THE AC CONTAINS 2.  HENCE,
  6050					;JUMPL SHOULD NOT JUMP.  IF JUMPE DOES NOT JUMP, THIS TEST PASSES.
  6051
  6052	033635	201 00 0 00 000002 	C15100:	MOVEI	2		;PRELOAD AC WITH 2
  6053	033636	322 00 0 00 033640 		JUMPE	.+2		;*JUMPE SHOULD NOT JUMP
  6054	033637	334 00 0 00 000000 		SKIPA			;PASS IF JUMPE DID NOT JUMP
  6055						STOP^
  6056	033640	254 04 0 00 033641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6057	033641	324 00 0 00 033642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6058									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6059									;IN THE SUBTEST) TO LOOP ON ERROR^
  6060
  6061					;**********
  6062
  6063					;THIS TEST VERIFIES THAT JUMPN IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6064					;C(AC) IS NON-ZERO.  IN THIS TEST, THE AC CONTAINS 0.  HENCE,
  6065					;JUMPN SHOULD NOT JUMP.  IF JUMPN DOES NOT JUMP, THIS TEST PASSES.
  6066
  6067	033642	400 00 0 00 000000 	C15200:	SETZ			;PRELOAD AC WITH 0
  6068	033643	326 00 0 00 033645 		JUMPN	.+2		;*JUMPN SHOULD NOT JUMP
  6069	033644	334 00 0 00 000000 		SKIPA			;PASS IF JUMPN DID NOT JUMP
  6070						STOP^
  6071	033645	254 04 0 00 033646 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6072	033646	324 00 0 00 033647 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6073									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6074									;IN THE SUBTEST) TO LOOP ON ERROR^
  6075
  6076					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 55
DSKAD1	MAC	28-Mar-78 13:50		TEST OF JUMPX INSTRUCTIONS                                                         SEQ 0149

  6077					;THIS TEST VERIFIES THAT JUMPG IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6078					;C(AC) IS GREATER THAN 0.  IN THIS TEST, THE AC CONTAINS 1.  HENCE,
  6079					;JUMPG SHOULD JUMP.  IF JUMPG JUMPS, THIS TEST PASSES.
  6080
  6081	033647	201 00 0 00 000001 	C15300:	MOVEI	1		;PRELOAD  AC WITH 1
  6082	033650	327 00 0 00 033652 		JUMPG	.+2		;*JUMPG SHOULD JUMP
  6083						STOP^
  6084	033651	254 04 0 00 033652 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6085	033652	324 00 0 00 033653 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6086									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6087									;IN THE SUBTEST) TO LOOP ON ERROR^
  6088
  6089					;**********
  6090
  6091					;THIS TEST VERIFIES THAT JUMPG IS DATA DEPENDENT.  IT WILL JUMP IF AND ONLY IF
  6092					;C(AC) IS GREATER THAN 0.  IN THIS TEST, THE AC CONTAINS -1,,0.  HENCE,
  6093					;JUMPG SHOULD NOT JUMP.  IF JUMPG DOES NOT JUMP, THIS TEST PASSES.
  6094
  6095	033653	205 00 0 00 777777 	C15400:	MOVSI	-1		;PRELOAD AC WITH -1,,0
  6096	033654	327 00 0 00 033656 		JUMPG	.+2		;*JUMPG SHOULD NOT JUMP
  6097	033655	334 00 0 00 000000 		SKIPA			;PASS IF JUMPG DID NOT JUMP
  6098						STOP^
  6099	033656	254 04 0 00 033657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6100	033657	324 00 0 00 033660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6101									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6102									;IN THE SUBTEST) TO LOOP ON ERROR^
  6103
  6104					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 56
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOJ AND SOJ INSTRUCTIONS                                                   SEQ 0150

  6105					SUBTTL	TEST OF AOJ AND SOJ INSTRUCTIONS
  6106
  6107					;**********
  6108
  6109					;THIS TEST VERIFIES THAT AOJ ADDS 1 TO THE AC AND DOES NOT JUMP.
  6110					;FIRST, THE AC IS PRELOADED WITH 0; THEN, AOJ IS EXECUTED.  NEXT, THE
  6111					;AC IS CHECKED FOR 1.  IF C(AC) IS NOT 1 OR AOJ SKIPPED, THIS TEST FAILS.
  6112
  6113	033660	400 00 0 00 000000 	C15500:	SETZ			;PRELOAD AC WITH 0
  6114	033661	340 00 0 00 033663 		AOJ	.+2		;*AOJ SHOULD ADD 1 TO THE AC AND NOT JUMP
  6115	033662	302 00 0 00 000001 		CAIE	1		;PASS IF C(AC)=1 AND AOJ DID NOT JUMP
  6116						STOP^
  6117	033663	254 04 0 00 033664 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6118	033664	324 00 0 00 033665 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6119									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6120									;IN THE SUBTEST) TO LOOP ON ERROR^
  6121
  6122					;**********
  6123
  6124					;THIS TEST VERIFIES THAT AOJ ADDS 1 TO THE AC AND DOES NOT JUMP.
  6125					;FIRST, THE AC IS PRELOADED WITH -1,,-1; THEN, AOJ IS EXECUTED.  NEXT, THE
  6126					;AC IS CHECKED FOR 0.  IF C(AC) IS NOT 0 OR AOJ SKIPPED, THIS TEST FAILS.
  6127
  6128	033665	474 00 0 00 000000 	C15600:	SETO			;PRELOAD AC WITH 0
  6129	033666	340 00 0 00 033670 		AOJ	.+2		;*AOJ SHOULD ADD 1 TO THE AC AND NOT JUMP
  6130	033667	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=1 AND AOJ DID NOT JUMP
  6131						STOP^
  6132	033670	254 04 0 00 033671 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6133	033671	324 00 0 00 033672 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6135									;IN THE SUBTEST) TO LOOP ON ERROR^
  6136
  6137					;**********
  6138
  6139					;THIS TEST VERIFIES THAT SOJ SUBTRACTS 1 FROM THE AC AND DOES NOT JUMP.
  6140					;FIRST, THE AC IS PRELOADED WITH 0; THEN, SOJ IS EXECUTED.  NEXT, THE
  6141					;AC IS CHECKED FOR -1,,-1.  IF C(AC) IS NOT -1,,-1 OR SOJ SKIPPED, THIS TEST FAILS.
  6142
  6143	033672	400 00 0 00 000000 	C15700:	SETZ			;PRELOAD AC WITH 0
  6144	033673	360 00 0 00 033675 		SOJ	.+2		;*SOJ SHOULD SUBTRACT 1 FROM THE AC AND NOT JUMP
  6145	033674	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(AC)=-1,,-1 AND SOJ DID NOT JUMP
  6146						STOP^
  6147	033675	254 04 0 00 033676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6148	033676	324 00 0 00 033677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6149									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6150									;IN THE SUBTEST) TO LOOP ON ERROR^
  6151
  6152					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 57
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOJ AND SOJ INSTRUCTIONS                                                   SEQ 0151

  6153					;THIS TEST VERIFIES THAT SOJ SUBTRACTS 1 FROM THE AC AND DOES NOT JUMP.
  6154					;FIRST, THE AC IS PRELOADED WITH -1,,-1; THEN, SOJ IS EXECUTED.  NEXT, THE
  6155					;AC IS CHECKED FOR -1,,-2.  IF C(AC) IS NOT -1,,-2 OR SOJ SKIPPED, THIS TEST FAILS.
  6156
  6157	033677	474 00 0 00 000000 	C16000:	SETO			;PRELOAD AC WITH -1,,-1
  6158	033700	360 00 0 00 033702 		SOJ	.+2		;*SOJ SHOULD SUBTRACT 1 FROM THE AC AND NOT JUMP
  6159	033701	312 00 0 00 034405 		CAME	[-2]		;PASS IF C(AC)=-1,,-2 AND SOJ DID NOT JUMP
  6160						STOP^
  6161	033702	254 04 0 00 033703 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6162	033703	324 00 0 00 033704 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6163									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6164									;IN THE SUBTEST) TO LOOP ON ERROR^
  6165
  6166					;**********
  6167
  6168					;THIS TEST VERIFIES THAT SOJ SUBTRACTS 1 FROM THE AC AND DOES NOT JUMP.
  6169					;FIRST, THE AC IS PRELOADED WITH 0,,1; THEN, SOJ IS EXECUTED.  NEXT, THE
  6170					;AC IS CHECKED FOR 0.  IF C(AC) IS NOT 0 OR SOJ SKIPPED, THIS TEST FAILS.
  6171
  6172	033704	201 00 0 00 000001 	C16100:	MOVEI	1		;PRELOAD AC WITH 1
  6173	033705	360 00 0 00 033707 		SOJ	.+2		;*SOJ SHOULD SUBTRACT 1 FROM THE AC AND NOT JUMP
  6174	033706	302 00 0 00 000000 		CAIE	0		;PASS IF C(AC)=0 AND SOJ DID NOT JUMP
  6175						STOP^
  6176	033707	254 04 0 00 033710 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6177	033710	324 00 0 00 033711 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6178									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6179									;IN THE SUBTEST) TO LOOP ON ERROR^
  6180
  6181					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 58
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOJ AND SOJ INSTRUCTIONS                                                   SEQ 0152

  6182					;THIS TEST VERIFIES THAT SOJ AC, FOLLOWED BY AOJ AC, HAS NO NET EFFECT ON C(AC).
  6183					;IN THIS CASE, THE AC IS PRELOADED WITH 0; THEN, SOJ AC, FOLLOWED BY AOJ. 
  6184					;AC, IS REPEATED 7 TIMES.  THE AC IS THEN CHECKED FOR ITS ORIGINAL CONTENTS, 0.
  6185					;IF C(AC)=0, THIS TEST PASSES; OTHERWISE AOJ OR SOJ FAILED.
  6186
  6187			000017		C16200:	AC=17
  6188	033711	400 17 0 00 000000 		SETZ	AC,		;PRELOAD AC WITH 0
  6189						REPEAT	^D10,<
  6190						SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6191						AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC>
  6192
  6193	033712	360 17 0 00 033712 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6194	033713	340 17 0 00 033713 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6195
  6196	033714	360 17 0 00 033714 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6197	033715	340 17 0 00 033715 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6198
  6199	033716	360 17 0 00 033716 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6200	033717	340 17 0 00 033717 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6201
  6202	033720	360 17 0 00 033720 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6203	033721	340 17 0 00 033721 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6204
  6205	033722	360 17 0 00 033722 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6206	033723	340 17 0 00 033723 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6207
  6208	033724	360 17 0 00 033724 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6209	033725	340 17 0 00 033725 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6210
  6211	033726	360 17 0 00 033726 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6212	033727	340 17 0 00 033727 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6213
  6214	033730	360 17 0 00 033730 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6215	033731	340 17 0 00 033731 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6216
  6217	033732	360 17 0 00 033732 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6218	033733	340 17 0 00 033733 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6219
  6220	033734	360 17 0 00 033734 		SOJ	AC,.		;*SOJ SHOULD SUBTRACT 1 FROM THE AC
  6221	033735	340 17 0 00 033735 		AOJ	AC,.		;*AOJ SHOULD ADD 1 TO THE AC
  6222	033736	332 00 0 00 000017 		SKIPE	AC		;PASS IF C(AC) IS UNCHANGED. I.E. C(AC)=0
  6223						STOP^
  6224	033737	254 04 0 00 033740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6225	033740	324 00 0 00 033741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6226									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6227									;IN THE SUBTEST) TO LOOP ON ERROR^
  6228
  6229					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 59
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOJ AND SOJ INSTRUCTIONS                                                   SEQ 0153

  6230					;THIS TEST VERIFIES THAT SOJ SETS CRY0/1 FLAGS IF C(E) IS A NON-ZERO NUMBER OTHER
  6231					;THAN 400000,,0.  IN THIS CASE, C(E)=1.  FIRST THE FLAGS ARE RESET; THEN
  6232					;SOJ IS EXECUTED.  THE  FLAGS ARE CHECKED.  IF CRY0 AND CRY1 ARE SET
  6233					;AND AROV AND FOV ARE RESET, THIS TEST PASSES.
  6234
  6235	033741	255 17 0 00 033742 	C16201:	JFCL	17,.+1		;RESET ARITHMETIC FLAGS
  6236	033742	201 00 0 00 000001 		MOVEI	1		;PRELOAD E WITH 1
  6237	033743	360 00 0 00 000000 		SOJ			;*SOJ SHOULD SET CRY0/1
  6238	033744	255 04 0 00 033746 		JCRY0	.+2		;PASS IF CRY0 IS SET
  6239						STOP^
  6240	033745	254 04 0 00 033746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6241	033746	324 00 0 00 033747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6242									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6243									;IN THE SUBTEST) TO LOOP ON ERROR^
  6244	033747	255 02 0 00 033751 		JCRY1	.+2		;PASS IF CRY1 IS SET
  6245						STOP^
  6246	033750	254 04 0 00 033751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6247	033751	324 00 0 00 033752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6248									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6249									;IN THE SUBTEST) TO LOOP ON ERROR^
  6250	033752	255 10 0 00 033754 		JOV	.+2		;PASS IF AROV IS RESET
  6251	033753	334 00 0 00 000000 		SKIPA
  6252						STOP^
  6253	033754	254 04 0 00 033755 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6254	033755	324 00 0 00 033756 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6255									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6256									;IN THE SUBTEST) TO LOOP ON ERROR^
  6257	033756	255 01 0 00 033760 		JFOV	.+2		;PASS IF FOV IS RESET
  6258	033757	334 00 0 00 000000 		SKIPA
  6259						STOP^
  6260	033760	254 04 0 00 033761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6261	033761	324 00 0 00 033762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6262									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6263									;IN THE SUBTEST) TO LOOP ON ERROR^
  6264
  6265					;**********
  6266
  6267					;THIS TEST VERIFIES THAT AOJ SETS CRY0 AND CRY1 FLAG IF C(E) IS -1,,-1
  6268					;FIRST THE FLAGS ARE RESET; THEN
  6269					;AOJ IS EXECUTED.  THE FLAGS ARE CHECKED.
  6270					;IF CRY0 AND CRY1 ARE SET AND AROV AND FOV ARE RESET, THIS TEST PASSES.
  6271
  6272	033762	255 17 0 00 033763 	C16202:	JFCL	17,.+1		;RESET ARITHMETIC FLAGS
  6273	033763	474 00 0 00 000000 		SETO			;PRELOAD E WITH 1
  6274	033764	340 00 0 00 000000 		AOJ			;*AOJ SHOULD SET CRY0 AND CRY1
  6275	033765	255 04 0 00 033767 		JCRY0	.+2		;PASS IF CRY0 IS SET
  6276						STOP^
  6277	033766	254 04 0 00 033767 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6278	033767	324 00 0 00 033770 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6279									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6280									;IN THE SUBTEST) TO LOOP ON ERROR^
  6281	033770	255 02 0 00 033772 		JCRY1	.+2		;PASS IF CRY1 IS SET
  6282						STOP^
  6283	033771	254 04 0 00 033772 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6284	033772	324 00 0 00 033773 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 59-1
DSKAD1	MAC	28-Mar-78 13:50		TEST OF AOJ AND SOJ INSTRUCTIONS                                                   SEQ 0154

  6285									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6286									;IN THE SUBTEST) TO LOOP ON ERROR^
  6287	033773	255 10 0 00 033775 		JOV	.+2		;PASS IF AROV IS RESET
  6288	033774	334 00 0 00 000000 		SKIPA
  6289						STOP^
  6290	033775	254 04 0 00 033776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6291	033776	324 00 0 00 033777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6292									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6293									;IN THE SUBTEST) TO LOOP ON ERROR^
  6294	033777	255 01 0 00 034001 		JFOV	.+2		;PASS IF FOV IS RESET
  6295	034000	334 00 0 00 000000 		SKIPA
  6296						STOP^
  6297	034001	254 04 0 00 034002 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6298	034002	324 00 0 00 034003 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6299									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6300									;IN THE SUBTEST) TO LOOP ON ERROR^
  6301
  6302					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 60
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0155

  6303					SUBTTL	TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS
  6304
  6305					;**********
  6306
  6307					;THIS TEST VERIFIES THAT ADDM DOES NOT MODIFY C(AC)
  6308					;BOTH AC AND E ARE PRELOADED WITH -1,,-1.  THEN ADDM IS EXECUTED.
  6309					;THIS TEST PASSES IF C(AC) ARE UNCHANGED
  6310
  6311	034003	477 00 0 00 000001 	C16400:	SETOB	1		;PRELOAD AC, E WITH -1,,-1
  6312	034004	272 00 0 00 000001 		ADDM	1		;*ADDM SHOULD NOT AFFECT C(AC)
  6313	034005	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(AC) IS UNMODIFIED BY ADDM
  6314						STOP^
  6315	034006	254 04 0 00 034007 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6316	034007	324 00 0 00 034010 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6317									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6318									;IN THE SUBTEST) TO LOOP ON ERROR^
  6319
  6320					;**********
  6321
  6322					;THIS TEST VERIFIES THAT HRREM DOES NOT MODIFY C(AC)
  6323					;THE AC IS PRELOADED WITH 0,,-1.  THEN HRRM IS EXECUTED.
  6324					;THIS TEST PASSES IF C(AC) ARE UNCHANGED
  6325
  6326	034010	201 00 0 00 777777 	C16500:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  6327	034011	572 00 0 00 000001 		HRREM	1		;*HRRM SHOULD NOT AFFECT C(AC)
  6328	034012	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC) IS UNMODIFIED BY HRRM
  6329						STOP^
  6330	034013	254 04 0 00 034014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6331	034014	324 00 0 00 034015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6333									;IN THE SUBTEST) TO LOOP ON ERROR^
  6334
  6335					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 61
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0156

  6336					;THIS TEST VERIFIES THAT MOVSM DOES NOT MODIFY C(AC)
  6337					;THE AC IS PRELOADED WITH 0,,-1.  THEN MOVSM IS EXECUTED.
  6338					;THIS TEST PASSES IF C(AC) ARE UNCHANGED
  6339
  6340	034015	201 00 0 00 777777 	C16600:	MOVEI	-1		;PRELOAD AC WITH 0,,-1
  6341	034016	206 00 0 00 000001 		MOVSM	1		;*MOVSM SHOULD NOT AFFECT C(AC)
  6342	034017	302 00 0 00 777777 		CAIE	-1		;PASS IF C(AC) IS UNMODIFIED BY MOVSM
  6343						STOP^
  6344	034020	254 04 0 00 034021 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6345	034021	324 00 0 00 034022 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6346									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6347									;IN THE SUBTEST) TO LOOP ON ERROR^
  6348
  6349					;**********
  6350
  6351					;THIS TEST VERIFIES THAT XORM DOES NOT MODIFY C(AC)
  6352					;BOTH AC AND E ARE PRELOADED WITH -1,,-1.  THEN XORM IS EXECUTED.
  6353					;THIS TEST PASSES IF C(AC) ARE UNCHANGED
  6354
  6355	034022	477 00 0 00 000001 	C16700:	SETOB	1		;PRELOAD AC, E WITH -1,,-1
  6356	034023	432 00 0 00 000001 		XORM	1		;*XORM SHOULD NOT AFFECT C(AC)
  6357	034024	312 00 0 00 034404 		CAME	[-1]		;PASS IF C(AC) IS UNMODIFIED BY XORM
  6358						STOP^
  6359	034025	254 04 0 00 034026 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6360	034026	324 00 0 00 034027 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6362									;IN THE SUBTEST) TO LOOP ON ERROR^
  6363
  6364					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 62
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0157

  6365					;THIS TEST VERIFIES THAT ADDB ADDS C(AC) TO C(E) AND PLACES THE
  6366					;RESULT IN BOTH AC AND E.  IN THIS TEST, BOTH AC AND E ARE PRELOADED
  6367					;WITH -1,,-1, THEN, ADDB IS EXECUTED.  C(AC) IS THEN COMPARED TO C(E);
  6368					;AND C(AC) IS THEN COMPARED TO -2.  IF BOTH OF THESE COMPARISONS SUCCEED, THIS
  6369					;TEST PASSES; OTHERWISE, ADDB FAILED
  6370
  6371	034027	477 00 0 00 000001 	C17000:	SETOB	1		;PRELOAD AC, E WITH -1,,-1
  6372	034030	273 00 0 00 000001 		ADDB	1		;*ADDB SHOULD ADD C(AC) TO C(E) AND PLACE RESULT
  6373									;INTO BOTH AC AND E
  6374	034031	312 00 0 00 000001 		CAME	1		;PASS IF C(AC)=C(E)
  6375						STOP^
  6376	034032	254 04 0 00 034033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6377	034033	324 00 0 00 034034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6378									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6379									;IN THE SUBTEST) TO LOOP ON ERROR^
  6380	034034	312 00 0 00 034405 		CAME	[-2]		;PASS IF C(AC)=-2
  6381						STOP^
  6382	034035	254 04 0 00 034036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6383	034036	324 00 0 00 034037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6385									;IN THE SUBTEST) TO LOOP ON ERROR^
  6386
  6387					;**********
  6388
  6389					;THIS TEST VERIFIES THAT ADDM ADDS C(AC) TO C(E) AND PLACES THE RESULT IN E
  6390					;IN THIS CASE, AC, E ARE BOTH PRELOADED WITH -1; THEN, ADDM IS EXECUTED.
  6391					;E IS THEN CHECKED FOR -2.  IF C(E)=-2, THIS TEST PASSES; OTHERWISE, ADDM FAILED
  6392
  6393	034037	477 00 0 00 000001 	C17100:	SETOB	1		;PRELOAD AC, E WITH -1,,-1
  6394	034040	272 00 0 00 000001 		ADDM	1		;*ADDM SHOULD ADD C(AC) TO C(E)
  6395	034041	312 01 0 00 034405 		CAME	1,[-2]		;PASS IF C(E)=-2
  6396						STOP^
  6397	034042	254 04 0 00 034043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6398	034043	324 00 0 00 034044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6399									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6400									;IN THE SUBTEST) TO LOOP ON ERROR^
  6401
  6402					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 63
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0158

  6403					;THIS TEST VERIFIES THAT HLLOS PLACES ONES ON THE RIGHT HALF OF E
  6404					;BUT DOES NOT AFFECT THE LEFT HALF OF E.  IN THIS CASE,
  6405					;E IS PRELOADED WITH 0; THE, HLLOS IS EXECUTED.  THE RESULT
  6406					;IN E SHOULD BE 0,,-1.  IF C(E)=0,,-1, THIS TEST PASSES
  6407
  6408	034044	402 00 0 00 000001 	C17200:	SETZM	1		;PRELOAD E WITH 0
  6409	034045	523 00 0 00 000001 		HLLOS	1		;*HLLOS SHOULD PLACE 0,,-1 INTO E
  6410	034046	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(E)=0,,-1
  6411						STOP^
  6412	034047	254 04 0 00 034050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6413	034050	324 00 0 00 034051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6414									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6415									;IN THE SUBTEST) TO LOOP ON ERROR^
  6416
  6417					;**********
  6418
  6419					;THIS TEST VERIFIES THAT MOVSS SWAPS BOTHS HALVES OF E AND
  6420					;PLACES THE RESULT IN E.  IN THIS CASE, E IS PRELOADED WITH
  6421					;-1,,0; THEN, MOVSS IS EXECUTED.  THE RESULT IN E SHOULD BE 0,,-1.
  6422					;IF C(E)=0,,-1, THIS TEST PASSES
  6423
  6424	034051	205 01 0 00 777777 	C17300:	MOVSI	1,-1		;PRELOAD E WITH -1,,0
  6425	034052	207 00 0 00 000001 		MOVSS	1		;*MOVSS SHOULD PLACE 0,,-1 INTO E
  6426	034053	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(E)=0,,-1
  6427						STOP^
  6428	034054	254 04 0 00 034055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6429	034055	324 00 0 00 034056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6430									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6431									;IN THE SUBTEST) TO LOOP ON ERROR^
  6432
  6433					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 64
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0159

  6434					;THIS TEST VERIFIES THAT AOS ADDS ONE TO MEMORY BUT DOES NOT SKIP
  6435					;FIRST, E IS PRELOADED WITH -1,-1; THEN, AOS IS EXECUTED.  NEXT, E IS CHECKED FOR 0.
  6436					;IF C(E) IS NOT 0 OR AOS SKIPPED, THIS TEST FAILS
  6437
  6438	034056	477 00 0 00 000001 	C17400:	SETOB	1		;PRELOAD E WITH -1,,-1
  6439	034057	350 00 0 00 000001 		AOS	1		;*AOS SHOULD ADD TO C(E) AND NOT SKIP
  6440	034060	302 01 0 00 000000 		CAIE	1,0		;PASS IF C(E)=0,,0 AND AOS DID NOT SKIP
  6441						STOP^
  6442	034061	254 04 0 00 034062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6443	034062	324 00 0 00 034063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6444									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6445									;IN THE SUBTEST) TO LOOP ON ERROR^
  6446
  6447					;**********
  6448
  6449					;THIS TEST VERIFIES THAT HRLM PLACES C(AC-RIGHT) INTO E-LEFT AND DOES
  6450					;NOT MODIFY E-RIGHT.  IN THIS CASE, AC IS PRELOADED WITH 0 AND E IS PRELOADED
  6451					;WITH -1,,-1.  THEN, HRLM IS EXECUTED.  E IS THEN CHECKED FOR 0,,-1.  IF
  6452					;C(E)=0,,-1, THIS TEST PASSES
  6453
  6454	034063	400 00 0 00 000000 	C17500:	SETZ			;PRELOAD AC WITH 0
  6455	034064	474 01 0 00 000000 		SETO	1,		;PRELOAD E WITH -1,,-1
  6456	034065	506 00 0 00 000001 		HRLM	1		;*HRLM SHOULD PLACE 0,,-1 INTO E
  6457	034066	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(E)=0,,-1
  6458						STOP^
  6459	034067	254 04 0 00 034070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6460	034070	324 00 0 00 034071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6461									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6462									;IN THE SUBTEST) TO LOOP ON ERROR^
  6463
  6464					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 65
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0160

  6465					;THIS TEST VERIFIES THAT HRRS DOES NOT MODIFY E
  6466					;E IS PRELOADED WITH 0 AND AC IS PRELOADED WITH -1,,-1.
  6467					;HRRS IS EXECUTED; THEN E IS CHECKED.  IF C(E) DOES
  6468					;NOT CHANGE, THIS TEST PASSES
  6469
  6470	034071	474 00 0 00 000000 	C17600:	SETO			;PRELOAD AC WITH -1,,-1
  6471	034072	400 01 0 00 000000 		SETZ	1,		;PRELOAD E WITH 0,,0
  6472	034073	543 00 0 00 000001 		HRRS	1		;*HRRS SHOULD PLACE 0,,0 INTO E
  6473	034074	332 00 0 00 000001 		SKIPE	1
  6474						STOP^
  6475	034075	254 04 0 00 034076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6476	034076	324 00 0 00 034077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6477									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6478									;IN THE SUBTEST) TO LOOP ON ERROR^
  6479
  6480					;**********
  6481
  6482					;THIS TEST VERIFIES THAT HRRZM PLACES C(AC-RIGHT) INTO E-RIGHT AND PLACES
  6483					;ZEROS INTO E-LEFT.  IN THIS CASE, AC=E=AC1 AND C(AC)=C(E)=-1,,0.  HRRZM
  6484					;IS EXECUTED AND AC1 IS CHECKED FOR 0.  IF AC1=0, THIS TEST PASSES.
  6485
  6486	034077	474 00 0 00 000000 	C17700:	SETO			;PRELOAD AC0 WITH -1,,-1
  6487	034100	205 01 0 00 777777 		MOVSI	1,-1		;PRELOAD AC1 WITH -1,,0
  6488	034101	552 01 0 00 000001 		HRRZM	1,1		;*HRRZM SHOULD PLACE 0 INTO AC1
  6489	034102	332 00 0 00 000001 		SKIPE	1		;PASS IF C(AC1)=0
  6490						STOP^
  6491	034103	254 04 0 00 034104 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6492	034104	324 00 0 00 034105 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6493									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6494									;IN THE SUBTEST) TO LOOP ON ERROR^
  6495
  6496					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 66
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0161

  6497					;THIS TEST VERIFIES THAT JFCL 17,.+1 NEVER JUMPS AND DOES NOT MODIFY C(AC0).
  6498					;FIRST, AC0 IS PRELOADED; THEN, JFCL IS EXECUTED.  IF AC0 IS MODIFIED
  6499					;OR JFCL SKIPS, THIS TEST FAILS
  6500
  6501	034105	400 00 0 00 000000 	C20000:	SETZ			;CLEAR AC0
  6502	034106	255 17 0 00 034107 		JFCL	17,.+1		;*JFCL SHOULD NOT JUMP OR MODIFY C(AC0).
  6503	034107	332 00 0 00 000000 		SKIPE			;PASS IF C(AC0)=0 AND JFCL DID NOT JUMP
  6504						STOP^
  6505	034110	254 04 0 00 034111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6506	034111	324 00 0 00 034112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6507									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6508									;IN THE SUBTEST) TO LOOP ON ERROR^
  6509
  6510					;**********
  6511
  6512					;THIS TEST VERIFIES THAT XORM PERFORMS THE LOGICAL EXCLUSIVE OR FUNCTION
  6513					;BETWEEN C(AC) AND C(E) AND PLACES THE RESULT INTO E
  6514					;IN THIS CASE, AC AND E ARE PRELOADED WITH -1,,-1; THEN, XORM IS
  6515					;EXECUTED.  IF THE RESULT IN E IS 0, THE TEST PASSES
  6516
  6517	034112	477 00 0 00 000001 	C20100:	SETOB	1		;PRELOAD AC,E WITH -1,,-1
  6518	034113	432 00 0 00 000001 		XORM	1		;*XORM SHOULD PLACE 0 INTO E
  6519	034114	302 01 0 00 000000 		CAIE	1,0		;PASS IF C(E)=0
  6520						STOP^
  6521	034115	254 04 0 00 034116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6522	034116	324 00 0 00 034117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6523									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6524									;IN THE SUBTEST) TO LOOP ON ERROR^
  6525
  6526					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 67
DSKAD1	MAC	28-Mar-78 13:50		TEST OF MEMORY, BOTH AND SELF MODE INSTRUCTIONS                                    SEQ 0162

  6527					;THIS TEST VERIFIES THAT SETZB PLACES ZEROS INTO BOTH AC AND E.
  6528					;AFTER SETZB IS EXECUTED, BOTH AC AND E ARE CHECKED
  6529					;FOR 0.  IF EITHER AC OR E CONTAINS ANY ONES, THIS TEST FAILS
  6530
  6531	034117	403 00 0 00 000001 	C20200:	SETZB	1		;*SETZB SHOULD PLACE ZEROES IN BOTH AC AND E
  6532	034120	316 00 0 00 034454 		CAMN	[0]		;FAIL IF C(AC) IS NON-ZERO
  6533	034121	312 00 0 00 000001 		CAME	1		;FAIL IF C(E) IS NON-ZERO
  6534						STOP^
  6535	034122	254 04 0 00 034123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6536	034123	324 00 0 00 034124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6537									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6538									;IN THE SUBTEST) TO LOOP ON ERROR^
  6539
  6540					;**********
  6541
  6542					;THIS TEST VERIFIES THAT SETAB PLACES C(AC) INTO BOTH AC AND E.
  6543					;FIRST, AC IS PRELOADED WITH -1,,-1 AND E IS PRELOADED WITH 0;
  6544					;THEN, SETAB IS EXECUTED.  BOTH AC AND E ARE CHECKED FOR -1,,-1
  6545					;IF EITHER AC OR E CONTAIN ANY ZEROS, THIS TEST FAILS.
  6546
  6547	034124	400 01 0 00 000000 	C20300:	SETZ	1,		;PRELOAD E WITH 0
  6548	034125	474 00 0 00 000000 		SETO			;PRELOAD AC WITH -1,,-1
  6549	034126	427 00 0 00 000001 		SETAB	1		;*SETAB SHOULD PLACE -1,,-1 INTO BOTH AC AND E
  6550	034127	316 00 0 00 034404 		CAMN	[-1]		;FAIL IF C(AC) IS NOT -1,-1
  6551	034130	312 00 0 00 000001 		CAME	1		;FAIL IF C(E) IS NOT -1,,-1
  6552						STOP^
  6553	034131	254 04 0 00 034132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6554	034132	324 00 0 00 034133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6556									;IN THE SUBTEST) TO LOOP ON ERROR^
  6557
  6558					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 68
DSKAD1	MAC	28-Mar-78 13:50		XCT INSTRUCTION - BASIC TESTS                                                      SEQ 0163

  6559					SUBTTL	XCT INSTRUCTION - BASIC TESTS
  6560
  6561					;**********
  6562
  6563					;THIS TEST VERIFIES THAT XCT WILL EXECUTE THE INSTRUCTION SPECIFIED BY C(E)
  6564					;IN THIS CASE, C(E) SPECIFIES A MOVEI INSTRUCTION
  6565					;AFTER EXECUTING MOVEI, CONTROL SHOULD RETURN TO
  6566					;THE NEXT SEQUENTIAL INSTRUCTION FOLLOWING XCT.
  6567					;THIS TEST PASSES IF CONTROL RETURNS TO THE NEXT SEQUENTIAL INSTRUCTION FOLLOWING XCT
  6568
  6569	034133	403 00 0 00 000001 	C20400:	SETZB	1		;CLEAR AC0 AND AC1
  6570	034134	256 00 0 00 034461 		XCT	[MOVEI 1,.+2]	;*XCT SHOULD RETURN CONTROL TO NEXT INSTRUCTION
  6571	034135	334 00 0 00 000000 		SKIPA
  6572						STOP^
  6573	034136	254 04 0 00 034137 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6574	034137	324 00 0 00 034140 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6575									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6576									;IN THE SUBTEST) TO LOOP ON ERROR^
  6577
  6578					;**********
  6579
  6580					;THIS TEST VERIFIES THAT XCT WILL EXECUTE THE INSTRUCTION SPECIFIED BY C(E)
  6581					;IN THIS CASE, C(E) SPECIFIES A MOVEI INSTRUCTION.
  6582					;AFTER EXECUTING MOVEI, THE AC SPECIFIED BY MOVEI IS CHECKED FOR
  6583					;0,,1 (THE EXPECTED RESULT).  IF C(AC)=0,,1, THIS TEST PASSES
  6584
  6585	034140	403 00 0 00 000001 	C20500:	SETZB	1		;CLEAR AC
  6586	034141	256 00 0 00 034462 		XCT	[MOVEI 1,1]	;*XCT OF MOVEI SHOULD PLACE 1 IN THE AC
  6587	034142	302 01 0 00 000001 		CAIE	1,1		;PASS IF C(AC)=1
  6588						STOP^
  6589	034143	254 04 0 00 034144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6590	034144	324 00 0 00 034145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6591									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6592									;IN THE SUBTEST) TO LOOP ON ERROR^
  6593
  6594					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 69
DSKAD1	MAC	28-Mar-78 13:50		XCT INSTRUCTION - BASIC TESTS                                                      SEQ 0164

  6595					;THIS TEST VERIFIES THAT A NEST OF XCT INSTRUCTIONS WILL EXECUTE
  6596					;THE INSTRUCTION SPECIFIED BY THE MOST NESTED XCT AND RETURN CONTROL TO
  6597					;THE NEXT SEQUENTIAL INSTRUCTION FOLLOWING THE FIRST XCT.
  6598					;IN THIS CASE, THE EXECUTED INSTRUCTION IS MOVEI.  AFTER EXECUTING THE MOVEI,
  6599					;C(AC) IS CHECKED FOR 0,,-1 (THE EXPECTED RESULT).  IF C(AC)=0,,-1, THIS TEST PASSES
  6600
  6601	034145	403 00 0 00 000001 	C20600:	SETZB	1		;CLEAR AC
  6602	034146	256 00 0 00 034467 		XCT	[XCT[XCT[XCT[XCT[MOVEI 1,-1]]]]] ;*NESTED XCT OF MOVEI
  6603									;SHOULD PLACE 0,,-1 INTO AC
  6604	034147	302 01 0 00 777777 		CAIE	1,-1		;PASS IF C(AC)=0,,-1
  6605						STOP^
  6606	034150	254 04 0 00 034151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6607	034151	324 00 0 00 034152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6608									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6609									;IN THE SUBTEST) TO LOOP ON ERROR^
  6610
  6611					;**********
  6612
  6613					;THIS TEST VERIFIES THAT XCT WILL NOT MODIFY AN AC WHICH IS NOT SPECIFIED BY THE
  6614					;EXECUTED INSTRUCTION.  IN THIS CASE, AC0 IS CLEARED AND THEN CHECKED FOR ZERO AFTER
  6615					;THE XCT INSTRUCTION IS EXECUTED.  AC0 SHOULD NOT BE MODIFIED.
  6616
  6617	034152	403 00 0 00 000001 	C20700:	SETZB	1		;CLEAR AC0,AC1
  6618	034153	256 00 0 00 034470 		XCT	[MOVE 1,[-1]]	;*XCT SHOULD NOT MODIFY AC0
  6619	034154	332 00 0 00 000000 		SKIPE			;PASS IF AC0 WAS NOT MODIFIED
  6620						STOP^
  6621	034155	254 04 0 00 034156 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6622	034156	324 00 0 00 034157 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6623									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6624									;IN THE SUBTEST) TO LOOP ON ERROR^
  6625
  6626					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 70
DSKAD1	MAC	28-Mar-78 13:50		XCT INSTRUCTION - BASIC TESTS                                                      SEQ 0165

  6627					;THIS TEST VERIFIES THAT XCT OF SKIPA SHOULD RETURN CONTROL TO THE
  6628					;SECOND SEQUENTIAL INSTRUCTION FOLLOWING XCT
  6629
  6630	034157	256 00 0 00 034471 	C21000:	XCT	[SKIPA]		;XCT OF SKIPA SHOULD RETURN CONTROL TO .+2
  6631						STOP^
  6632	034160	254 04 0 00 034161 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6633	034161	324 00 0 00 034162 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6634									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6635									;IN THE SUBTEST) TO LOOP ON ERROR^
  6636
  6637					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 71
DSKAD1	MAC	28-Mar-78 13:50		INDIRECT ADDRESSING - BASIC TESTS                                                  SEQ 0166

  6638					SUBTTL	INDIRECT ADDRESSING - BASIC TESTS
  6639
  6640					;**********
  6641
  6642					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN BOTH E AND @E
  6643					;ARE WITHIN THE AC RANGE.
  6644					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A MOVE.
  6645					;AFTER MOVE IS EXECUTED, C(AC) IS CHECKED FOR 0,
  6646					;THE INITIAL CONTENTS OF THE INDIRECT ADDRESS
  6647
  6648	034162	476 00 0 00 000001 	C21100:	SETOM	1		;PRELOAD AC WITH -1,,-1
  6649	034163	201 07 0 00 000003 		MOVEI	7,3		;SETUP DIRECT ADDRESS WITH INDIRECT ADDRESS
  6650	034164	402 00 0 00 000003 		SETZM	3		;PRELOAD INDIRECT ADDRESS WITH 0
  6651	034165	200 01 1 00 000007 		MOVE	1,@7		;*FWT FROM INDIRECT ADDRESSS SHOULD
  6652									;PLACE 0 INTO THE AC
  6653	034166	332 00 0 00 000001 		SKIPE	1		;PASS IF C(AC)=0
  6654						STOP^
  6655	034167	254 04 0 00 034170 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6656	034170	324 00 0 00 034171 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6657									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6658									;IN THE SUBTEST) TO LOOP ON ERROR^
  6659
  6660					;**********
  6661
  6662					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN BOTH E AND @E
  6663					;ARE WITHIN THE AC RANGE.
  6664					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A MOVE.
  6665					;AFTER MOVE IS EXECUTED, C(AC) IS CHECKED FOR -1,,-1,
  6666					;THE INITIAL CONTENTS OF THE INDIRECT ADDRESS
  6667
  6668	034171	402 00 0 00 000001 	C21200:	SETZM	1		;PRELOAD AC WITH -1,,-1
  6669	034172	201 07 0 00 000003 		MOVEI	7,3		;SETUP DIRECT ADDRESS WITH INDIRECT ADDRESS
  6670	034173	476 00 0 00 000003 		SETOM	3		;PRELOAD INDIRECT ADDRESS WITH -1,,-1
  6671	034174	200 01 1 00 000007 		MOVE	1,@7		;*FWT FROM INDIRECT ADDRESS SHOULD
  6672									;PLACE -1,,-1 INTO THE AC
  6673	034175	312 01 0 00 034404 		CAME	1,[-1,,-1]	;PASS IF C(AC)=-1,,-1
  6674						STOP^
  6675	034176	254 04 0 00 034177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6676	034177	324 00 0 00 034200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6677									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6678									;IN THE SUBTEST) TO LOOP ON ERROR^
  6679
  6680					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 72
DSKAD1	MAC	28-Mar-78 13:50		INDIRECT ADDRESSING - BASIC TESTS                                                  SEQ 0167

  6681					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN BOTH E AND @E
  6682					;ARE WITHIN THE AC RANGE.
  6683					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A MOVE.
  6684					;AFTER MOVE IS EXECUTED, C(AC) IS CHECKED FOR 707070,,707070,
  6685					;THE INITIAL CONTENTS OF THE INDIRECT ADDRESS
  6686
  6687	034200	402 00 0 00 000001 	C21300:	SETZM	1		;PRELOAD AC WITH 0
  6688	034201	201 07 0 00 000003 		MOVEI	7,3		;SETUP DIRECT ADDRESS WITH INDIRECT ADDRESS
  6689	034202	200 03 0 00 034472 		MOVE	3,[707070,,707070] ;PRELOAD INDIRECT ADDRESS WITH 707070,,707070
  6690	034203	200 01 1 00 000007 		MOVE	1,@7		;*FWT FROM INDIRECT ADDRESS SHOULD
  6691									;PLACE 707070,,707070 INTO THE AC
  6692	034204	312 01 0 00 034472 		CAME	1,[707070,,707070]	;PASS IF C(AC)=707070,,707070
  6693						STOP^
  6694	034205	254 04 0 00 034206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6695	034206	324 00 0 00 034207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6696									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6697									;IN THE SUBTEST) TO LOOP ON ERROR^
  6698
  6699					;**********
  6700
  6701					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN E IS WITHIN THE AC RANGE
  6702					;AND @E IS BEYOND THE AC RANGE.
  6703					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A MOVE.
  6704					;AFTER MOVE IS EXECUTED, C(AC) IS CHECKED FOR 707070,,707070,
  6705					;THE INITIAL CONTENTS OF THE INDIRECT ADDRESS
  6706
  6707	034207	254 00 0 00 034211 	C21400:	JRST	.+2
  6708	034210	707070	707070			XWD	707070,707070	;INDIRECT ADDRESS AND ITS DATA
  6709	034211	402 00 0 00 000001 		SETZM	1		;PRELOAD AC WITH 0
  6710	034212	201 07 0 00 034210 		MOVEI	7,C21400+1	;SETUP DIRECT ADDRESS WITH INDIRECT ADDRESS
  6711	034213	200 01 1 00 000007 		MOVE	1,@7		;*FWT FROM INDIRECT ADDRESS SHOULD
  6712									;PLACE 707070,,707070 INTO AC
  6713	034214	312 01 0 00 034210 		CAME	1,C21400+1	;PASS IF C(AC)=707070,,707070
  6714						STOP^
  6715	034215	254 04 0 00 034216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6716	034216	324 00 0 00 034217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6717									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6718									;IN THE SUBTEST) TO LOOP ON ERROR^
  6719
  6720					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 73
DSKAD1	MAC	28-Mar-78 13:50		INDIRECT ADDRESSING - BASIC TESTS                                                  SEQ 0168

  6721					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN BOTH E AND @E
  6722					;ARE BEYOND THE AC RANGE.
  6723					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A MOVE.
  6724					;AFTER MOVE IS EXECUTED, C(AC) IS CHECKED FOR 202020,,202020,
  6725					;THE INITIAL CONTENTS OF THE INDIRECT ADDRESS
  6726
  6727	034217	254 00 0 00 034222 	C21500:	JRST	.+3
  6728	034220	000000	034221				.+1		;DIRECT ADDRESS AND ITS DATA
  6729	034221	202020	202020			XWD	202020,202020	;INDIRECT ADDRESS AND ITS DATA
  6730	034222	402 00 0 00 000001 		SETZM	1		;PRELOAD AC WITH 0
  6731	034223	200 01 1 00 034220 		MOVE	1,@C21500+1	;*FWT FROM INDIRECT ADDRESS SHOULD
  6732									;PLACE 202020,,202020 INTO AC
  6733	034224	312 01 0 00 034221 		CAME	1,C21500+2	;PASS IF C(AC)=202020,,202020
  6734						STOP^
  6735	034225	254 04 0 00 034226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6736	034226	324 00 0 00 034227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6737									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6738									;IN THE SUBTEST) TO LOOP ON ERROR^
  6739
  6740					;**********
  6741
  6742					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN BOTH E AND @E
  6743					;ARE BEYOND THE AC RANGE.
  6744					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A CAME.
  6745
  6746	034227	254 00 0 00 034232 	C21600:	JRST	.+3
  6747	034230	000000	034231				.+1		;DIRECT ADDRESS AND ITS DATA
  6748	034231	272727	272727			XWD	272727,272727	;INDIRECT ADDRESS AND ITS DATA
  6749	034232	200 01 0 00 034231 		MOVE	1,C21600+2	;PRELOAD AC
  6750	034233	312 01 1 00 034230 		CAME	1,@C21600+1	;*CAME OF DATA FROM INDIRECT ADDRESS - NON-AC RANGE
  6751						STOP^
  6752	034234	254 04 0 00 034235 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6753	034235	324 00 0 00 034236 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6754									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6755									;IN THE SUBTEST) TO LOOP ON ERROR^
  6756
  6757					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 74
DSKAD1	MAC	28-Mar-78 13:50		INDIRECT ADDRESSING - BASIC TESTS                                                  SEQ 0169

  6758					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING WORKS WHEN E IS WITHIN THE AC RANGE
  6759					;AND @E IS BEYOND THE AC RANGE.
  6760					;THE INSTRUCTION SPECIFYING INDIRECT ADDRESSING IS A CAME.
  6761
  6762	034236	254 00 0 00 034240 	C21700:	JRST	.+2
  6763	034237	252525	252525			XWD	252525,252525	;INDIRECT ADDRESS AND ITS DATA
  6764	034240	201 07 0 00 034237 		MOVEI	7,C21700+1	;SETUP DIRECT ADDRESS WITH INDIRECT ADDRESS
  6765	034241	200 01 0 00 034237 		MOVE	1,C21700+1	;SETUP AC
  6766	034242	312 01 1 00 000007 		CAME	1,@7		;*CAME IF DATA FROM INDIRECT ADDRESS - AC RANGE
  6767						STOP^
  6768	034243	254 04 0 00 034244 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6769	034244	324 00 0 00 034245 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6770									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6771									;IN THE SUBTEST) TO LOOP ON ERROR^
  6772
  6773					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 75
DSKAD1	MAC	28-Mar-78 13:50		TEST INDIRECT ADDRESSING WITH INDEXING                                             SEQ 0170

  6774					SUBTTL	TEST INDIRECT ADDRESSING WITH INDEXING
  6775
  6776					;SETUP INDEX REGISTERS
  6777
  6778	034245	201 01 0 00 777774 		MOVEI	1,-4
  6779	034246	201 03 0 00 000002 		MOVEI	3,2
  6780	034247	201 04 0 00 000010 		MOVEI	4,10
  6781	034250	201 05 0 00 000001 		MOVEI	5,1
  6782	034251	201 06 0 00 000005 		MOVEI	6,5
  6783	034252	201 07 0 00 000007 		MOVEI	7,7
  6784	034253	201 10 0 00 000004 		MOVEI	10,4
  6785	034254	201 11 0 00 777772 		MOVEI	11,-6
  6786	034255	201 12 0 00 000005 		MOVEI	12,5
  6787	034256	201 13 0 00 000002 		MOVEI	13,2
  6788
  6789	034257	254 00 0 00 034310 		JRST	C22000		;RESUME TEST
  6790
  6791					;INDIRECT ADDRESSING/INDEXING TEST TABLE
  6792
  6793					;;;;;;;;;;;          ;;;;;;;;;;          ;;;;;;;;;;
  6794
  6795					;DO NOT MODIFY THIS TABLE OR TESTS C21700 THRU C22600 INDEPENDENTLY !
  6796
  6797					;;;;;;;;;;          ;;;;;;;;;;          ;;;;;;;;;;
  6798
  6799	034260	000003	034263		E217:		E217A(3)
  6800	034261	000020	034266		E220:		@E220A
  6801	034262	220220	220220		E220B:	220220,,220220
  6802	034263	000020	034270		E217A:		@E221A		;E221-4
  6803	034264	221221	221221		E221B:	221221,,221221
  6804	034265	217217	217217		E222A:	217217,,217217		;E217A+2
  6805	034266	000000	034262		E220A:		E220B
  6806	034267	000000	034267		E221:		E221
  6807	034270	000000	034264		E221A:		E221B
  6808	034271	000000	034267		E222:		E221
  6809	034272	223223	223223		E223A:	223223,,223223
  6810	034273	000004	034273		E224A:		E224A(4)	;E223-6
  6811	034274	222222	222222			222222,,222222		;E222A+7
  6812	034275	000000	034275		E225:		E225
  6813	034276	000007	034265				E222A(7)	;E222+5
  6814	034277	000020	034302				@E225A		;E225+2
  6815	034300	225225	225225		E225B:	225225,,225225
  6816	034301	000000	034301		E223:		E223
  6817	034302	000000	034300		E225A:		E225B
  6818	034303	224224	224224			224224,,224224		;E224A+10
  6819	034304	226226	226226		E226B:	226226,,226226
  6820	034305	000000	034272				E223A		;E223+4
  6821	034306	000025	034306		E226A:		@E226A(5)	;E223+5
  6822	034307	000000	034304				E226B		;E226A+1
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 76
DSKAD1	MAC	28-Mar-78 13:50		TEST INDIRECT ADDRESSING WITH INDEXING                                             SEQ 0171

  6823					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6824					LY.
  6825					;IN THIS CASE, MOVE 2,@E217 IS TESTED WHERE C(E217)=E217A(3) AND C(3)=0,,2.
  6826					;HENCE, THE RESULT IN THE AC SHOULD BE C(E217A+2)=217217,,217217
  6827
  6828	034310	476 00 0 00 000002 	C22000:	SETOM	2		;INITIALIZE AC
  6829	034311	200 02 1 00 034260 		MOVE	2,@E217		;TEST INDIRECT ADDRESSING WITH INDEXING
  6830	034312	312 02 0 00 034265 		CAME	2,E217A+2	;PASS IF C(AC)=217217,,217217
  6831						STOP^
  6832	034313	254 04 0 00 034314 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6833	034314	324 00 0 00 034315 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6834									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6835									;IN THE SUBTEST) TO LOOP ON ERROR^
  6836
  6837					;**********
  6838
  6839					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6840					LY.
  6841					;IN THIS CASE, MOVE 2,@E220 IS TESTED WHERE C(E220)=@E220A AND C(E220A)=E220B.
  6842					;HENCE, THE RESULT IN THE AC SHOULD BE C(E220B)=220220,,220220
  6843
  6844	034315	402 00 0 00 000002 	C22100:	SETZM	2		;INITIALIZE AC
  6845	034316	200 02 1 00 034261 		MOVE	2,@E220		;TEST INDIRECT ADDRESSING WITH INDEXING
  6846	034317	312 02 0 00 034262 		CAME	2,E220B		;PASS IF C(AC)=220220,,220220
  6847						STOP^
  6848	034320	254 04 0 00 034321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6849	034321	324 00 0 00 034322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6850									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6851									;IN THE SUBTEST) TO LOOP ON ERROR^
  6852
  6853					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 77
DSKAD1	MAC	28-Mar-78 13:50		TEST INDIRECT ADDRESSING WITH INDEXING                                             SEQ 0172

  6854					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6855					LY.
  6856					;IN THIS CASE,E221(1) 2,@E217 IS TESTED WHERE C(1)=-4 AND E221-4=E217A
  6857					;HENCE, THE RESULT IN THE AC SHOULD BE C(E217A)=@E221A=20,,E221A
  6858
  6859	034322	476 00 0 00 000002 	C22200:	SETOM	2		;INITIALIZE AC
  6860	034323	200 02 0 01 034267 		MOVE	2,E221(1)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6861	034324	312 02 0 00 034263 		CAME	2,E217A		;PASS IF C(AC)=@E221A=20,,E221A
  6862						STOP^
  6863	034325	254 04 0 00 034326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6864	034326	324 00 0 00 034327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6865									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6866									;IN THE SUBTEST) TO LOOP ON ERROR^
  6867
  6868					;**********
  6869
  6870					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6871					LY.
  6872					;IN THIS CASE, MOVE 2,E222(6) IS TESTED WHERE C(6)=5
  6873					;HENCE, THE RESULT IN THE AC SHOULD BE C(E222+5)=E222A(7)=7,,E222A
  6874
  6875	034327	402 00 0 00 000002 	C22300:	SETZM	2		;INITIALIZE AC
  6876	034330	200 02 0 06 034271 		MOVE	2,E222(6)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6877	034331	312 02 0 00 034276 		CAME	2,E222+5	;PASS IF C(AC)=E222A(7)=7,,E222A
  6878						STOP^
  6879	034332	254 04 0 00 034333 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6880	034333	324 00 0 00 034334 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6882									;IN THE SUBTEST) TO LOOP ON ERROR^
  6883
  6884					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 78
DSKAD1	MAC	28-Mar-78 13:50		TEST INDIRECT ADDRESSING WITH INDEXING                                             SEQ 0173

  6885					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6886					LY.
  6887					;IN THIS CASE, MOVE 2,@E223(10) IS TESTED WHERE C(10)=4 AND C(E223+4)=E223A
  6888					;HENCE, THE RESULT IN THE AC SHOULD BE C(E223A)=223223,,223223
  6889
  6890	034334	476 00 0 00 000002 	C22400:	SETOM	2		;INITIALIZE AC
  6891	034335	200 02 1 10 034301 		MOVE	2,@E223(10)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6892	034336	312 02 0 00 034272 		CAME	2,E223A		;PASS IF C(AC)=223223,,223223
  6893						STOP^
  6894	034337	254 04 0 00 034340 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6895	034340	324 00 0 00 034341 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6896									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6897									;IN THE SUBTEST) TO LOOP ON ERROR^
  6898
  6899					;**********
  6900
  6901					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6902					LY.
  6903					;IN THIS CASE, MOVE 2,@E223(11) IS TESTED WHERE C(11)=-6, C(E223-6)=E224A(4) AND C(4)=10
  6904					;HENCE, THE RESULT IN THE AC SHOULD BE C(E224A+10)=224224,,224224
  6905
  6906	034341	402 00 0 00 000002 	C22500:	SETZM	2		;INITIALIZE AC
  6907	034342	200 02 1 11 034301 		MOVE	2,@E223(11)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6908	034343	312 02 0 00 034303 		CAME	2,E224A+10	;PASS IF C(AC)=224224,,224224
  6909						STOP^
  6910	034344	254 04 0 00 034345 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6911	034345	324 00 0 00 034346 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6912									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6913									;IN THE SUBTEST) TO LOOP ON ERROR^
  6914
  6915					;**********
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 79
DSKAD1	MAC	28-Mar-78 13:50		TEST INDIRECT ADDRESSING WITH INDEXING                                             SEQ 0174

  6916					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6917					LY.
  6918					;IN THIS CASE, MOVE 2,@E225(13) IS TESTED WHERE C(13)=2, C(E225+2)=@E225A
  6919					;AND C(E225A)=E225B
  6920					;HENCE, THE RESULT IN THE AC SHOULD BE C(E225B)=225225,,225225
  6921
  6922	034346	476 00 0 00 000002 	C22600:	SETOM	2		;INITIALIZE AC
  6923	034347	200 02 1 13 034275 		MOVE	2,@E225(13)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6924	034350	312 02 0 00 034300 		CAME	2,E225B		;PASS IF C(AC)=225225,,225225
  6925						STOP^
  6926	034351	254 04 0 00 034352 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6927	034352	324 00 0 00 034353 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6928									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6929									;IN THE SUBTEST) TO LOOP ON ERROR^
  6930
  6931					;**********
  6932
  6933					;THIS TEST VERIFIES THAT INDIRECT ADDRESSING IN COMBINATION WITH INDEXING FUNCTIONS CORRECT
  6934					LY.
  6935					;IN THIS CASE, MOVE 2,@E223(12) IS TESTED WHERE C(12)=5, C(E223+5)=@E226A(5),
  6936					;C(5)=1 AND C(E226A+1)=E226B
  6937					;HENCE, THE RESULT IN THE AC SHOULD BE C(E226B)=226226,,226226
  6938
  6939	034353	402 00 0 00 000002 	C22700:	SETZM	2		;INITIALIZE AC
  6940	034354	200 02 1 12 034301 		MOVE	2,@E223(12)	;TEST INDIRECT ADDRESSING WITH INDEXING
  6941	034355	312 02 0 00 034304 		CAME	2,E226B		;PASS IF C(AC)=226226,,226226
  6942						STOP^
  6943	034356	254 04 0 00 034357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6944	034357	324 00 0 00 034360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6945									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6946									;IN THE SUBTEST) TO LOOP ON ERROR^
  6947
  6948					;**********
  6949	034360	402 00 0 00 034474 	ENDIT:	SETZM	TNUMB#
  6950	034361	254 00 0 00 030057 		JRST	BEGEND
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0175

  6951					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  6952
  6953					;PROGRAM LITERALS
  6954
  6955						XLIST
  6956					IFNDEF	$LPAPER,<LIST>
  6957	034362					LIT
  6958	034362	000001	000000
  6959	034363	000002	000000
  6960	034364	000004	000000
  6961	034365	000010	000000
  6962	034366	000020	000000
  6963	034367	000040	000000
  6964	034370	000100	000000
  6965	034371	000200	000000
  6966	034372	000400	000000
  6967	034373	001000	000000
  6968	034374	002000	000000
  6969	034375	004000	000000
  6970	034376	010000	000000
  6971	034377	020000	000000
  6972	034400	040000	000000
  6973	034401	100000	000000
  6974	034402	200000	000000
  6975	034403	400000	000000
  6976	034404	777777	777777
  6977	034405	777777	777776
  6978	034406	777777	777775
  6979	034407	777777	777773
  6980	034410	777777	777767
  6981	034411	777777	777757
  6982	034412	777777	777737
  6983	034413	777777	777677
  6984	034414	777777	777577
  6985	034415	777777	777377
  6986	034416	777777	776777
  6987	034417	777777	775777
  6988	034420	777777	773777
  6989	034421	777777	767777
  6990	034422	777777	757777
  6991	034423	777777	737777
  6992	034424	777777	677777
  6993	034425	777777	577777
  6994	034426	777777	377777
  6995	034427	777776	777777
  6996	034430	777775	777777
  6997	034431	777773	777777
  6998	034432	777767	777777
  6999	034433	777757	777777
  7000	034434	777737	777777
  7001	034435	777677	777777
  7002	034436	777577	777777
  7003	034437	777377	777777
  7004	034440	776777	777777
  7005	034441	775777	777777
DSKAD DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (4) 0,1	MACRO %53(1020) 14:08 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0176

  7006	034442	773777	777777
  7007	034443	767777	777777
  7008	034444	757777	777777
  7009	034445	737777	777777
  7010	034446	677777	777777
  7011	034447	577777	777777
  7012	034450	377777	777777
  7013	034451	777777	000000
  7014	034452	000000	777777
  7015	034453	252525	252525
  7016	034454	000000	000000
  7017	034455	254 04 0 00 032662 
  7018	034456	000001	000001
  7019	034457	377777	377777
  7020	034460	400000	400000
  7021	034461	201 01 0 00 034136 
  7022	034462	201 01 0 00 000001 
  7023	034463	201 01 0 00 777777 
  7024	034464	256 00 0 00 034463 
  7025	034465	256 00 0 00 034464 
  7026	034466	256 00 0 00 034465 
  7027	034467	256 00 0 00 034466 
  7028	034470	200 01 0 00 034404 
  7029	034471	334 00 0 00 000000 
  7030	034472	707070	707070
  7031						LIST
  7032	034473	000000	000000		ENDSLD:	0
  7033
  7034					IFDEF	DEBUG,<
  7035					PATCH:	BLOCK DEBUG		;PATCHING AREA
  7036					>
  7037
  7038					;PROGRAM VARIABLES
  7039	034474					VAR
  7040
  7041					IFDEF	PGMEND,<
  7042	034475	000000	000000		END:	0
  7043			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 034476
CPU TIME USED 00:20.167

22P CORE USED

ABORT	    92#
AC	  6187#	  6188	  6193	  6194	  6196	  6197	  6199	  6200	  6202	  6203	  6205	  6206	  6208	  6209     SEQ 0177
	  6211	  6212	  6214	  6215	  6217	  6218	  6220	  6221	  6222
AC0	   687#
ALTMGO	   442#
AROV	   356#	  5191	  5388	  5392
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
BEGEND	   438#	  6950
BEGIN	   307	   308	   369#	   708	   771	  7043
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#
C100	   820#
C1000	  1872#
C10000	  5406#
C10100	  5428#
C10200	  5449#
C10300	  5471#
C10400	  5489#
C10500	  5505#
C1100	  2214#
C11200	  5521#
C11300	  5536#
C11400	  5550#
C11500	  5565#
C11600	  5578#
C11700	  5592#
C1200	  2230#
C12000	  5607#
C12100	  5624#
C12200	  5660#
C12300	  5677#
C12301	  5714#
C12600	  5752#
C12700	  5767#
C1300	  2685#
C13100	  5781#
C13200	  5796#
C13300	  5811#
C13400	  5848#
C13600	  5887#
C13700	  5907#
C1400	  3143#
C14000	  5926#
C14100	  5950#
C14200	  5969#
C14500	  5996#
C14600	  6010#
C14700	  6025#
C1500	  3159#
C15000	  6038#
C15100	  6052#                                                                                                            SEQ 0178
C15200	  6067#
C15300	  6081#
C15400	  6095#
C15500	  6113#
C15600	  6128#
C15700	  6143#
C1600	  3614#
C16000	  6157#
C16100	  6172#
C16200	  6187#
C16201	  6235#
C16202	  6272#
C16400	  6311#
C16500	  6326#
C16600	  6340#
C16700	  6355#
C1700	  4079#
C17000	  6371#
C17100	  6393#
C17200	  6408#
C17300	  6424#
C17400	  6438#
C17500	  6454#
C17600	  6470#
C17700	  6486#
C200	   836#
C2000	  4311#
C20000	  6501#
C20100	  6517#
C20200	  6531#
C20300	  6547#
C20400	  6569#
C20500	  6585#
C20600	  6601#
C20700	  6617#
C2100	  4541#
C21000	  6630#
C21100	  6648#
C21200	  6668#
C21300	  6687#
C21400	  6707#	  6710	  6713
C21500	  6727#	  6731	  6733
C21600	  6746#	  6749	  6750
C21700	  6762#	  6764	  6765
C2200	  4557#
C22000	  6789	  6828#
C22100	  6844#
C22200	  6859#
C22300	  6875#
C22400	  6890#
C22500	  6906#
C22600	  6922#
C22700	  6939#                                                                                                            SEQ 0179
C2400	  4573#
C2410	  4582#
C2700	  4597#
C2710	  4606#
C300	   850#
C3000	  4620#
C3100	  4644#
C3110	  4661#
C3200	  4675#
C3210	  4684#
C3300	  4699#
C3400	  4715#
C3500	  4732#
C3600	  4750#
C3700	  4766#
C400	   865#
C4000	  4782#
C4100	  4800#
C4200	  4816#
C4300	  4834#
C4400	  4852#
C4500	  4868#
C4600	  4883#
C4700	  4898#
C500	   882#
C5000	  4915#
C5100	  4931#
C5200	  4947#
C5300	  4964#
C5400	  4981#
C5500	  4998#
C5600	  5017#
C5700	  5035#
C5701	  5052#
C5702	  5068#
C600	  1230#
C6000	  5088#
C6100	  5105#
C6200	  5122#
C6300	  5143#
C6400	  5166#
C6500	  5189#
C6600	  5208#
C6700	  5228#
C700	  1585#
C7000	  5245#
C7100	  5266#
C7200	  5288#
C7300	  5312#
C7400	  5333#
C7500	  5351#
C7600	  5366#
C7700	  5385#                                                                                                            SEQ 0180
CCA	   356#
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#	  5125	  5268	  5409	  5413
CRY1	   356#	  5210	  5431	  5435
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#	  5952	  5956	  5971	  5980
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  7034
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
E217	  6799#	  6829
E217A	  6799	  6802#	  6830	  6861
E220	  6800#	  6845
E220A	  6800	  6805#
E220B	  6801#	  6805	  6846
E221	  6806#	  6806	  6808	  6860
E221A	  6802	  6807#
E221B	  6803#	  6807
E222	  6808#	  6876	  6877
E222A	  6804#	  6813
E223	  6816#	  6816	  6891	  6907	  6940
E223A	  6809#	  6820	  6892
E224A	  6810#	  6810	  6908
E225	  6812#	  6812	  6923
E225A	  6814	  6817#
E225B	  6815#	  6817	  6924
E226A	  6821#	  6821
E226B	  6819#	  6822	  6941
EBIT0	   356#
EBIT1	   356#                                                                                                            SEQ 0181
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  7042#
ENDFIX	   684#
ENDIT	  6949#
ENDSLD	  7032#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#	  5230	  5247	  5290	  5452	  5456	  5889
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#	  5909	  5913	  5928	  5937
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#                                                                                                            SEQ 0182
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#                                                                                                            SEQ 0183
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497                                                                                                     SEQ 0184
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412                                                                                                     SEQ 0185
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  7041
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#                                                                                                            SEQ 0186
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SN	   874#	   940	   940#	   958	   958#	   976	   976#	   994	   994#	  1012	  1012#	  1030	  1030#	  1048
	  1048#	  1066	  1066#	  1084	  1084#	  1102	  1102#	  1120	  1120#	  1138	  1138#	  1156	  1156#	  1174
	  1174#	  1192	  1192#	  1210	  1210#	  1222#	  1304	  1304#	  1323	  1323#	  1342	  1342#	  1361	  1361#
	  1380	  1380#	  1399	  1399#	  1418	  1418#	  1437	  1437#	  1456	  1456#	  1475	  1475#	  1494	  1494#
	  1513	  1513#	  1532	  1532#	  1551	  1551#	  1570	  1570#	  1582#	  1605	  1605#	  1623	  1623#	  1641
	  1641#	  1659	  1659#	  1677	  1677#	  1695	  1695#	  1713	  1713#	  1731	  1731#	  1749	  1749#	  1767
	  1767#	  1785	  1785#	  1803	  1803#	  1821	  1821#	  1839	  1839#	  1857	  1857#	  1869#	  1897	  1897#
	  1918	  1918#	  1939	  1939#	  1960	  1960#	  1981	  1981#	  2002	  2002#	  2023	  2023#	  2044	  2044#
	  2065	  2065#	  2086	  2086#	  2107	  2107#	  2128	  2128#	  2149	  2149#	  2170	  2170#	  2191	  2191#
	  2227#	  2258	  2258#	  2282	  2282#	  2306	  2306#	  2330	  2330#	  2354	  2354#	  2378	  2378#	  2402
	  2402#	  2426	  2426#	  2450	  2450#	  2474	  2474#	  2498	  2498#	  2522	  2522#	  2546	  2546#	  2570
	  2570#	  2594	  2594#	  2618	  2618#	  2642	  2642#	  2666	  2666#	  2682#	  2713	  2713#	  2737	  2737#
	  2761	  2761#	  2785	  2785#	  2809	  2809#	  2833	  2833#	  2857	  2857#	  2881	  2881#	  2905	  2905#
	  2929	  2929#	  2953	  2953#	  2977	  2977#	  3001	  3001#	  3025	  3025#	  3049	  3049#	  3073	  3073#
	  3097	  3097#	  3121	  3121#	  3156#	  3187	  3187#	  3211	  3211#	  3235	  3235#	  3259	  3259#	  3283
	  3283#	  3307	  3307#	  3331	  3331#	  3355	  3355#	  3379	  3379#	  3403	  3403#	  3427	  3427#	  3451
	  3451#	  3475	  3475#	  3499	  3499#	  3523	  3523#	  3547	  3547#	  3571	  3571#	  3595	  3595#	  3611#
	  3642	  3642#	  3666	  3666#	  3690	  3690#	  3714	  3714#	  3738	  3738#	  3762	  3762#	  3786	  3786#
	  3810	  3810#	  3834	  3834#	  3858	  3858#	  3882	  3882#	  3906	  3906#	  3930	  3930#	  3954	  3954#
	  3978	  3978#	  4002	  4002#	  4026	  4026#	  4050	  4050#	  4068#	  4090	  4090#	  4104	  4104#	  4118
	  4118#	  4132	  4132#	  4146	  4146#	  4160	  4160#	  4174	  4174#	  4188	  4188#	  4202	  4202#	  4216
	  4216#	  4230	  4230#	  4244	  4244#	  4258	  4258#	  4272	  4272#	  4286	  4286#	  4301#	  4322	  4322#
	  4336	  4336#	  4350	  4350#	  4364	  4364#	  4378	  4378#	  4392	  4392#	  4406	  4406#	  4420	  4420#
	  4434	  4434#	  4448	  4448#	  4462	  4462#	  4476	  4476#	  4490	  4490#	  4504	  4504#	  4518	  4518#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386                                                                                                     SEQ 0187
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  6949#	  6949
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
XX	  4070#	  4092	  4092#	  4093	  4095	  4106	  4106#	  4107	  4109	  4120	  4120#	  4121	  4123	  4134
	  4134#	  4135	  4137	  4148	  4148#	  4149	  4151	  4162	  4162#	  4163	  4165	  4176	  4176#	  4177
	  4179	  4190	  4190#	  4191	  4193	  4204	  4204#	  4205	  4207	  4218	  4218#	  4219	  4221	  4232
	  4232#	  4233	  4235	  4246	  4246#	  4247	  4249	  4260	  4260#	  4261	  4263	  4274	  4274#	  4275
	  4277	  4288	  4288#	  4289	  4291	  4303#	  4324	  4324#	  4325	  4326	  4338	  4338#	  4339	  4340
	  4352	  4352#	  4353	  4354	  4366	  4366#	  4367	  4368	  4380	  4380#	  4381	  4382	  4394	  4394#
	  4395	  4396	  4408	  4408#	  4409	  4410	  4422	  4422#	  4423	  4424	  4436	  4436#	  4437	  4438
	  4450	  4450#	  4451	  4452	  4464	  4464#	  4465	  4466	  4478	  4478#	  4479	  4480	  4492	  4492#
	  4493	  4494	  4506	  4506#	  4507	  4508	  4520	  4520#	  4521	  4522
ZZ	   875#	   885	   885#	   886	   887	   887#	   888	   889	   889#	   890	   891	   891#	   892	   893
	   893#	   894	   895	   895#	   896	   897	   897#	   898	   899	   899#	   900	   901	   901#	   902
	   903	   903#	   904	   905	   905#	   906	   907	   907#	   908	   909	   909#	   910	   911	   911#
	   912	   913	   913#	   914	   915	   915#	   916	   918#	   941	   941#	   942	   959	   959#	   960
	   977	   977#	   978	   995	   995#	   996	  1013	  1013#	  1014	  1031	  1031#	  1032	  1049	  1049#
	  1050	  1067	  1067#	  1068	  1085	  1085#	  1086	  1103	  1103#	  1104	  1121	  1121#	  1122	  1139
	  1139#	  1140	  1157	  1157#	  1158	  1175	  1175#	  1176	  1193	  1193#	  1194	  1211	  1211#	  1212
	  1223#	  1234	  1234#	  1235	  1236	  1237	  1237#	  1238	  1239	  1240	  1240#	  1241	  1242	  1243
	  1243#	  1244	  1245	  1246	  1246#	  1247	  1248	  1249	  1249#	  1250	  1251	  1252	  1252#	  1253
	  1254	  1255	  1255#	  1256	  1257	  1258	  1258#	  1259	  1260	  1261	  1261#	  1262	  1263	  1264
	  1264#	  1265	  1266	  1267	  1267#	  1268	  1269	  1270	  1270#	  1271	  1272	  1273	  1273#	  1274
	  1275	  1276	  1276#	  1277	  1278	  1280#	  1305	  1305#	  1306	  1324	  1324#	  1325	  1343	  1343#
	  1344	  1362	  1362#	  1363	  1381	  1381#	  1382	  1400	  1400#	  1401	  1419	  1419#	  1420	  1438
	  1438#	  1439	  1457	  1457#	  1458	  1476	  1476#	  1477	  1495	  1495#	  1496	  1514	  1514#	  1515
	  1533	  1533#	  1534	  1552	  1552#	  1553	  1571	  1571#	  1572	  1583#	  1606	  1606#	  1607	  1608
	  1624	  1624#	  1625	  1626	  1642	  1642#	  1643	  1644	  1660	  1660#	  1661	  1662	  1678	  1678#
	  1679	  1680	  1696	  1696#	  1697	  1698	  1714	  1714#	  1715	  1716	  1732	  1732#	  1733	  1734
	  1750	  1750#	  1751	  1752	  1768	  1768#	  1769	  1770	  1786	  1786#	  1787	  1788	  1804	  1804#
	  1805	  1806	  1822	  1822#	  1823	  1824	  1840	  1840#	  1841	  1842	  1858	  1858#	  1859	  1860     SEQ 0188
	  1870#	  1898	  1898#	  1899	  1900	  1901	  1919	  1919#	  1920	  1921	  1922	  1940	  1940#	  1941
	  1942	  1943	  1961	  1961#	  1962	  1963	  1964	  1982	  1982#	  1983	  1984	  1985	  2003	  2003#
	  2004	  2005	  2006	  2024	  2024#	  2025	  2026	  2027	  2045	  2045#	  2046	  2047	  2048	  2066
	  2066#	  2067	  2068	  2069	  2087	  2087#	  2088	  2089	  2090	  2108	  2108#	  2109	  2110	  2111
	  2129	  2129#	  2130	  2131	  2132	  2150	  2150#	  2151	  2152	  2153	  2171	  2171#	  2172	  2173
	  2174	  2192	  2192#	  2193	  2194	  2195	  2228#	  2259	  2259#	  2260	  2260#	  2262	  2265	  2283
	  2283#	  2284	  2286	  2289	  2307	  2307#	  2308	  2310	  2313	  2331	  2331#	  2332	  2334	  2337
	  2355	  2355#	  2356	  2358	  2361	  2379	  2379#	  2380	  2382	  2385	  2403	  2403#	  2404	  2406
	  2409	  2427	  2427#	  2428	  2430	  2433	  2451	  2451#	  2452	  2454	  2457	  2475	  2475#	  2476
	  2478	  2481	  2499	  2499#	  2500	  2502	  2505	  2523	  2523#	  2524	  2526	  2529	  2547	  2547#
	  2548	  2550	  2553	  2571	  2571#	  2572	  2574	  2577	  2595	  2595#	  2596	  2598	  2601	  2619
	  2619#	  2620	  2622	  2625	  2643	  2643#	  2644	  2646	  2649	  2667	  2667#	  2668	  2670	  2673
	  2683#	  2714	  2714#	  2715	  2715#	  2717	  2720	  2738	  2738#	  2739	  2741	  2744	  2762	  2762#
	  2763	  2765	  2768	  2786	  2786#	  2787	  2789	  2792	  2810	  2810#	  2811	  2813	  2816	  2834
	  2834#	  2835	  2837	  2840	  2858	  2858#	  2859	  2861	  2864	  2882	  2882#	  2883	  2885	  2888
	  2906	  2906#	  2907	  2909	  2912	  2930	  2930#	  2931	  2933	  2936	  2954	  2954#	  2955	  2957
	  2960	  2978	  2978#	  2979	  2981	  2984	  3002	  3002#	  3003	  3005	  3008	  3026	  3026#	  3027
	  3029	  3032	  3050	  3050#	  3051	  3053	  3056	  3074	  3074#	  3075	  3077	  3080	  3098	  3098#
	  3099	  3101	  3104	  3122	  3122#	  3123	  3125	  3128	  3157#	  3188	  3188#	  3189	  3189#	  3191
	  3194	  3212	  3212#	  3213	  3215	  3218	  3236	  3236#	  3237	  3239	  3242	  3260	  3260#	  3261
	  3263	  3266	  3284	  3284#	  3285	  3287	  3290	  3308	  3308#	  3309	  3311	  3314	  3332	  3332#
	  3333	  3335	  3338	  3356	  3356#	  3357	  3359	  3362	  3380	  3380#	  3381	  3383	  3386	  3404
	  3404#	  3405	  3407	  3410	  3428	  3428#	  3429	  3431	  3434	  3452	  3452#	  3453	  3455	  3458
	  3476	  3476#	  3477	  3479	  3482	  3500	  3500#	  3501	  3503	  3506	  3524	  3524#	  3525	  3527
	  3530	  3548	  3548#	  3549	  3551	  3554	  3572	  3572#	  3573	  3575	  3578	  3596	  3596#	  3597
	  3599	  3602	  3612#	  3643	  3643#	  3644	  3644#	  3646	  3649	  3667	  3667#	  3668	  3670	  3673
	  3691	  3691#	  3692	  3694	  3697	  3715	  3715#	  3716	  3718	  3721	  3739	  3739#	  3740	  3742
	  3745	  3763	  3763#	  3764	  3766	  3769	  3787	  3787#	  3788	  3790	  3793	  3811	  3811#	  3812
	  3814	  3817	  3835	  3835#	  3836	  3838	  3841	  3859	  3859#	  3860	  3862	  3865	  3883	  3883#
	  3884	  3886	  3889	  3907	  3907#	  3908	  3910	  3913	  3931	  3931#	  3932	  3934	  3937	  3955
	  3955#	  3956	  3958	  3961	  3979	  3979#	  3980	  3982	  3985	  4003	  4003#	  4004	  4006	  4009
	  4027	  4027#	  4028	  4030	  4033	  4051	  4051#	  4052	  4054	  4057	  4069#	  4091	  4091#	  4093
	  4094	  4095	  4105	  4105#	  4107	  4108	  4109	  4119	  4119#	  4121	  4122	  4123	  4133	  4133#
	  4135	  4136	  4137	  4147	  4147#	  4149	  4150	  4151	  4161	  4161#	  4163	  4164	  4165	  4175
	  4175#	  4177	  4178	  4179	  4189	  4189#	  4191	  4192	  4193	  4203	  4203#	  4205	  4206	  4207
	  4217	  4217#	  4219	  4220	  4221	  4231	  4231#	  4233	  4234	  4235	  4245	  4245#	  4247	  4248
	  4249	  4259	  4259#	  4261	  4262	  4263	  4273	  4273#	  4275	  4276	  4277	  4287	  4287#	  4289
	  4290	  4291	  4302#	  4323	  4323#	  4325	  4326	  4327	  4337	  4337#	  4339	  4340	  4341	  4351
	  4351#	  4353	  4354	  4355	  4365	  4365#	  4367	  4368	  4369	  4379	  4379#	  4381	  4382	  4383
	  4393	  4393#	  4395	  4396	  4397	  4407	  4407#	  4409	  4410	  4411	  4421	  4421#	  4423	  4424
	  4425	  4435	  4435#	  4437	  4438	  4439	  4449	  4449#	  4451	  4452	  4453	  4463	  4463#	  4465
	  4466	  4467	  4477	  4477#	  4479	  4480	  4481	  4491	  4491#	  4493	  4494	  4495	  4505	  4505#
	  4507	  4508	  4509	  4519	  4519#	  4521	  4522	  4523
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#                                                                                                            SEQ 0189
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	  6956
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#                                                                                                            SEQ 0190
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0191
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   824	   839	   853	   868	   944	   962
	   980	   998	  1016	  1034	  1052	  1070	  1088	  1106	  1124	  1142	  1160	  1178	  1196	  1214
	  1308	  1327	  1346	  1365	  1384	  1403	  1422	  1441	  1460	  1479	  1498	  1517	  1536	  1555
	  1574	  1610	  1628	  1646	  1664	  1682	  1700	  1718	  1736	  1754	  1772	  1790	  1808	  1826
	  1844	  1862	  1903	  1924	  1945	  1966	  1987	  2008	  2029	  2050	  2071	  2092	  2113	  2134
	  2155	  2176	  2197	  2220	  2267	  2291	  2315	  2339	  2363	  2387	  2411	  2435	  2459	  2483
	  2507	  2531	  2555	  2579	  2603	  2627	  2651	  2675	  2722	  2746	  2770	  2794	  2818	  2842
	  2866	  2890	  2914	  2938	  2962	  2986	  3010	  3034	  3058	  3082	  3106	  3130	  3149	  3196
	  3220	  3244	  3268	  3292	  3316	  3340	  3364	  3388	  3412	  3436	  3460	  3484	  3508	  3532
	  3556	  3580	  3604	  3651	  3675	  3699	  3723	  3747	  3771	  3795	  3819	  3843	  3867	  3891
	  3915	  3939	  3963	  3987	  4011	  4035	  4059	  4097	  4111	  4125	  4139	  4153	  4167	  4181
	  4195	  4209	  4223	  4237	  4251	  4265	  4279	  4293	  4329	  4343	  4357	  4371	  4385	  4399
	  4413	  4427	  4441	  4455	  4469	  4483	  4497	  4511	  4525	  4545	  4561	  4578	  4584	  4602
	  4608	  4632	  4657	  4663	  4680	  4686	  4699	  4703	  4721	  4738	  4756	  4771	  4787	  4804
	  4821	  4838	  4856	  4872	  4887	  4903	  4920	  4936	  4953	  4970	  4987	  5005	  5024	  5042
	  5057	  5073	  5093	  5110	  5130	  5153	  5176	  5196	  5215	  5235	  5253	  5276	  5298	  5318
	  5339	  5355	  5372	  5394	  5415	  5437	  5458	  5479	  5491	  5507	  5525	  5540	  5554	  5568
	  5581	  5596	  5611	  5628	  5634	  5641	  5648	  5665	  5681	  5687	  5694	  5701	  5718	  5724
	  5731	  5738	  5756	  5771	  5785	  5800	  5816	  5822	  5829	  5836	  5853	  5859	  5866	  5873
	  5896	  5915	  5939	  5958	  5982	  5999	  6014	  6028	  6041	  6056	  6071	  6084	  6099	  6117
	  6132	  6147	  6161	  6176	  6224	  6240	  6246	  6253	  6260	  6277	  6283	  6290	  6297	  6315
	  6330	  6344	  6359	  6376	  6382	  6397	  6412	  6428	  6442	  6459	  6475	  6491	  6505	  6521
	  6535	  6553	  6573	  6589	  6606	  6621	  6632	  6655	  6675	  6694	  6715	  6735	  6752	  6768
	  6832	  6848	  6863	  6879	  6894	  6910	  6926	  6943
JEN	   160#
JRSTF	   159#
MAPADR	   295#                                                                                                            SEQ 0192
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#                                                                                                            SEQ 0193
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#	  5123	  5145	  5168	  5189	  5208	  5228	  5245	  5266	  5288	  5386	  5407	  5429	  5450
	  5471	  5887	  5907	  5926	  5931	  5950	  5969	  5974
SIXBTZ	   261#
STOP	    48#	   823	   838	   852	   867	   943	   961	   979	   997	  1015	  1033	  1051	  1069	  1087
	  1105	  1123	  1141	  1159	  1177	  1195	  1213	  1307	  1326	  1345	  1364	  1383	  1402	  1421
	  1440	  1459	  1478	  1497	  1516	  1535	  1554	  1573	  1609	  1627	  1645	  1663	  1681	  1699
	  1717	  1735	  1753	  1771	  1789	  1807	  1825	  1843	  1861	  1902	  1923	  1944	  1965	  1986
	  2007	  2028	  2049	  2070	  2091	  2112	  2133	  2154	  2175	  2196	  2219	  2266	  2290	  2314
	  2338	  2362	  2386	  2410	  2434	  2458	  2482	  2506	  2530	  2554	  2578	  2602	  2626	  2650
	  2674	  2721	  2745	  2769	  2793	  2817	  2841	  2865	  2889	  2913	  2937	  2961	  2985	  3009
	  3033	  3057	  3081	  3105	  3129	  3148	  3195	  3219	  3243	  3267	  3291	  3315	  3339	  3363
	  3387	  3411	  3435	  3459	  3483	  3507	  3531	  3555	  3579	  3603	  3650	  3674	  3698	  3722
	  3746	  3770	  3794	  3818	  3842	  3866	  3890	  3914	  3938	  3962	  3986	  4010	  4034	  4058
	  4096	  4110	  4124	  4138	  4152	  4166	  4180	  4194	  4208	  4222	  4236	  4250	  4264	  4278
	  4292	  4328	  4342	  4356	  4370	  4384	  4398	  4412	  4426	  4440	  4454	  4468	  4482	  4496     SEQ 0194
	  4510	  4524	  4544	  4560	  4577	  4583	  4601	  4607	  4631	  4656	  4662	  4679	  4685	  4702
	  4720	  4737	  4755	  4770	  4786	  4803	  4820	  4837	  4855	  4871	  4886	  4902	  4919	  4935
	  4952	  4969	  4986	  5004	  5023	  5041	  5056	  5072	  5092	  5109	  5129	  5152	  5175	  5195
	  5214	  5234	  5252	  5275	  5297	  5317	  5337	  5354	  5371	  5393	  5414	  5436	  5457	  5478
	  5490	  5506	  5524	  5539	  5553	  5567	  5580	  5595	  5610	  5627	  5633	  5640	  5647	  5664
	  5680	  5686	  5693	  5700	  5717	  5723	  5730	  5737	  5755	  5770	  5784	  5799	  5815	  5821
	  5828	  5835	  5852	  5858	  5865	  5872	  5895	  5914	  5938	  5957	  5981	  5998	  6013	  6027
	  6040	  6055	  6070	  6083	  6098	  6116	  6131	  6146	  6160	  6175	  6223	  6239	  6245	  6252
	  6259	  6276	  6282	  6289	  6296	  6314	  6329	  6343	  6358	  6375	  6381	  6396	  6411	  6427
	  6441	  6458	  6474	  6490	  6504	  6520	  6534	  6552	  6572	  6588	  6605	  6620	  6631	  6654
	  6674	  6693	  6714	  6734	  6751	  6767	  6831	  6847	  6862	  6878	  6893	  6909	  6925	  6942
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#
WRTIM	   356#
WRUBR	   356#

ADD	  4751	  4767	  4783	  4869	  4932	  4949	  4966	  4983	  5167
ADDB	  6372                                                                                                             SEQ 0195
ADDI	  4716	  4733	  4801	  4817	  4835	  4853	  4899	  4916	  5144
ADDM	  6312	  6394
AOBJN	  5037	  5522	  5551	  5579	  5608
AOBJP	  5038	  5537	  5566	  5593
AOJ	  6114	  6129	  6194	  6197	  6200	  6203	  6206	  6209	  6212	  6215	  6218	  6221	  6274
AOS	   444	   757	  5753	  5768	  5850	  6439
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAI	  4818	  5000
CAIA	  4701
CAIE	   822	   837	   851	   866	   942	   960	   978	   996	  1014	  1032	  1050	  1068	  1086	  1104
	  1122	  1140	  1158	  1176	  1194	  1212	  1306	  1325	  1344	  1363	  1382	  1401	  1420	  1439
	  1458	  1477	  1496	  1515	  1534	  1553	  1572	  1608	  1626	  1644	  1662	  1680	  1698	  1716
	  1734	  1752	  1770	  1788	  1806	  1824	  1842	  1860	  2265	  2289	  2313	  2337	  2361	  2385
	  2409	  2433	  2457	  2481	  2505	  2529	  2553	  2577	  2601	  2625	  2649	  2673	  4095	  4109
	  4123	  4137	  4151	  4165	  4179	  4193	  4207	  4221	  4235	  4249	  4263	  4277	  4291	  4327
	  4341	  4355	  4369	  4383	  4397	  4411	  4425	  4439	  4453	  4467	  4481	  4495	  4509	  4523
	  4600	  5754	  5769	  5798	  6115	  6130	  6174	  6328	  6342	  6410	  6426	  6440	  6457	  6519
	  6587	  6604
CAM	  5001
CAME	  1901	  1922	  1943	  1964	  1985	  2006	  2027	  2048	  2069	  2090	  2111	  2132	  2153	  2174
	  2195	  2720	  2744	  2768	  2792	  2816	  2840	  2864	  2888	  2912	  2936	  2960	  2984	  3008
	  3032	  3056	  3080	  3104	  3128	  3147	  3194	  3218	  3242	  3266	  3290	  3314	  3338	  3362
	  3386	  3410	  3434	  3458	  3482	  3506	  3530	  3554	  3578	  3602	  3649	  3673	  3697	  3721
	  3745	  3769	  3793	  3817	  3841	  3865	  3889	  3913	  3937	  3961	  3985	  4009	  4033	  4057
	  4559	  4576	  4582	  4606	  4630	  4655	  4661	  4678	  4684	  5523	  5538	  5783	  6145	  6159
	  6313	  6357	  6374	  6380	  6395	  6533	  6551	  6673	  6692	  6713	  6733	  6750	  6766	  6830
	  6846	  6861	  6877	  6892	  6908	  6924	  6941
CAMN	  6532	  6550
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  7043
EXCH	  4542	  4558	  4575	  4599	  4623	  4624	  4625	  4626	  4627	  4628	  4629	  4648	  4649	  4650
	  4651	  4652	  4653	  4654
HLLOS	  6409
HRLI	  1900	  1921	  1942	  1963	  1984	  2005	  2026	  2047	  2068	  2089	  2110	  2131	  2152	  2173
	  2194
HRLM	  6456
HRLOI	  3646	  3670	  3694	  3718	  3742	  3766	  3790	  3814	  3838	  3862	  3886	  3910	  3934	  3958
	  3982	  4006	  4030	  4054
HRREM	  6327
HRROI	  3191	  3215	  3239	  3263	  3287	  3311	  3335	  3359	  3383	  3407	  3431	  3455	  3479	  3503
	  3527	  3551	  3575	  3599
HRRS	  6472
HRRZM	  6488
IFDEF	   356	   407	   408	   409	   410	  7034	  7041
IFE	  2260	  2284	  2308	  2332	  2356	  2380	  2404	  2428	  2452	  2476	  2500	  2524	  2548	  2572
	  2596	  2620	  2644	  2668	  2715	  2739	  2763	  2787	  2811	  2835	  2859	  2883	  2907	  2931
	  2955	  2979	  3003	  3027	  3051	  3075	  3099	  3123	  3189	  3213	  3237	  3261	  3285	  3309
	  3333	  3357	  3381	  3405	  3429	  3453	  3477	  3501	  3525	  3549	  3573	  3597	  3644	  3668
	  3692	  3716	  3740	  3764	  3788	  3812	  3836	  3860	  3884	  3908	  3932	  3956	  3980	  4004     SEQ 0196
	  4028	  4052
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  6956
JCRY0	  5626	  5691	  5728	  5814	  5851	  6238	  6275
JCRY1	  5632	  5685	  5722	  5820	  5857	  6244	  6281
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717	  4700
	  4717	  4718	  4734	  4735	  4752	  4753	  4768	  4784	  4802	  4819	  4836	  4854	  4870	  4883
	  4884	  4900	  4901	  4917	  4918	  4933	  4934	  4947	  4950	  4965	  4967	  4982	  4984	  4998
	  5002	  5017	  5021	  5036	  5039	  5052	  5054	  5068	  5070	  5088	  5090	  5105	  5107	  5122
	  5126	  5128	  5148	  5150	  5171	  5173	  5192	  5194	  5211	  5213	  5231	  5233	  5248	  5250
	  5269	  5273	  5291	  5295	  5312	  5315	  5389	  5410	  5432	  5453	  5474	  5624	  5660	  5662
	  5677	  5714	  5811	  5848	  5890	  5892	  5893	  5910	  5929	  5934	  5953	  5972	  5977	  6235
	  6272	  6502
JFOV	  5645	  5698	  5735	  5833	  5870	  6257	  6294
JOV	  5638	  5679	  5716	  5826	  5863	  6250	  6287
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	  5089	  5127	  5149	  5172	  5193	  5212
	  5232	  5249	  5270	  5272	  5292	  5294	  5314	  5334	  5368	  5390	  5411	  5433	  5454	  5475
	  5505	  5891	  5911	  5930	  5935	  5954	  5973	  5978	  6707	  6727	  6746	  6762	  6789	  6950
JSP	   166	   743	   776	  5335	  5352	  5369	  5391	  5412	  5434	  5455	  5476	  5489	  5912	  5936
	  5955	  5979
JUMP	  5069
JUMPA	   825	   840	   854	   869	   945	   963	   981	   999	  1017	  1035	  1053	  1071	  1089	  1107
	  1125	  1143	  1161	  1179	  1197	  1215	  1309	  1328	  1347	  1366	  1385	  1404	  1423	  1442
	  1461	  1480	  1499	  1518	  1537	  1556	  1575	  1611	  1629	  1647	  1665	  1683	  1701	  1719
	  1737	  1755	  1773	  1791	  1809	  1827	  1845	  1863	  1904	  1925	  1946	  1967	  1988	  2009
	  2030	  2051	  2072	  2093	  2114	  2135	  2156	  2177	  2198	  2221	  2268	  2292	  2316	  2340
	  2364	  2388	  2412	  2436	  2460	  2484	  2508	  2532	  2556	  2580	  2604	  2628	  2652	  2676
	  2723	  2747	  2771	  2795	  2819	  2843	  2867	  2891	  2915	  2939	  2963	  2987	  3011	  3035
	  3059	  3083	  3107	  3131	  3150	  3197	  3221	  3245	  3269	  3293	  3317	  3341	  3365	  3389
	  3413	  3437	  3461	  3485	  3509	  3533	  3557	  3581	  3605	  3652	  3676	  3700	  3724	  3748
	  3772	  3796	  3820	  3844	  3868	  3892	  3916	  3940	  3964	  3988	  4012	  4036	  4060	  4098
	  4112	  4126	  4140	  4154	  4168	  4182	  4196	  4210	  4224	  4238	  4252	  4266	  4280	  4294
	  4330	  4344	  4358	  4372	  4386	  4400	  4414	  4428	  4442	  4456	  4470	  4484	  4498	  4512
	  4526	  4546	  4562	  4579	  4585	  4603	  4609	  4633	  4658	  4664	  4681	  4687	  4704	  4722
	  4739	  4757	  4772	  4788	  4805	  4822	  4839	  4857	  4873	  4888	  4904	  4921	  4937	  4954
	  4971	  4988	  5006	  5025	  5043	  5058	  5074	  5094	  5111	  5131	  5154	  5177	  5197	  5216
	  5236	  5254	  5277	  5299	  5319	  5340	  5356	  5373	  5395	  5416	  5438	  5459	  5480	  5492
	  5508	  5526	  5541	  5555	  5569	  5582	  5597	  5612	  5629	  5635	  5642	  5649	  5666	  5682
	  5688	  5695	  5702	  5719	  5725	  5732	  5739	  5757	  5772	  5786	  5801	  5817	  5823	  5830
	  5837	  5854	  5860	  5867	  5874	  5897	  5916	  5940	  5959	  5983	  6000	  6015	  6029	  6042
	  6057	  6072	  6085	  6100	  6118	  6133	  6148	  6162	  6177	  6225	  6241	  6247	  6254	  6261
	  6278	  6284	  6291	  6298	  6316	  6331	  6345	  6360	  6377	  6383	  6398	  6413	  6429	  6443
	  6460	  6476	  6492	  6506	  6522	  6536	  6554	  6574	  6590	  6607	  6622	  6633	  6656	  6676
	  6695	  6716	  6736	  6753	  6769	  6833	  6849	  6864	  6880	  6895	  6911	  6927	  6944
JUMPE	  6026	  6053
JUMPG	  6082	  6096
JUMPL	  5997	  6011
JUMPN	  6039	  6068
LALL	    10
LIST	     9	   318	   356	   489	  6956	  7031
LIT	  6957
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738                                             SEQ 0197
MOVE	  2217	  2264	  2288	  2312	  2336	  2360	  2384	  2408	  2432	  2456	  2480	  2504	  2528	  2552
	  2576	  2600	  2624	  2648	  2672	  2719	  2743	  2767	  2791	  2815	  2839	  2863	  2887	  2911
	  2935	  2959	  2983	  3007	  3031	  3055	  3079	  3103	  3127	  3146	  3193	  3217	  3241	  3265
	  3289	  3313	  3337	  3361	  3385	  3409	  3433	  3457	  3481	  3505	  3529	  3553	  3577	  3601
	  3648	  3672	  3696	  3720	  3744	  3768	  3792	  3816	  3840	  3864	  3888	  3912	  3936	  3960
	  3984	  4008	  4032	  4056	  4620	  4699	  4715	  4732	  4800	  4816	  4834	  4852	  4898	  4915
	  5106	  5143	  5536	  5578	  5592	  6618	  6651	  6671	  6689	  6690	  6711	  6731	  6749	  6765
	  6829	  6845	  6860	  6876	  6891	  6907	  6923	  6940
MOVEI	   821	   836	   850	   865	   886	   888	   890	   892	   894	   896	   898	   900	   902	   904
	   906	   908	   910	   912	   914	   916	  1235	  1238	  1241	  1244	  1247	  1250	  1253	  1256
	  1259	  1262	  1265	  1268	  1271	  1274	  1277	  1607	  1625	  1643	  1661	  1679	  1697	  1715
	  1733	  1751	  1769	  1787	  1805	  1823	  1841	  1859	  1899	  1920	  1941	  1962	  1983	  2004
	  2025	  2046	  2067	  2088	  2109	  2130	  2151	  2172	  2193	  2216	  2262	  2263	  2286	  2287
	  2310	  2311	  2334	  2335	  2358	  2359	  2382	  2383	  2406	  2407	  2430	  2431	  2454	  2455
	  2478	  2479	  2502	  2503	  2526	  2527	  2550	  2551	  2574	  2575	  2598	  2599	  2622	  2623
	  2646	  2647	  2670	  2671	  2718	  2742	  2766	  2790	  2814	  2838	  2862	  2886	  2910	  2934
	  2958	  2982	  3006	  3030	  3054	  3078	  3102	  3126	  3145	  3192	  3216	  3240	  3264	  3288
	  3312	  3336	  3360	  3384	  3408	  3432	  3456	  3480	  3504	  3528	  3552	  3576	  3600	  3647
	  3671	  3695	  3719	  3743	  3767	  3791	  3815	  3839	  3863	  3887	  3911	  3935	  3959	  3983
	  4007	  4031	  4055	  4093	  4094	  4107	  4108	  4121	  4122	  4135	  4136	  4149	  4150	  4163
	  4164	  4177	  4178	  4191	  4192	  4205	  4206	  4219	  4220	  4233	  4234	  4247	  4248	  4261
	  4262	  4275	  4276	  4289	  4290	  4325	  4326	  4339	  4340	  4353	  4354	  4367	  4368	  4381
	  4382	  4395	  4396	  4409	  4410	  4423	  4424	  4437	  4438	  4451	  4452	  4465	  4466	  4479
	  4480	  4493	  4494	  4507	  4508	  4521	  4522	  4574	  4597	  5796	  5812	  6038	  6052	  6081
	  6172	  6236	  6326	  6340	  6570	  6586	  6602	  6649	  6669	  6688	  6710	  6764	  6778	  6779
	  6780	  6781	  6782	  6783	  6784	  6785	  6786	  6787
MOVEM	  1236	  1239	  1242	  1245	  1248	  1251	  1254	  1257	  1260	  1263	  1266	  1269	  1272	  1275
	  1278	  4677
MOVM	  5715
MOVN	  5661	  5678
MOVNI	  5625
MOVSI	  2717	  2741	  2765	  2789	  2813	  2837	  2861	  2885	  2909	  2933	  2957	  2981	  3005	  3029
	  3053	  3077	  3101	  3125	  4573	  4598	  4750	  4766	  4782	  4868	  4931	  5125	  5147	  5166
	  5170	  5191	  5210	  5230	  5247	  5268	  5290	  5367	  5388	  5409	  5431	  5452	  5473	  5889
	  5909	  5928	  5933	  5952	  5971	  5976	  6095	  6424	  6487
MOVSM	  6341
MOVSS	  6425
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
PAGE	   917	  4300	  4638
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
REPEAT	   882	   920	  1230	  1282	  1585	  1872	  2230	  2685	  3159	  3614	  4079	  4311	  4621	  4646
	  6189                                                                                                             SEQ 0198
SETAB	  6549
SETO	  4557	  4645	  4675	  5018	  5035	  5607	  5767	  5849	  5996	  6128	  6157	  6273	  6455	  6470
	  6486	  6548
SETOB	  6311	  6355	  6371	  6393	  6438	  6517
SETOM	   745	   752	   778	  2214	  2261	  2285	  2309	  2333	  2357	  2381	  2405	  2429	  2453	  2477
	  2501	  2525	  2549	  2573	  2597	  2621	  2645	  2669	  2716	  2740	  2764	  2788	  2812	  2836
	  2860	  2884	  2908	  2932	  2956	  2980	  3004	  3028	  3052	  3076	  3100	  3124	  3144	  6648
	  6670	  6828	  6859	  6890	  6922
SETZ	   820	  4541	  4644	  4676	  4948	  4964	  4981	  4999	  5271	  5293	  5313	  5351	  5428	  5449
	  5521	  5550	  5565	  5752	  5781	  6010	  6025	  6067	  6113	  6143	  6188	  6454	  6471	  6501
	  6547
SETZB	  5333	  6531	  6569	  6585	  6601	  6617
SETZM	   742	   747	   775	   780	  2215	  3143	  3190	  3214	  3238	  3262	  3286	  3310	  3334	  3358
	  3382	  3406	  3430	  3454	  3478	  3502	  3526	  3550	  3574	  3598	  3645	  3669	  3693	  3717
	  3741	  3765	  3789	  3813	  3837	  3861	  3885	  3909	  3933	  3957	  3981	  4005	  4029	  4053
	  5366	  5385	  5406	  6408	  6650	  6668	  6687	  6709	  6730	  6844	  6875	  6906	  6939	  6949
SIXBIT	    77	    78	   574	   575	   583	   584
SKIP	  5053
SKIPA	  4719	  4736	  4754	  4769	  4785	  4885	  4951	  4968	  4985	  5003	  5022	  5040	  5055	  5071
	  5091	  5108	  5151	  5174	  5251	  5274	  5296	  5316	  5552	  5594	  5639	  5646	  5663	  5692
	  5699	  5729	  5736	  5827	  5834	  5864	  5871	  5894	  6012	  6054	  6069	  6097	  6251	  6258
	  6288	  6295	  6571	  6630
SKIPE	   748	   762	   768	  2218	  4543	  5609	  6222	  6473	  6489	  6503	  6619	  6653
SKIPL	   783
SKIPN	   746	   751	   759	   764	   770	   779	   781	  5336
SOJ	  6144	  6158	  6173	  6193	  6196	  6199	  6202	  6205	  6208	  6211	  6214	  6217	  6220	  6237
SOS	   758	  5782	  5797	  5813
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	  2204	  4532	  4669	  4692	  5079
	  5324	  5497	  5513	  5617	  5744	  5879	  5988	  6105	  6303	  6559	  6638	  6774	  6951
TITLE	    14
TLNE	   744	   777	  5477	  5937	  5980
TLNN	  5370	  5392	  5413	  5435	  5456	  5913	  5956
TRNN	  5353
TTCALL	   784
VAR	  7039
XCT	  6570	  6586	  6602	  6618	  6630
XLIST	     8	   317	   355	   488	  6955
XOR	  5019	  5020
XORM	  6356	  6518
XWD	  4606	  4751	  4783	  4869	  4932	  5523	  5536	  5538	  5578	  5592	  5678	  5715	  6708	  6729
	  6748	  6763

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0199
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0200

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0201

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0202

*030662  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*030663  CAIE	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*030665  JUMPA	0,030666

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030666 
----------

*030666  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*030667  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*030671  JUMPA	0,030672

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030672 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0203

*030672  MOVEI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*030673  CAIE	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

*030675  JUMPA	0,030676

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030676 
----------

*030676  MOVEI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*030677  CAIE	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

*030701  JUMPA	0,030702

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030702 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0204

*030702  MOVEI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030703  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*030704  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*030705  MOVEI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*030706  MOVEI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0205

*030707  MOVEI	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*030710  MOVEI	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

*030711  MOVEI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*030712  MOVEI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*030713  MOVEI	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0206

*030714  MOVEI	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*030715  MOVEI	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*030716  MOVEI	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*030717  MOVEI	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*030720  MOVEI	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0207

*030721  MOVEI	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*030722  CAIE	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
----------

*030724  JUMPA	0,030725

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030725 
----------

*030725  CAIE	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*030727  JUMPA	0,030730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030730 
----------

*030730  CAIE	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0208

*030732  JUMPA	0,030733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030733 
----------

*030733  CAIE	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
----------

*030735  JUMPA	0,030736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030736 
----------

*030736  CAIE	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
----------

*030740  JUMPA	0,030741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030741 
----------

*030741  CAIE	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
----------

*030743  JUMPA	0,030744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030744 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0209

*030744  CAIE	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
----------

*030746  JUMPA	0,030747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030747 
----------

*030747  CAIE	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

*030751  JUMPA	0,030752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030752 
----------

*030752  CAIE	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
----------

*030754  JUMPA	0,030755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030755 
----------

*030755  CAIE	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0210

*030757  JUMPA	0,030760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030760 
----------

*030760  CAIE	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
----------

*030762  JUMPA	0,030763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030763 
----------

*030763  CAIE	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

*030765  JUMPA	0,030766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030766 
----------

*030766  CAIE	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*030770  JUMPA	0,030771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030771 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0211

*030771  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*030773  JUMPA	0,030774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030774 
----------

*030774  CAIE	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*030776  JUMPA	0,030777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030777 
----------

*030777  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*031001  JUMPA	0,031002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031002 
----------

*031002  MOVEI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0212

*031003  MOVEM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
 C(E)= 000000 000001 
----------

*031004  MOVEI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031005  MOVEM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
 C(E)= 000000 000002 
----------

*031006  MOVEI	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031007  MOVEM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003  C(E)= 000000 000003 
FINAL
 C(E)= 000000 000003 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0213

*031010  MOVEI	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031011  MOVEM	0,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
 C(E)= 000000 000004 
----------

*031012  MOVEI	0,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*031013  MOVEM	0,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005  C(E)= 000000 000005 
FINAL
 C(E)= 000000 000005 
----------

*031014  MOVEI	0,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0214

*031015  MOVEM	0,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006  C(E)= 000000 000006 
FINAL
 C(E)= 000000 000006 
----------

*031016  MOVEI	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*031017  MOVEM	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007  C(E)= 000000 000007 
FINAL
 C(E)= 000000 000007 
----------

*031020  MOVEI	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031021  MOVEM	0,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
 C(E)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0215

*031022  MOVEI	0,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

*031023  MOVEM	0,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011  C(E)= 000000 000011 
FINAL
 C(E)= 000000 000011 
----------

*031024  MOVEI	0,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*031025  MOVEM	0,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012  C(E)= 000000 000012 
FINAL
 C(E)= 000000 000012 
----------

*031026  MOVEI	0,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0216

*031027  MOVEM	0,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013  C(E)= 000000 000013 
FINAL
 C(E)= 000000 000013 
----------

*031030  MOVEI	0,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*031031  MOVEM	0,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014  C(E)= 000000 000014 
FINAL
 C(E)= 000000 000014 
----------

*031032  MOVEI	0,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*031033  MOVEM	0,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015  C(E)= 000000 000015 
FINAL
 C(E)= 000000 000015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0217

*031034  MOVEI	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

*031035  MOVEM	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016  C(E)= 000000 000016 
FINAL
 C(E)= 000000 000016 
----------

*031036  MOVEI	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*031037  MOVEM	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000017 
FINAL
 C(E)= 000000 000017 
----------

*031040  CAIE	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0218

*031042  JUMPA	0,031043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031043 
----------

*031043  CAIE	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*031045  JUMPA	0,031046

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031046 
----------

*031046  CAIE	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
----------

*031050  JUMPA	0,031051

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031051 
----------

*031051  CAIE	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
----------

*031053  JUMPA	0,031054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031054 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0219

*031054  CAIE	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
----------

*031056  JUMPA	0,031057

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031057 
----------

*031057  CAIE	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
----------

*031061  JUMPA	0,031062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031062 
----------

*031062  CAIE	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
----------

*031064  JUMPA	0,031065

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031065 
----------

*031065  CAIE	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0220

*031067  JUMPA	0,031070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031070 
----------

*031070  CAIE	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
----------

*031072  JUMPA	0,031073

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031073 
----------

*031073  CAIE	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
----------

*031075  JUMPA	0,031076

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031076 
----------

*031076  CAIE	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
----------

*031100  JUMPA	0,031101

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031101 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0221

*031101  CAIE	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

*031103  JUMPA	0,031104

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031104 
----------

*031104  CAIE	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*031106  JUMPA	0,031107

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031107 
----------

*031107  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031111  JUMPA	0,031112

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031112 
----------

*031112  CAIE	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0222

*031114  JUMPA	0,031115

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031115 
----------

*031115  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031116  CAIE	1,000000(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031120  JUMPA	0,031121

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031121 
----------

*031121  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031122  CAIE	2,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0223

*031124  JUMPA	0,031125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031125 
----------

*031125  MOVEI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031126  CAIE	3,000000(3)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*031130  JUMPA	0,031131

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031131 
----------

*031131  MOVEI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031132  CAIE	4,000000(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0224

*031134  JUMPA	0,031135

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031135 
----------

*031135  MOVEI	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*031136  CAIE	5,000000(5)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
----------

*031140  JUMPA	0,031141

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031141 
----------

*031141  MOVEI	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

*031142  CAIE	6,000000(6)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0225

*031144  JUMPA	0,031145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031145 
----------

*031145  MOVEI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*031146  CAIE	7,000000(7)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
----------

*031150  JUMPA	0,031151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031151 
----------

*031151  MOVEI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031152  CAIE	10,000000(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0226

*031154  JUMPA	0,031155

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031155 
----------

*031155  MOVEI	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

*031156  CAIE	11,000000(11)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
----------

*031160  JUMPA	0,031161

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031161 
----------

*031161  MOVEI	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*031162  CAIE	12,000000(12)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0227

*031164  JUMPA	0,031165

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031165 
----------

*031165  MOVEI	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*031166  CAIE	13,000000(13)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
----------

*031170  JUMPA	0,031171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031171 
----------

*031171  MOVEI	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*031172  CAIE	14,000000(14)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0228

*031174  JUMPA	0,031175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031175 
----------

*031175  MOVEI	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*031176  CAIE	15,000000(15)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
----------

*031200  JUMPA	0,031201

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031201 
----------

*031201  MOVEI	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

*031202  CAIE	16,000000(16)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0229

*031204  JUMPA	0,031205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031205 
----------

*031205  MOVEI	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*031206  CAIE	17,000000(17)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
----------

*031210  JUMPA	0,031211

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031211 
----------

*031211  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031212  HRLI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000001 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0230

*031213  CAME	1,000000(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*031215  JUMPA	0,031216

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031216 
----------

*031216  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031217  HRLI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
FINAL
C(AC)= 000002 000002 
----------

*031220  CAME	2,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002  C(E)= 000002 000002 
----------

*031222  JUMPA	0,031223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031223 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0231

*031223  MOVEI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*031224  HRLI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000003 000003 
----------

*031225  CAME	3,000000(3)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000003 000003  C(E)= 000003 000003 
----------

*031227  JUMPA	0,031230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031230 
----------

*031230  MOVEI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031231  HRLI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
FINAL
C(AC)= 000004 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0232

*031232  CAME	4,000000(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000004  C(E)= 000004 000004 
----------

*031234  JUMPA	0,031235

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031235 
----------

*031235  MOVEI	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*031236  HRLI	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
FINAL
C(AC)= 000005 000005 
----------

*031237  CAME	5,000000(5)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000005 000005  C(E)= 000005 000005 
----------

*031241  JUMPA	0,031242

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031242 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0233

*031242  MOVEI	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

*031243  HRLI	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
FINAL
C(AC)= 000006 000006 
----------

*031244  CAME	6,000000(6)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000006 000006  C(E)= 000006 000006 
----------

*031246  JUMPA	0,031247

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031247 
----------

*031247  MOVEI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*031250  HRLI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
FINAL
C(AC)= 000007 000007 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0234

*031251  CAME	7,000000(7)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000007 000007  C(E)= 000007 000007 
----------

*031253  JUMPA	0,031254

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031254 
----------

*031254  MOVEI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031255  HRLI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
FINAL
C(AC)= 000010 000010 
----------

*031256  CAME	10,000000(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000010  C(E)= 000010 000010 
----------

*031260  JUMPA	0,031261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031261 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0235

*031261  MOVEI	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

*031262  HRLI	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
FINAL
C(AC)= 000011 000011 
----------

*031263  CAME	11,000000(11)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000011 000011  C(E)= 000011 000011 
----------

*031265  JUMPA	0,031266

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031266 
----------

*031266  MOVEI	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*031267  HRLI	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
FINAL
C(AC)= 000012 000012 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0236

*031270  CAME	12,000000(12)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000012 000012  C(E)= 000012 000012 
----------

*031272  JUMPA	0,031273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031273 
----------

*031273  MOVEI	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*031274  HRLI	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
FINAL
C(AC)= 000013 000013 
----------

*031275  CAME	13,000000(13)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000013 000013  C(E)= 000013 000013 
----------

*031277  JUMPA	0,031300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031300 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0237

*031300  MOVEI	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*031301  HRLI	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
FINAL
C(AC)= 000014 000014 
----------

*031302  CAME	14,000000(14)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000014 000014  C(E)= 000014 000014 
----------

*031304  JUMPA	0,031305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031305 
----------

*031305  MOVEI	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*031306  HRLI	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
FINAL
C(AC)= 000015 000015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0238

*031307  CAME	15,000000(15)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000015 000015  C(E)= 000015 000015 
----------

*031311  JUMPA	0,031312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031312 
----------

*031312  MOVEI	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

*031313  HRLI	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
FINAL
C(AC)= 000016 000016 
----------

*031314  CAME	16,000000(16)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000016 000016  C(E)= 000016 000016 
----------

*031316  JUMPA	0,031317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031317 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0239

*031317  MOVEI	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
FINAL
C(AC)= 000000 000017 
----------

*031320  HRLI	17,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000017 
FINAL
C(AC)= 000017 000017 
----------

*031321  CAME	17,000000(17)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000017 000017  C(E)= 000017 000017 
----------

*031323  JUMPA	0,031324

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031324 
----------

*031324  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000003 000003 
FINAL
 C(E)= 777777 777777 
----------

*031325  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000001 000001 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0240

*031326  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000002     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031327  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031330  SKIPE	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000017 
----------

*031332  JUMPA	0,031333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031333 
----------

*031333  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0241

*031334  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031335  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031336  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031337  CAIE	3,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*031341  JUMPA	0,031342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031342 
----------

*031342  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000001 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0242

*031343  MOVEI	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031344  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031345  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031346  CAIE	3,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*031350  JUMPA	0,031351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031351 
----------

*031351  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000002 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0243

*031352  MOVEI	1,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031353  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031354  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031355  CAIE	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

*031357  JUMPA	0,031360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031360 
----------

*031360  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000004 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0244

*031361  MOVEI	1,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031362  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031363  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031364  CAIE	3,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

*031366  JUMPA	0,031367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031367 
----------

*031367  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000010 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0245

*031370  MOVEI	1,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031371  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031372  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031373  CAIE	3,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 000020 
----------

*031375  JUMPA	0,031376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031376 
----------

*031376  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000020 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0246

*031377  MOVEI	1,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031400  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031401  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031402  CAIE	3,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 000040 
----------

*031404  JUMPA	0,031405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031405 
----------

*031405  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000040 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0247

*031406  MOVEI	1,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031407  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031410  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031411  CAIE	3,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 000100 
----------

*031413  JUMPA	0,031414

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031414 
----------

*031414  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000100 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0248

*031415  MOVEI	1,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031416  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031417  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031420  CAIE	3,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 000200 
----------

*031422  JUMPA	0,031423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031423 
----------

*031423  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000200 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0249

*031424  MOVEI	1,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031425  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031426  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031427  CAIE	3,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 000400 
----------

*031431  JUMPA	0,031432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031432 
----------

*031432  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 000400 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0250

*031433  MOVEI	1,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031434  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031435  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031436  CAIE	3,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 001000 
----------

*031440  JUMPA	0,031441

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031441 
----------

*031441  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 001000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0251

*031442  MOVEI	1,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031443  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031444  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031445  CAIE	3,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 002000 
----------

*031447  JUMPA	0,031450

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031450 
----------

*031450  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 002000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0252

*031451  MOVEI	1,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*031452  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031453  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*031454  CAIE	3,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 004000 
----------

*031456  JUMPA	0,031457

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031457 
----------

*031457  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 004000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0253

*031460  MOVEI	1,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*031461  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031462  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*031463  CAIE	3,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 010000 
----------

*031465  JUMPA	0,031466

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031466 
----------

*031466  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 010000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0254

*031467  MOVEI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031470  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031471  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031472  CAIE	3,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 020000 
----------

*031474  JUMPA	0,031475

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031475 
----------

*031475  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 020000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0255

*031476  MOVEI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031477  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031500  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031501  CAIE	3,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 040000 
----------

*031503  JUMPA	0,031504

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031504 
----------

*031504  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 040000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0256

*031505  MOVEI	1,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031506  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031507  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031510  CAIE	3,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 100000 
----------

*031512  JUMPA	0,031513

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031513 
----------

*031513  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 100000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0257

*031514  MOVEI	1,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*031515  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031516  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*031517  CAIE	3,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 200000 
----------

*031521  JUMPA	0,031522

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031522 
----------

*031522  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 200000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0258

*031523  MOVEI	1,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*031524  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031525  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*031526  CAIE	3,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 400000 
----------

*031530  JUMPA	0,031531

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031531 
----------

*031531  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000000 400000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0259

*031532  MOVSI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

*031533  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031534  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031535  CAME	3,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
----------

*031537  JUMPA	0,031540

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031540 
----------

*031540  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000001 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0260

*031541  MOVSI	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 000002 
FINAL
C(AC)= 000002 000000 
----------

*031542  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031543  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*031544  CAME	3,034363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
----------

*031546  JUMPA	0,031547

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031547 
----------

*031547  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000002 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0261

*031550  MOVSI	1,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 000004 
FINAL
C(AC)= 000004 000000 
----------

*031551  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031552  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*031553  CAME	3,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
----------

*031555  JUMPA	0,031556

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031556 
----------

*031556  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000004 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0262

*031557  MOVSI	1,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 000010 
FINAL
C(AC)= 000010 000000 
----------

*031560  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031561  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*031562  CAME	3,034365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
----------

*031564  JUMPA	0,031565

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031565 
----------

*031565  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000010 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0263

*031566  MOVSI	1,000020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 000020 
FINAL
C(AC)= 000020 000000 
----------

*031567  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031570  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*031571  CAME	3,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
----------

*031573  JUMPA	0,031574

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031574 
----------

*031574  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000020 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0264

*031575  MOVSI	1,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

*031576  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031577  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*031600  CAME	3,034367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
----------

*031602  JUMPA	0,031603

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031603 
----------

*031603  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000040 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0265

*031604  MOVSI	1,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*031605  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031606  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*031607  CAME	3,034370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
----------

*031611  JUMPA	0,031612

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031612 
----------

*031612  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000100 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0266

*031613  MOVSI	1,000200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 000200 
FINAL
C(AC)= 000200 000000 
----------

*031614  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031615  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*031616  CAME	3,034371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
----------

*031620  JUMPA	0,031621

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031621 
----------

*031621  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000200 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0267

*031622  MOVSI	1,000400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 000400 
FINAL
C(AC)= 000400 000000 
----------

*031623  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031624  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031625  CAME	3,034372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
----------

*031627  JUMPA	0,031630

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031630 
----------

*031630  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 000400 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0268

*031631  MOVSI	1,001000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 001000 
FINAL
C(AC)= 001000 000000 
----------

*031632  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031633  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*031634  CAME	3,034373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
----------

*031636  JUMPA	0,031637

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031637 
----------

*031637  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 001000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0269

*031640  MOVSI	1,002000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 002000 
FINAL
C(AC)= 002000 000000 
----------

*031641  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031642  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031643  CAME	3,034374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
----------

*031645  JUMPA	0,031646

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031646 
----------

*031646  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 002000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0270

*031647  MOVSI	1,004000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 004000 
FINAL
C(AC)= 004000 000000 
----------

*031650  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031651  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031652  CAME	3,034375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
----------

*031654  JUMPA	0,031655

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031655 
----------

*031655  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 004000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0271

*031656  MOVSI	1,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 010000 
FINAL
C(AC)= 010000 000000 
----------

*031657  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031660  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031661  CAME	3,034376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
----------

*031663  JUMPA	0,031664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031664 
----------

*031664  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 010000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0272

*031665  MOVSI	1,020000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

*031666  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031667  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*031670  CAME	3,034377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
----------

*031672  JUMPA	0,031673

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031673 
----------

*031673  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 020000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0273

*031674  MOVSI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*031675  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031676  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*031677  CAME	3,034400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
----------

*031701  JUMPA	0,031702

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031702 
----------

*031702  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 040000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0274

*031703  MOVSI	1,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*031704  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031705  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031706  CAME	3,034401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
----------

*031710  JUMPA	0,031711

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031711 
----------

*031711  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 100000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0275

*031712  MOVSI	1,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*031713  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031714  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031715  CAME	3,034402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
----------

*031717  JUMPA	0,031720

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031720 
----------

*031720  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 200000 000000 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0276

*031721  MOVSI	1,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*031722  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031723  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031724  CAME	3,034403

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
----------

*031726  JUMPA	0,031727

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031727 
----------

*031727  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 400000 000000 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0277

*031730  SETOM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 400000 000000 
FINAL
 C(E)= 777777 777777 
----------

*031731  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031732  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031733  CAME	3,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031735  JUMPA	0,031736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031736 
----------

*031736  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0278

*031737  HRROI	1,777776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777776 
FINAL
C(AC)= 777777 777776 
----------

*031740  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031741  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777776 
----------

*031742  CAME	3,034405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*031744  JUMPA	0,031745

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031745 
----------

*031745  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777776 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0279

*031746  HRROI	1,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777776     E= 000000 777775 
FINAL
C(AC)= 777777 777775 
----------

*031747  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031750  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777775 
FINAL
C(AC)= 777777 777775 
----------

*031751  CAME	3,034406

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775  C(E)= 777777 777775 
----------

*031753  JUMPA	0,031754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031754 
----------

*031754  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777775 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0280

*031755  HRROI	1,777773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777775     E= 000000 777773 
FINAL
C(AC)= 777777 777773 
----------

*031756  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031757  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777773 
FINAL
C(AC)= 777777 777773 
----------

*031760  CAME	3,034407

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773  C(E)= 777777 777773 
----------

*031762  JUMPA	0,031763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031763 
----------

*031763  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777773 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0281

*031764  HRROI	1,777767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773     E= 000000 777767 
FINAL
C(AC)= 777777 777767 
----------

*031765  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031766  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777767 
FINAL
C(AC)= 777777 777767 
----------

*031767  CAME	3,034410

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777767  C(E)= 777777 777767 
----------

*031771  JUMPA	0,031772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 031772 
----------

*031772  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777767 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0282

*031773  HRROI	1,777757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777767     E= 000000 777757 
FINAL
C(AC)= 777777 777757 
----------

*031774  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031775  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777757 
FINAL
C(AC)= 777777 777757 
----------

*031776  CAME	3,034411

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777757  C(E)= 777777 777757 
----------

*032000  JUMPA	0,032001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032001 
----------

*032001  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777757 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0283

*032002  HRROI	1,777737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777757     E= 000000 777737 
FINAL
C(AC)= 777777 777737 
----------

*032003  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032004  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777737 
FINAL
C(AC)= 777777 777737 
----------

*032005  CAME	3,034412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777737  C(E)= 777777 777737 
----------

*032007  JUMPA	0,032010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032010 
----------

*032010  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777737 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0284

*032011  HRROI	1,777677

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777737     E= 000000 777677 
FINAL
C(AC)= 777777 777677 
----------

*032012  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032013  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777677 
FINAL
C(AC)= 777777 777677 
----------

*032014  CAME	3,034413

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777677  C(E)= 777777 777677 
----------

*032016  JUMPA	0,032017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032017 
----------

*032017  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777677 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0285

*032020  HRROI	1,777577

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777677     E= 000000 777577 
FINAL
C(AC)= 777777 777577 
----------

*032021  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032022  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777577 
FINAL
C(AC)= 777777 777577 
----------

*032023  CAME	3,034414

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777577  C(E)= 777777 777577 
----------

*032025  JUMPA	0,032026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032026 
----------

*032026  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777577 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0286

*032027  HRROI	1,777377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777577     E= 000000 777377 
FINAL
C(AC)= 777777 777377 
----------

*032030  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032031  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777377 
FINAL
C(AC)= 777777 777377 
----------

*032032  CAME	3,034415

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777377  C(E)= 777777 777377 
----------

*032034  JUMPA	0,032035

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032035 
----------

*032035  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 777377 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0287

*032036  HRROI	1,776777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777377     E= 000000 776777 
FINAL
C(AC)= 777777 776777 
----------

*032037  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032040  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 776777 
FINAL
C(AC)= 777777 776777 
----------

*032041  CAME	3,034416

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777  C(E)= 777777 776777 
----------

*032043  JUMPA	0,032044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032044 
----------

*032044  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 776777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0288

*032045  HRROI	1,775777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777     E= 000000 775777 
FINAL
C(AC)= 777777 775777 
----------

*032046  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032047  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 775777 
FINAL
C(AC)= 777777 775777 
----------

*032050  CAME	3,034417

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 775777  C(E)= 777777 775777 
----------

*032052  JUMPA	0,032053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032053 
----------

*032053  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 775777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*032054  HRROI	1,773777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 775777     E= 000000 773777 
FINAL
C(AC)= 777777 773777 
----------

*032055  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032056  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 773777 
FINAL
C(AC)= 777777 773777 
----------

*032057  CAME	3,034420

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 773777  C(E)= 777777 773777 
----------

*032061  JUMPA	0,032062

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032062 
----------

*032062  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 773777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*032063  HRROI	1,767777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 773777     E= 000000 767777 
FINAL
C(AC)= 777777 767777 
----------

*032064  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032065  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 767777 
FINAL
C(AC)= 777777 767777 
----------

*032066  CAME	3,034421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 767777  C(E)= 777777 767777 
----------

*032070  JUMPA	0,032071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032071 
----------

*032071  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 767777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*032072  HRROI	1,757777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 767777     E= 000000 757777 
FINAL
C(AC)= 777777 757777 
----------

*032073  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032074  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 757777 
FINAL
C(AC)= 777777 757777 
----------

*032075  CAME	3,034422

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 757777  C(E)= 777777 757777 
----------

*032077  JUMPA	0,032100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032100 
----------

*032100  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 757777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*032101  HRROI	1,737777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 757777     E= 000000 737777 
FINAL
C(AC)= 777777 737777 
----------

*032102  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032103  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 737777 
FINAL
C(AC)= 777777 737777 
----------

*032104  CAME	3,034423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 737777  C(E)= 777777 737777 
----------

*032106  JUMPA	0,032107

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032107 
----------

*032107  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 737777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*032110  HRROI	1,677777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 737777     E= 000000 677777 
FINAL
C(AC)= 777777 677777 
----------

*032111  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032112  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 677777 
FINAL
C(AC)= 777777 677777 
----------

*032113  CAME	3,034424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 677777  C(E)= 777777 677777 
----------

*032115  JUMPA	0,032116

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032116 
----------

*032116  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 677777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*032117  HRROI	1,577777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 677777     E= 000000 577777 
FINAL
C(AC)= 777777 577777 
----------

*032120  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032121  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 577777 
FINAL
C(AC)= 777777 577777 
----------

*032122  CAME	3,034425

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 577777  C(E)= 777777 577777 
----------

*032124  JUMPA	0,032125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032125 
----------

*032125  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 577777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*032126  HRROI	1,377777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 577777     E= 000000 377777 
FINAL
C(AC)= 777777 377777 
----------

*032127  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032130  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 377777 
FINAL
C(AC)= 777777 377777 
----------

*032131  CAME	3,034426

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 377777  C(E)= 777777 377777 
----------

*032133  JUMPA	0,032134

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032134 
----------

*032134  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777777 377777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*032135  HRLOI	1,777776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 377777     E= 000000 777776 
FINAL
C(AC)= 777776 777777 
----------

*032136  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032137  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777776 777777 
FINAL
C(AC)= 777776 777777 
----------

*032140  CAME	3,034427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777  C(E)= 777776 777777 
----------

*032142  JUMPA	0,032143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032143 
----------

*032143  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777776 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*032144  HRLOI	1,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777776 777777     E= 000000 777775 
FINAL
C(AC)= 777775 777777 
----------

*032145  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032146  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777775 777777 
FINAL
C(AC)= 777775 777777 
----------

*032147  CAME	3,034430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777775 777777  C(E)= 777775 777777 
----------

*032151  JUMPA	0,032152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032152 
----------

*032152  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777775 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*032153  HRLOI	1,777773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777775 777777     E= 000000 777773 
FINAL
C(AC)= 777773 777777 
----------

*032154  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032155  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777773 777777 
FINAL
C(AC)= 777773 777777 
----------

*032156  CAME	3,034431

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777773 777777  C(E)= 777773 777777 
----------

*032160  JUMPA	0,032161

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032161 
----------

*032161  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777773 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*032162  HRLOI	1,777767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777773 777777     E= 000000 777767 
FINAL
C(AC)= 777767 777777 
----------

*032163  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032164  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777767 777777 
FINAL
C(AC)= 777767 777777 
----------

*032165  CAME	3,034432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777767 777777  C(E)= 777767 777777 
----------

*032167  JUMPA	0,032170

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032170 
----------

*032170  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777767 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*032171  HRLOI	1,777757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777767 777777     E= 000000 777757 
FINAL
C(AC)= 777757 777777 
----------

*032172  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032173  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777757 777777 
FINAL
C(AC)= 777757 777777 
----------

*032174  CAME	3,034433

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777757 777777  C(E)= 777757 777777 
----------

*032176  JUMPA	0,032177

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032177 
----------

*032177  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777757 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*032200  HRLOI	1,777737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777757 777777     E= 000000 777737 
FINAL
C(AC)= 777737 777777 
----------

*032201  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032202  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777737 777777 
FINAL
C(AC)= 777737 777777 
----------

*032203  CAME	3,034434

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777737 777777  C(E)= 777737 777777 
----------

*032205  JUMPA	0,032206

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032206 
----------

*032206  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777737 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*032207  HRLOI	1,777677

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777737 777777     E= 000000 777677 
FINAL
C(AC)= 777677 777777 
----------

*032210  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032211  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777677 777777 
FINAL
C(AC)= 777677 777777 
----------

*032212  CAME	3,034435

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777677 777777  C(E)= 777677 777777 
----------

*032214  JUMPA	0,032215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032215 
----------

*032215  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777677 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*032216  HRLOI	1,777577

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777677 777777     E= 000000 777577 
FINAL
C(AC)= 777577 777777 
----------

*032217  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032220  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777577 777777 
FINAL
C(AC)= 777577 777777 
----------

*032221  CAME	3,034436

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777577 777777  C(E)= 777577 777777 
----------

*032223  JUMPA	0,032224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032224 
----------

*032224  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777577 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*032225  HRLOI	1,777377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777577 777777     E= 000000 777377 
FINAL
C(AC)= 777377 777777 
----------

*032226  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032227  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777377 777777 
FINAL
C(AC)= 777377 777777 
----------

*032230  CAME	3,034437

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777377 777777  C(E)= 777377 777777 
----------

*032232  JUMPA	0,032233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032233 
----------

*032233  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 777377 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*032234  HRLOI	1,776777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777377 777777     E= 000000 776777 
FINAL
C(AC)= 776777 777777 
----------

*032235  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032236  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 776777 777777 
FINAL
C(AC)= 776777 777777 
----------

*032237  CAME	3,034440

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776777 777777  C(E)= 776777 777777 
----------

*032241  JUMPA	0,032242

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032242 
----------

*032242  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 776777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*032243  HRLOI	1,775777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 776777 777777     E= 000000 775777 
FINAL
C(AC)= 775777 777777 
----------

*032244  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032245  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 775777 777777 
FINAL
C(AC)= 775777 777777 
----------

*032246  CAME	3,034441

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 775777 777777  C(E)= 775777 777777 
----------

*032250  JUMPA	0,032251

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032251 
----------

*032251  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 775777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*032252  HRLOI	1,773777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 775777 777777     E= 000000 773777 
FINAL
C(AC)= 773777 777777 
----------

*032253  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032254  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 773777 777777 
FINAL
C(AC)= 773777 777777 
----------

*032255  CAME	3,034442

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 773777 777777  C(E)= 773777 777777 
----------

*032257  JUMPA	0,032260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032260 
----------

*032260  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 773777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*032261  HRLOI	1,767777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 773777 777777     E= 000000 767777 
FINAL
C(AC)= 767777 777777 
----------

*032262  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032263  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 767777 777777 
FINAL
C(AC)= 767777 777777 
----------

*032264  CAME	3,034443

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 767777 777777  C(E)= 767777 777777 
----------

*032266  JUMPA	0,032267

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032267 
----------

*032267  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 767777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*032270  HRLOI	1,757777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 767777 777777     E= 000000 757777 
FINAL
C(AC)= 757777 777777 
----------

*032271  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032272  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 757777 777777 
FINAL
C(AC)= 757777 777777 
----------

*032273  CAME	3,034444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 757777 777777  C(E)= 757777 777777 
----------

*032275  JUMPA	0,032276

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032276 
----------

*032276  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 757777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*032277  HRLOI	1,737777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 757777 777777     E= 000000 737777 
FINAL
C(AC)= 737777 777777 
----------

*032300  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032301  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 737777 777777 
FINAL
C(AC)= 737777 777777 
----------

*032302  CAME	3,034445

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 737777 777777  C(E)= 737777 777777 
----------

*032304  JUMPA	0,032305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032305 
----------

*032305  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 737777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*032306  HRLOI	1,677777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 737777 777777     E= 000000 677777 
FINAL
C(AC)= 677777 777777 
----------

*032307  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032310  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 677777 777777 
FINAL
C(AC)= 677777 777777 
----------

*032311  CAME	3,034446

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777  C(E)= 677777 777777 
----------

*032313  JUMPA	0,032314

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032314 
----------

*032314  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 677777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*032315  HRLOI	1,577777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777     E= 000000 577777 
FINAL
C(AC)= 577777 777777 
----------

*032316  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032317  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 577777 777777 
FINAL
C(AC)= 577777 777777 
----------

*032320  CAME	3,034447

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 577777 777777  C(E)= 577777 777777 
----------

*032322  JUMPA	0,032323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032323 
----------

*032323  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017  C(E)= 577777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*032324  HRLOI	1,377777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 577777 777777     E= 000000 377777 
FINAL
C(AC)= 377777 777777 
----------

*032325  MOVEI	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032326  MOVE 	3,000000(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*032327  CAME	3,034450

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
----------

*032331  JUMPA	0,032332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 032332 
----------

*032332  MOVEI	1,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*032333  MOVEI	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000017     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032334  CAIE	0,777773(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032336  JUMPA	0,032337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032337 
----------

*032337  MOVEI	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*032340  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032341  CAIE	1,777776(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*032343  JUMPA	0,032344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032344 
----------

*032344  MOVEI	3,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032345  MOVEI	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032346  CAIE	2,000001(3)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*032350  JUMPA	0,032351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032351 
----------

*032351  MOVEI	4,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000004     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*032352  MOVEI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*032353  CAIE	3,000004(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*032355  JUMPA	0,032356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032356 
----------

*032356  MOVEI	5,777775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000005 000005     E= 000000 777775 
FINAL
C(AC)= 000000 777775 
----------

*032357  MOVEI	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032360  CAIE	4,000007(5)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*032362  JUMPA	0,032363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032363 
----------

*032363  MOVEI	6,777773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000006 000006     E= 000000 777773 
FINAL
C(AC)= 000000 777773 
----------

*032364  MOVEI	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777775     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*032365  CAIE	5,000012(6)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
----------

*032367  JUMPA	0,032370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032370 
----------

*032370  MOVEI	7,777771

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000007 000007     E= 000000 777771 
FINAL
C(AC)= 000000 777771 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*032371  MOVEI	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777773     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

*032372  CAIE	6,000015(7)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
----------

*032374  JUMPA	0,032375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032375 
----------

*032375  MOVEI	10,777767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000010     E= 000000 777767 
FINAL
C(AC)= 000000 777767 
----------

*032376  MOVEI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777771     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*032377  CAIE	7,000020(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*032401  JUMPA	0,032402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032402 
----------

*032402  MOVEI	11,777765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000011 000011     E= 000000 777765 
FINAL
C(AC)= 000000 777765 
----------

*032403  MOVEI	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777767     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032404  CAIE	10,000023(11)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

*032406  JUMPA	0,032407

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032407 
----------

*032407  MOVEI	12,777763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000012 000012     E= 000000 777763 
FINAL
C(AC)= 000000 777763 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*032410  MOVEI	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777765     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

*032411  CAIE	11,000026(12)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
----------

*032413  JUMPA	0,032414

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032414 
----------

*032414  MOVEI	13,777761

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000013 000013     E= 000000 777761 
FINAL
C(AC)= 000000 777761 
----------

*032415  MOVEI	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777763     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*032416  CAIE	12,000031(13)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*032420  JUMPA	0,032421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032421 
----------

*032421  MOVEI	14,777757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000014 000014     E= 000000 777757 
FINAL
C(AC)= 000000 777757 
----------

*032422  MOVEI	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777761     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*032423  CAIE	13,000034(14)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
----------

*032425  JUMPA	0,032426

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032426 
----------

*032426  MOVEI	15,777755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000015 000015     E= 000000 777755 
FINAL
C(AC)= 000000 777755 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*032427  MOVEI	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777757     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*032430  CAIE	14,000037(15)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
----------

*032432  JUMPA	0,032433

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032433 
----------

*032433  MOVEI	16,777753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000016 000016     E= 000000 777753 
FINAL
C(AC)= 000000 777753 
----------

*032434  MOVEI	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777755     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*032435  CAIE	15,000042(16)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*032437  JUMPA	0,032440

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032440 
----------

*032440  MOVEI	17,777751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000017 000017     E= 000000 777751 
FINAL
C(AC)= 000000 777751 
----------

*032441  MOVEI	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777753     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

*032442  CAIE	16,000045(17)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*032444  JUMPA	0,032445

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032445 
----------

*032445  MOVEI	1,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*032446  MOVEI	0,777765(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032447  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032451  JUMPA	0,032452

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032452 
----------

*032452  MOVEI	2,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*032453  MOVEI	1,777772(2)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032454  CAIE	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*032456  JUMPA	0,032457

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032457 
----------

*032457  MOVEI	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*032460  MOVEI	2,777777(3)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032461  CAIE	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 000002 
----------

*032463  JUMPA	0,032464

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032464 
----------

*032464  MOVEI	4,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*032465  MOVEI	3,000004(4)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*032466  CAIE	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
----------

*032470  JUMPA	0,032471

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032471 
----------

*032471  MOVEI	5,777773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 777773 
FINAL
C(AC)= 000000 777773 
----------

*032472  MOVEI	4,000011(5)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032473  CAIE	4,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*032475  JUMPA	0,032476

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032476 
----------

*032476  MOVEI	6,777767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 777767 
FINAL
C(AC)= 000000 777767 
----------

*032477  MOVEI	5,000016(6)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777773     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*032500  CAIE	5,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000005 
----------

*032502  JUMPA	0,032503

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032503 
----------

*032503  MOVEI	7,777763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 777763 
FINAL
C(AC)= 000000 777763 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*032504  MOVEI	6,000023(7)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777767     E= 000000 000006 
FINAL
C(AC)= 000000 000006 
----------

*032505  CAIE	6,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000006 
----------

*032507  JUMPA	0,032510

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032510 
----------

*032510  MOVEI	10,777757

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 777757 
FINAL
C(AC)= 000000 777757 
----------

*032511  MOVEI	7,000030(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777763     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*032512  CAIE	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000007 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*032514  JUMPA	0,032515

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032515 
----------

*032515  MOVEI	11,777753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 777753 
FINAL
C(AC)= 000000 777753 
----------

*032516  MOVEI	10,000035(11)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777757     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032517  CAIE	10,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000010 
----------

*032521  JUMPA	0,032522

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032522 
----------

*032522  MOVEI	12,777747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 777747 
FINAL
C(AC)= 000000 777747 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*032523  MOVEI	11,000042(12)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777753     E= 000000 000011 
FINAL
C(AC)= 000000 000011 
----------

*032524  CAIE	11,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 000011 
----------

*032526  JUMPA	0,032527

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032527 
----------

*032527  MOVEI	13,777743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 777743 
FINAL
C(AC)= 000000 777743 
----------

*032530  MOVEI	12,000047(13)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777747     E= 000000 000012 
FINAL
C(AC)= 000000 000012 
----------

*032531  CAIE	12,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000012 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*032533  JUMPA	0,032534

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032534 
----------

*032534  MOVEI	14,777737

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 777737 
FINAL
C(AC)= 000000 777737 
----------

*032535  MOVEI	13,000054(14)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777743     E= 000000 000013 
FINAL
C(AC)= 000000 000013 
----------

*032536  CAIE	13,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000013 
----------

*032540  JUMPA	0,032541

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032541 
----------

*032541  MOVEI	15,777733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 777733 
FINAL
C(AC)= 000000 777733 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*032542  MOVEI	14,000061(15)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777737     E= 000000 000014 
FINAL
C(AC)= 000000 000014 
----------

*032543  CAIE	14,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000014     E= 000000 000014 
----------

*032545  JUMPA	0,032546

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032546 
----------

*032546  MOVEI	16,777727

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 777727 
FINAL
C(AC)= 000000 777727 
----------

*032547  MOVEI	15,000066(16)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777733     E= 000000 000015 
FINAL
C(AC)= 000000 000015 
----------

*032550  CAIE	15,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000015     E= 000000 000015 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*032552  JUMPA	0,032553

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032553 
----------

*032553  MOVEI	17,777723

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777751     E= 000000 777723 
FINAL
C(AC)= 000000 777723 
----------

*032554  MOVEI	16,000073(17)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777727     E= 000000 000016 
FINAL
C(AC)= 000000 000016 
----------

*032555  CAIE	16,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000016     E= 000000 000016 
----------

*032557  JUMPA	0,032560

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032560 
----------

*032560  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*032561  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032562  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032564  JUMPA	0,032565

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032565 
----------

*032565  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032566  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*032567  CAME	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032571  JUMPA	0,032572

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032572 
----------

*032572  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032573  MOVEI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*032574  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777  C(E)= 777777 000000 
----------

*032575  CAME	1,034451

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*032577  JUMPA	0,032600

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032600 
----------

*032600  CAME	0,034452

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
----------

*032602  JUMPA	0,032603

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 032603 
----------

*032603  MOVEI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*032604  MOVSI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*032605  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000  C(E)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*032606  CAIE	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*032610  JUMPA	0,032611

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032611 
----------

*032611  CAME	0,034451

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032613  JUMPA	0,032614

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 032614 
----------

*032614  MOVE 	0,034453

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*032615  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*032616  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032617  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032620  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032621  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032622  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*032623  EXCH	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032624  CAME	0,034453

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*032626  JUMPA	0,032627

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 032627 
----------

*032627  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
FINAL
C(AC)= 000000 000000 
----------

*032630  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032631  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0340

*032632  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*032633  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*032634  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*032635  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*032636  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0341

*032637  EXCH	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*032640  CAME	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032642  JUMPA	0,032643

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032643 
----------

*032643  CAME	1,034454

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032645  JUMPA	0,032646

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032646 
----------

*032646  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0342

*032647  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032650  MOVEM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*032651  CAME	1,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032653  JUMPA	0,032654

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032654 
----------

*032654  CAME	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032656  JUMPA	0,032657

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032657 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0343

*032657  MOVE 	0,034455

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 254200 032662 
FINAL
C(AC)= 254200 032662 
----------

*032660  JFCL	17,032661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032661 
----------

*032661  CAIA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 032662     E= 000000 000000 
----------

*032663  JUMPA	0,032664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 032662     E= 000000 032664 
----------

*032664  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 254200 032662  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032665  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0344

*032666  JFCL	17,032667

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 032667 
----------

*032667  JFCL	4,032671

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032671 
----------

*032670  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032672  JUMPA	0,032673

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032673 
----------

*032673  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032674  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0345

*032675  JFCL	17,032676

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 032676 
----------

*032676  JFCL	2,032700

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032700 
----------

*032677  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032701  JUMPA	0,032702

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032702 
----------

*032702  MOVSI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*032703  ADD 	0,034403

FLAGS - INT/FINAL   000000 600200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0346

*032704  JFCL	17,032705

FLAGS - INT/FINAL   600200 600200 
INITIAL
C(AC)= 000000 000000 
----------

*032704  JFCL	0,000000

FLAGS - INT/FINAL   600200 600000 
INITIAL
    E= 000000 000000 
----------

*032704  JFCL	17,032705

FLAGS - INT/FINAL   600000 000000 
INITIAL
    E= 000000 032705 
----------

*032705  JFCL	10,032707

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032707 
----------

*032706  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032710  JUMPA	0,032711

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032711 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0347

*032711  MOVSI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*032712  ADD 	0,034404

FLAGS - INT/FINAL   000000 600200 
INITIAL
C(AC)= 400000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 377777 777777 
----------

*032713  JFCL	0,032715

FLAGS - INT/FINAL   600200 600200 
INITIAL
C(AC)= 377777 777777 
----------

*032713  JFCL	0,000000

FLAGS - INT/FINAL   600200 600000 
INITIAL
    E= 000000 000000 
----------

*032713  JFCL	0,032715

FLAGS - INT/FINAL   600000 600000 
INITIAL
    E= 000000 032715 
----------

*032714  SKIPA	0,000000

FLAGS - INT/FINAL   600000 600000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0348

*032716  JUMPA	0,032717

FLAGS - INT/FINAL   600000 600000 
INITIAL
C(AC)= 377777 777777     E= 000000 032717 
----------

*032717  MOVSI	0,200000

FLAGS - INT/FINAL   600000 600000 
INITIAL
C(AC)= 377777 777777     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*032720  ADD 	0,034402

FLAGS - INT/FINAL   600000 700200 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 400000 000000 
----------

*032721  JFCL	0,032723

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 400000 000000 
----------

*032721  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

*032721  JFCL	0,032723

FLAGS - INT/FINAL   700000 700000 
INITIAL
    E= 000000 032723 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0349

*032722  SKIPA	0,000000

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*032724  JUMPA	0,032725

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000     E= 000000 032725 
----------

*032725  MOVE 	0,034404

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 400000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032726  ADDI	0,000001

FLAGS - INT/FINAL   700000 700000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032727  JFCL	17,032731

FLAGS - INT/FINAL   700000 000000 
INITIAL
    E= 000000 032731 
----------

*032731  JUMPA	0,032732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032732 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0350

*032732  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032733  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032734  CAI 	17,000017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777723     E= 000000 000017 
----------

*032735  JFCL	17,032737

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 032737 
----------

*032737  JUMPA	0,032740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032740 
----------

*032740  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0351

*032741  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032742  JFCL	2,032744

FLAGS - INT/FINAL   300000 200000 
INITIAL
    E= 000000 032744 
----------

*032744  JUMPA	0,032745

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 032745 
----------

*032745  MOVE 	0,034404

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032746  ADDI	0,000001

FLAGS - INT/FINAL   200000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032747  JFCL	4,032751

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 032751 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0352

*032751  JUMPA	0,032752

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 032752 
----------

*032752  MOVSI	0,400000

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*032753  ADD 	0,034403

FLAGS - INT/FINAL   100000 700200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032754  JFCL	10,032756

FLAGS - INT/FINAL   700200 700200 
INITIAL
C(AC)= 000000 000000 
----------

*032754  JFCL	0,000000

FLAGS - INT/FINAL   700200 700000 
INITIAL
    E= 000000 000000 
----------

*032754  JFCL	10,032756

FLAGS - INT/FINAL   700000 300000 
INITIAL
    E= 000000 032756 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0353

*032756  JUMPA	0,032757

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032757 
----------

*032757  JFCL	17,032760

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 032760 
----------

*032760  JFCL	1,032762

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 032762 
----------

*032761  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032763  JUMPA	0,032764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032764 
----------

*032764  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0354

*032765  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*032766  JFCL	13,032767

FLAGS - INT/FINAL   300000 200000 
INITIAL
    E= 000000 032767 
----------

*032767  JFCL	4,032771

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 032771 
----------

*032771  JUMPA	0,032772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032772 
----------

*032772  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032773  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0355

*032774  JFCL	15,032775

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 032775 
----------

*032775  JFCL	2,032777

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 032777 
----------

*032777  JUMPA	0,033000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033000 
----------

*033000  MOVSI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*033001  ADD 	0,034403

FLAGS - INT/FINAL   000000 600200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033002  JFCL	7,033003

FLAGS - INT/FINAL   600200 600200 
INITIAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0356

*033002  JFCL	0,000000

FLAGS - INT/FINAL   600200 600000 
INITIAL
    E= 000000 000000 
----------

*033002  JFCL	7,033003

FLAGS - INT/FINAL   600000 400000 
INITIAL
    E= 000000 033003 
----------

*033003  JFCL	10,033005

FLAGS - INT/FINAL   400000 000000 
INITIAL
    E= 000000 033005 
----------

*033005  JUMPA	0,033006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033006 
----------

*033006  JFCL	17,033007

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033007 
----------

*033007  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0357

*033010  ADD 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033011  JFCL	10,033013

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033013 
----------

*033012  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033014  JUMPA	0,033015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033015 
----------

*033015  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033016  JFCL	17,033017

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033017 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0358

*033017  ADD 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033020  JFCL	4,033022

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033022 
----------

*033021  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033023  JUMPA	0,033024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033024 
----------

*033024  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033025  JFCL	17,033026

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033026 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0359

*033026  ADD 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033027  JFCL	2,033031

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033031 
----------

*033030  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033032  JUMPA	0,033033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033033 
----------

*033033  JFCL	17,033034

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033034 
----------

*033034  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0360

*033035  CAI 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*033036  CAM 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

*033037  JFCL	17,033041

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033041 
----------

*033040  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033042  JUMPA	0,033043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033043 
----------

*033043  JFCL	17,033044

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033044 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0361

*033044  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*033045  XOR 	0,034454

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*033046  XOR 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033047  JFCL	17,033051

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033051 
----------

*033050  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0362

*033052  JUMPA	0,033053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033053 
----------

*033053  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*033054  JFCL	17,033055

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033055 
----------

*033055  AOBJN	0,033056

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 033056 
FINAL
C(AC)= 000000 000000 
----------

*033056  AOBJP	0,033057

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033057 
FINAL
C(AC)= 000001 000001 
----------

*033057  JFCL	17,033061

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033061 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0363

*033060  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*033062  JUMPA	0,033063

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033063 
----------

*033063  JFCL	17,033064

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033064 
----------

*033064  SKIP 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 777777 777777 
FINAL
C(AC)= 000001 000001 
----------

*033065  JFCL	17,033067

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033067 
----------

*033066  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0364

*033070  JUMPA	0,033071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033071 
----------

*033071  JFCL	17,033072

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033072 
----------

*033072  JUMP 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 034404 
----------

*033073  JFCL	17,033075

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033075 
----------

*033074  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*033076  JUMPA	0,033077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033077 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0365

*033077  JFCL	17,033100

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033100 
----------

*033100  JRST	0,033101

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033101 
----------

*033101  JFCL	16,033103

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033103 
----------

*033102  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*033104  JUMPA	0,033105

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033105 
----------

*033105  JFCL	17,033106

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033106 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0366

*033106  MOVE 	2,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033107  JFCL	17,033111

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033111 
----------

*033110  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*033112  JUMPA	0,033113

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033113 
----------

*033113  JFCL	17,033114

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033114 
----------

*033114  MOVSI	1,200000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0367

*033115  JFCL	17,033116

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033116 
----------

*033116  JRST	2,033117(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 033117 
----------

*033117  JFCL	4,033121

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 033121 
----------

*033121  JUMPA	0,033122

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033122 
----------

*033122  MOVE 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033123  ADDI	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0368

*033124  MOVSI	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033125  JFCL	17,033126

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 033126 
----------

*033126  JRST	2,033127(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033127 
----------

*033127  JFCL	2,033131

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033131 
----------

*033130  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033132  JUMPA	0,033133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033133 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0369

*033133  MOVSI	0,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

*033134  ADD 	0,034404

FLAGS - INT/FINAL   000000 600200 
INITIAL
C(AC)= 400000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033135  MOVSI	1,000000

FLAGS - INT/FINAL   600200 600200 
INITIAL
C(AC)= 377777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033135  JFCL	0,000000

FLAGS - INT/FINAL   600200 600000 
INITIAL
    E= 000000 000000 
----------

*033135  MOVSI	1,000000

FLAGS - INT/FINAL   600000 600000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0370

*033136  JFCL	17,033137

FLAGS - INT/FINAL   600000 000000 
INITIAL
    E= 000000 033137 
----------

*033137  JRST	2,033140(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033140 
----------

*033140  JFCL	10,033142

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033142 
----------

*033141  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033143  JUMPA	0,033144

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033144 
----------

*033144  MOVSI	1,400000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0371

*033145  JFCL	17,033146

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033146 
----------

*033146  JRST	2,033147(1)

FLAGS - INT/FINAL   000000 400000 
INITIAL
    E= 000000 033147 
----------

*033147  JFCL	10,033151

FLAGS - INT/FINAL   400000 000000 
INITIAL
    E= 000000 033151 
----------

*033151  JUMPA	0,033152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033152 
----------

*033152  MOVSI	1,100000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*033153  JFCL	17,033154

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033154 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0372

*033154  JRST	2,033155(1)

FLAGS - INT/FINAL   000000 100000 
INITIAL
    E= 000000 033155 
----------

*033155  JFCL	2,033157

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033157 
----------

*033157  JUMPA	0,033160

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033160 
----------

*033160  MOVSI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*033161  JFCL	17,033162

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033162 
----------

*033162  JRST	2,033163(1)

FLAGS - INT/FINAL   000000 040000 
INITIAL
    E= 000000 033163 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0373

*033163  JFCL	1,033165

FLAGS - INT/FINAL   040000 000000 
INITIAL
    E= 000000 033165 
----------

*033165  JUMPA	0,033166

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033166 
----------

*033166  MOVSI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*033167  JFCL	17,033170

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033170 
----------

*033170  JRST	2,033171(1)

FLAGS - INT/FINAL   000000 040000 
INITIAL
    E= 000000 033171 
----------

*033171  JFCL	0,033173

FLAGS - INT/FINAL   040000 040000 
INITIAL
    E= 000000 033173 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0374

*033172  SKIPA	0,000000

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033174  JUMPA	0,033175

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 377777 777777     E= 000000 033175 
----------

*033175  MOVSI	1,200000

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 040000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*033176  JFCL	17,033177

FLAGS - INT/FINAL   040000 000000 
INITIAL
    E= 000000 033177 
----------

*033177  JRST	2,033200(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 033200 
----------

*033200  SETZ 	1,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0375

*033201  JRST	2,033202(1)

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 033202 
----------

*033202  JFCL	4,033204

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033204 
----------

*033203  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033205  JUMPA	0,033206

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033206 
----------

*033206  MOVSI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*033207  JFCL	17,033210

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033210 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 178
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0376

*033210  JRST	2,033211(1)

FLAGS - INT/FINAL   000000 040000 
INITIAL
    E= 000000 033211 
----------

*033211  SETZ 	1,000000

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 040000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033212  JRST	2,033213(1)

FLAGS - INT/FINAL   040000 000000 
INITIAL
    E= 000000 033213 
----------

*033213  JFCL	1,033215

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033215 
----------

*033214  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033216  JUMPA	0,033217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033217 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 179
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0377

*033217  JFCL	17,033220

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033220 
----------

*033220  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033221  JRST	2,033222(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033222 
----------

*033222  JFCL	17,033224

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033224 
----------

*033223  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*033225  JUMPA	0,033226

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 033226 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 180
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0378

*033226  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033227  JRST	2,033230(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033230 
----------

*033230  JSP	0,033231

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033231 
FINAL
C(AC)= 000000 033231 
----------

*033231  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033231  C(E)= 000000 033231 
FINAL
C(AC)= 000000 033231 
----------

*033233  JUMPA	0,033234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033231     E= 000000 033234 
----------

*033234  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033231  C(E)= 000000 033231 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 181
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0379

*033235  JSP	0,033236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033236 
FINAL
C(AC)= 000000 033236 
----------

*033236  TRNN	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033236     E= 000000 777777 
FINAL
C(AC)= 000000 033236 
----------

*033240  JUMPA	0,033241

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033236     E= 000000 033241 
----------

*033241  SETZM	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033236  C(E)= 000000 033236 
FINAL
 C(E)= 000000 000000 
----------

*033242  MOVSI	1,740000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 740000 
FINAL
C(AC)= 740000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 182
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0380

*033243  JRST	2,033244(1)

FLAGS - INT/FINAL   000000 740000 
INITIAL
    E= 000000 033244 
----------

*033244  JSP	0,033245

FLAGS - INT/FINAL   740000 740000 
INITIAL
C(AC)= 000000 000000     E= 000000 033245 
FINAL
C(AC)= 740000 033245 
----------

*033245  TLNN	0,777777

FLAGS - INT/FINAL   740000 740000 
INITIAL
C(AC)= 740000 033245     E= 000000 777777 
FINAL
C(AC)= 740000 033245 
----------

*033247  JUMPA	0,033250

FLAGS - INT/FINAL   740000 740000 
INITIAL
C(AC)= 740000 033245     E= 000000 033250 
----------

*033250  SETZM	0,000000

FLAGS - INT/FINAL   740000 740000 
INITIAL
C(AC)= 740000 033245  C(E)= 740000 033245 
FINAL
 C(E)= 000000 000000 
----------

*033251  MOVSI	1,400000

FLAGS - INT/FINAL   740000 740000 
INITIAL
C(AC)= 740000 000000     E= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 183
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0381

*033252  JFCL	17,033253

FLAGS - INT/FINAL   740000 000000 
INITIAL
    E= 000000 033253 
----------

*033253  JRST	2,033254(1)

FLAGS - INT/FINAL   000000 400000 
INITIAL
    E= 000000 033254 
----------

*033254  JSP	0,033255

FLAGS - INT/FINAL   400000 400000 
INITIAL
C(AC)= 000000 000000     E= 000000 033255 
FINAL
C(AC)= 400000 033255 
----------

*033255  TLNN	0,400000

FLAGS - INT/FINAL   400000 400000 
INITIAL
C(AC)= 400000 033255     E= 000000 400000 
FINAL
C(AC)= 400000 033255 
----------

*033257  JUMPA	0,033260

FLAGS - INT/FINAL   400000 400000 
INITIAL
C(AC)= 400000 033255     E= 000000 033260 
----------

*033260  SETZM	0,000000

FLAGS - INT/FINAL   400000 400000 
INITIAL
C(AC)= 400000 033255  C(E)= 400000 033255 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 184
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0382

*033261  MOVSI	1,200000

FLAGS - INT/FINAL   400000 400000 
INITIAL
C(AC)= 400000 000000     E= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*033262  JFCL	17,033263

FLAGS - INT/FINAL   400000 000000 
INITIAL
    E= 000000 033263 
----------

*033263  JRST	2,033264(1)

FLAGS - INT/FINAL   000000 200000 
INITIAL
    E= 000000 033264 
----------

*033264  JSP	0,033265

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 000000 000000     E= 000000 033265 
FINAL
C(AC)= 200000 033265 
----------

*033265  TLNN	0,200000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 033265     E= 000000 200000 
FINAL
C(AC)= 200000 033265 
----------

*033267  JUMPA	0,033270

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 033265     E= 000000 033270 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 185
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0383

*033270  SETZ 	0,000000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 033265  C(E)= 200000 033265 
FINAL
C(AC)= 000000 000000 
----------

*033271  MOVSI	1,100000

FLAGS - INT/FINAL   200000 200000 
INITIAL
C(AC)= 200000 000000     E= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*033272  JFCL	17,033273

FLAGS - INT/FINAL   200000 000000 
INITIAL
    E= 000000 033273 
----------

*033273  JRST	2,033274(1)

FLAGS - INT/FINAL   000000 100000 
INITIAL
    E= 000000 033274 
----------

*033274  JSP	0,033275

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033275 
FINAL
C(AC)= 100000 033275 
----------

*033275  TLNN	0,100000

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 100000 033275     E= 000000 100000 
FINAL
C(AC)= 100000 033275 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 186
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0384

*033277  JUMPA	0,033300

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 100000 033275     E= 000000 033300 
----------

*033300  SETZ 	0,000000

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 100000 033275  C(E)= 100000 033275 
FINAL
C(AC)= 000000 000000 
----------

*033301  MOVSI	1,040000

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 100000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*033302  JFCL	17,033303

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033303 
----------

*033303  JRST	2,033304(1)

FLAGS - INT/FINAL   000000 040000 
INITIAL
    E= 000000 033304 
----------

*033304  JSP	0,033305

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 000000 000000     E= 000000 033305 
FINAL
C(AC)= 040000 033305 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 187
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0385

*033305  TLNN	0,040000

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 040000 033305     E= 000000 040000 
FINAL
C(AC)= 040000 033305 
----------

*033307  JUMPA	0,033310

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 040000 033305     E= 000000 033310 
----------

*033310  MOVSI	1,000000

FLAGS - INT/FINAL   040000 040000 
INITIAL
C(AC)= 040000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033311  JFCL	17,033312

FLAGS - INT/FINAL   040000 000000 
INITIAL
    E= 000000 033312 
----------

*033312  JRST	2,033313(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033313 
----------

*033313  JSP	0,033314

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 033305     E= 000000 033314 
FINAL
C(AC)= 000000 033314 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 188
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0386

*033314  TLNE	0,761777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033314     E= 000000 761777 
FINAL
C(AC)= 000000 033314 
----------

*033316  JUMPA	0,033317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033314     E= 000000 033317 
----------

*033317  JSP	0,033321

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033314     E= 000000 033321 
FINAL
C(AC)= 000000 033320 
----------

*033321  JUMPA	0,033322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033320     E= 000000 033322 
----------

*033322  JRST	0,033324

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033324 
----------

*033324  JUMPA	0,033325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033320     E= 000000 033325 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 189
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0387

*033325  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033320  C(E)= 000000 033320 
FINAL
C(AC)= 000000 000000 
----------

*033326  AOBJN	0,033327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033327 
FINAL
C(AC)= 000001 000001 
----------

*033327  CAME	0,034456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
----------

*033331  JUMPA	0,033332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033332 
----------

*033332  MOVE 	0,034457

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 377777 377777 
FINAL
C(AC)= 377777 377777 
----------

*033333  AOBJP	0,033334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 377777     E= 000000 033334 
FINAL
C(AC)= 400000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 190
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0388

*033334  CAME	0,034460

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 400000  C(E)= 400000 400000 
----------

*033336  JUMPA	0,033337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 400000     E= 000000 033337 
----------

*033337  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 400000  C(E)= 400000 400000 
FINAL
C(AC)= 000000 000000 
----------

*033340  AOBJN	0,033342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033342 
FINAL
C(AC)= 000001 000001 
----------

*033341  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000001 000001 
----------

*033343  JUMPA	0,033344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033344 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 191
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0389

*033344  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 000001 000001 
FINAL
C(AC)= 000000 000000 
----------

*033345  AOBJP	0,033347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033347 
FINAL
C(AC)= 000001 000001 
----------

*033347  JUMPA	0,033350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001     E= 000000 033350 
----------

*033350  MOVE 	0,034460

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000001  C(E)= 400000 400000 
FINAL
C(AC)= 400000 400000 
----------

*033351  AOBJN	0,033353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 400000     E= 000000 033353 
FINAL
C(AC)= 400001 400001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 192
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0390

*033353  JUMPA	0,033354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400001 400001     E= 000000 033354 
----------

*033354  MOVE 	0,034460

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400001 400001  C(E)= 400000 400000 
FINAL
C(AC)= 400000 400000 
----------

*033355  AOBJP	0,033357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 400000     E= 000000 033357 
FINAL
C(AC)= 400001 400001 
----------

*033356  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400001 400001  C(E)= 400001 400001 
FINAL
C(AC)= 400001 400001 
----------

*033360  JUMPA	0,033361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400001 400001     E= 000000 033361 
----------

*033361  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400001 400001  C(E)= 400001 400001 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 193
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0391

*033362  AOBJN	0,033363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 033363 
FINAL
C(AC)= 000000 000000 
----------

*033363  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033365  JUMPA	0,033366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033366 
----------

*033366  JFCL	17,033367

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033367 
----------

*033367  MOVNI	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033370  JFCL	4,033372

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 033372 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 194
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0392

*033372  JUMPA	0,033373

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033373 
----------

*033373  JFCL	2,033375

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033375 
----------

*033375  JUMPA	0,033376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033376 
----------

*033376  JFCL	10,033400

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033400 
----------

*033377  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033401  JUMPA	0,033402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033402 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 195
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0393

*033402  JFCL	1,033404

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033404 
----------

*033403  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033405  JUMPA	0,033406

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033406 
----------

*033406  JFCL	17,033407

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033407 
----------

*033407  MOVN 	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000001 
----------

*033410  JFCL	17,033412

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033412 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 196
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0394

*033411  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033413  JUMPA	0,033414

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033414 
----------

*033414  JFCL	17,033415

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033415 
----------

*033415  MOVN 	0,034403

FLAGS - INT/FINAL   000000 500200 
INITIAL
C(AC)= 000000 000001  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033416  JFCL	10,033420

FLAGS - INT/FINAL   500200 500200 
INITIAL
C(AC)= 400000 000000 
----------

*033416  JFCL	0,000000

FLAGS - INT/FINAL   500200 500000 
INITIAL
    E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 197
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0395

*033416  JFCL	10,033420

FLAGS - INT/FINAL   500000 100000 
INITIAL
    E= 000000 033420 
----------

*033420  JUMPA	0,033421

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 400000 000000     E= 000000 033421 
----------

*033421  JFCL	2,033423

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033423 
----------

*033423  JUMPA	0,033424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033424 
----------

*033424  JFCL	4,033426

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033426 
----------

*033425  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 198
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0396

*033427  JUMPA	0,033430

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033430 
----------

*033430  JFCL	1,033432

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033432 
----------

*033431  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033433  JUMPA	0,033434

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033434 
----------

*033434  JFCL	17,033435

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033435 
----------

*033435  MOVM 	0,034403

FLAGS - INT/FINAL   000000 500200 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 199
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0397

*033436  JFCL	10,033440

FLAGS - INT/FINAL   500200 500200 
INITIAL
C(AC)= 400000 000000 
----------

*033436  JFCL	0,000000

FLAGS - INT/FINAL   500200 500000 
INITIAL
    E= 000000 000000 
----------

*033436  JFCL	10,033440

FLAGS - INT/FINAL   500000 100000 
INITIAL
    E= 000000 033440 
----------

*033440  JUMPA	0,033441

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 400000 000000     E= 000000 033441 
----------

*033441  JFCL	2,033443

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033443 
----------

*033443  JUMPA	0,033444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033444 
----------

*033444  JFCL	4,033446

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033446 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 200
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0398

*033445  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033447  JUMPA	0,033450

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033450 
----------

*033450  JFCL	1,033452

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033452 
----------

*033451  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033453  JUMPA	0,033454

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 033454 
----------

*033454  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 201
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0399

*033455  AOS 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001  C(E)= 000000 000001 
----------

*033456  CAIE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*033460  JUMPA	0,033461

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033461 
----------

*033461  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

*033462  AOS 	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033463  CAIE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 202
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0400

*033465  JUMPA	0,033466

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033466 
----------

*033466  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033467  SOS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033470  CAME	0,034404

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033472  JUMPA	0,033473

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033473 
----------

*033473  MOVEI	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 203
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0401

*033474  SOS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033475  CAIE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*033477  JUMPA	0,033500

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033500 
----------

*033500  JFCL	17,033501

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 033501 
----------

*033501  MOVEI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033502  SOS 	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 204
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0402

*033503  JFCL	4,033505

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 033505 
----------

*033505  JUMPA	0,033506

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033506 
----------

*033506  JFCL	2,033510

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033510 
----------

*033510  JUMPA	0,033511

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033511 
----------

*033511  JFCL	10,033513

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033513 
----------

*033512  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 205
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0403

*033514  JUMPA	0,033515

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033515 
----------

*033515  JFCL	1,033517

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033517 
----------

*033516  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033520  JUMPA	0,033521

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033521 
----------

*033521  JFCL	17,033522

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033522 
----------

*033522  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 206
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0404

*033523  AOS 	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033524  JFCL	4,033526

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 033526 
----------

*033526  JUMPA	0,033527

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033527 
----------

*033527  JFCL	2,033531

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033531 
----------

*033531  JUMPA	0,033532

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033532 
----------

*033532  JFCL	10,033534

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033534 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 207
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0405

*033533  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033535  JUMPA	0,033536

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033536 
----------

*033536  JFCL	1,033540

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033540 
----------

*033537  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033541  JUMPA	0,033542

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033542 
----------

*033542  MOVSI	1,040000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 208
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0406

*033543  JFCL	17,033544

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033544 
----------

*033544  JRST	2,033545(1)

FLAGS - INT/FINAL   000000 040000 
INITIAL
    E= 000000 033545 
----------

*033545  JFCL	1,033546

FLAGS - INT/FINAL   040000 000000 
INITIAL
    E= 000000 033546 
----------

*033546  JFCL	1,033550

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033550 
----------

*033547  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033551  JUMPA	0,033552

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033552 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 209
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0407

*033552  MOVSI	1,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*033553  JFCL	17,033554

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033554 
----------

*033554  JRST	2,033555(1)

FLAGS - INT/FINAL   000000 000100 
INITIAL
    E= 000000 033555 
----------

*033555  JSP	0,033556

FLAGS - INT/FINAL   000100 000100 
INITIAL
C(AC)= 000000 000000     E= 000000 033556 
FINAL
C(AC)= 000100 033556 
----------

*033556  TLNN	0,000100

FLAGS - INT/FINAL   000100 000100 
INITIAL
C(AC)= 000100 033556     E= 000000 000100 
FINAL
C(AC)= 000100 033556 
----------

*033560  JUMPA	0,033561

FLAGS - INT/FINAL   000100 000100 
INITIAL
C(AC)= 000100 033556     E= 000000 033561 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 210
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0408

*033561  MOVSI	1,000100

FLAGS - INT/FINAL   000100 000100 
INITIAL
C(AC)= 000100 000000     E= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*033562  JFCL	17,033563

FLAGS - INT/FINAL   000100 000100 
INITIAL
    E= 000000 033563 
----------

*033563  JRST	2,033564(1)

FLAGS - INT/FINAL   000100 000100 
INITIAL
    E= 000000 033564 
----------

*033564  MOVSI	1,000000

FLAGS - INT/FINAL   000100 000100 
INITIAL
C(AC)= 000100 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033565  JFCL	17,033566

FLAGS - INT/FINAL   000100 000100 
INITIAL
    E= 000000 033566 
----------

*033566  JRST	2,033567(1)

FLAGS - INT/FINAL   000100 000000 
INITIAL
    E= 000000 033567 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 211
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0409

*033567  JSP	0,033570

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 033556     E= 000000 033570 
FINAL
C(AC)= 000000 033570 
----------

*033570  TLNE	0,000100

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033570     E= 000000 000100 
FINAL
C(AC)= 000000 033570 
----------

*033572  JUMPA	0,033573

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033570     E= 000000 033573 
----------

*033573  MOVSI	1,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

*033574  JFCL	17,033575

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033575 
----------

*033575  JRST	2,033576(1)

FLAGS - INT/FINAL   000000 000040 
INITIAL
    E= 000000 033576 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 212
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0410

*033576  JSP	0,033577

FLAGS - INT/FINAL   000040 000040 
INITIAL
C(AC)= 000000 033570     E= 000000 033577 
FINAL
C(AC)= 000040 033577 
----------

*033577  TLNN	0,000040

FLAGS - INT/FINAL   000040 000040 
INITIAL
C(AC)= 000040 033577     E= 000000 000040 
FINAL
C(AC)= 000040 033577 
----------

*033601  JUMPA	0,033602

FLAGS - INT/FINAL   000040 000040 
INITIAL
C(AC)= 000040 033577     E= 000000 033602 
----------

*033602  MOVSI	1,000040

FLAGS - INT/FINAL   000040 000040 
INITIAL
C(AC)= 000040 000000     E= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

*033603  JFCL	17,033604

FLAGS - INT/FINAL   000040 000040 
INITIAL
    E= 000000 033604 
----------

*033604  JRST	2,033605(1)

FLAGS - INT/FINAL   000040 000040 
INITIAL
    E= 000000 033605 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 213
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0411

*033605  MOVSI	1,000000

FLAGS - INT/FINAL   000040 000040 
INITIAL
C(AC)= 000040 000000     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033606  JFCL	17,033607

FLAGS - INT/FINAL   000040 000040 
INITIAL
    E= 000000 033607 
----------

*033607  JRST	2,033610(1)

FLAGS - INT/FINAL   000040 000000 
INITIAL
    E= 000000 033610 
----------

*033610  JSP	0,033611

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 033577     E= 000000 033611 
FINAL
C(AC)= 000000 033611 
----------

*033611  TLNE	0,000040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033611     E= 000000 000040 
FINAL
C(AC)= 000000 033611 
----------

*033613  JUMPA	0,033614

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033611     E= 000000 033614 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 214
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0412

*033614  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 033611  C(E)= 000000 033611 
FINAL
C(AC)= 777777 777777 
----------

*033615  JUMPL	0,033617

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 033617 
----------

*033617  JUMPA	0,033620

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 033620 
----------

*033620  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033621  JUMPL	0,033623

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033623 
----------

*033622  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 215
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0413

*033624  JUMPA	0,033625

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033625 
----------

*033625  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033626  JUMPE	0,033630

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033630 
----------

*033630  JUMPA	0,033631

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033631 
----------

*033631  MOVEI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033632  JUMPN	0,033634

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033634 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 216
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0414

*033634  JUMPA	0,033635

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033635 
----------

*033635  MOVEI	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033636  JUMPE	0,033640

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 033640 
----------

*033637  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033641  JUMPA	0,033642

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 033642 
----------

*033642  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 217
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0415

*033643  JUMPN	0,033645

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033645 
----------

*033644  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033646  JUMPA	0,033647

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033647 
----------

*033647  MOVEI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033650  JUMPG	0,033652

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033652 
----------

*033652  JUMPA	0,033653

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033653 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 218
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0416

*033653  MOVSI	0,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*033654  JUMPG	0,033656

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 033656 
----------

*033655  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*033657  JUMPA	0,033660

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000     E= 000000 033660 
----------

*033660  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 000000 
----------

*033661  AOJ 	0,033663

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033663 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 219
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0417

*033662  CAIE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*033664  JUMPA	0,033665

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 033665 
----------

*033665  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

*033666  AOJ 	0,033670

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033670 
FINAL
C(AC)= 000000 000000 
----------

*033667  CAIE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*033671  JUMPA	0,033672

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033672 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 220
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0418

*033672  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033673  SOJ 	0,033675

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033675 
FINAL
C(AC)= 777777 777777 
----------

*033674  CAME	0,034404

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033676  JUMPA	0,033677

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033677 
----------

*033677  SETO 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033700  SOJ 	0,033702

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033702 
FINAL
C(AC)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 221
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0419

*033701  CAME	0,034405

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*033703  JUMPA	0,033704

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 033704 
----------

*033704  MOVEI	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033705  SOJ 	0,033707

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 033707 
FINAL
C(AC)= 000000 000000 
----------

*033706  CAIE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*033710  JUMPA	0,033711

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033711 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 222
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0420

*033711  SETZ 	17,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777723  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033712  SOJ 	17,033712

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033712 
FINAL
C(AC)= 777777 777777 
----------

*033713  AOJ 	17,033713

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033713 
FINAL
C(AC)= 000000 000000 
----------

*033714  SOJ 	17,033714

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033714 
FINAL
C(AC)= 777777 777777 
----------

*033715  AOJ 	17,033715

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033715 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 223
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0421

*033716  SOJ 	17,033716

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033716 
FINAL
C(AC)= 777777 777777 
----------

*033717  AOJ 	17,033717

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033717 
FINAL
C(AC)= 000000 000000 
----------

*033720  SOJ 	17,033720

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033720 
FINAL
C(AC)= 777777 777777 
----------

*033721  AOJ 	17,033721

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033721 
FINAL
C(AC)= 000000 000000 
----------

*033722  SOJ 	17,033722

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033722 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 224
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0422

*033723  AOJ 	17,033723

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033723 
FINAL
C(AC)= 000000 000000 
----------

*033724  SOJ 	17,033724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033724 
FINAL
C(AC)= 777777 777777 
----------

*033725  AOJ 	17,033725

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033725 
FINAL
C(AC)= 000000 000000 
----------

*033726  SOJ 	17,033726

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033726 
FINAL
C(AC)= 777777 777777 
----------

*033727  AOJ 	17,033727

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033727 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 225
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0423

*033730  SOJ 	17,033730

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033730 
FINAL
C(AC)= 777777 777777 
----------

*033731  AOJ 	17,033731

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033731 
FINAL
C(AC)= 000000 000000 
----------

*033732  SOJ 	17,033732

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033732 
FINAL
C(AC)= 777777 777777 
----------

*033733  AOJ 	17,033733

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033733 
FINAL
C(AC)= 000000 000000 
----------

*033734  SOJ 	17,033734

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033734 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 226
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0424

*033735  AOJ 	17,033735

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033735 
FINAL
C(AC)= 000000 000000 
----------

*033736  SKIPE	0,000017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033740  JUMPA	0,033741

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033741 
----------

*033741  JFCL	17,033742

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 033742 
----------

*033742  MOVEI	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033743  SOJ 	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 227
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0425

*033744  JFCL	4,033746

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 033746 
----------

*033746  JUMPA	0,033747

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033747 
----------

*033747  JFCL	2,033751

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033751 
----------

*033751  JUMPA	0,033752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033752 
----------

*033752  JFCL	10,033754

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033754 
----------

*033753  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 228
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0426

*033755  JUMPA	0,033756

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033756 
----------

*033756  JFCL	1,033760

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033760 
----------

*033757  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033761  JUMPA	0,033762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033762 
----------

*033762  JFCL	17,033763

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033763 
----------

*033763  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 229
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0427

*033764  AOJ 	0,000000

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033765  JFCL	4,033767

FLAGS - INT/FINAL   300000 100000 
INITIAL
    E= 000000 033767 
----------

*033767  JUMPA	0,033770

FLAGS - INT/FINAL   100000 100000 
INITIAL
C(AC)= 000000 000000     E= 000000 033770 
----------

*033770  JFCL	2,033772

FLAGS - INT/FINAL   100000 000000 
INITIAL
    E= 000000 033772 
----------

*033772  JUMPA	0,033773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033773 
----------

*033773  JFCL	10,033775

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 033775 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 230
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0428

*033774  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033776  JUMPA	0,033777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 033777 
----------

*033777  JFCL	1,034001

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034001 
----------

*034000  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034002  JUMPA	0,034003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034003 
----------

*034003  SETOB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 231
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0429

*034004  ADDM	0,000001

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 777777 777776 
----------

*034005  CAME	0,034404

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034007  JUMPA	0,034010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034010 
----------

*034010  MOVEI	0,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034011  HRREM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777776 
FINAL
 C(E)= 777777 777777 
----------

*034012  CAIE	0,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 232
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0430

*034014  JUMPA	0,034015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 034015 
----------

*034015  MOVEI	0,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034016  MOVSM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
 C(E)= 777777 000000 
----------

*034017  CAIE	0,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*034021  JUMPA	0,034022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 034022 
----------

*034022  SETOB	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 233
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0431

*034023  XORM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

*034024  CAME	0,034404

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034026  JUMPA	0,034027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034027 
----------

*034027  SETOB	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034030  ADDB	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*034031  CAME	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 234
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0432

*034033  JUMPA	0,034034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 034034 
----------

*034034  CAME	0,034405

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

*034036  JUMPA	0,034037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776     E= 000000 034037 
----------

*034037  SETOB	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034040  ADDM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 777777 777776 
----------

*034041  CAME	1,034405

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777776  C(E)= 777777 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 235
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0433

*034043  JUMPA	0,034044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034044 
----------

*034044  SETZM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777776 
FINAL
 C(E)= 000000 000000 
----------

*034045  HLLOS	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 000000 777777 
----------

*034046  CAIE	1,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*034050  JUMPA	0,034051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034051 
----------

*034051  MOVSI	1,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 236
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0434

*034052  MOVSS	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 777777  C(E)= 000000 777777 
----------

*034053  CAIE	1,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*034055  JUMPA	0,034056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034056 
----------

*034056  SETOB	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034057  AOS 	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*034060  CAIE	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 237
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0435

*034062  JUMPA	0,034063

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034063 
----------

*034063  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*034064  SETO 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034065  HRLM	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 000000 777777 
----------

*034066  CAIE	1,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*034070  JUMPA	0,034071

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034071 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 238
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0436

*034071  SETO 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034072  SETZ 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*034073  HRRS	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 000000 000000 
----------

*034074  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034076  JUMPA	0,034077

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034077 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 239
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0437

*034077  SETO 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034100  MOVSI	1,777777

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*034101  HRRZM	1,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
 C(E)= 000000 000000 
----------

*034102  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034104  JUMPA	0,034105

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 034105 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 240
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0438

*034105  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*034106  JFCL	17,034107

FLAGS - INT/FINAL   300000 000000 
INITIAL
    E= 000000 034107 
----------

*034107  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034111  JUMPA	0,034112

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034112 
----------

*034112  SETOB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034113  XORM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 241
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0439

*034114  CAIE	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*034116  JUMPA	0,034117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 034117 
----------

*034117  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034120  CAMN	0,034454

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034121  CAME	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034123  JUMPA	0,034124

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034124 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 242
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0440

*034124  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034125  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034126  SETAB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034127  CAMN	0,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034130  CAME	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034132  JUMPA	0,034133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 034133 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 243
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0441

*034133  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034134  XCT	0,034461

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034461 
FINAL
 C(E)= 201040 034136 
----------

*034134  MOVEI	1,034136

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034136 
FINAL
C(AC)= 000000 034136 
----------

*034135  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034137  JUMPA	0,034140

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034140 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 244
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0442

*034140  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 034136 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034141  XCT	0,034462

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034462 
FINAL
 C(E)= 201040 000001 
----------

*034141  MOVEI	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034142  CAIE	1,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 000001 
----------

*034144  JUMPA	0,034145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034145 
----------

*034145  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 245
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0443

*034146  XCT	0,034467

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034467 
FINAL
 C(E)= 256000 034466 
----------

*034146  XCT	0,034466

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034466 
FINAL
 C(E)= 256000 034465 
----------

*034146  XCT	0,034465

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034465 
FINAL
 C(E)= 256000 034464 
----------

*034146  XCT	0,034464

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034464 
FINAL
 C(E)= 256000 034463 
----------

*034146  XCT	0,034463

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034463 
FINAL
 C(E)= 201040 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 246
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0444

*034146  MOVEI	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*034147  CAIE	1,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 777777     E= 000000 777777 
----------

*034151  JUMPA	0,034152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034152 
----------

*034152  SETZB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*034153  XCT	0,034470

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034470 
FINAL
 C(E)= 200040 034404 
----------

*034153  MOVE 	1,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 247
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0445

*034154  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034156  JUMPA	0,034157

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034157 
----------

*034157  XCT	0,034471

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034471 
FINAL
 C(E)= 334000 000000 
----------

*034157  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034161  JUMPA	0,034162

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034162 
----------

*034162  SETOM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 248
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0446

*034163  MOVEI	7,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000007     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*034164  SETZM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000003 
FINAL
 C(E)= 000000 000000 
----------

*034165  MOVE 	1,@000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034166  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034170  JUMPA	0,034171

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034171 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 249
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0447

*034171  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*034172  MOVEI	7,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*034173  SETOM	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*034174  MOVE 	1,@000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034175  CAME	1,034404

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 250
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0448

*034177  JUMPA	0,034200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034200 
----------

*034200  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

*034201  MOVEI	7,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 000003 
FINAL
C(AC)= 000000 000003 
----------

*034202  MOVE 	3,034472

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*034203  MOVE 	1,@000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 251
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0449

*034204  CAME	1,034472

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*034206  JUMPA	0,034207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034207 
----------

*034207  JRST	0,034211

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034211 
----------

*034211  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
 C(E)= 000000 000000 
----------

*034212  MOVEI	7,034210

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000003     E= 000000 034210 
FINAL
C(AC)= 000000 034210 
----------

*034213  MOVE 	1,@000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 252
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0450

*034214  CAME	1,034210

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*034216  JUMPA	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034217 
----------

*034217  JRST	0,034222

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034222 
----------

*034222  SETZM	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
 C(E)= 000000 000000 
----------

*034223  MOVE 	1,@034220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 202020 202020 
FINAL
C(AC)= 202020 202020 
----------

*034224  CAME	1,034221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 202020 202020  C(E)= 202020 202020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 253
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0451

*034226  JUMPA	0,034227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034227 
----------

*034227  JRST	0,034232

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034232 
----------

*034232  MOVE 	1,034231

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 202020 202020  C(E)= 272727 272727 
FINAL
C(AC)= 272727 272727 
----------

*034233  CAME	1,@034230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 272727 272727  C(E)= 272727 272727 
----------

*034235  JUMPA	0,034236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034236 
----------

*034236  JRST	0,034240

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034240 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 254
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0452

*034240  MOVEI	7,034237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 034210     E= 000000 034237 
FINAL
C(AC)= 000000 034237 
----------

*034241  MOVE 	1,034237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 272727 272727  C(E)= 252525 252525 
FINAL
C(AC)= 252525 252525 
----------

*034242  CAME	1,@000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525  C(E)= 252525 252525 
----------

*034244  JUMPA	0,034245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034245 
----------

*034245  MOVEI	1,777774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 252525     E= 000000 777774 
FINAL
C(AC)= 000000 777774 
----------

*034246  MOVEI	3,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 255
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0453

*034247  MOVEI	4,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*034250  MOVEI	5,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000005     E= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034251  MOVEI	6,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000006     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*034252  MOVEI	7,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 034237     E= 000000 000007 
FINAL
C(AC)= 000000 000007 
----------

*034253  MOVEI	10,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 256
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0454

*034254  MOVEI	11,777772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000011     E= 000000 777772 
FINAL
C(AC)= 000000 777772 
----------

*034255  MOVEI	12,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000012     E= 000000 000005 
FINAL
C(AC)= 000000 000005 
----------

*034256  MOVEI	13,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000013     E= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*034257  JRST	0,034310

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 034310 
----------

*034310  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 257
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0455

*034311  MOVE 	2,@034260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 217217 217217 
FINAL
C(AC)= 217217 217217 
----------

*034312  CAME	2,034265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 217217 217217  C(E)= 217217 217217 
----------

*034314  JUMPA	0,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034315 
----------

*034315  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 217217 217217 
FINAL
 C(E)= 000000 000000 
----------

*034316  MOVE 	2,@034261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 220220 220220 
FINAL
C(AC)= 220220 220220 
----------

*034317  CAME	2,034262

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 220220 220220  C(E)= 220220 220220 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 258
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0456

*034321  JUMPA	0,034322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034322 
----------

*034322  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 220220 220220 
FINAL
 C(E)= 777777 777777 
----------

*034323  MOVE 	2,034267(1)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000020 034270 
FINAL
C(AC)= 000020 034270 
----------

*034324  CAME	2,034263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 034270  C(E)= 000020 034270 
----------

*034326  JUMPA	0,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034327 
----------

*034327  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 034270 
FINAL
 C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 259
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0457

*034330  MOVE 	2,034271(6)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000007 034265 
FINAL
C(AC)= 000007 034265 
----------

*034331  CAME	2,034276

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000007 034265  C(E)= 000007 034265 
----------

*034333  JUMPA	0,034334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034334 
----------

*034334  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000007 034265 
FINAL
 C(E)= 777777 777777 
----------

*034335  MOVE 	2,@034301(10)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 223223 223223 
FINAL
C(AC)= 223223 223223 
----------

*034336  CAME	2,034272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 223223 223223  C(E)= 223223 223223 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 260
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0458

*034340  JUMPA	0,034341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034341 
----------

*034341  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 223223 223223 
FINAL
 C(E)= 000000 000000 
----------

*034342  MOVE 	2,@034301(11)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 224224 224224 
FINAL
C(AC)= 224224 224224 
----------

*034343  CAME	2,034303

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 224224 224224  C(E)= 224224 224224 
----------

*034345  JUMPA	0,034346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034346 
----------

*034346  SETOM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 224224 224224 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 261
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0459

*034347  MOVE 	2,@034275(13)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 225225 225225 
FINAL
C(AC)= 225225 225225 
----------

*034350  CAME	2,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 225225 225225  C(E)= 225225 225225 
----------

*034352  JUMPA	0,034353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034353 
----------

*034353  SETZM	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 225225 225225 
FINAL
 C(E)= 000000 000000 
----------

*034354  MOVE 	2,@034301(12)

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 226226 226226 
FINAL
C(AC)= 226226 226226 
----------

*034355  CAME	2,034304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 226226 226226  C(E)= 226226 226226 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 262
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0460

*034357  JUMPA	0,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 034360 
----------

*034360  SETZM	0,034474

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*034361  JRST	0,030057

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 263
DSKAD	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0461

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030616  JRST	0,030624

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 431110 
----------

