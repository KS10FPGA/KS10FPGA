;DSKAF







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E307A-DD

	DIAGNOSTIC CODE:	DSKAF

	PRODUCT NAME:	 	DSKAFA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (6)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAF.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAF.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE SIXTH IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  THE DIAGNOSTIC TESTS THE BOOLE, HWT AND
	TEST INSTRUCTIONS.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
	PREVIOUS PROCESSOR DIAGNOSTICS
							MAINDEC-10-DSKAF.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAF.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAF                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAF

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (6)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
DSKAFT	MAC	28-Mar-78 14:15		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAF
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
DSKAFT	MAC	28-Mar-78 14:15		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
DSKAFT	MAC	28-Mar-78 14:15		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414600		PAREA3=SIXBIT/DSKAF/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414600		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
DSKAF1	MAC	28-Mar-78 14:15		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) [DSKAF]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 066 051 040 
   798	030656	133 104 123 113 101 
   799	030657	106 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (6)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 2
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0029

   807					SUBTTL	TEST OF MSCL BOOLEAN INSTRUCTIONS
   808
   809					;**********
   810
   811					;THIS TEST VERIFIES THAT SETZI CLEARS THE AC AND DOES NOT AFFECT E.
   812					;FIRST, AC AND E ARE PRELOADED WITH -1,,-1, THEN, SETZI IS EXECUTED.
   813					;AC IS THEN CHECKED FOR 0 AND E IS CHECKED FOR -1,,-1
   814
   815	030661	474 01 0 00 000000 	C56100:	SETO	1,		;PRELOAD AC WITH -1,,-1
   816	030662	474 02 0 00 000000 		SETO	2,		;PRELOAD E WITH -1,,-1
   817	030663	401 01 0 00 000002 		SETZI	1,2		;*SETZI SHOULD CLEAR THE AC
   818	030664	332 00 0 00 000001 		SKIPE	1		;PASS IF C(AC)=0
   819						STOP^
   820	030665	254 04 0 00 030666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   821	030666	324 00 0 00 030667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   822									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   823									;IN THE SUBTEST) TO LOOP ON ERROR^
   824	030667	312 02 0 00 034217 		CAME	2,[-1]		;PASS IF C(E)=-1,,-1
   825						STOP^
   826	030670	254 04 0 00 030671 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   827	030671	324 00 0 00 030672 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   828									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   829									;IN THE SUBTEST) TO LOOP ON ERROR^
   830
   831					;**********
   832
   833					;THIS TEST VERIFIES THAT SETZM CLEARS C(E) AND DOES NOT AFFECT C(AC)
   834					;FIRST, AC AND E ARE PRELOADED WITH -1,,-1; THEN SETZM IS EXECUTED.
   835					;AC IS THEN CHECKED FOR -1,,-1 AND E IS CHECKED FOR 0.
   836
   837	030672	474 01 0 00 000000 	C56200:	SETO	1,		;PRELOAD AC WITH -1,,-1
   838	030673	474 02 0 00 000000 		SETO	2,		;PRELOAD E WITH -1,,-1
   839	030674	402 01 0 00 000002 		SETZM	1,2		;*SETZM SHOULD CLEAR E
   840	030675	312 01 0 00 034217 		CAME	1,[-1]		;PASS IF C(AC)=-1,,-1
   841						STOP^
   842	030676	254 04 0 00 030677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   843	030677	324 00 0 00 030700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   844									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   845									;IN THE SUBTEST) TO LOOP ON ERROR^
   846	030700	332 00 0 00 000002 		SKIPE	2		;PASS IF C(E)=0
   847						STOP^
   848	030701	254 04 0 00 030702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   849	030702	324 00 0 00 030703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   850									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   851									;IN THE SUBTEST) TO LOOP ON ERROR^
   852
   853					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 3
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0030

   854					;THIS TEST VERIFIES THAT SETOI PLACES ALL ONES INTO THE AC.
   855					;FIRST, THE AC AND E ARE CLEARED; THEN, SETOI IS EXECUTED.
   856					;AC AND E ARE CHECKED FOR -1,,-1 AND 0 RESPECTIVELY
   857
   858	030703	403 01 0 00 000002 	C56300:	SETZB	1,2		;CLEAR AC,E
   859	030704	475 01 0 00 000002 		SETOI	1,2		;*SETOI SHOULD PLACE -1,,-1 INTO THE AC
   860	030705	312 01 0 00 034217 		CAME	1,[-1]		;PASS IF C(AC)=-1,,-1
   861						STOP^
   862	030706	254 04 0 00 030707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   863	030707	324 00 0 00 030710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   864									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   865									;IN THE SUBTEST) TO LOOP ON ERROR^
   866	030710	332 00 0 00 000002 		SKIPE	2		;PASS IF C(E)=0
   867						STOP^
   868	030711	254 04 0 00 030712 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   869	030712	324 00 0 00 030713 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   870									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   871									;IN THE SUBTEST) TO LOOP ON ERROR^
   872
   873					;**********
   874
   875					;THIS TEST VERIFIES THAT SETOM PLACES ALL ONES INTO E
   876					;FIRST, THE AC AND E ARE CLEARED, THEN SETOM IS EXECUTED.
   877					;AC AND E ARE THEN CHECKED FOR 0 AND -1,,-1 RESPECTIVELY.
   878
   879	030713	403 01 0 00 000002 	C56400:	SETZB	1,2		;CLEAR AC,E
   880	030714	476 01 0 00 000002 		SETOM	1,2		;*SETOM SHOULD PLACE -1,,-1 INTO E
   881	030715	332 00 0 00 000001 		SKIPE	1		;PASS IF C(AC)=0
   882						STOP^
   883	030716	254 04 0 00 030717 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   884	030717	324 00 0 00 030720 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   885									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   886									;IN THE SUBTEST) TO LOOP ON ERROR^
   887	030720	312 02 0 00 034217 		CAME	2,[-1]		;PASS IF C(E)=-1,,-1
   888						STOP^
   889	030721	254 04 0 00 030722 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   890	030722	324 00 0 00 030723 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   891									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   892									;IN THE SUBTEST) TO LOOP ON ERROR^
   893
   894					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 4
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0031

   895					;THIS TEST VERIFIES THAT SETOB PLACES ALL ONES INTO BOTH AC AND E.
   896					;FIRST, BOTH AC AND E ARE CLEARED; THEN, SETOB IS EXECUTED.
   897					;AC AND E ARE BOTH CHECKED FOR -1,,-1
   898
   899	030723	403 01 0 00 000002 	C56500:	SETZB	1,2		;CLEAR AC,E
   900	030724	477 01 0 00 000002 		SETOB	1,2		;*SETOB SHOULD PUT -1,,-1 INTO BOTH AC AND E
   901	030725	312 01 0 00 034217 		CAME	1,[-1]		;PASS IF C(AC)=-1,,-1
   902						STOP^
   903	030726	254 04 0 00 030727 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   904	030727	324 00 0 00 030730 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   906									;IN THE SUBTEST) TO LOOP ON ERROR^
   907	030730	312 02 0 00 034217 		CAME	2,[-1]		;PASS IF C(E)=-1,,-1
   908						STOP^
   909	030731	254 04 0 00 030732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   910	030732	324 00 0 00 030733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   911									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   912									;IN THE SUBTEST) TO LOOP ON ERROR^
   913
   914					;**********
   915
   916					;THIS TEST VERIFIES THAT ANDI PLACES THE LOGICAL AND FUNCTION
   917					;OF C(AC) AND 0,,E INTO THE AC.
   918					;IN THIS CASE, C(AC)=777000,,707070 AND E=0,,123123.
   919					;HENCE, THE RESULT IN THE AC SHOULD BE 0,,103103
   920
   921	030733	200 01 0 00 034220 	C56600:	MOVE	1,[777000,,707070]	;PRELOAD AC WITH 777000,,707070
   922	030734	405 01 0 00 123123 		ANDI	1,123123	;*ANDI SHOULD PLACE 0,,103103 INTO THE AC
   923	030735	302 01 0 00 103020 		CAIE	1,103020	;PASS IF C(AC)=103103
   924						STOP^
   925	030736	254 04 0 00 030737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   926	030737	324 00 0 00 030740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   927									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   928									;IN THE SUBTEST) TO LOOP ON ERROR^
   929
   930					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 5
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0032

   931					;THIS TEST VERIFIES THAT ANDM PLACES THE LOGICAL AND FUNCTION OF
   932					;C(AC) AND C(E) INTO E.
   933					;IN THIS CASE, C(AC)=777000,,000777 AND C(E)=123456,,123456.
   934					;HENCE, THE RESULTS IN AC AND E SHOULD BE 777000,,000777 AND
   935					;123000,,00456 RESPECTIVELY
   936
   937	030740	200 01 0 00 034221 	C56700:	MOVE	1,[777000,,777]	;PRELOAD E WITH 777000,,000777
   938	030741	200 02 0 00 034222 		MOVE	2,[123456,,123456]	;PRELOAD AC WITH 123456,,123456
   939	030742	406 02 0 00 000001 		ANDM	2,1		;*ANDM SHOULD PLACE 123000,,000456 INTO E
   940	030743	312 02 0 00 034222 		CAME	2,[123456,,123456]	;PASS IF C(AC) NOT MODIFIED
   941						STOP^
   942	030744	254 04 0 00 030745 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   943	030745	324 00 0 00 030746 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   944									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   945									;IN THE SUBTEST) TO LOOP ON ERROR^
   946	030746	312 01 0 00 034223 		CAME	1,[123000,,000456]	;PASS IF C(E)=123000,,000456
   947						STOP^
   948	030747	254 04 0 00 030750 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   949	030750	324 00 0 00 030751 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   950									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   951									;IN THE SUBTEST) TO LOOP ON ERROR^
   952
   953					;**********
   954
   955					;THIS TEST VERIFIES THAT ANDM PLACES THE LOGICAL AND FUNCTION OF
   956					;C(AC) AND C(E) INTO E.
   957					;IN THIS CASE, C(AC)=777000,,000777 AND C(E)=123456,,123456.
   958					;HENCE, THE RESULTS IN AC AND E SHOULD BE 777000,,000777 AND
   959					;123000,,00456 RESPECTIVELY
   960
   961	030751	200 01 0 00 034221 	C56701:	MOVE	1,[777000,,777]	;PRELOAD E WITH 777000,,000777
   962	030752	202 01 0 00 030765 		MOVEM	1,E56701
   963	030753	200 02 0 00 034222 		MOVE	2,[123456,,123456]	;PRELOAD AC WITH 123456,,123456
   964	030754	406 02 0 00 030765 		ANDM	2,E56701	;*ANDM SHOULD PLACE 123000,,000456 INTO E
   965	030755	312 02 0 00 034222 		CAME	2,[123456,,123456]	;PASS IF C(AC) NOT MODIFIED
   966						STOP^
   967	030756	254 04 0 00 030757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   968	030757	324 00 0 00 030760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   969									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   970									;IN THE SUBTEST) TO LOOP ON ERROR^
   971	030760	200 01 0 00 030765 		MOVE	1,E56701
   972	030761	312 01 0 00 034223 		CAME	1,[123000,,000456]	;PASS IF C(E)=123000,,000456
   973						STOP^
   974	030762	254 04 0 00 030763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   975	030763	324 00 0 00 030764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   976									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   977									;IN THE SUBTEST) TO LOOP ON ERROR^
   978
   979	030764	334 00 0 00 000000 		SKIPA				;GO TO NEXT TEST
   980	030765	000000	000000		E56701:	0				;TEST WORD MEMORY
   981
   982					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 6
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0033

   983					;THIS TEST VERIFIES THAT ANDCB PLACES THE LOGICAL AND FUNCTION OF 
   984					;C(AC) AND C(E) INTO BOTH AC AND E
   985					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=121212,,-1
   986					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 121212,,0,
   987
   988	030766	561 03 0 00 000000 	C57000:	HRROI	3,0		;PRELOAD AC WITH -1,,0
   989	030767	525 06 0 00 121212 		HRLOI	6,121212	;PRELOAD E WITH 121212,,-1
   990	030770	407 03 0 00 000006 		ANDB	3,6		;*ANDB SHOULD PLACE 121212,,0 INTO BOTH AC AND E
   991	030771	312 03 0 00 034224 		CAME	3,[121212,,0]	;PASS IF C(AC)=121212,,0
   992						STOP^
   993	030772	254 04 0 00 030773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   994	030773	324 00 0 00 030774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   995									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   996									;IN THE SUBTEST) TO LOOP ON ERROR^
   997	030774	312 06 0 00 034224 		CAME	6,[121212,,0]	;PASS IF C(E)=121212,,0
   998						STOP^
   999	030775	254 04 0 00 030776 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1000	030776	324 00 0 00 030777 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1002									;IN THE SUBTEST) TO LOOP ON ERROR^
  1003
  1004					;**********
  1005
  1006					;THIS TEST VERIFIES THAT ANDCB PLACES THE LOGICAL AND FUNCTION OF 
  1007					;C(AC) AND C(E) INTO BOTH AC AND E
  1008					;IN THIS CASE, C(AC)=-1,,0 AND C(E)=121212,,-1
  1009					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 121212,,0,
  1010
  1011	030777	561 03 0 00 000000 	C57001:	HRROI	3,0		;PRELOAD AC WITH -1,,0
  1012	031000	525 06 0 00 121212 		HRLOI	6,121212	;PRELOAD E WITH 121212,,-1
  1013	031001	202 06 0 00 031013 		MOVEM	6,E57001
  1014	031002	407 03 0 00 031013 		ANDB	3,E57001	;*ANDB SHOULD PLACE 121212,,0 INTO BOTH AC AND E
  1015	031003	312 03 0 00 034224 		CAME	3,[121212,,0]	;PASS IF C(AC)=121212,,0
  1016						STOP^
  1017	031004	254 04 0 00 031005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1018	031005	324 00 0 00 031006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1019									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1020									;IN THE SUBTEST) TO LOOP ON ERROR^
  1021	031006	200 06 0 00 031013 		MOVE	6,E57001
  1022	031007	312 06 0 00 034224 		CAME	6,[121212,,0]	;PASS IF C(E)=121212,,0
  1023						STOP^
  1024	031010	254 04 0 00 031011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1025	031011	324 00 0 00 031012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1026									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1027									;IN THE SUBTEST) TO LOOP ON ERROR^
  1028
  1029	031012	334 00 0 00 000000 		SKIPA			;GO TO NEXT TEST
  1030	031013	000000	000000		E57001:	0			;TEST WORD MEMORY
  1031
  1032					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 7
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0034

  1033					;THIS TEST VERIFIES THAT ANDCAI PLACES THE LOGICAL AND FUNCTION
  1034					;OF THE WORD 0,E AND THE COMPLEMENT OF C(AC) INTO THE AC
  1035					;IN THIS CASE, C(AC)=777,000,,707070 AND E=0,135246
  1036					;HENCE, THE RESULT IN THE AC SHOULD BE 0,,030206
  1037
  1038	031014	200 05 0 00 034220 	C57100:	MOVE	5,[777000,,707070]	;PRELOAD AC WITH 777000,,707070
  1039	031015	411 05 0 00 135246 		ANDCAI	5,135246	;*ANDCAI SHOULD PLACE 0,,30206 INTO THE AC
  1040	031016	302 05 0 00 030206 		CAIE	5,030206	;PASS IF C(AC)=030206
  1041						STOP^
  1042	031017	254 04 0 00 031020 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1043	031020	324 00 0 00 031021 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1045									;IN THE SUBTEST) TO LOOP ON ERROR^
  1046
  1047					;**********
  1048
  1049					;THIS TEST VERIFIES THAT ANDCAM PLACES THE LOGICAL AND FUNCTION OF
  1050					;C(E) AND THE COMPLEMENT OF C(AC) INTO E.
  1051					;IN THIS CASE, C(AC)=000767,,-1 AND C(E)=777350,,-2
  1052					;HENCE, THE RESULTS IN AC AND E SHOULD BE 000767,,-1 AND
  1053					;777010,,0 RESPECTIVELY.
  1054
  1055	031021	525 04 0 00 000767 	C57200:	HRLOI	4,767		;PRELOAD AC WITH 000767,,-1
  1056	031022	200 06 0 00 034225 		MOVE	6,[777350,,-2]	;PRELOAD E WITH 777350,,-2
  1057	031023	412 04 0 00 000006 		ANDCAM	4,6		;*ANDCAM SHOULD PLACE 777010,,0
  1058									;INTO E
  1059	031024	312 04 0 00 034226 		CAME	4,[767,,-1]	;PASS IF C(AC) IS UNCHANGED
  1060						STOP^
  1061	031025	254 04 0 00 031026 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1062	031026	324 00 0 00 031027 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1063									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1064									;IN THE SUBTEST) TO LOOP ON ERROR^
  1065	031027	312 06 0 00 034227 		CAME	6,[777010,,0]	;PASS IF C(E)=777010,,0
  1066						STOP^
  1067	031030	254 04 0 00 031031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1068	031031	324 00 0 00 031032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1069									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1070									;IN THE SUBTEST) TO LOOP ON ERROR^
  1071
  1072					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 8
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0035

  1073					;THIS TEST VERIFIES THAT ANDCAB PLACES THE LOGICAN AND FUNCTION OF
  1074					;C(E) AND THE COMPLEMENT OF C(AC) INTO BOTH AC AND E.
  1075					;IN THIS CASE, C(AC)=000777,,770077 AND C(E)=123456,246123
  1076					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 123000,,006100
  1077
  1078	031032	200 01 0 00 034230 	C57300:	MOVE	1,[000777,,770077]	;PRELOAD AC WITH 000777,770077
  1079	031033	200 02 0 00 034231 		MOVE	2,[123456,,246123]	;PRELOAD E WITH 123456,246123
  1080	031034	413 01 0 00 000002 		ANDCAB	1,2		;*ANDCAB SHOULD PLACE 123000,006100
  1081									;INTO BOTH AC AND E
  1082	031035	312 01 0 00 034232 		CAME	1,[123000,,006100]	;PASS IF C(AC)=123000,006100
  1083						STOP^
  1084	031036	254 04 0 00 031037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1085	031037	324 00 0 00 031040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1086									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1087									;IN THE SUBTEST) TO LOOP ON ERROR^
  1088	031040	312 02 0 00 034232 		CAME	2,[123000,,006100]	;PASS IF C(E)=123000,006100
  1089						STOP^
  1090	031041	254 04 0 00 031042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1091	031042	324 00 0 00 031043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1092									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1093									;IN THE SUBTEST) TO LOOP ON ERROR^
  1094
  1095					;**********
  1096
  1097					;THIS TEST VERIFIES THAT SETMI MOVES THE WORD 0,,E INTO THE AC
  1098					;IN THIS CASE, C(AC)=-1,,-1 AND E=0,,123456.  HENCE, THE RESULT
  1099					;IN THE AC SHOULD BE 0,,123456
  1100
  1101	031043	474 05 0 00 000000 	C57400:	SETO	5,		;PRELOAD AC WITH -1,,-1
  1102	031044	415 05 0 00 123456 		SETMI	5,123456	;*SETMI SHOULD PLACE 0,,123456 INTO THE AC
  1103	031045	302 05 0 00 123456 		CAIE	5,123456	;PASS IF C(AC)=0,123456
  1104						STOP^
  1105	031046	254 04 0 00 031047 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1106	031047	324 00 0 00 031050 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1107									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1108									;IN THE SUBTEST) TO LOOP ON ERROR^
  1109
  1110					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 9
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0036

  1111					;THIS TEST VERIFIES THAT SETMM IS A NO-OP.  HENCE, IT SHOULD
  1112					;NOT MODIFY AC OR E.
  1113					;IN THIS CASE, C(AC)=0 AND C(E)=-1,,-1; AND NEITHER SHOULD NOT BE CHANGED
  1114
  1115	031050	400 16 0 00 000000 	C57500:	SETZ	16,		;CLEAR C(AC)
  1116	031051	474 17 0 00 000000 		SETO	17,		;PRELOAD E WITH -1,,-1
  1117	031052	416 16 0 00 000017 		SETMM	16,17		;*SETMM IS A NO-OP
  1118	031053	332 00 0 00 000016 		SKIPE	16		;PASS IF C(AC) UNCHANGED
  1119						STOP^
  1120	031054	254 04 0 00 031055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1121	031055	324 00 0 00 031056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1122									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1123									;IN THE SUBTEST) TO LOOP ON ERROR^
  1124	031056	312 17 0 00 034217 		CAME	17,[-1]		;PASS IF C(E) UNCHANGED
  1125						STOP^
  1126	031057	254 04 0 00 031060 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1127	031060	324 00 0 00 031061 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1128									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1129									;IN THE SUBTEST) TO LOOP ON ERROR^
  1130
  1131					;**********
  1132
  1133					;THIS TEST VERIFIES THAT SETMB PLACES C(E) INTO THE AC
  1134					;IN THIS CASE, C(AC)=-1,,-1 AND C(E)=100,,-200  HENCE, THE RESULT
  1135					;IN BOTH AC AND E SHOULD BE 000100,,-200.
  1136
  1137	031061	474 00 0 00 000000 	C57600:	SETO	0,		;CLEAR AC
  1138	031062	200 01 0 00 034233 		MOVE	1,[100,,-200]	;PRELOAD E WITH 100,,-200
  1139	031063	417 00 0 00 000001 		SETMB	0,1		;*SETMB SHOULD PLACE 100,,-200 INTO THE AC
  1140	031064	312 00 0 00 034233 		CAME	0,[100,,-200]	;PASS IF C(AC)=100,,-200
  1141						STOP^
  1142	031065	254 04 0 00 031066 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1143	031066	324 00 0 00 031067 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1144									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1145									;IN THE SUBTEST) TO LOOP ON ERROR^
  1146	031067	312 01 0 00 034233 		CAME	1,[100,,-200]	;PASS IF C(E)=100,,-200
  1147						STOP^
  1148	031070	254 04 0 00 031071 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1149	031071	324 00 0 00 031072 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1150									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1151									;IN THE SUBTEST) TO LOOP ON ERROR^
  1152
  1153					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 10
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0037

  1154					;THIS TEST VERIFIES THAT ANDCMI PLACES THE LOGICAL AND FUNCTION
  1155					;OF C(AC) AND THE COMPLEMENT OF THE WORD 0,,E INTO THE AC.
  1156					;IN THIS CASE, C(AC)=123456,,246135 AND E=0,,717273.
  1157					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,040104.
  1158
  1159	031072	200 15 0 00 034234 	C57700:	MOVE	15,[123456,,246135]	;PRELOAD AC WITH 123456,,246135
  1160	031073	421 15 0 00 717273 		ANDCMI	15,717273	;*ANDCMI SHOULD PLACE 123456,,040104
  1161									;INTO THE AC
  1162	031074	312 15 0 00 034235 		CAME	15,[123456,,040104]	;PASS IF C(AC)=123456,,040104
  1163						STOP^
  1164	031075	254 04 0 00 031076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1165	031076	324 00 0 00 031077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1166									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1167									;IN THE SUBTEST) TO LOOP ON ERROR^
  1168
  1169					;**********
  1170
  1171					;THIS TEST VERIFIES THAT ANDCMM PLACES THE LOGICAL AND FUNCTION OF
  1172					;C(AC) AND THE COMPLEMENT OF C(E) INTO E.
  1173					;IN THIS CASE,C(AC)=12321,,456654 AND C(E)= 770077,,007770
  1174					;HENCE, THE RESULT IN E SHOULD BE 003300,,450004
  1175
  1176	031077	200 14 0 00 034236 	C60000:	MOVE	14,[123321,,456654]	;PRELOAD AC WITH 123321,,456654
  1177	031100	200 15 0 00 034237 		MOVE	15,[770077,,007770]	;PRELOAD E WITH 77007770
  1178	031101	422 14 0 00 000015 		ANDCMM	14,15			;*ANDCMM SHOULD PLACE 003300,,450004 INTO THE AC
  1179	031102	312 14 0 00 034236 		CAME	14,[123321,,456654]	;PASS IF C(AC) UNCHANGED
  1180						STOP^
  1181	031103	254 04 0 00 031104 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1182	031104	324 00 0 00 031105 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1183									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1184									;IN THE SUBTEST) TO LOOP ON ERROR^
  1185	031105	312 15 0 00 034240 		CAME	15,[3300,,450004]	;PASS IF C(E) = 003300,,450004
  1186						STOP^
  1187	031106	254 04 0 00 031107 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1188	031107	324 00 0 00 031110 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1189									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1190									;IN THE SUBTEST) TO LOOP ON ERROR^
  1191
  1192					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 11
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0038

  1193					;THIS TEST VERIFIES THAT ANDCMB PLACES THE LOGICAL AND FUNCTION OF
  1194					;C(AC) AND THE COMPLEMENT OF C(E) INTO BOTH AC AND E.
  1195					;IN THIS CASE, C(AC)123456,,663322 AND C(E) = 777000,,700770
  1196					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 000456,,063002
  1197
  1198	031110	200 13 0 00 034241 	C60100:	MOVE	13,[123456,,663322]	;PRELOAD AC WITH 123456,,663322
  1199	031111	200 14 0 00 034242 		MOVE	14,[777000,,700770]	;PRELOAD E WITH 777000,,700770
  1200	031112	423 13 0 00 000014 		ANDCMB	13,14			;*ANDCMB SHOULD PLACE 000456,,063002
  1201										;INTO BOTH AC AND E
  1202	031113	312 13 0 00 034243 		CAME	13,[456,,63002]		;PASS IF C(AC)=000456,,063002
  1203						STOP^
  1204	031114	254 04 0 00 031115 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1205	031115	324 00 0 00 031116 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1206									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1207									;IN THE SUBTEST) TO LOOP ON ERROR^
  1208	031116	312 14 0 00 034243 		CAME	14,[456,,63002]		;PASS IF C(E)=000456,,063002
  1209						STOP^
  1210	031117	254 04 0 00 031120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1211	031120	324 00 0 00 031121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1212									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1213									;IN THE SUBTEST) TO LOOP ON ERROR^
  1214
  1215					;**********
  1216
  1217
  1218					;THIS TEST VERIFIES THAT SETA IS A NO-OP. IT AFFECTS NEITHER
  1219					;AC OR E. IN THIS CASE, C(AC)=123456,,777776 AND C(E)=010203,,123450.
  1220					;SETA SHOULD NOT MODIFY C(AC) OR C(E)
  1221
  1222	031121	200 12 0 00 034244 	C60200:	MOVE	12,[123456,,777776]	;PRELOAD AC WITH 123456,,-2
  1223	031122	200 13 0 00 034245 		MOVE	13,[010203,,123450]	;PRELOAD E WITH 010203,,123450
  1224	031123	424 12 0 00 000013 		SETA	12,13			;*SETA IS A NO-OP
  1225	031124	312 12 0 00 034244 		CAME	12,[123456,,-2]		;PASS IF C(AC) UNCHANGED
  1226						STOP^
  1227	031125	254 04 0 00 031126 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1228	031126	324 00 0 00 031127 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1229									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1230									;IN THE SUBTEST) TO LOOP ON ERROR^
  1231	031127	312 13 0 00 034245 		CAME	13,[010203,,123450]	;PASS IF C(E) UNCHANGED
  1232						STOP^
  1233	031130	254 04 0 00 031131 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1234	031131	324 00 0 00 031132 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1235									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1236									;IN THE SUBTEST) TO LOOP ON ERROR^
  1237
  1238					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 12
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0039

  1239					;THIS TEST VERIFIES THAT SETAI IS A NO-OP. IT DOES NOT AFFECT THE AC.
  1240					;IN THIS CASE, C(AC)=123456,,777776 AND E=0,,123450
  1241					;SETA SHOULD NOT MODIFY C(AC)
  1242
  1243	031132	200 12 0 00 034244 	C60300:	MOVE 12,[123456,,777776]	;PRELOAD AC WITH 123456,,-2
  1244	031133	425 12 0 00 123450 		SETAI	12,123450		;*SETAI IS A NO-OP
  1245	031134	312 12 0 00 034244 		CAME	12,[123456,,-2]		;PASS IF C(AC) UNCHANGED
  1246						STOP^
  1247	031135	254 04 0 00 031136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1248	031136	324 00 0 00 031137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1249									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1250									;IN THE SUBTEST) TO LOOP ON ERROR^
  1251
  1252					;**********
  1253
  1254					;THIS TEST VERIFIES THAT SETAM PLACES C(AC) INTO E.
  1255					;IN THIS CASE, C(AC)=123456,,0 AND C(E)=-1,,-1.  HENCE, THE
  1256					;RESULT IN E SHOULD BE 123456,,0
  1257
  1258	031137	515 11 0 00 123456 	C60400:	HRLZI	11,123456		;PRELOAD AC WITH 123456,,0
  1259	031140	474 12 0 00 000000 		SETO	12,			;PRELOAD E WITH -1,,-1
  1260	031141	426 11 0 00 000012 		SETAM	11,12			;SETAM SHOULD PLACE 123456,,0 INTO E
  1261	031142	312 11 0 00 034246 		CAME	11,[123456,,0]		;PASS IF C(AC) UNCHANGED
  1262						STOP^
  1263	031143	254 04 0 00 031144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1264	031144	324 00 0 00 031145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1265									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1266									;IN THE SUBTEST) TO LOOP ON ERROR^
  1267	031145	312 12 0 00 034246 		CAME	12,[123456,,0]		;PASS IF C(E)=123456,,0
  1268						STOP^
  1269	031146	254 04 0 00 031147 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1270	031147	324 00 0 00 031150 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1271									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1272									;IN THE SUBTEST) TO LOOP ON ERROR^
  1273
  1274					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 13
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0040

  1275					;THIS TEST VERIFIES THAT XORI PLACES THE LOGICAL EXCLUSIVE OR FUNCTION
  1276					;OF C(AC) AND THE WORD 0,,E INTO THE AC.
  1277					;IN THIS CASE, C(AC)=000777,,123456 AND E=0,,434431
  1278					;HENCE, THE RESULT IN THE AC SHOULD BE 000777,,517067.
  1279
  1280	031150	200 10 0 00 034247 	C60500:	MOVE	10,[777,,123456]	;PRELOAD AC WITH 000777,,123456
  1281	031151	431 10 0 00 434431 		XORI	10,434431		;*XORI SHOULD PLACE 000777,,517067 INTO THE AC
  1282	031152	312 10 0 00 034250 		CAME	10,[777,,517067]	;PASS IF C(AC)=000777,,517067
  1283						STOP^
  1284	031153	254 04 0 00 031154 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1285	031154	324 00 0 00 031155 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1286									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1287									;IN THE SUBTEST) TO LOOP ON ERROR^
  1288
  1289					;**********
  1290
  1291					;THIS TEST VERIFIES THAT XORB PLACES THE LOGICAL EXCLUSIVE OR FUNCTION
  1292					;OF C(AC) AND C(E) INTO BOTH AC AND E.
  1293					;IN THIS CASE, C(AC)=707077,,555666 AND C(E)=123456,,765432
  1294					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 624421,,230254
  1295
  1296	031155	200 07 0 00 034251 	C60600:	MOVE	7,[707077,,555666]	;PRELOAD AC WITH 707077,,555666
  1297	031156	200 10 0 00 034252 		MOVE	10,[123456,,765432]	;PRELOAD E WITH 123456,,765432
  1298	031157	433 07 0 00 000010 		XORB	7,10			;*XORB SHOULD PLACE 624421,,230254
  1299										;INTO BOTH AC AND E
  1300	031160	312 07 0 00 034253 		CAME	7,[624421,,230254]	;PASS IF C(AC)=624421,,230254
  1301						STOP^
  1302	031161	254 04 0 00 031162 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1303	031162	324 00 0 00 031163 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1305									;IN THE SUBTEST) TO LOOP ON ERROR^
  1306	031163	312 10 0 00 034253 		CAME	10,[624421,,230254]	;PASS IF C(E)=624421,,230254
  1307						STOP^
  1308	031164	254 04 0 00 031165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1309	031165	324 00 0 00 031166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1310									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1311									;IN THE SUBTEST) TO LOOP ON ERROR^
  1312
  1313					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 14
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0041

  1314					;THIS TEST VERIFIES THAT IORI PLACES THE INCLUSIVE OR FUNCTION
  1315					;OF C(AC) AND THE WORD 0,,E INTO THE AC.
  1316					;IN THIS CASE, C(AC)=707070,,123456 AND E=0,,765567
  1317					;HENCE, THE RESULT IN THE AC SHOULD BE 707070,,767577
  1318
  1319	031166	200 06 0 00 034254 	C60700:	MOVE	6,[707070,,123456]  ;PRELOAD AC WITH 707070,,123456
  1320	031167	435 06 0 00 765567 		IORI	6,765567	;*IORI SHOULD PLACE 707070,,767577 INTO THE AC
  1321	031170	312 06 0 00 034255 		CAME	6,[707070,,767577]  ;PASS IF C(AC)=707070,,767577
  1322						STOP^
  1323	031171	254 04 0 00 031172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1324	031172	324 00 0 00 031173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1325									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1326									;IN THE SUBTEST) TO LOOP ON ERROR^
  1327
  1328					;**********
  1329
  1330					;THIS TEST VERIFIES THAT IORM PLACES THE INCLUSIVE OR FUNCTION
  1331					;OF C(AC) AND C(E) INTO E.
  1332					;IN THIS CASE, C(AC)=123456,,777666 AND C(E)=777001,,123470
  1333					;HENCE, THE RESULT IN E SHOULD BE 777457,,777676
  1334
  1335	031173	200 05 0 00 034256 	C61000:	MOVE	5,[123456,,777666]  ;PRELOAD AC WITH 123456,777666
  1336	031174	200 06 0 00 034257 		MOVE	6,[777001,,123470]  ;PRELOAD E WITH 777001,,123470
  1337	031175	436 05 0 00 000006 		IORM	5,6		;*IORM SHOULD PLACE
  1338									;777457,777676 INTO E
  1339	031176	312 05 0 00 034256 		CAME	5,[123456,,777666]  ;PASS IF C(AC) UNMODIFIED
  1340						STOP^
  1341	031177	254 04 0 00 031200 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1342	031200	324 00 0 00 031201 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1343									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1344									;IN THE SUBTEST) TO LOOP ON ERROR^
  1345	031201	312 06 0 00 034260 		CAME	6,[777457,,777676] ;PASS IF C(E)=777457,777676
  1346						STOP^
  1347	031202	254 04 0 00 031203 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1348	031203	324 00 0 00 031204 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1349									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1350									;IN THE SUBTEST) TO LOOP ON ERROR^
  1351
  1352					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 15
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0042

  1353					;THIS TEST VERIFIES THAT IORB PLACES THE INCLUSIVE OR FUNCTION
  1354					;OF C(AC) AND C(E) INTO E.
  1355					;IN THIS CASE, C(AC)=123456,,777666 AND C(E)=777001,,123470
  1356					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 777457,,777676
  1357
  1358	031204	200 05 0 00 034256 	C61100:	MOVE	5,[123456,,777666]  ;PRELOAD AC WITH 123456,777666
  1359	031205	200 06 0 00 034257 		MOVE	6,[777001,,123470]  ;PRELOAD E WITH 777001,,123470
  1360	031206	437 05 0 00 000006 		IORB	5,6		;*IORB SHOULD PLACE
  1361									;777457,,777676 INTO
  1362	031207	312 05 0 00 034260 		CAME	5,[777457,,777676]  ;PASS IF C(AC)=777457,,777676
  1363						STOP^
  1364	031210	254 04 0 00 031211 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1365	031211	324 00 0 00 031212 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1366									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1367									;IN THE SUBTEST) TO LOOP ON ERROR^
  1368	031212	312 06 0 00 034260 		CAME	6,[777457,,777676]  ;PASS IF C(E)=777457,,777676
  1369						STOP^
  1370	031213	254 04 0 00 031214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1371	031214	324 00 0 00 031215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1372									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1373									;IN THE SUBTEST) TO LOOP ON ERROR^
  1374
  1375					;**********
  1376
  1377					;THIS TEST VERIFIES THAT ANDCBI PLACES THE LOGICAL AND FUNCTION
  1378					;OF THE COMPLEMENTS OF BOTH C(AC) AND THE WORD 0,,E INTO THE AC
  1379					;IN THIS CASE, C(AC)=777000,,123456 AND E=0,,706050.
  1380					;HENCE, THE RESULT IN THE AC SHOULD BE 000777,,050321.
  1381
  1382	031215	200 04 0 00 034261 	C61200:	MOVE	4,[777000,,123456]  ;PRELOAD AC WITH 777000,,123456
  1383	031216	441 04 0 00 706050 		ANDCBI	4,706050	;*ANDCBI SHOULD PLACE 000777,,050321
  1384									;INTO THE AC
  1385	031217	312 04 0 00 034262 		CAME	4,[777,,50321]	;PASS IF C(AC)=000777,,050321
  1386						STOP^
  1387	031220	254 04 0 00 031221 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1388	031221	324 00 0 00 031222 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1389									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1390									;IN THE SUBTEST) TO LOOP ON ERROR^
  1391
  1392					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 16
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0043

  1393					;THIS TEST VERIFIES THAT ANDCBM PLACES THE LOGICAL AND FUNCTION
  1394					;OF THE COMPLEMENTS OF BOTH C(AC) AND C(E) INTO
  1395					;IN THE CASE, C(AC)=777007,,771100 AND C(E)=063202,,123477
  1396					;HENCE, THE RESULT IN E SHOULD BE 000570,,004200
  1397
  1398	031222	200 03 0 00 034263 	C61300:	MOVE	3,[777007,,771100]  ;PRELOAD AC WITH 777007,,771100
  1399	031223	200 04 0 00 034264 		MOVE	4,[63202,,123477]   ;PRELOAD E WITH 063202,,123477
  1400	031224	442 03 0 00 000004 		ANDCBM	3,4		;*ANDCBM SHOULD PLACE
  1401									;000570,,004200 INTO E.
  1402	031225	312 03 0 00 034263 		CAME	3,[777007,,771100] ;PASS IF C(AC) IS UNCHANGED
  1403						STOP^
  1404	031226	254 04 0 00 031227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1405	031227	324 00 0 00 031230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1406									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1407									;IN THE SUBTEST) TO LOOP ON ERROR^
  1408	031230	312 04 0 00 034265 		CAME	4,[570,,4200]	;PASS IF C(E)=000570,,004200
  1409						STOP^
  1410	031231	254 04 0 00 031232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1411	031232	324 00 0 00 031233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1412									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1413									;IN THE SUBTEST) TO LOOP ON ERROR^
  1414
  1415					;**********
  1416
  1417					;THIS TEST VERIFIES THAT ANDCBB PLACES THE LOGICAL AND FUNCTION
  1418					;OF THE COMPLEMENTS OF BOTH C(AC) AND C(E) INTO BOTH AC AND E
  1419					;IN THIS CASE, C(AC)=777007,,771100 AND C(E)=063202,,123477
  1420					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 000570,,004200
  1421
  1422	031233	200 03 0 00 034263 	C61400:	MOVE	3,[777007,,771100]  ;PRELOAD WITH 777007,,771100
  1423	031234	200 04 0 00 034264 		MOVE	4,[63202,,123477]   ;PRELOAD E WITH 063202,,123477
  1424	031235	443 03 0 00 000004 		ANDCBB	3,4		;*ANDCBB SHOULD PLACE
  1425									;000570,,004200 INTO BOTH AC AND E
  1426	031236	312 03 0 00 034265 		CAME	3,[570,,4200]	;PASS IF C(AC)=000570,,004200
  1427						STOP^
  1428	031237	254 04 0 00 031240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1429	031240	324 00 0 00 031241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1430									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1431									;IN THE SUBTEST) TO LOOP ON ERROR^
  1432	031241	312 04 0 00 034265 		CAME	4,[570,,4200]	;PASS IF C(E)=000570,,004200
  1433						STOP^
  1434	031242	254 04 0 00 031243 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1435	031243	324 00 0 00 031244 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1436									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1437									;IN THE SUBTEST) TO LOOP ON ERROR^
  1438
  1439					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 17
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0044

  1440					;THIS TEST VERIFIES THAT EQVI PLACES THE LOGICAL EQUIVALENCE FUNCTION
  1441					;OF C(AC) AND THE WORD 0,,E INTO THE AC
  1442					;IN THIS CASE, C(AC)=707070,,123426 AND E=0,,123363
  1443					;HENCE, THE RESULT IN THE AC SHOULD BE 070707,,777032
  1444
  1445	031244	200 02 0 00 034266 	C61500:	MOVE	2,[707070,,123426]  ;PRELOAD AC WITH 707070,,123426
  1446	031245	445 02 0 00 123363 		EQVI	2,123363	;*EQVI SHOULD PLACE
  1447									;070707,,777032 INTO THE AC
  1448	031246	312 02 0 00 034267 		CAME	2,[70707,,777032]  ;PASS IF C(AC)=070707,,777032
  1449						STOP^
  1450	031247	254 04 0 00 031250 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1451	031250	324 00 0 00 031251 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1452									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1453									;IN THE SUBTEST) TO LOOP ON ERROR^
  1454
  1455					;**********
  1456
  1457					;THIS TEST VERIFIES THAT EQVM PLACES THE LOGICAL EQUIVALENCE FUNCTION
  1458					;OF C(AC) AND C(E) INTO E.
  1459					;IN THIS CASE, C(AC)= 123456,,123457 AND C(E) = 707633,,121212
  1460					;HENCE, THE RESULT IN E SHOULD BE 153512,,775132
  1461
  1462	031251	200 01 0 00 034270 	C61600:	MOVE	1,[123456,,123457] ;PRELOAD AC WITH 123456,,123457
  1463	031252	200 02 0 00 034271 		MOVE	2,[707633,,121212] ;PRELOAD AC WITH 707633,,121212
  1464	031253	446 01 0 00 000002 		EQVM	1,2		;*EQVM SHOULD PLACE 153512,,775132 INTO	E.
  1465	031254	312 01 0 00 034270 		CAME	1,[123456,,123457] ;PASS IF C(AC) UNCHANGED
  1466						STOP^
  1467	031255	254 04 0 00 031256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1468	031256	324 00 0 00 031257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1469									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1470									;IN THE SUBTEST) TO LOOP ON ERROR^
  1471	031257	312 02 0 00 034272 		CAME	2,[153512,,775132];PASS IF C(E) = 153512,,775132
  1472						STOP^
  1473	031260	254 04 0 00 031261 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1474	031261	324 00 0 00 031262 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1475									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1476									;IN THE SUBTEST) TO LOOP ON ERROR^
  1477
  1478					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 18
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0045

  1479					;THIS TEST VERIFIES THAT EQVB PLACES THE LOGICAL EQUIVALENCE FUNCTION
  1480					;OF C(AC)AND C(E) INTO BOTH AC AND  E.
  1481					;IN THIS CASE, C(AC) = 123456,,123457 AND C(E) = 707633,,121212
  1482					;HENSE, THE RSULT IN BOTH AC AND 	E SHOULD BE 153512,,775132
  1483
  1484	031262	200 01 0 00 034270 	C61700:	MOVE	1,[123456,,123457]	;PRELOAD AC WITH 123456,,12345
  1485	031263	200 02 0 00 034271 		MOVE	2,[707633,,121212]	;PRELOAD AC WITH 707633,,121212
  1486	031264	447 01 0 00 000002 		EQVB	1,2			;*EQVB SHOULD PLACE 153512,,775132
  1487										;INTO BOTHE AC AND E.
  1488	031265	312 01 0 00 034272 		CAME	1,[153512,,775132]	;PASS IC C(AC)=153512,,775132
  1489						STOP^
  1490	031266	254 04 0 00 031267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1491	031267	324 00 0 00 031270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1492									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1493									;IN THE SUBTEST) TO LOOP ON ERROR^
  1494	031270	312 02 0 00 034272 		CAME	2,[153512,,775132]	;PASS IF C(E)=153512,,775132
  1495						STOP^
  1496	031271	254 04 0 00 031272 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1497	031272	324 00 0 00 031273 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1498									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1499									;IN THE SUBTEST) TO LOOP ON ERROR^
  1500
  1501					;**********
  1502
  1503					;THIS TEST VERIFIES THAT SETCAI PLACES THE COMPLEMENT OF C(AC)
  1504					;INTO THE AC.
  1505					;IN THIS CASE, C(AC)=777000,,123456 AND E=0,,707070
  1506					;HENCE, THE RESULT IN THE AC SHOULD BE 000777,,654321
  1507
  1508	031273	200 00 0 00 034261 	C62000:	MOVE	0,[777000,,123456]	;PRELOAD AC WITH 777000,,123456
  1509	031274	451 00 0 00 707070 		SETCAI	0,707070		;*SETCAI SHOULD PLACE 000777,,654321
  1510										;INTO THE AC
  1511	031275	312 00 0 00 034273 		CAME	0,[777,,654321]	;PASS IF C(AC)=000777,,654321
  1512						STOP^
  1513	031276	254 04 0 00 031277 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1514	031277	324 00 0 00 031300 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1515									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1516									;IN THE SUBTEST) TO LOOP ON ERROR^
  1517
  1518					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 19
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0046

  1519					;THIS TEST VERIFIES THAT SETCAM PLACES THE COMPLEMENT OF C(AC)
  1520					;INTO E.
  1521					;IN THIS CASE, C(AC)=123456,,765432 AND C(E)=-1,,-1.
  1522					;HENCE, THE RESULT IN E SHOULD BE 654321,,012345
  1523
  1524	031300	200 17 0 00 034252 	C62100:	MOVE	17,[123456,,765432]	;PRELOAD AC WITH 123456,,765432
  1525	031301	474 00 0 00 000000 		SETO	0,			;PRELOAD E WITH -1,,-1
  1526	031302	452 17 0 00 000000 		SETCAM	17,0			;*SETCAM SHOULD PLACE
  1527										;654321,,012345 INTO E
  1528	031303	312 17 0 00 034252 		CAME	17,[123456,,765432]	;PASS IF C(AC) IS UNCHANGED
  1529						STOP^
  1530	031304	254 04 0 00 031305 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1531	031305	324 00 0 00 031306 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1532									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1533									;IN THE SUBTEST) TO LOOP ON ERROR^
  1534	031306	312 00 0 00 034274 		CAME	0,[654321,,12345]	;PASS IF C(E)=654321,,012345
  1535						STOP^
  1536	031307	254 04 0 00 031310 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1537	031310	324 00 0 00 031311 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1538									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1539									;IN THE SUBTEST) TO LOOP ON ERROR^
  1540
  1541					;**********
  1542
  1543					;THIS TEST VERIFIES THAT SETCAB PLACES THE COMPLEMENT OF C(AC)
  1544					;INTO BOTH AC AND E.
  1545					;IN THIS CASE, C(AC)=123456,,765432 AND C(E)=-1,,-1.
  1546					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 654321,,012345
  1547
  1548	031311	200 17 0 00 034252 	C62200:	MOVE	17,[123456,,765432]	;PRELOAD AC WITH 123456,,76543
  1549	031312	474 00 0 00 000000 		SETO	0,			;PRELOAD E WITH -1,,-1
  1550	031313	453 17 0 00 000000 		SETCAB	17,0			;*SETCAB SHOULD PLACE
  1551										;654321,,012345 INTO BOTH AC AND E
  1552	031314	312 17 0 00 034274 		CAME	17,[654321,,12345]	;PASS IF C(AC)=654321,,012345
  1553						STOP^
  1554	031315	254 04 0 00 031316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1555	031316	324 00 0 00 031317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1556									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1557									;IN THE SUBTEST) TO LOOP ON ERROR^
  1558	031317	312 00 0 00 034274 		CAME	0,[654321,,12345]	;PASS IF C(E)=654321,,012345
  1559						STOP^
  1560	031320	254 04 0 00 031321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1561	031321	324 00 0 00 031322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1562									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1563									;IN THE SUBTEST) TO LOOP ON ERROR^
  1564
  1565					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 20
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0047

  1566					;THIS TEST VERIFIES THAT ORCAI PLACES THE INCLUSIVE OR FUNCTION
  1567					;OF THE WORD 0,,E AND THE COMPLEMENT OF C(AC) INTO THE AC.
  1568					;IN THIS CASE, C(AC)=777000,,123477 AND E=0,,765401
  1569					;HENCE, THE RESULT IN THE AC SHOULD BE 000777,,775701
  1570
  1571	031322	200 16 0 00 034275 	C62300:	MOVE	16,[777000,,123477]	;PRELOAD AC WITH 777000,,123477
  1572	031323	455 16 0 00 765401 		ORCAI	16,765401		;*ORCAI SHOULD PLACE 000777,,767477
  1573										;INTO THE AC
  1574	031324	312 16 0 00 034276 		CAME	16,[777,,775701]	;PASS IF C(AC)=000777,,775701
  1575						STOP^
  1576	031325	254 04 0 00 031326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1577	031326	324 00 0 00 031327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1578									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1579									;IN THE SUBTEST) TO LOOP ON ERROR^
  1580
  1581					;**********
  1582
  1583					;THIS TEST VERIFIES THAT ORCAM PLACES THE INCLUSIVE OR FUNCTION
  1584					;OF C(E) AND THE COMPLEMENT OF C(AC) INTO
  1585					;IN THIS CASE, C(AC)=777000,,123477 AND C(E)=707070,,707072
  1586					;HENCE, THE RESULT IN E SHOULD BE 707777,,757372
  1587
  1588	031327	200 15 0 00 034275 	C62400:	MOVE	15,[777000,,123477]	;PRELOAD AC WITH 777000,,123477
  1589	031330	200 16 0 00 034277 		MOVE	16,[707070,,707072]	;PRELOAD E WITH 707070,,707072
  1590	031331	456 15 0 00 000016 		ORCAM	15,16			;*ORCAM SHOULD PLACE 707777,,757372
  1591										;INTO E
  1592	031332	312 15 0 00 034275 		CAME	15,[777000,,123477]	;PASS IF C(AC) IS UNCHANGED
  1593						STOP^
  1594	031333	254 04 0 00 031334 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1595	031334	324 00 0 00 031335 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1596									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1597									;IN THE SUBTEST) TO LOOP ON ERROR^
  1598	031335	312 16 0 00 034300 		CAME	16,[707777,,757372]	;PASS IF C(E)=707777,,757372
  1599						STOP^
  1600	031336	254 04 0 00 031337 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1601	031337	324 00 0 00 031340 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1602									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1603									;IN THE SUBTEST) TO LOOP ON ERROR^
  1604
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 21
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0048

  1605					;**********
  1606					;THIS TEST VERIFIES THAT ORCAB PLACES THE INCLUSIVE OR FUNCTION
  1607					;OF C(E) AND THE COMPLEMENT OF C(AC) INTO BOTH AC AND E.
  1608					;IN THIS CASE, C(AC)=777000,,123477 AND C(E)=707070,,707072
  1609					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 707777,,757372
  1610
  1611	031340	200 15 0 00 034275 	C62500:	MOVE	15,[777000,,123477]	;PRELOAD AC WITH 777000,,123477
  1612	031341	200 16 0 00 034277 		MOVE	16,[707070,,707072]	;PRELOAD E WITH 707070,,707072
  1613	031342	457 15 0 00 000016 		ORCAB	15,16			;*ORCAB SHOULD PLACE 707777,,757372
  1614										;INTO BOTHE AC AND E
  1615	031343	312 15 0 00 034300 		CAME	15,[707777,,757372]	;PASS IF C(AC)=707777,,757372
  1616						STOP^
  1617	031344	254 04 0 00 031345 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1618	031345	324 00 0 00 031346 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1619									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1620									;IN THE SUBTEST) TO LOOP ON ERROR^
  1621	031346	312 16 0 00 034300 		CAME	16,[707777,,757372]	;PASS IF C(E)=707777,,757372
  1622						STOP^
  1623	031347	254 04 0 00 031350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1624	031350	324 00 0 00 031351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1625									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1626									;IN THE SUBTEST) TO LOOP ON ERROR^
  1627
  1628					;**********
  1629
  1630					;THIS TEST VERIFIES THAT SETCMI PLACES THE COMPLEMENT OF THE
  1631					;WORD 0,,E INTO THE AC
  1632					;IN THIS CASE, C(AC)=777000,,123456 AND E=0,,707070
  1633					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,070707
  1634
  1635	031351	200 00 0 00 034261 	C62600:	MOVE	0,[777000,,123456]	;PRELOAD AC WITH 777000,,123456
  1636	031352	461 00 0 00 707070 		SETCMI	0,707070		;*SETCMI SHOULD PLACE -1,,070707
  1637										;INTO THE AC
  1638	031353	312 00 0 00 034301 		CAME	0,[-1,,070707]		;PASS IF C(AC)=-1,,070707
  1639						STOP^
  1640	031354	254 04 0 00 031355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1641	031355	324 00 0 00 031356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1642									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1643									;IN THE SUBTEST) TO LOOP ON ERROR^
  1644
  1645					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 22
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0049

  1646					;THIS TEST VERIFIES THAT SETCMM PLACES THE COMPLEMENT OF C(E)
  1647					;INTO E.
  1648					;IN THIS CASE, C(E)=123456,,765432 AND C(AC)=-1,,-1.
  1649					;HENCE, THE RESULT IN E SHOULD BE 654321,,012345
  1650
  1651	031356	200 17 0 00 034252 	C62700:	MOVE	17,[123456,,765432]	;PRELOAD E WITH 123456,,76543
  1652	031357	474 00 0 00 000000 		SETO	0,			;PRELOAD AC WITH -1,,-1
  1653	031360	462 00 0 00 000017 		SETCMM	0,17			;*SETCMM SHOULD PLACE
  1654										;654321,012345 INTO E
  1655	031361	312 00 0 00 034217 		CAME	0,[-1]			;PASS IF C(AC) UNCHANGED
  1656						STOP^
  1657	031362	254 04 0 00 031363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1658	031363	324 00 0 00 031364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1659									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1660									;IN THE SUBTEST) TO LOOP ON ERROR^
  1661	031364	312 17 0 00 034274 		CAME	17,[654321,,12345]	;PASS IF C(E)=654321,,012345
  1662						STOP^
  1663	031365	254 04 0 00 031366 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1664	031366	324 00 0 00 031367 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1665									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1666									;IN THE SUBTEST) TO LOOP ON ERROR^
  1667
  1668					;**********
  1669
  1670					;THIS TEST VERIFIES THAT SETCMB PLACES THE COMPLEMENT OF C(E)
  1671					;INTO BOTH AC AND E.
  1672					;IN THIS CASE, C(E)=123456,,765432 AND C(AC)=-1,,-1.
  1673					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 654321,,012345
  1674
  1675	031367	200 17 0 00 034252 	C63000:	MOVE	17,[123456,,765432]	;PRELOAD E WITH 123456,,76543
  1676	031370	474 00 0 00 000000 		SETO	0,			;PRELOAD AC WITH -1,,-1
  1677	031371	463 00 0 00 000017 		SETCMB	0,17			;*SETCMB SHOULD PLACE
  1678										;654321,,012345 INTO BOTH AC AND E
  1679	031372	312 00 0 00 034274 		CAME	0,[654321,,12345]	;PASS IF C(AC)=654321,,012345
  1680						STOP^
  1681	031373	254 04 0 00 031374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1682	031374	324 00 0 00 031375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1683									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1684									;IN THE SUBTEST) TO LOOP ON ERROR^
  1685	031375	312 17 0 00 034274 		CAME	17,[654321,,12345]	;PASS IF C(E)=654321,,012345
  1686						STOP^
  1687	031376	254 04 0 00 031377 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1688	031377	324 00 0 00 031400 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1689									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1690									;IN THE SUBTEST) TO LOOP ON ERROR^
  1691
  1692					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 23
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0050

  1693					;THIS TEST VERIFIES THAT ORCMI PLACES THE INCLUSIVE OR FUNCTION
  1694					;OF C(AC) AND THE COMPLEMENT OF THE WORD 0,,E INTO THE AC.
  1695					;IN THIS CASE, C(AC)=777000,,123477 AND E=0,,765401
  1696					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,133777
  1697
  1698	031400	200 16 0 00 034275 	C63100:	MOVE	16,[777000,,123477]	;PRELOAD AC WITH 777000,,123477
  1699	031401	465 16 0 00 765401 		ORCMI	16,765401		;*ORCMI SHOULD PLACE -1,,133777
  1700										;INTO THE AC
  1701	031402	312 16 0 00 034302 		CAME	16,[-1,,133777]		;PASS IF C(AC)=-1,,133777
  1702						STOP^
  1703	031403	254 04 0 00 031404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1704	031404	324 00 0 00 031405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1705									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1706									;IN THE SUBTEST) TO LOOP ON ERROR^
  1707
  1708					;**********
  1709
  1710					;THIS TEST VERIFIES THAT ORCMM PLACES THE INCLUSIVE OR FUNCTION
  1711					;OF C(AC) AND THE COMPLEMENT OC C(E) INTO
  1712					;IN THIS CASE, C(E)=777000,,123477 AND C (AC)=707070,,707072
  1713					;HENCE, THE RESULT IN E SHOULD BE 707777,,757372
  1714
  1715	031405	200 15 0 00 034275 	C63200:	MOVE	15,[777000,,123477]	;PRELOAD E WITH 777000,,123477
  1716	031406	200 16 0 00 034277 		MOVE	16,[707070,,707072]	;PRELOAD AC WITH 707070,,707072
  1717	031407	466 16 0 00 000015 		ORCMM	16,15			;*ORCMM SHOULD PLACE 707777,,757372
  1718										;INTO E
  1719	031410	312 16 0 00 034277 		CAME	16,[707070,,707072]	;PASS IF C(AC) IS UNCHANGED
  1720						STOP^
  1721	031411	254 04 0 00 031412 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1722	031412	324 00 0 00 031413 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1723									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1724									;IN THE SUBTEST) TO LOOP ON ERROR^
  1725	031413	312 15 0 00 034300 		CAME	15,[707777,,757372]	;PASS IF C(E)=707777,,757372
  1726						STOP^
  1727	031414	254 04 0 00 031415 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1728	031415	324 00 0 00 031416 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1729									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1730									;IN THE SUBTEST) TO LOOP ON ERROR^
  1731
  1732					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 24
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0051

  1733					;THIS TEST VERIFIES THAT ORCMB PLACES THE INCLUSIVE OR FUNCTION
  1734					;OF C(AC) AND THE COMPLEMENT OF C(E) INTO BOTH AC AND E.
  1735					;IN THIS CASE, C(E)=777000,,123477 AND C(AC)=707070,,707072
  1736					;HENCE, THE RESULT IN BOTH AC AND E SHOULD BE 707777,,757372
  1737
  1738	031416	200 15 0 00 034275 	C63300:	MOVE	15,[777000,,123477]  ;PRELOAD E WITH 777000,,123477
  1739	031417	200 16 0 00 034277 		MOVE	16,[707070,,707072]  ;PRELOAD AC WITH 707070,,707072
  1740	031420	467 16 0 00 000015 		ORCMB	16,15		;*ORCMB SHOULD PLACE 707777,,757372
  1741									;INTO BOTH AC AND E
  1742	031421	312 16 0 00 034300 		CAME	16,[707777,,757372]  ;PASS IF C(AC)=707777,,757372
  1743						STOP^
  1744	031422	254 04 0 00 031423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1745	031423	324 00 0 00 031424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1746									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1747									;IN THE SUBTEST) TO LOOP ON ERROR^
  1748	031424	312 15 0 00 034300 		CAME	15,[707777,,757372]  ;PASS OF C(E)=707777,,757372
  1749						STOP^
  1750	031425	254 04 0 00 031426 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1751	031426	324 00 0 00 031427 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1752									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1753									;IN THE SUBTEST) TO LOOP ON ERROR^
  1754
  1755					;**********
  1756
  1757					;THIS TEST VERIFIES THAT ORCBI PLACES THE LOGICAL INCLUSIVE OR
  1758					;FUNCTION OF THE COMPLEMENTS OF BOTH C(AC) AND THE WORD 0,,E INTO THE AC.
  1759					;IN THIS CASE, C(AC)=707070,,070706 AND E=0,,770011.
  1760					;HENCE, THE RESULT IN THE AC SHOULD BE -1,,707777
  1761
  1762	031427	200 15 0 00 034303 	C63400:	MOVE	15,[707070,,070706]  ;PRELOAD AC WITH 707070,,070706
  1763	031430	471 15 0 00 770011 		ORCBI	15,770011	;*ORCBI SHOULD PLACE -1,,707777 INTO THE AC
  1764	031431	312 15 0 00 034304 		CAME	15,[-1,,707777]	;PASS IF C(AC)=-1,707777
  1765						STOP^
  1766	031432	254 04 0 00 031433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1767	031433	324 00 0 00 031434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1768									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1769									;IN THE SUBTEST) TO LOOP ON ERROR^
  1770
  1771					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 25
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL BOOLEAN INSTRUCTIONS                                                  SEQ 0052

  1772					;THIS TEST VERIFIES THAT ORCBM PLACES THE LOGICAL INCLUSIVE OR
  1773					;FUNCTION OF THE COMPLEMENTS OF BOTH C(AC) AND C(E) INTO
  1774					;IN THIS CASE, C(AC)=123456,,770077 AND C(E)=777001,,123324
  1775					;HENCE, THE RESULT IN E SHOULD BE 654777,,657753
  1776
  1777	031434	200 14 0 00 034305 	C63500:	MOVE	14,[123456,,770077]  ;PRELOAD AC WITH 123456,,770077
  1778	031435	200 15 0 00 034306 		MOVE	15,[777001,,123324]  ;PRELOAD E WITH 777001,,123324
  1779	031436	472 14 0 00 000015 		ORCBM	14,15		;*ORCBM SHOULD PLACE 654777,,657753
  1780									;INTO E
  1781	031437	312 14 0 00 034305 		CAME	14,[123456,,770077]  ;PASS IF C(AC) IS UNCHANGED
  1782						STOP^
  1783	031440	254 04 0 00 031441 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1784	031441	324 00 0 00 031442 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1785									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1786									;IN THE SUBTEST) TO LOOP ON ERROR^
  1787	031442	312 15 0 00 034307 		CAME	15,[654777,,657753]   ;PASS IF C(E)=654777,,657753
  1788						STOP^
  1789	031443	254 04 0 00 031444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1790	031444	324 00 0 00 031445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1791									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1792									;IN THE SUBTEST) TO LOOP ON ERROR^
  1793
  1794					;**********
  1795
  1796					;THIS TEST VERIFIES THAT ORCBB PLACES THE LOGICAL INCLUSIVE OR
  1797					;FUNCTIONOF THE COMPLEMENTS OF BOTH C(AC) AND C(E) INTO BOTH AC AND E
  1798					;IN THIS CASE, C(AC)=123456,,770077 AND C(E)=777001,,657753
  1799
  1800	031445	200 14 0 00 034305 	C63600:	MOVE	14,[123456,,770077]  ;PRELOAD AC WITH 123456,,770077
  1801	031446	200 15 0 00 034306 		MOVE	15,[777001,,123324]  ;PRELOAD E WITH 777001,,123324
  1802	031447	473 14 0 00 000015 		ORCBB	14,15		;*ORCBB SHOULD PLACE 654777,,657753
  1803									;INTO BOTH AC AND E
  1804	031450	312 14 0 00 034307 		CAME	14,[654777,,657753]  ;PASS IF C(AC)=654777,,657753
  1805						STOP^
  1806	031451	254 04 0 00 031452 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1807	031452	324 00 0 00 031453 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1808									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1809									;IN THE SUBTEST) TO LOOP ON ERROR^
  1810	031453	312 15 0 00 034307 		CAME	15,[654777,,657753]  ;PASS IF C(E)=654777,,657753
  1811						STOP^
  1812	031454	254 04 0 00 031455 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1813	031455	324 00 0 00 031456 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1814									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1815									;IN THE SUBTEST) TO LOOP ON ERROR^
  1816
  1817					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 26
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0053

  1818					SUBTTL	TEST OF MSCL HWT INSTRUCTIONS
  1819
  1820					;**********
  1821
  1822					;THIS TEST VERIFIES THAT HLLI CLEARS AC LEFT
  1823					;IN THIS CASE, C(AC)=707070,,123456 AND E=777000
  1824					;HENCE, THE RESULT IN THE AC SHOULD BE 0,,123456
  1825
  1826	031456	200 17 0 00 034254 	C63700:	MOVE	17,[707070,,123456]	;PRELOAD AC WITH 707070,,123456
  1827	031457	501 17 0 00 777000 		HLLI	17,777000	;*HLLI SHOULD PLACE 0,,123456 INTO THHE AC
  1828	031460	302 17 0 00 123456 		CAIE	17,123456	;PASS IF C(AC)=0,,123456
  1829						STOP^
  1830	031461	254 04 0 00 031462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1831	031462	324 00 0 00 031463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1832									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1833									;IN THE SUBTEST) TO LOOP ON ERROR^
  1834
  1835					;**********
  1836
  1837					;THIS TEST VERIFIES THAT HLLS PLACES C(E) INTO THE AC IF AC IS NON-ZERO
  1838					;AND IS A NO-OP IF AC=0
  1839					;IN THIS CASE, AC=0, C(AC)=-1,,-1 AND C(E)=123456,,765432
  1840					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,-1
  1841					;AND 123456,,765432 RESPECTIVELY
  1842
  1843	031463	474 00 0 00 000000 	C64000:	SETO	0		;PRELOAD AC WITH -1,,-1
  1844	031464	200 02 0 00 034252 		MOVE	2,[123456,,765432]	;PRELOAD E WITH 123456,,765432
  1845	031465	503 00 0 00 000002 		HLLS	0,2		;*HLLS SHOULD NOT AFFECT AC OR E
  1846	031466	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) UNCHANGED
  1847						STOP^
  1848	031467	254 04 0 00 031470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1849	031470	324 00 0 00 031471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1850									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1851									;IN THE SUBTEST) TO LOOP ON ERROR^
  1852	031471	312 02 0 00 034252 		CAME	2,[123456,,765432]	;PASS IF C(C) IS UNCHANGED
  1853						STOP^
  1854	031472	254 04 0 00 031473 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1855	031473	324 00 0 00 031474 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1856									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1857									;IN THE SUBTEST) TO LOOP ON ERROR^
  1858
  1859					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 27
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0054

  1860					;THIS TEST VERIFIES THAT HLLS PLACES C(E) INTO THE AC IF AC IS NON-ZERO?
  1861					;AND IS A NO-OP IF AC=0
  1862					;IN THIS CASE, AC=1, C(AC)=1,,-1 AND C(E)=123456,,765432
  1863					;HENCE, THE RESULTS IN AC AND E WHOULD BE 123456,,765432
  1864					;AND 123456,,765432 RESPECTVIELY
  1865
  1866	031474	474 01 0 00 000000 	C64010:	SETO	1,		;PRELOAD AC WITH -1,,-1
  1867	031475	200 02 0 00 034252 		MOVE	2,[123456,,765432]	;PRELOAD E WITH 123456,,765432
  1868	031476	503 01 0 00 000002 		HLLS	1,2		;*HLLS SHOULD PLACE 123456,,765432 INTO THE AC
  1869	031477	312 01 0 00 034252 		CAME	1,[123456,,765432]	;PASS IF C(AC)=123456,,765432
  1870						STOP^
  1871	031500	254 04 0 00 031501 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1872	031501	324 00 0 00 031502 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1873									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1874									;IN THE SUBTEST) TO LOOP ON ERROR^
  1875	031502	312 02 0 00 034252 		CAME	2,[123456,,765432]	;PASS IF C(C) IS UNCHANGED
  1876						STOP^
  1877	031503	254 04 0 00 031504 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1878	031504	324 00 0 00 031505 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1879									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1880									;IN THE SUBTEST) TO LOOP ON ERROR^
  1881
  1882					;**********
  1883
  1884					;THIS TEST VERIFIES THAT HRLS PLACES C(E-RIGHT) INTO E-LEFT, BUT
  1885					;DOES NOT AFFECT E-RIGHT.  IF AC IS NON-ZERO, THE RESULT IN E
  1886					;IS ALSO PLACED INTO THE AC.
  1887					;IN THIS CASE, AC=0, C(AC)=1,,-1 AND C(E)=123456,707070
  1888					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE -1,,-1
  1889					;AND 707070,,707070.
  1890
  1891	031505	474 00 0 00 000000 	C64100:	SETO	0,		;PRELOAD AC WITH -1,,-1
  1892	031506	200 03 0 00 034310 		MOVE	3,[123456,,707070]	;PRELOAD E WITH 123456,,707070
  1893	031507	507 00 0 00 000003 		HRLS	0,3		;*HRLS SHOULD PLACE 707070,,707070
  1894									;INTO E.
  1895	031510	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) UNCHANGED
  1896						STOP^
  1897	031511	254 04 0 00 031512 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1898	031512	324 00 0 00 031513 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1899									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1900									;IN THE SUBTEST) TO LOOP ON ERROR^
  1901	031513	312 03 0 00 034311 		CAME	3,[707070,,707070]	;PASS IF C(E)=707070,,707070
  1902						STOP^
  1903	031514	254 04 0 00 031515 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1904	031515	324 00 0 00 031516 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1906									;IN THE SUBTEST) TO LOOP ON ERROR^
  1907
  1908					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 28
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0055

  1909					;THIS TEST VERIFIES THAT HRLS PLACES C(E-RIGHT) INTO E-LEFT, BUT
  1910					;DOES NOT AFFECT E-RIGHT.  IF AC IS NON-ZERO, THE RESULT IN E
  1911					;IS ALSO PLACED INTO THE AC.
  1912					;IN THIS CASE, AC=1, C(AC)=-1,,-1 AND C(E)=123456,,707070
  1913					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE 707070,,707070
  1914					;AND 707070,,707070.
  1915
  1916	031516	474 01 0 00 000000 	C64110:	SETO	1,		;PRELOAD AC WITH -1,,-1
  1917	031517	200 03 0 00 034310 		MOVE	3,[123456,,707070]	;PRELOAD E WITH 123456,,707070
  1918	031520	507 01 0 00 000003 		HRLS	1,3		;*HRLS SHOULD PLACE 707070,,707070
  1919									;INTO BOTH AC AND E.
  1920	031521	312 01 0 00 034311 		CAME	1,[707070,,707070]	;PASS IF C(AC)=707070,,707070
  1921						STOP^
  1922	031522	254 04 0 00 031523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1923	031523	324 00 0 00 031524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1924									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1925									;IN THE SUBTEST) TO LOOP ON ERROR^
  1926	031524	312 03 0 00 034311 		CAME	3,[707070,,707070]	;PASS IF C(E)=707070,,707070
  1927						STOP^
  1928	031525	254 04 0 00 031526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1929	031526	324 00 0 00 031527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1930									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1931									;IN THE SUBTEST) TO LOOP ON ERROR^
  1932
  1933					;**********
  1934
  1935					;THIS TEST VERIFIES THAN HLLZM PLACES C(AC-LEFT) INTO E-LEFT AND
  1936					;PLACES 0 INTO E-RIGHT
  1937					;IN THIS CASE, C(AC)=123456,,123422 AND C(E)=707070,717171
  1938					;HENCE, THE RESULT IN E SHOULD BE 123456,,0
  1939
  1940	031527	200 01 0 00 034312 	C64200:	MOVE	1,[123456,,123422]	;PRELOAD AC WITH 123456,,123422
  1941	031530	200 02 0 00 034313 		MOVE	2,[707070,,717171]	;PRELOAD AC WITH 707070,,717171
  1942	031531	512 01 0 00 000002 		HLLZM	1,2		;*HLLZM SHOULD PLACE 123456,,0 INTO E
  1943	031532	312 01 0 00 034312 		CAME	1,[123456,,123422]	;PASS IF C(AC) UNCHANGED
  1944						STOP^
  1945	031533	254 04 0 00 031534 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1946	031534	324 00 0 00 031535 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1947									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1948									;IN THE SUBTEST) TO LOOP ON ERROR^
  1949	031535	312 02 0 00 034246 		CAME	2,[123456,,0]	;PASS IF C(E)=123456,,0
  1950						STOP^
  1951	031536	254 04 0 00 031537 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1952	031537	324 00 0 00 031540 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1953									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1954									;IN THE SUBTEST) TO LOOP ON ERROR^
  1955
  1956					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 29
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0056

  1957					;THIS TEST VERIFIES THAT HLLZS CLEARS THE RIGHT HALF OF E, BUT DOESN'T
  1958					;AFFECT THE LEFT HALF OF E.  IF AC IS NON-ZERO, THE RESULT IN E IS
  1959					;ALSO PLACED INTO THE AC.
  1960					;IN THIS CASE, AC=0, C(AC)=-1,,-1 AND C(E)=123456,,707070
  1961					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,-1
  1962					;AND 123456,,0 RESPECTIVELY
  1963
  1964	031540	474 00 0 00 000000 	C64300:	SETO	0,		;PRELOAD AC WITH -1,,-1
  1965	031541	200 17 0 00 034310 		MOVE	17,[123456,,707070]	;PRELOAD E WITH 123456,,707070
  1966	031542	513 00 0 00 000017 		HLLZS	0,17		;*HLLZS SHOULD PLACE 123456,,0 INTO E.
  1967	031543	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) UNCHANGED
  1968						STOP^
  1969	031544	254 04 0 00 031545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1970	031545	324 00 0 00 031546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1971									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1972									;IN THE SUBTEST) TO LOOP ON ERROR^
  1973	031546	312 17 0 00 034246 		CAME	17,[123456,,0]	;PASS IF C(E)=123456,,0
  1974						STOP^
  1975	031547	254 04 0 00 031550 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1976	031550	324 00 0 00 031551 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1977									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1978									;IN THE SUBTEST) TO LOOP ON ERROR^
  1979
  1980
  1981					;**********
  1982
  1983					;THIS TEST VERIFIES THAT HLLZS CLEARS THE RIGHT HALF OF E, BUT DOESN'T
  1984					;AFFECT THE LEFT HALF OF E.  IF AC IS NON-ZERO, THE RESULT IN E IS
  1985					;ALSO PLACED INTO THE AC.
  1986					;IN THIS CASE, AC=1, C(AC)=-1,,-1 AND C(E)=123456,,707070
  1987					;HENCE, THE RESULTS IN AC AND E SHOULD BE 123456,,0
  1988					;AND 123456,,0 RESPECTIVELY.
  1989
  1990	031551	474 01 0 00 000000 	C64310:	SETO	1,		;PRELOAD AC WITH -1,,-1
  1991	031552	200 17 0 00 034310 		MOVE	17,[123456,,707070]	;PRELOAD E WITH 123456,,707070
  1992	031553	513 01 0 00 000017 		HLLZS	1,17		;*HLLZS SHOULD PLACE 123456,,0 INTO
  1993									;BOTH AC AND E
  1994	031554	312 01 0 00 034246 		CAME	1,[123456,,0]	;PASS IF C(AC)=123456,,0
  1995						STOP^
  1996	031555	254 04 0 00 031556 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1997	031556	324 00 0 00 031557 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1998									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1999									;IN THE SUBTEST) TO LOOP ON ERROR^
  2000	031557	312 17 0 00 034246 		CAME	17,[123456,,0]	;PASS IF C(E)=123456,,0
  2001						STOP^
  2002	031560	254 04 0 00 031561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2003	031561	324 00 0 00 031562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2004									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2005									;IN THE SUBTEST) TO LOOP ON ERROR^
  2006
  2007					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 30
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0057

  2008					;THIS TEST VERIFIES THAT HRLZM PLACES C(AC-RIGHT) INTO E-LEFT AND
  2009					;PLACES O INTO E-RIGHT.
  2010					;IN THIS CASE, C(AC)=123456,,123422 AND C(E)=707070,,717171
  2011					;HENCE, THE RESULT IN E SHOULD BE 123422,,0
  2012
  2013	031562	200 01 0 00 034312 	C64400:	MOVE	1,[123456,,123422]	;PRELOAD AC WITH 123456,,123422
  2014	031563	200 02 0 00 034313 		MOVE	2,[707070,,717171]	;PRELOAD AC WITH 707070,,717171
  2015	031564	516 01 0 00 000002 		HRLZM	1,2		;*HRLZM SHOULD PLACE 123422,,0 INTO E
  2016	031565	312 01 0 00 034312 		CAME	1,[123456,,123422]	;PASS IF C(AC) UNCHANGED
  2017						STOP^
  2018	031566	254 04 0 00 031567 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2019	031567	324 00 0 00 031570 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2020									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2021									;IN THE SUBTEST) TO LOOP ON ERROR^
  2022	031570	312 02 0 00 034314 		CAME	2,[123422,,0]	;PASS IF C(E)=123422,,0
  2023						STOP^
  2024	031571	254 04 0 00 031572 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2025	031572	324 00 0 00 031573 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2026									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2027									;IN THE SUBTEST) TO LOOP ON ERROR^
  2028
  2029					;**********
  2030
  2031					;THIS TEST VERIFIES THAT HRLZS PLACES C(E-RIGHT) INTO E-LEFT AND
  2032					;CLEARS E-RIGHT. IF AC IS NON-ZERO, THE RESULT IN E IS ALSO
  2033					;PLACED INTO THE AC.
  2034					;IN THIS CASE, AC=0, C(AC)=-1,,-1 AND C(E)=123456,,707076
  2035					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE -1,,-1
  2036					;AND 707076,,0
  2037
  2038	031573	474 00 0 00 000000 	C64500:	SETO	0,		;PRELOAD AC WITH -1,,-1
  2039	031574	200 16 0 00 034315 		MOVE	16,[123456,,707076]	;PRELOAD E WITH 123456,,707076
  2040	031575	517 00 0 00 000016 		HRLZS	0,16		;*HRLZS SHOULD PLACE 707076,,0
  2041									;INTO E.
  2042	031576	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) UNCHANGED
  2043						STOP^
  2044	031577	254 04 0 00 031600 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2045	031600	324 00 0 00 031601 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2046									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2047									;IN THE SUBTEST) TO LOOP ON ERROR^
  2048	031601	312 16 0 00 034316 		CAME	16,[707076,,0]	;PASS IF C(AC)=707076,,0
  2049						STOP^
  2050	031602	254 04 0 00 031603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2051	031603	324 00 0 00 031604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2052									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2053									;IN THE SUBTEST) TO LOOP ON ERROR^
  2054
  2055					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 31
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0058

  2056					;THIS TEST VERIFIES THAT HRLZS PLACES C(E-RIGHT) INTO E-LEFT AND
  2057					;CLEARS E-RIGHT.  IF AC IS NON-ZERO, THE RESULT IN E IS ALSO
  2058					;PLACED INTO THE AC.
  2059					;IN THIS CASE, AC=1, C(AC)=-1,,-1 AND C(E)=123456,,707076
  2060					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE 707076,,0
  2061					;AND 707076,,0
  2062
  2063	031604	474 01 0 00 000000 	C64510:	SETO	1,		;PRELOAD AC WITH -1,,-1
  2064	031605	200 16 0 00 034315 		MOVE	16,[123456,,707076]	;PRELOAD E WITH 123456,,707076
  2065	031606	517 01 0 00 000016 		HRLZS	1,16		;*HRLZS SHOULD PLACE 707076,,0
  2066									;INTO BOTH AC AND E.
  2067	031607	312 01 0 00 034316 		CAME	1,[707076,,0]	;PASS IF C(AC)=707076,,0
  2068						STOP^
  2069	031610	254 04 0 00 031611 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2070	031611	324 00 0 00 031612 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2071									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2072									;IN THE SUBTEST) TO LOOP ON ERROR^
  2073	031612	312 16 0 00 034316 		CAME	16,[707076,,0]	;PASS IF C(AC)=707076,,0
  2074						STOP^
  2075	031613	254 04 0 00 031614 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2076	031614	324 00 0 00 031615 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2077									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2078									;IN THE SUBTEST) TO LOOP ON ERROR^
  2079
  2080					;**********
  2081
  2082					;THIS TEST VERIFIES THAT HLLOM PLACES C(AC-LEFT) INTO E-LEFT AND
  2083					;PLACES -1 INTO E-RIGHT.
  2084					;IN THIS CASE, C(AC)=123456,,123422 AND C(E)=707070,,717171
  2085					;HENCE, THE RESULT IN E SHOULD BE 123456,,-1.
  2086
  2087	031615	200 01 0 00 034312 	C64600:	MOVE	1,[123456,,123422]	;PRELOAD AC WITH 123456,,123422
  2088	031616	200 02 0 00 034313 		MOVE	2,[707070,,717171]	;PRELOAD AC WITH 707070,,717171
  2089	031617	522 01 0 00 000002 		HLLOM	1,2		;*HLLOM SHOULD PLACE 123456,,-1 INTO E
  2090	031620	312 01 0 00 034312 		CAME	1,[123456,,123422]	;PASS IF C(AC) UNCHANGED
  2091						STOP^
  2092	031621	254 04 0 00 031622 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2093	031622	324 00 0 00 031623 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2094									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2095									;IN THE SUBTEST) TO LOOP ON ERROR^
  2096	031623	312 02 0 00 034317 		CAME	2,[123456,,-1]	;PASS IF C(E)=123456,,-1
  2097						STOP^
  2098	031624	254 04 0 00 031625 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2099	031625	324 00 0 00 031626 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2100									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2101									;IN THE SUBTEST) TO LOOP ON ERROR^
  2102
  2103					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 32
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0059

  2104					;THIS TEST VERIFIES THAT HRLO, C(E-RIGHT) INTO AC=LEFT AND
  2105					;PLACES -1 INTO AC-RIGHT.  IN THIS CASE, C(AC)=123456,,135724 AND
  2106					;C(E)=765432,,246135.  HENCE, THE RESULT IN THE AC SHOULD BE 246135,,-1
  2107
  2108	031626	200 15 0 00 034320 	C64700:	MOVE	15,[123456,,135724]	;PRELOAD AC WITH 123456,,135724
  2109	031627	200 16 0 00 034321 		MOVE	16,[765432,,246135]	;PRELOAD E WITH 765432,,246135
  2110	031630	524 15 0 00 000016 		HRLO	15,16		;*HRLO SHOULD PLACE 246135,,-1 INTO AC
  2111	031631	312 15 0 00 034322 		CAME	15,[246135,,-1]	;PASS IF C(AC)=246135,,-1
  2112						STOP^
  2113	031632	254 04 0 00 031633 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2114	031633	324 00 0 00 031634 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2115									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2116									;IN THE SUBTEST) TO LOOP ON ERROR^
  2117	031634	312 16 0 00 034321 		CAME	16,[765432,,246135]	;PASS IF C(E) UNCHANGED
  2118						STOP^
  2119	031635	254 04 0 00 031636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2120	031636	324 00 0 00 031637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2121									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2122									;IN THE SUBTEST) TO LOOP ON ERROR^
  2123
  2124					;**********
  2125
  2126					;THIS TEST VERIFIES THAT HRLOI PLACES 0,,E INTO AC-LEFT AND
  2127					;PLACES ONES INTO AC-RIGHT.  IN THIS CASE, C(AC)=0 AND E=0,,123456.
  2128					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,-1
  2129
  2130	031637	400 14 0 00 000000 	C65000:	SETZ	14,		;CLEAR AC
  2131	031640	525 14 0 00 123456 		HRLOI	14,123456	;*HRLOI SHOULD PLACE 123456,,-1 INTO THE AC
  2132	031641	312 14 0 00 034317 		CAME	14,[123456,,-1]	;PASS IF C(AC)=123456,,-1
  2133						STOP^
  2134	031642	254 04 0 00 031643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2135	031643	324 00 0 00 031644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2136									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2137									;IN THE SUBTEST) TO LOOP ON ERROR^
  2138
  2139					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 33
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0060

  2140					;THIS TEST VERIFIES THAT HRLOM PLACES C(AC-RIGHT) INTO E-LEFT
  2141					;AND PLACES -1 INTO E-RIGHT. IN THIS CASE, C(E)=0 AND C(AC)=123123,,456765
  2142					;HENCE, THE RESULT IN E SHOULD BE 456765,,-1.
  2143
  2144	031644	402 00 0 00 000014 	C65100:	SETZM	14		;CLEAR E
  2145	031645	200 13 0 00 034323 		MOVE	13,[123123,,456765]	;PRELOAD AC WITH 123123,,456765
  2146	031646	526 13 0 00 000014 		HRLOM	13,14		;*HRLOM SHOULD PLACE 456765,,-1 INTO E
  2147	031647	312 13 0 00 034323 		CAME	13,[123123,,456765]	;PASS IF C(AC) UNCHANGED
  2148
  2149						STOP^
  2150	031650	254 04 0 00 031651 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2151	031651	324 00 0 00 031652 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2152									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2153									;IN THE SUBTEST) TO LOOP ON ERROR^
  2154	031652	312 14 0 00 034324 		CAME	14,[456765,,-1]	;PASS IF C(E)=456765,,-1
  2155						STOP^
  2156	031653	254 04 0 00 031654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2157	031654	324 00 0 00 031655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2158									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2159									;IN THE SUBTEST) TO LOOP ON ERROR^
  2160
  2161					;**********
  2162
  2163
  2164					;THIS TEST VERIFIES THAT HRLOS PLACES C(E-RIGHT) INTO E-LEFT AND
  2165					;PLACES -1 INTO E-RIGHT. IF AC IS NON-ZERO, THE RESULT IN E IS ALOS
  2166					;PLACED INTO THE AC.
  2167					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=123456,,707076
  2168					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE 0
  2169					;AND 707076,,0
  2170
  2171	031655	400 00 0 00 000000 	C65200:	SETZ	0,		;PRELOAD AC WITH 0
  2172	031656	200 16 0 00 034315 		MOVE	16,[123456,,707076]	;PRELOAD E WITH 123456,,707076
  2173	031657	527 00 0 00 000016 		HRLOS	0,16		;*HRLZS SHOULD PLACE 707076,,-1
  2174									;INTO E.
  2175	031660	312 00 0 00 034325 		CAME	0,[0]		;PASS IF C(AC) UNCHANGED
  2176						STOP^
  2177	031661	254 04 0 00 031662 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2178	031662	324 00 0 00 031663 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2179									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2180									;IN THE SUBTEST) TO LOOP ON ERROR^
  2181	031663	312 16 0 00 034326 		CAME	16,[707076,,-1]	;PASS IF C(AC)=707076,,-1
  2182						STOP^
  2183	031664	254 04 0 00 031665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2184	031665	324 00 0 00 031666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2185									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2186									;IN THE SUBTEST) TO LOOP ON ERROR^
  2187
  2188					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 34
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0061

  2189					;THIS TEST VERIFIES THAT HRLOS PLACES C(E-RIGHT) INTO E-LEFT AND
  2190					;PLACES -1 INTO E-RIGHT. IF AC IS NON-ZERO, THE RESULT IN E IS ALSO
  2191					;PLACED INTO THE AC.
  2192					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=123456,,707076
  2193					;HENCE, THE RESULTS IN AC AND E RESPECTIVELY SHOULD BE 707076,,-1
  2194					;AND 707076,,-1
  2195
  2196	031666	400 01 0 00 000000 	C65210:	SETZ	1,		;PRELOAD AC WITH 0
  2197	031667	200 16 0 00 034315 		MOVE	16,[123456,,707076]	;PRELOAD E WITH 123456,,707076
  2198	031670	527 01 0 00 000016 		HRLOS	1,16		;*HRLZS SHOULD PLACE 707076,,-1
  2199									;INTO BOTH AC AND E
  2200	031671	312 01 0 00 034326 		CAME	1,[707076,,-1]	;PASS IF C(AC)=707076,,-1
  2201						STOP^
  2202	031672	254 04 0 00 031673 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2203	031673	324 00 0 00 031674 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2204									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2205									;IN THE SUBTEST) TO LOOP ON ERROR^
  2206	031674	312 16 0 00 034326 		CAME	16,[707076,,-1]	;PASS IF C(AC)=707076,,-1
  2207						STOP^
  2208	031675	254 04 0 00 031676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2209	031676	324 00 0 00 031677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2210									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2211									;IN THE SUBTEST) TO LOOP ON ERROR^
  2212
  2213					;**********
  2214
  2215					;THIS TEST VERIFIES THAT HLLEM PLACES C(AC-LEFT) INTO E-LEFT
  2216					;AND PLACES BIT 0 OF THE AC INTO BITS 18 THRU 35 OF E.  IN THIS CASE,
  2217					;C(AC)=123456,,707076 AND C(E)=-1,,-1.  HENCE, THE RESULT IN E
  2218					;SHOULD BE 123456,,0.
  2219
  2220	031677	200 12 0 00 034315 	C65300:	MOVE	12,[123456,,707076]	;PRELOAD AC WITH 123456,,707076
  2221	031700	476 00 0 00 000013 		SETOM	13		;PRELOAD E WITH -1,,-1
  2222	031701	532 12 0 00 000013 		HLLEM	12,13		;*HLLEM SHOULD PLACE 123456,,0 INTO E
  2223	031702	312 12 0 00 034315 		CAME	12,[123456,,707076]	;PASS IF C(AC) UNCHANGED
  2224						STOP^
  2225	031703	254 04 0 00 031704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2226	031704	324 00 0 00 031705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2227									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2228									;IN THE SUBTEST) TO LOOP ON ERROR^
  2229	031705	312 13 0 00 034246 		CAME	13,[123456,,0]	;PASS IF C(E)=123456,,0
  2230						STOP^
  2231	031706	254 04 0 00 031707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2232	031707	324 00 0 00 031710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2233									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2234									;IN THE SUBTEST) TO LOOP ON ERROR^
  2235
  2236					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 35
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0062

  2237					;THIS TEST VERIFIES THAT HLLES PLACES C(E-LEFT) INTO E-LEFT AND
  2238					;PLACES BIT 0 OF E INTO BITS 18 THRU 35 OF E.  IF AC IS NON-ZERO
  2239					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2240					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=765432,,0.
  2241					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0
  2242					;AND 765432,,-1 RESPECTIVELY.
  2243
  2244	031710	400 00 0 00 000000 	C65400:	SETZ	0,		;CLEAR AC
  2245	031711	515 02 0 00 765432 		HRLZI	2,765432	;PRELOAD E WITH 765432,,0
  2246	031712	533 00 0 00 000002 		HLLES	0,2		;*HLLES SHOULD PLACE 765432,,-1
  2247									;INTO E
  2248	031713	312 00 0 00 034325 		CAME	0,[0]		;PASS IF C(AC) UNCHANGED
  2249						STOP^
  2250	031714	254 04 0 00 031715 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2251	031715	324 00 0 00 031716 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2252									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2253									;IN THE SUBTEST) TO LOOP ON ERROR^
  2254	031716	312 02 0 00 034327 		CAME	2,[765432,,-1]	;PASS IF C(E)=765432,,-1
  2255						STOP^
  2256	031717	254 04 0 00 031720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2257	031720	324 00 0 00 031721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2258									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2259									;IN THE SUBTEST) TO LOOP ON ERROR^
  2260
  2261					;**********
  2262
  2263					;THIS TEST VERIFIES THAT HLLES PLACES C(E-LEFT) INTO E-LEFT AND
  2264					;PLACES BIT 0 OF E INTO BITS 18 THRU 35 OF E.  IF AC IS NON-ZERO,
  2265					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2266					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=765432,,0
  2267					;HENCE, THE RESULTS IN AC AND E SHOULD BE 765432,,-1
  2268					;AND 765432,,-1 RESPECTIVELY
  2269
  2270	031721	400 01 0 00 000000 	C65410:	SETZ	1,		;CLEAR AC
  2271	031722	515 02 0 00 765432 		HRLZI	2,765432	;PRELOAD E WITH 765432,,0
  2272	031723	533 01 0 00 000002 		HLLES	1,2		;*HLLES SHOULD PLACE 765432,,-1
  2273									;INTO BOTH AC AND E
  2274	031724	312 01 0 00 034327 		CAME	1,[765432,,-1]	;PASS IF C(AC)=765432,,-1
  2275						STOP^
  2276	031725	254 04 0 00 031726 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2277	031726	324 00 0 00 031727 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2278									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2279									;IN THE SUBTEST) TO LOOP ON ERROR^
  2280	031727	312 02 0 00 034327 		CAME	2,[765432,,-1]	;PASS IF C(E)=765432,,-1
  2281						STOP^
  2282	031730	254 04 0 00 031731 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2283	031731	324 00 0 00 031732 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2284									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2285									;IN THE SUBTEST) TO LOOP ON ERROR^
  2286
  2287					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 36
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0063

  2288					;THIS TEST VERIFIES THAT HLLEM PLACES C(AC-RIGHT) INTO E-LEFT
  2289					;AND PLACES BIT 18 OF THE AC INTO BITS 18 THRU 35 OF E.  IN THIS CASE,
  2290					;C(AC)=365432,123456 AND C(E)=-1,,-1.  HENCE, THE RESULT IN E
  2291					;SHOULD BE 365432,,0.
  2292
  2293	031732	200 12 0 00 034330 	C65500:	MOVE	12,[365432,,123456]	;PRELOAD AC WITH 365432,,123456
  2294	031733	476 00 0 00 000013 		SETOM	13		;PRELOAD E WITH -1,,-1
  2295	031734	532 12 0 00 000013 		HLLEM	12,13		;*HLLEM SHOULD PLACE 365432,,0 INTO E
  2296	031735	312 12 0 00 034330 		CAME	12,[365432,,123456]	;PASS IF C(AC) UNCHANGED
  2297						STOP^
  2298	031736	254 04 0 00 031737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2299	031737	324 00 0 00 031740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2300									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2301									;IN THE SUBTEST) TO LOOP ON ERROR^
  2302	031740	312 13 0 00 034331 		CAME	13,[365432,,0]	;PASS IF C(E)=365432,,0
  2303						STOP^
  2304	031741	254 04 0 00 031742 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2305	031742	324 00 0 00 031743 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2306									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2307									;IN THE SUBTEST) TO LOOP ON ERROR^
  2308
  2309					;**********
  2310
  2311					;THIS TEST VERIFIES THAT HRLES PLACES C(E-RIGHT) INTO E-LEFT AND
  2312					;PLACES BIT 18 OF E INTO BITS 18 THRU 35 OF E.  IF AC IS NON-ZERO,
  2313					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2314					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=0,,765432
  2315					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0
  2316					;AND 765432,,-1 RESPECTIVELY
  2317
  2318	031743	400 00 0 00 000000 	C65600:	SETZ	0,		;CLEAR AC
  2319	031744	551 02 0 00 765432 		HRRZI	2,765432	;PRELOAD E WITH 0,,765432
  2320	031745	537 00 0 00 000002 		HRLES	0,2		;*HLLES SHOULD PLACE 765432,,-1
  2321									;INTO
  2322	031746	312 00 0 00 034325 		CAME	0,[0]		;PASS IF C(AC) UNCHANGED
  2323						STOP^
  2324	031747	254 04 0 00 031750 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2325	031750	324 00 0 00 031751 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2326									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2327									;IN THE SUBTEST) TO LOOP ON ERROR^
  2328	031751	312 02 0 00 034327 		CAME	2,[765432,,-1]	;PASS IF C(E)=765432,,-1
  2329						STOP^
  2330	031752	254 04 0 00 031753 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2331	031753	324 00 0 00 031754 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2333									;IN THE SUBTEST) TO LOOP ON ERROR^
  2334
  2335					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 37
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0064

  2336					;THIS TEST VERIFIES THAT HRLES PLACES C(E-RIGHT) INTO E-LEFT AND
  2337					;PLACES BIT 18 OF E INTO BITS 18 THRU 35 OF E.  IF AC IS NON-ZERO,
  2338					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2339					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=0,,765432
  2340					;HENCE, THE RESULTS IN AC AND E SHOULD BE 765432,,-1
  2341					;AND 765432,,-1 RESPECTIVELY.
  2342
  2343	031754	400 01 0 00 000000 	C65610:	SETZ	1,		;CLEAR AC
  2344	031755	551 02 0 00 765432 		HRRZI	2,765432	;PRELOAD E WITH 0,765432
  2345	031756	537 01 0 00 000002 		HRLES	1,2		;*HLLES SHOULD PLACE 765432,,-1
  2346									;INTO BOTH AC AND E
  2347	031757	312 01 0 00 034327 		CAME	1,[765432,,-1]	;PASS IF C(AC)=765442,,-1
  2348						STOP^
  2349	031760	254 04 0 00 031761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2350	031761	324 00 0 00 031762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2352									;IN THE SUBTEST) TO LOOP ON ERROR^
  2353	031762	312 02 0 00 034327 		CAME	2,[765432,,-1]	;PASS IF C(E)=765432,,-1
  2354						STOP^
  2355	031763	254 04 0 00 031764 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2356	031764	324 00 0 00 031765 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2357									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2358									;IN THE SUBTEST) TO LOOP ON ERROR^
  2359
  2360
  2361					;**********
  2362
  2363					;THIS TEST VERIFIES THAT HLRM SHOULD PLACE C(AC-LEFT) INTO E-RIGHT
  2364					;AND NOT AFFECT E-LEFT.  IN THIS CASE, C(AC)=123456,,701234
  2365					;AND C(E)=0.  HENCE, THE RESULT IN E SHOULD BE 0,,123456
  2366
  2367	031765	200 11 0 00 034332 	C65700:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  2368	031766	402 00 0 00 000012 		SETZM	12		;CLEAR E
  2369	031767	546 11 0 00 000012 		HLRM	11,12		;*HLRM SHOULD PLACE 0,,123456 INTO E
  2370	031770	312 11 0 00 034332 		CAME	11,[123456,,701234]	;PASS IF C(AC) UNCHANGE
  2371						STOP^
  2372	031771	254 04 0 00 031772 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2373	031772	324 00 0 00 031773 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2374									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2375									;IN THE SUBTEST) TO LOOP ON ERROR^
  2376	031773	302 12 0 00 123456 		CAIE	12,123456	;PASS IF C(E)=0,,123456
  2377						STOP^
  2378	031774	254 04 0 00 031775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2379	031775	324 00 0 00 031776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2380									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2381									;IN THE SUBTEST) TO LOOP ON ERROR^
  2382
  2383					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 38
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0065

  2384					;THIS TEST VERIFIES THAT HLRS PLACES C(E-LEFT) INTO E-RIGHT AND
  2385					;DOES NOT AFFECT E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2386					;IS ALSO PLACED INTO THE AC.
  2387					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=123123,,246135
  2388					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0
  2389					;AND 123123,,123123 RESPECTIVELY.
  2390
  2391	031776	400 00 0 00 000000 	C66000:	SETZ	0,		;CLEAR AC
  2392	031777	200 12 0 00 034333 		MOVE	12,[123123,,246135]	;PRELOAD E WITH 123123,,246135
  2393	032000	547 00 0 00 000012 		HLRS	0,12		;*HLRS SHOULD PLACE 123123,,123123
  2394									;INTO E.
  2395	032001	312 00 0 00 034325 		CAME	0,[0]		;PASS IF C(AC) UNCHANGED
  2396						STOP^
  2397	032002	254 04 0 00 032003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2398	032003	324 00 0 00 032004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2399									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2400									;IN THE SUBTEST) TO LOOP ON ERROR^
  2401	032004	312 12 0 00 034334 		CAME	12,[123123,,123123]	;PASS IF C(E)=123123,,123123
  2402						STOP^
  2403	032005	254 04 0 00 032006 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2404	032006	324 00 0 00 032007 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2405									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2406									;IN THE SUBTEST) TO LOOP ON ERROR^
  2407
  2408
  2409					;**********
  2410
  2411					;THIS TEST VERIFIES THAT HLRS PLACES C(E-LEFT) INTO E-RIGHT AND
  2412					;DOES NOT AFFECT E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2413					;IS ALSO PLACED INTO THE AC.
  2414					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=123123,,246135
  2415					;HENCE, THE RESULTS IN AC AND E SHOULD BE 123123,,123123
  2416					;AND 123123,,123123 RESPECTIVELY.
  2417
  2418	032007	400 01 0 00 000000 	C66010:	SETZ	1,		;CLEAR AC
  2419	032010	200 12 0 00 034333 		MOVE	12,[123123,,246135]	;PRELOAD E WITH 123123,,246135
  2420	032011	547 01 0 00 000012 		HLRS	1,12		;*HLRS SHOULD PLACE 123123,,123123
  2421									;INTO BOTH AC AND E.
  2422	032012	312 01 0 00 034334 		CAME	1,[123123,,123123]	;PASS IF C(AC)=123123,,123123
  2423						STOP^
  2424	032013	254 04 0 00 032014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2425	032014	324 00 0 00 032015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2426									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2427									;IN THE SUBTEST) TO LOOP ON ERROR^
  2428	032015	312 12 0 00 034334 		CAME	12,[123123,,123123]	;PASS IF C(E)=123123,,123123
  2429						STOP^
  2430	032016	254 04 0 00 032017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2431	032017	324 00 0 00 032020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2432									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2433									;IN THE SUBTEST) TO LOOP ON ERROR^
  2434
  2435					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 39
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0066

  2436					;THIS TEST VERIFIES THAT HRRZS CLEARS THE LEFT HALF OF E, BUT DOES NOT
  2437					;AFFECT THE RIGHT HALF OF E.  IF AC IS NON-ZERO, THE RESULT IN E IS
  2438					;ALSO PLACED INTO THE AC.
  2439					;IN THIS CASE, AC = 0, C(AC) = -1,,-1 AND C(E) = 123456,,701234
  2440					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,-1 AND 0,,701234
  2441					;RESPECTIVELY.
  2442
  2443	032020	474 00 0 00 000000 	C66100:	SETO	0		;PRELOAD AC WITH -1,,-1
  2444	032021	200 17 0 00 034332 		MOVE	17,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2445	032022	553 00 0 00 000017 		HRRZS	0,17		;HRRZS SHOULD PLACE 0,,701234 INTO E
  2446	032023	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) UNCHANGED
  2447						STOP^
  2448	032024	254 04 0 00 032025 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2449	032025	324 00 0 00 032026 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2450									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2451									;IN THE SUBTEST) TO LOOP ON ERROR^
  2452	032026	302 17 0 00 701234 		CAIE	17,701234	;PASS IF C(E) = 0,,701234
  2453						STOP^
  2454	032027	254 04 0 00 032030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2455	032030	324 00 0 00 032031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2456									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2457									;IN THE SUBTEST) TO LOOP ON ERROR^
  2458
  2459					;**********
  2460
  2461					;THIS TEST VERIFIES THAT HRRZS CLEARS THE LEFT HALF OF E, BUT DOES NOT
  2462					;AFFECT THE RIGHT HALF OF E.  IF AC IS NON-ZERO, THE RESULT IN E IS
  2463					;ALSO PLACED INTO THE AC.
  2464					;IN THIS CASE, AC = 1, C(AC) = -1,,-1 AND C(E) = 123456,,701234
  2465					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0,,701234 AND 0,,701234
  2466					;RESPECTIVELY.
  2467
  2468	032031	474 01 0 00 000000 	C66110:	SETO	1,		;PRELOAD AC WITH -1,,-1
  2469	032032	200 17 0 00 034332 		MOVE	17,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2470	032033	553 01 0 00 000017 		HRRZS	1,17		;HRRZS SHOULD PLACE 0,,701234 INTO
  2471									;BOTH AC AND E
  2472	032034	302 01 0 00 701234 		CAIE	1,701234	;PASS IF C(AC) = 0,,701234
  2473						STOP^
  2474	032035	254 04 0 00 032036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2475	032036	324 00 0 00 032037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2476									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2477									;IN THE SUBTEST) TO LOOP ON ERROR^
  2478	032037	302 17 0 00 701234 		CAIE	17,701234	;PASS IF C(E) = 0,,701234
  2479						STOP^
  2480	032040	254 04 0 00 032041 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2481	032041	324 00 0 00 032042 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2482									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2483									;IN THE SUBTEST) TO LOOP ON ERROR^
  2484
  2485					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 40
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0067

  2486					;THIS TEST VERIFIES THAT HLRZI CLEARS THE AC
  2487					;IN THIS CASE, C(AC) = -1,,-1 AND E = 0,,-1.  HENCE, THE
  2488					;RESULT IN THE AC SHOULD BE 0.
  2489
  2490	032042	474 00 0 00 000007 	C66200:	SETO	7		;PRELOAD AC WITH -1,,-1
  2491	032043	555 07 0 00 777777 		HLRZI	7,-1		;*HLRZI SHOULD CLEAR THE AC
  2492	032044	332 00 0 00 000007 		SKIPE	7		;PASS IF C(AC) = 0
  2493						STOP^
  2494	032045	254 04 0 00 032046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2495	032046	324 00 0 00 032047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2496									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2497									;IN THE SUBTEST) TO LOOP ON ERROR^
  2498
  2499					;**********
  2500
  2501					;THIS TEST VERIFIES THAT HLRZM PLACES C(AC-LEFT) INTO E-RIGHT AND
  2502					;PLACES 0 INTO E-LEFT.
  2503					;IN THIS CASE, C(AC) = 123456,,123422 AND C(E) = 707070,,717171
  2504					;HENCE, THE RESULT IN E SHOULD BE 0,,123456.
  2505
  2506	032047	200 01 0 00 034312 	C66300:	MOVE	1,[123456,,123422]  ;PRELOAD AC WITH 123456,,123422
  2507	032050	200 02 0 00 034313 		MOVE	2,[707070,,717171]  ;PRELOAD AC WITH 707070,,717171
  2508	032051	556 01 0 00 000002 		HLRZM	1,2		;*HLRZM SHOULD PLACE 0,,123456 INTO E.
  2509	032052	312 01 0 00 034312 		CAME	1,[123456,,123422]  ;PASS IF C(AC) UNCHANGED
  2510						STOP^
  2511	032053	254 04 0 00 032054 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2512	032054	324 00 0 00 032055 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2513									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2514									;IN THE SUBTEST) TO LOOP ON ERROR^
  2515	032055	302 02 0 00 123456 		CAIE	2,123456	;PASS IF C(E) = 0,,123456
  2516						STOP^
  2517	032056	254 04 0 00 032057 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2518	032057	324 00 0 00 032060 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2519									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2520									;IN THE SUBTEST) TO LOOP ON ERROR^
  2521
  2522					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 41
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0068

  2523					;THIS TEST VERIFIES THAT HLRZM PLACES C(AC-LEFT) INTO E-RIGHT AND
  2524					;PLACES 0 INTO E-LEFT.
  2525					;IN THIS CASE, C(AC) = 123456,,123422 AND C(E) = 707070,,717171
  2526					;HENCE, THE RESULT IN E SHOULD BE 0,,123456.
  2527
  2528	032060	200 01 0 00 034312 	C66301:	MOVE	1,[123456,,123422]  ;PRELOAD AC WITH 123456,,123422
  2529	032061	200 02 0 00 034313 		MOVE	2,[707070,,717171]  ;PRELOAD AC WITH 707070,,717171
  2530	032062	202 02 0 00 032074 		MOVEM	2,E66301
  2531	032063	556 01 0 00 032074 		HLRZM	1,E66301	;*HLRZM SHOULD PLACE 0,,123456 INTO E.
  2532	032064	312 01 0 00 034312 		CAME	1,[123456,,123422]  ;PASS IF C(AC) UNCHANGED
  2533						STOP^
  2534	032065	254 04 0 00 032066 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2535	032066	324 00 0 00 032067 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2536									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2537									;IN THE SUBTEST) TO LOOP ON ERROR^
  2538	032067	200 02 0 00 032074 		MOVE	2,E66301
  2539	032070	302 02 0 00 123456 		CAIE	2,123456	;PASS IF C(E) = 0,,123456
  2540						STOP^
  2541	032071	254 04 0 00 032072 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2542	032072	324 00 0 00 032073 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2543									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2544									;IN THE SUBTEST) TO LOOP ON ERROR^
  2545
  2546	032073	334 00 0 00 000000 		SKIPA			;GO TO NEXT TEST
  2547	032074	000000	000000		E66301:	0			;TEST WORD MEMORY
  2548
  2549					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 42
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0069

  2550					;THIS TEST VERIFIES THAT HLRZS PLACES C(E-LEFT) INTO E-RIGHT AND
  2551					;PLACES 0 INTO E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E IS
  2552					;ALSO PLACED INTO THE AC.
  2553					;IN THIS CASE, AC = 0, C(AC) = -1,,-1 AND C(E) = 123456,,701234.
  2554					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,-1 AND 0,,123456
  2555					;RESPECTIVELY.
  2556
  2557	032075	474 00 0 00 000000 	C66400:	SETO	0,		;PRELOAD AC WITH -1,,-1
  2558	032076	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2559	032077	557 00 0 00 000007 		HLRZS	0,7		;*HLRZS SHOULD PLACE 0,,123456 INTO E
  2560	032100	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) IS UNCHANGED
  2561						STOP^
  2562	032101	254 04 0 00 032102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2563	032102	324 00 0 00 032103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2564									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2565									;IN THE SUBTEST) TO LOOP ON ERROR^
  2566	032103	302 07 0 00 123456 		CAIE	7,123456	;PASS IF C(E) = 0,,123456
  2567						STOP^
  2568	032104	254 04 0 00 032105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2569	032105	324 00 0 00 032106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2570									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2571									;IN THE SUBTEST) TO LOOP ON ERROR^
  2572
  2573					;**********
  2574
  2575					;THIS TEST VERIFIES THAT HLRZS PLACES C(E-LEFT) INTO E-RIGHT AND
  2576					;PLACES 0 INTO E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2577					;IS ALSO PLACED INTO THE AC.
  2578					;IN THIS CASE, AC = 6, C(AC) = -1,,-1 AND C(E) = 123456,,701234.
  2579					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0,,123456 AND 0123456
  2580					;RESPECTIVELY.
  2581
  2582	032106	474 06 0 00 000000 	C66410:	SETO	6,		;PRELOAD AC WITH -1,,-1
  2583	032107	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2584	032110	557 06 0 00 000007 		HLRZS	6,7		;*HLRZS SHOULD PLACE 0,,123456 INTO
  2585									;BOTH AC AND E
  2586	032111	302 06 0 00 123456 		CAIE	6,123456	;PASS IF C(AC) = 0,,123456
  2587						STOP^
  2588	032112	254 04 0 00 032113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2589	032113	324 00 0 00 032114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2590									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2591									;IN THE SUBTEST) TO LOOP ON ERROR^
  2592	032114	302 07 0 00 123456 		CAIE	7,123456	;PASS IF C(E) = 0,,123456
  2593						STOP^
  2594	032115	254 04 0 00 032116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2595	032116	324 00 0 00 032117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2596									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2597									;IN THE SUBTEST) TO LOOP ON ERROR^
  2598
  2599					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 43
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0070

  2600					;THIS TEST VERIFIES THAT HLRZS PLACES C(E-LEFT) INTO E-RIGHT AND
  2601					;PLACES 0 INTO E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2602					;IS ALSO PLACED INTO THE AC.
  2603					;IN THIS CASE, AC = 6, C(AC) = -1,,-1 AND C(E) = 123456,,701234.
  2604					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0,,123456 AND 0123456
  2605					;RESPECTIVELY.
  2606
  2607	032117	474 06 0 00 000000 	C66411:	SETO	6,		;PRELOAD AC WITH -1,,-1
  2608	032120	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2609	032121	202 07 0 00 032133 		MOVEM	7,E66411
  2610	032122	557 06 0 00 032133 		HLRZS	6,E66411	;*HLRZS SHOULD PLACE 0,,123456 INTO
  2611									;BOTH AC AND E
  2612	032123	302 06 0 00 123456 		CAIE	6,123456	;PASS IF C(AC) = 0,,123456
  2613						STOP^
  2614	032124	254 04 0 00 032125 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2615	032125	324 00 0 00 032126 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2616									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2617									;IN THE SUBTEST) TO LOOP ON ERROR^
  2618	032126	200 07 0 00 032133 		MOVE	7,E66411
  2619	032127	302 07 0 00 123456 		CAIE	7,123456	;PASS IF C(E) = 0,,123456
  2620						STOP^
  2621	032130	254 04 0 00 032131 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2622	032131	324 00 0 00 032132 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2623									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2624									;IN THE SUBTEST) TO LOOP ON ERROR^
  2625
  2626	032132	334 00 0 00 000000 		SKIPA			;GO TO NEXT TEST
  2627	032133	000000	000000		E66411:	0			;TEST WORD MEMORY
  2628
  2629					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 44
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0071

  2630					;THIS TEST VERIFIES THAT HRROM PLACES C(AC-RIGHT) INTO E-RIGHT AND
  2631					;PLACES -1 INTO E-LEFT.  IN THIS CASE, C(AC) = 123456,,701234 AND
  2632					;C(E) = 0.  HENCE, THE RESULT IN E SHOULD BE -1,,601234.
  2633
  2634	032134	200 05 0 00 034332 	C66500:	MOVE	5,[123456,,701234]  ;PRELOAD AC WITH 123456,,701234
  2635	032135	402 00 0 00 000006 		SETZM	6		;CLEAR E
  2636	032136	562 05 0 00 000006 		HRROM	5,6		;*HRROM SHOULD PLACE -1,,701234 INTO E
  2637	032137	312 05 0 00 034332 		CAME	5,[123456,,701234]  ;PASS IF C(AC) UNCHANGED
  2638						STOP^
  2639	032140	254 04 0 00 032141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2640	032141	324 00 0 00 032142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2641									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2642									;IN THE SUBTEST) TO LOOP ON ERROR^
  2643	032142	312 06 0 00 034335 		CAME	6,[-1,,701234]	;PASS IF C(E) = -1,,701234
  2644						STOP^
  2645	032143	254 04 0 00 032144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2646	032144	324 00 0 00 032145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2647									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2648									;IN THE SUBTEST) TO LOOP ON ERROR^
  2649
  2650
  2651					;**********
  2652
  2653					;THIS TEST VERIFIES THAT HRROS PLACES -1 INTO THE LEFT HALF OF E, BUT DOES NOT
  2654					;AFFECT THE RIGHT HALF OF E.  IF AC IS NON-ZERO THE RESULT IN E IS
  2655					;ALSO PLACED INTO THE AC.
  2656					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=123456,,701234
  2657					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0
  2658					;AND -1,,701234 RESPECTIVELY.
  2659
  2660	032145	400 00 0 00 000000 	C66600:	SETZ	0		;PRELOAD AC WITH 0
  2661	032146	200 17 0 00 034332 		MOVE	17,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2662	032147	563 00 0 00 000017 		HRROS	0,17		;HRROS SHOULD PLACE -1,,701234 INTO E
  2663	032150	312 00 0 00 034325 		CAME	0,[0]		;PASS IF C(AC) IS UNCHANGED
  2664						STOP^
  2665	032151	254 04 0 00 032152 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2666	032152	324 00 0 00 032153 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2667									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2668									;IN THE SUBTEST) TO LOOP ON ERROR^
  2669	032153	312 17 0 00 034335 		CAME	17,[-1,,701234]	;PASS IF C(E)=-1,,701234
  2670						STOP^
  2671	032154	254 04 0 00 032155 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2672	032155	324 00 0 00 032156 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2673									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2674									;IN THE SUBTEST) TO LOOP ON ERROR^
  2675
  2676					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 45
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0072

  2677					;THIS TEST VERIFIES THAT HRROS PLACES -1 INTO THE LEFT HALF OF E, BUT DOES NOT
  2678					;AFFECT THE RIGHT HALF OF E.  IF AC IS NON-ZERO THE RESULT IN E IS
  2679					;ALSO PLACED INTO THE AC.
  2680					;IN THIS CASE, AC=16, C(AC)=0 AND C(E)=123456,,701234
  2681					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,701234
  2682					;AND -1,,701234 RESPECTIVELY.
  2683
  2684	032156	400 16 0 00 000000 	C66610:	SETZ	16,		;PRELOAD AC WITH 0
  2685	032157	200 17 0 00 034332 		MOVE	17,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2686	032160	563 16 0 00 000017 		HRROS	16,17		;*HRROS SHOULD PLACE -1,,701234 INTO
  2687									;BOTH AC AND E
  2688	032161	312 16 0 00 034335 		CAME	16,[-1,,701234]	;PASS IF C(AC)=-1,,701234
  2689						STOP^
  2690	032162	254 04 0 00 032163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2691	032163	324 00 0 00 032164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2692									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2693									;IN THE SUBTEST) TO LOOP ON ERROR^
  2694	032164	312 17 0 00 034335 		CAME	17,[-1,,701234]	;PASS IF C(E)=-1,,701234
  2695						STOP^
  2696	032165	254 04 0 00 032166 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2697	032166	324 00 0 00 032167 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2698									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2699									;IN THE SUBTEST) TO LOOP ON ERROR^
  2700
  2701					;**********
  2702
  2703					;THIS TEST VERIFIES THAT HLRO PLACES C(E-LEFT) INTO AC-RIGHT AND
  2704					;PLACES -1 INTO AC-LEFT.  IN THIS CASE, C(AC)=0
  2705					;C(E)=765432,,107654.  HENCE, THE RESULT IN THE AC SHOULD BE -1,,765432.
  2706
  2707	032167	400 04 0 00 000000 	C66700:	SETZ	4,		;CLEAR AC
  2708	032170	200 05 0 00 034336 		MOVE	5,[765432,,107654]  ;PRELOAD E WITH 765432,,107654
  2709	032171	564 04 0 00 000005 		HLRO	4,5		;*HLRO SHOULD PLACE -1,,765432 INTO THE AC
  2710	032172	312 04 0 00 034337 		CAME	4,[-1,,765432]	;PASS IF C(AC)=-1,,765432
  2711						STOP^
  2712	032173	254 04 0 00 032174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2713	032174	324 00 0 00 032175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2714									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2715									;IN THE SUBTEST) TO LOOP ON ERROR^
  2716	032175	312 05 0 00 034336 		CAME	5,[765432,,107654]  ;PASS IF C(E) IS UNCHANGED
  2717						STOP^
  2718	032176	254 04 0 00 032177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2719	032177	324 00 0 00 032200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2720									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2721									;IN THE SUBTEST) TO LOOP ON ERROR^
  2722
  2723					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 46
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0073

  2724					;THIS TEST VERIFIES THAT HLROI PLACES -1,,0 INTO THE AC.
  2725					;IN THIS CASE, C(AC)=123456,,765432 AND E=070707.  HENCE, THE
  2726					;RESULT IN THE AC SHOULD BE -1,,0
  2727
  2728	032200	200 03 0 00 034252 	C67000:	MOVE	3,[123456,,765432]  ;PRELOAD AC WITH 123456,,765432
  2729	032201	565 03 0 00 070707 		HLROI	3,070707	;*HLROI SHOULD PLACE -1,,0 INTO THE AC
  2730	032202	312 03 0 00 034340 		CAME	3,[-1,,0]	;PASS IF C(AC)=-1,,0
  2731						STOP^
  2732	032203	254 04 0 00 032204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2733	032204	324 00 0 00 032205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2734									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2735									;IN THE SUBTEST) TO LOOP ON ERROR^
  2736
  2737					;**********
  2738
  2739					;THIS TEST VERIFIES THAT HLROM PLACES C(AC-LEFT) INTO E RIGHT AND
  2740					;PLACES -1 INTO E-LEFT
  2741					;IN THIS CASE, C(AC)=123456,,123422 AND C(E)=707070,,717171
  2742					;HENCE, THE RESULT IN E SHOULD BE -1,,123456
  2743
  2744	032205	200 01 0 00 034312 	C67100:	MOVE	1,[123456,,123422]  ;PRELOAD AC WITH 123456,,123422
  2745	032206	200 02 0 00 034313 		MOVE	2,[707070,,717171]  ;PRELOAD AC WITH 707070,,717171
  2746	032207	566 01 0 00 000002 		HLROM	1,2		;*HLROM SHOULD PLACE -1,,123456 INTO E
  2747	032210	312 01 0 00 034312 		CAME	1,[123456,,123422]  ;PASS IF C(AC) UNCHANGED
  2748						STOP^
  2749	032211	254 04 0 00 032212 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2750	032212	324 00 0 00 032213 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2751									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2752									;IN THE SUBTEST) TO LOOP ON ERROR^
  2753	032213	312 02 0 00 034341 		CAME	2,[-1,,123456]	;PASS IF C(E)=-1,,123456
  2754						STOP^
  2755	032214	254 04 0 00 032215 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2756	032215	324 00 0 00 032216 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2757									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2758									;IN THE SUBTEST) TO LOOP ON ERROR^
  2759
  2760					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 47
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0074

  2761					;THIS TEST VERIFIES THAT HLROS PLACES C(E-LEFT) INTO E-RIGHT AND
  2762					;PLACES -1 INTO E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2763					;IS ALSO PLACED INTO THE AC.
  2764					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=123456,,701234.
  2765					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0
  2766					;AND -1,,123456 RESPECTIVELY
  2767
  2768	032216	400 00 0 00 000000 	C67200:	SETZ	0		;PRELOAD AC WITH 0
  2769	032217	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2770	032220	567 00 0 00 000007 		HLROS	0,7		;*HLROS SHOULD PLACE -1,,123456 INTO E
  2771									;
  2772	032221	302 00 0 00 000000 		CAIE	0,0		;PASS IF C(AC) IS UNCHANGED
  2773						STOP^
  2774	032222	254 04 0 00 032223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2775	032223	324 00 0 00 032224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2777									;IN THE SUBTEST) TO LOOP ON ERROR^
  2778	032224	312 07 0 00 034341 		CAME	7,[-1,,123456]	;PASS IF C(E)=-1,,123456
  2779						STOP^
  2780	032225	254 04 0 00 032226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2781	032226	324 00 0 00 032227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2782									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2783									;IN THE SUBTEST) TO LOOP ON ERROR^
  2784
  2785					;**********
  2786
  2787					;THIS TEST VERIFIES THAT HLROS PLACES C(E-LEFT) INTO E-RIGHT AND
  2788					;PLACES -1 INTO E-LEFT.  IF AC IS NON-ZERO, THE RESULT IN E
  2789					;IS ALSO PLACED INTO THE AC.
  2790					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=123456,,701234.
  2791					;HENCE, THE RESULT IN AC AND E SHOULD BE -1,,123456
  2792					;AND -1,,123456 RESPECTIVELY.
  2793
  2794	032227	400 01 0 00 000000 	C67210:	SETZ	1,		;PRELOAD AC WITH 0
  2795	032230	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2796	032231	567 01 0 00 000007 		HLROS	1,7		;*HLROS SHOULD PLACE -1,,123456 INTO
  2797									;BOTH AC AND E
  2798	032232	312 01 0 00 034341 		CAME	1,[-1,,123456]	;PASS IF C(AC)=-1,,123456
  2799						STOP^
  2800	032233	254 04 0 00 032234 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2801	032234	324 00 0 00 032235 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2802									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2803									;IN THE SUBTEST) TO LOOP ON ERROR^
  2804	032235	312 07 0 00 034341 		CAME	7,[-1,,123456]	;PASS IF C(E)=-1,,123456
  2805						STOP^
  2806	032236	254 04 0 00 032237 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2807	032237	324 00 0 00 032240 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2808									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2809									;IN THE SUBTEST) TO LOOP ON ERROR^
  2810
  2811					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 48
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0075

  2812					;THIS TEST VERIFIES THAT HRRES PLACES C(E-RIGHT) INTO E-RIGHT
  2813					;AND PLACES BIT 18 OF E INTO BITS 0 THRU 17 OF E.  IF AC IS NON-ZERO,
  2814					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2815					;IN THIS CASE, AC=0, C(AC)=0 AND C(E)=123456,,701234
  2816					;HENCE, THE RESULT IN AC AND E SHOULD BE 0
  2817					;AND -1,,701234 RESPECTIVELY.
  2818
  2819	032240	400 00 0 00 000000 	C67300:	SETZ	0,		;PRELOAD AC WITH 0
  2820	032241	200 03 0 00 034332 		MOVE	3,[123456,,701234]  ;PRELOAD WITH 123456,,701234
  2821	032242	573 00 0 00 000003 		HRRES	0,3		;HRRES SHOULD PLACE -1,,701234 INTO E
  2822
  2823	032243	332 00 0 00 000000 		SKIPE			;PASS IF C(AC) IS UNCHANGED
  2824						STOP^
  2825	032244	254 04 0 00 032245 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2826	032245	324 00 0 00 032246 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2827									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2828									;IN THE SUBTEST) TO LOOP ON ERROR^
  2829	032246	312 03 0 00 034335 		CAME	3,[-1,,701234]	;PASS IF C(E)=-1,,701234
  2830						STOP^
  2831	032247	254 04 0 00 032250 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2832	032250	324 00 0 00 032251 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2833									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2834									;IN THE SUBTEST) TO LOOP ON ERROR^
  2835
  2836					;**********
  2837
  2838					;THIS TEST VERIFIES THAT HRRES, PLACES C(E-RIGHT) INTO E-RIGHT
  2839					;AND PLACES BIT 18 OF E INTO BITS 0 THRU 17 OF E.  IF AC IS NON-ZERO,
  2840					;THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2841					;IN THIS CASE, AC=1, C(AC)=0 AND C(E)=123456,,701234.
  2842					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,701234
  2843					;AND -1,,701234 RESPECTIVELY.
  2844
  2845	032251	400 01 0 00 000000 	C67310:	SETZ	1,		;PRELOAD AC WITH 0
  2846	032252	200 03 0 00 034332 		MOVE	3,[123456,,701234]  ;PRELOAD WITH 123456,,701234
  2847	032253	573 01 0 00 000003 		HRRES	1,3		;HRRES SHOULD PLACE -1,,701234 INTO
  2848									;BOTH AC AND E
  2849	032254	312 01 0 00 034335 		CAME	1,[-1,,701234]	;PASS IF C(AC)=-1,,701234
  2850						STOP^
  2851	032255	254 04 0 00 032256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2852	032256	324 00 0 00 032257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2853									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2854									;IN THE SUBTEST) TO LOOP ON ERROR^
  2855	032257	312 03 0 00 034335 		CAME	3,[-1,,701234]	;PASS IF C(E)=-1,,701234
  2856						STOP^
  2857	032260	254 04 0 00 032261 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2858	032261	324 00 0 00 032262 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2859									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2860									;IN THE SUBTEST) TO LOOP ON ERROR^
  2861
  2862					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 49
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL HWT INSTRUCTIONS                                                      SEQ 0076

  2863					;THIS TEST VERIFIES THAT HLRES PLACES C(E-LEFT) INTO E-RIGHT
  2864					;AND PLACES BIT 0 OF E INTO BITS 0 THRU 17 OF E.  IF AC IS
  2865					;NON-ZERO, THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2866					;IN THIS CASE, AC=0, C(AC)=-1,,-1 AND C(E) 123456,,701234
  2867					;HENCE, THE RESULTS IN AC AND E SHOULD BE -1,,-1
  2868					;AND 0,,123456 RESPECTIVELY.
  2869
  2870	032262	474 00 0 00 000000 	C67400:	SETO	0,		;PRELOAD AC WITH -1,,-1
  2871	032263	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2872	032264	577 00 0 00 000007 		HLRES	0,7		;*HLRES SHOULD PLACE 0,,123456 INTO E
  2873
  2874	032265	312 00 0 00 034217 		CAME	0,[-1]		;PASS IF C(AC) IS UNCHANGED
  2875						STOP^
  2876	032266	254 04 0 00 032267 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2877	032267	324 00 0 00 032270 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2878									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2879									;IN THE SUBTEST) TO LOOP ON ERROR^
  2880	032270	302 07 0 00 123456 		CAIE	7,123456	;PASS IF C(E)=0,,123456
  2881						STOP^
  2882	032271	254 04 0 00 032272 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2883	032272	324 00 0 00 032273 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2884									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2885									;IN THE SUBTEST) TO LOOP ON ERROR^
  2886
  2887					;**********
  2888
  2889					;THIS TEST VERIFIES THAT HLRES PLACES C(E-LEFT) INTO E-RIGHT
  2890					;AND PLACES BIT 0 OF E INTO BITS 0 THRU 17 OF E.  IF AC IS
  2891					;NON-ZERO, THE RESULT IN E IS ALSO PLACED INTO THE AC.
  2892					;IN THIS CASE, AC=1, C(AC)=-1,,-1 AND C(E) 123456,,701234.
  2893					;HENCE, THE RESULTS IN AC AND E SHOULD BE 0,,123456
  2894					;AND 0,,123456 RESPECTIVELY.
  2895
  2896	032273	474 01 0 00 000000 	C67410:	SETO	1,		;PRELOAD AC WITH -1,,-1
  2897	032274	200 07 0 00 034332 		MOVE	7,[123456,,701234]  ;PRELOAD E WITH 123456,,701234
  2898	032275	577 01 0 00 000007 		HLRES	1,7		;*HLRES SHOULD PLACE 0,,123456 INTO
  2899									;BOTH AC AND E
  2900	032276	302 01 0 00 123456 		CAIE	1,123456	;PASS IF C(AC)=0,,123456
  2901						STOP^
  2902	032277	254 04 0 00 032300 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2903	032300	324 00 0 00 032301 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2904									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2905									;IN THE SUBTEST) TO LOOP ON ERROR^
  2906	032301	302 07 0 00 123456 		CAIE	7,123456	;PASS IF C(E)=0,,123456
  2907						STOP^
  2908	032302	254 04 0 00 032303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2909	032303	324 00 0 00 032304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2910									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2911									;IN THE SUBTEST) TO LOOP ON ERROR^
  2912
  2913					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 50
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0077

  2914					SUBTTL	TEST OF MSCL LOGICAL TEST INSTRUCTIONS
  2915
  2916					;**********
  2917
  2918					;THIS TEST VERIFIES THAT TRNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  2919					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  2920					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  2921					;HENCE, TRNE SHOULD SKIP THE NEXT INSTRUCTION.  THE AC IS ALSO
  2922					;CHECKED FOR NO MODIFICATION.
  2923
  2924	032304	200 17 0 00 034332 	C67500:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  2925	032305	602 17 0 00 000003 		TRNE	17,3			;*TRNE SHOULD SKIP THE NEXT INSTRUCTION
  2926						STOP^
  2927	032306	254 04 0 00 032307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2928	032307	324 00 0 00 032310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2929									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2930									;IN THE SUBTEST) TO LOOP ON ERROR^
  2931	032310	312 17 0 00 034332 		CAME	17,[123456,,701234]	;PASS IF C AC) UNCHANGED
  2932						STOP^
  2933	032311	254 04 0 00 032312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2934	032312	324 00 0 00 032313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2935									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2936									;IN THE SUBTEST) TO LOOP ON ERROR^
  2937
  2938					;**********
  2939
  2940					;THIS TEST VERIFIES THAT TRNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  2941					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  2942					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  2943					;HENCE, TRNE SHOULD NOT SKIP THE NEXT INSTRUCTION.  THE AC IS ALSO
  2944					;CHECKED FOR NO MODIFICATION.
  2945
  2946	032313	200 16 0 00 034332 	C67510:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  2947	032314	602 16 0 00 000300 		TRNE	16,300			;*TRNE SHOULD NOT SKIP THE NEXT INSTRUCTION
  2948	032315	334 00 0 00 000000 		SKIPA				;PASS IF TRNE DID NOT SKIP
  2949						STOP^
  2950	032316	254 04 0 00 032317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2951	032317	324 00 0 00 032320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2952									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2953									;IN THE SUBTEST) TO LOOP ON ERROR^
  2954	032320	312 16 0 00 034332 		CAME	16,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  2955						STOP^
  2956	032321	254 04 0 00 032322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2957	032322	324 00 0 00 032323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2958									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2959									;IN THE SUBTEST) TO LOOP ON ERROR^
  2960
  2961					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 51
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0078

  2962					;THIS TEST VERIFIES THAT TLNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  2963					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  2964					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  2965					;HENCE, TLNE SHOULD SKIP THE NEXT INSTRUCTION, THE AC IS ALSO
  2966					;CHECKED FOR NO MODIFICATION.
  2967
  2968	032323	200 15 0 00 034332 	C67600:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  2969	032324	603 15 0 00 000300 		TLNE	15,300			;*TLNE CHOULD SKIP
  2970						STOP^
  2971	032325	254 04 0 00 032326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2972	032326	324 00 0 00 032327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2973									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2974									;IN THE SUBTEST) TO LOOP ON ERROR^
  2975	032327	312 15 0 00 034332 		CAME	15,[123456,,701234]	;PASS IF C(AC) IS UNCHANGED
  2976						STOP^
  2977	032330	254 04 0 00 032331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2978	032331	324 00 0 00 032332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2979									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2980									;IN THE SUBTEST) TO LOOP ON ERROR^
  2981
  2982					;**********
  2983
  2984					;THIS TEST VERIFIES THAT TLNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  2985					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO
  2986					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  2987					;HENCE, TLNE SHOULD NOT SKIP THE NEXT INSTRUCTION, THE AC IS ALSO
  2988					;CHECKED FOR NO MODIFICATION
  2989
  2990	032332	200 14 0 00 034332 	C67610:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  2991	032333	603 14 0 00 000003 		TLNE	14,3			;*TLNE SHOULD NOT SKIP
  2992	032334	334 00 0 00 000000 		SKIPA				;PASS IF TLNE DID NOT SKIP
  2993						STOP^
  2994	032335	254 04 0 00 032336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2995	032336	324 00 0 00 032337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2996									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2997									;IN THE SUBTEST) TO LOOP ON ERROR^
  2998	032337	312 14 0 00 034332 		CAME	14,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  2999						STOP^
  3000	032340	254 04 0 00 032341 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3001	032341	324 00 0 00 032342 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3002									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3003									;IN THE SUBTEST) TO LOOP ON ERROR^
  3004
  3005					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 52
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0079

  3006					;THIS TEST VERIFIES THAT TRNA ALWAYS SKIPS THE NEXT SEQUENTIAL
  3007					;INSTRUCTION.  HENCE, TRNA IS INDEPENDENT OF BOTH C(A) AND E
  3008					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3009					;HENCE, TRNA SHOULD SKIP THENEXT INSTRUCTION AND NOT ALTER C(AC).
  3010
  3011	032342	200 13 0 00 034332 	C67700:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3012	032343	604 13 0 00 000003 		TRNA	13,3			;*TRNA SHOULD ALWAYS SKIP
  3013						STOP^
  3014	032344	254 04 0 00 032345 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3015	032345	324 00 0 00 032346 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3017									;IN THE SUBTEST) TO LOOP ON ERROR^
  3018	032346	312 13 0 00 034332 		CAME	13,[123456,,701234]	;PASS IFC(AC) UNCHANGED
  3019						STOP^
  3020	032347	254 04 0 00 032350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3021	032350	324 00 0 00 032351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3022									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3023									;IN THE SUBTEST) TO LOOP ON ERROR^
  3024
  3025					;**********
  3026
  3027					;THIS TEST VERIFhES THAT TRNA ALWAYS SKIPS THE NEXT SEQUENTIAL
  3028					;INSTRUCTION.  HENCE, TRNA IS INDEPENDENT OF BOTH C(A) AND E.
  3029					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  3030					;HENCE, TRNA SHOULD SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3031
  3032	032351	200 12 0 00 034332 	C67710:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3033	032352	604 12 0 00 000300 		TRNA	12,300			;*TRNA SHOQLD ALWAYS SKIP
  3034						STOP^
  3035	032353	254 04 0 00 032354 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3036	032354	324 00 0 00 032355 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3037									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3038									;IN THE SUBTEST) TO LOOP ON ERROR^
  3039	032355	312 12 0 00 034332 		CAME	12,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3040						STOP^
  3041	032356	254 04 0 00 032357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3042	032357	324 00 0 00 032360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3043									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3044									;IN THE SUBTEST) TO LOOP ON ERROR^
  3045
  3046					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 53
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0080

  3047					;THIS TEST VERIFIaS THAT TLNA ALWAYS SKIPS THE NEXT SEQUENTIAL
  3048					;INSTRUCTION.  HENCE, TLNA IS INDEPENDENt OF BOTH C(AC) AND E.
  3049					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3050					;HENCE, TLNA SHOULD SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3051
  3052	032360	200 11 0 00 034332 	C70000:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3053	032361	605 11 0 00 000003 		TLNA	11,3			;*TLNA SHOULD ALWAYS SKIP
  3054						STOP^
  3055	032362	254 04 0 00 032363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3056	032363	324 00 0 00 032364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3057									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3058									;IN THE SUBTEST) TO LOOP ON ERROR^
  3059	032364	312 11 0 00 034332 		CAME	11,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3060						STOP^
  3061	032365	254 04 0 00 032366 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3062	032366	324 00 0 00 032367 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3063									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3064									;IN THE SUBTEST) TO LOOP ON ERROR^
  3065
  3066					;**********
  3067
  3068					;THIS TEST VERIFIES THAT TLNA ALWAYS SKIPS THE NEXT SEQUENTIAL
  3069					;INSTRUCTION.  HENCE, TLNA IS INDEPENDENT OF BOTH C(AC) AND E.
  3070					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3071					;HENCE, TLNA SHOULD SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3072
  3073	032367	200 10 0 00 034332 	C70010:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3074	032370	605 10 0 00 000300 		TLNA	10,300			;*TLNA SHOULD ALWAYS SKIP
  3075						STOP^
  3076	032371	254 04 0 00 032372 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3077	032372	324 00 0 00 032373 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3078									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3079									;IN THE SUBTEST) TO LOOP ON ERROR^
  3080	032373	312 10 0 00 034332 		CAME	10,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3081						STOP^
  3082	032374	254 04 0 00 032375 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3083	032375	324 00 0 00 032376 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3084									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3085									;IN THE SUBTEST) TO LOOP ON ERROR^
  3086
  3087					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 54
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0081

  3088					;THIS TEST VERIFIES THAT TRNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3089					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN
  3090					;E ARE ZERO.  IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3091					;HENCE, TRNN SHOULD SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3092
  3093	032376	200 07 0 00 034332 	C70100:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3094	032377	606 07 0 00 000300 		TRNN	7,300			;*TRNN SHOULD SKIP
  3095						SToP^
  3096	032400	254 04 0 00 032401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3097	032401	324 00 0 00 032402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3098									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3099									;IN THE SUBTEST) TO LOOP ON ERROR^
  3100	032402	312 07 0 00 034332 		CAME	7,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3101						STOP^
  3102	032403	254 04 0 00 032404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3103	032404	324 00 0 00 032405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3104									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3105									;IN THE SUBTEST) TO LOOP ON ERROR^
  3106
  3107					;**********
  3108
  3109					;THIS TEST VERIFIES THAT TRNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3110					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN
  3111					;E ARE ZERO.  IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3112					;HENCE, TRNN SHoULD NOT SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3113
  3114	032405	200 06 0 00 034332 	C70110:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3115	032406	606 06 0 00 000003 		TRNN	6,3			;*TRNN SHOULD NOT SKIP
  3116	032407	334 00 0 00 000000 		SKIPA				;PASS IF TRNN DID NOT SKIP
  3117						STOP^
  3118	032410	254 04 0 00 032411 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3119	032411	324 00 0 00 032412 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3120									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3121									;IN THE SUBTEST) TO LOOP ON ERROR^
  3122	032412	312 06 0 00 034332 		CAME	6,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3123						STOP^
  3124	032413	254 04 0 00 032414 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3125	032414	324 00 0 00 032415 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3126									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3127									;IN THE SUBTEST) TO LOOP ON ERROR^
  3128
  3129					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 55
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0082

  3130					;THIS TEST VERIFIES THAT TLNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3131					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3132					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3133					;HENCE, TLNN SHOULD SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3134
  3135	032415	200 05 0 00 034332 	C70200:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3136	032416	607 05 0 00 000003 		TLNN	5,3			;*TLNN SHOULD SKIP
  3137						STOP^
  3138	032417	254 04 0 00 032420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3139	032420	324 00 0 00 032421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3140									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3141									;IN THE SUBTEST) TO LOOP ON ERROR^
  3142	032421	312 05 0 00 034332 		CAME	5,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3143						STOP^
  3144	032422	254 04 0 00 032423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3145	032423	324 00 0 00 032424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3146									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3147									;IN THE SUBTEST) TO LOOP ON ERROR^
  3148
  3149					;**********
  3150
  3151					;THIS TEST VERIFIES thAT TLNN SkIPS THE NEXT SEQUENTIAL INSTRUcTION
  3152					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3153					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3154					;HENCE, TLNN SHOULD NOT SKIP THE NEXT INSTRUCTION AND NOT ALTER C(AC).
  3155
  3156	032424	200 04 0 00 034332 	C70210:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3157	032425	607 04 0 00 000300 		TLNN	4,300			;*TLNN SHOULD NOT SKIP
  3158	032426	334 00 0 00 000000 		SKIPA				;PASS IF TLNN DOES NOT SKIP
  3159						STOP^
  3160	032427	254 04 0 00 032430 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3161	032430	324 00 0 00 032431 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3162									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3163									;IN THE SUBTEST) TO LOOP ON ERROR^
  3164	032431	312 04 0 00 034332 		CAME	4,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3165						STOP^
  3166	032432	254 04 0 00 032433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3167	032433	324 00 0 00 032434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3168									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3169									;IN THE SUBTEST) TO LOOP ON ERROR^
  3170
  3171					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 56
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0083

  3172					;THIS TEST VERIFIES THAT TSNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3173					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN C(E) WITH
  3174					;BOTH HALVES SNAPPED ARE ZERO.  NEITHER AC NOR E ARE AFFECTED.
  3175					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  3176					;HENCE, TSNE SHOULD SKIP THE NEXT INSTRUCtION AND
  3177					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED.
  3178
  3179	032434	200 03 0 00 034332 	C70300:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3180	032435	200 04 0 00 034342 		MOVE	4,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  3181	032436	613 03 0 00 000004 		TSNE	3,4			;*TSNE SHOULD SKIP
  3182						STOP^
  3183	032437	254 04 0 00 032440 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3184	032440	324 00 0 00 032441 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3185									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3186									;IN THE SUBTEST) TO LOOP ON ERROR^
  3187	032441	312 03 0 00 034332 		CAME	3,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3188						STOP^
  3189	032442	254 04 0 00 032443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3190	032443	324 00 0 00 032444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3191									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3192									;IN THE SUBTEST) TO LOOP ON ERROR^
  3193	032444	312 04 0 00 034342 		CAME	4,[76543,,654321]	;PASS IF C(E) UNCHANGED
  3194						STOP^
  3195	032445	254 04 0 00 032446 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3196	032446	324 00 0 00 032447 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3197									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3198									;IN THE SUBTEST) TO LOOP ON ERROR^
  3199
  3200					;**********
  3201
  3202					;THIS TEST VERIFIES THAT TSNE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3203					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN C(E) WITH
  3204					;BOTH HALVES SNAPPED ARE ZERO.  NEITHER AC NOR E ARE AFFECTED.
  3205					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654323
  3206					;HENCE, TSNE SHOULD NOT SKIP THE NEXT INSTRUCTION AND
  3207					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED.
  3208
  3209	032447	200 02 0 00 034332 	C70310:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3210	032450	200 03 0 00 034343 		MOVE	3,[76543,,654323]	;PRELOAD E WITH 076543,,654323
  3211	032451	613 02 0 00 000003 		TSNE	2,3			;*TSNE SHOULD NOT SKIP
  3212	032452	334 00 0 00 000000 		SKIPA				;PASS IF TSOE DId NOT SKIP
  3213						STOP^
  3214	032453	254 04 0 00 032454 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3215	032454	324 00 0 00 032455 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3216									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3217									;IN THE SUBTEST) TO LOOP ON ERROR^
  3218	032455	312 02 0 00 034332 		CAME	2,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3219						STOP^
  3220	032456	254 04 0 00 032457 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3221	032457	324 00 0 00 032460 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3223									;IN THE SUBTEST) TO LOOP ON ERROR^
  3224	032460	312 03 0 00 034343 		CAME	3,[76543,,654323]	;PASS IF C(E) UNCHANGED
  3225						STOP^
  3226	032461	254 04 0 00 032462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 56-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0084

  3227	032462	324 00 0 00 032463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3228									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3229									;IN THE SUBTEST) TO LOOP ON ERROR^
  3230
  3231					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 57
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0085

  3232					;THIS TEST VERIFIES THAT TSNA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3233					;NEITHER AC NOR E ARE AFFECTED.
  3234					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  3235					;HENCE, TSNA SHOULD SKIP THE NEXT INSTRUCTION AND
  3236					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED
  3237
  3238	032463	200 01 0 00 034332 	C70400:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3239	032464	200 02 0 00 034342 		MOVE	2,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  3240	032465	615 01 0 00 000002 		TSNA	1,2			;*TSNA SHOULD SKIP
  3241						STOP^
  3242	032466	254 04 0 00 032467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3243	032467	324 00 0 00 032470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3244									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3245									;IN THE SUBTEST) TO LOOP ON ERROR^
  3246	032470	312 01 0 00 034332 		CAME	1,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3247						STOP^
  3248	032471	254 04 0 00 032472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3249	032472	324 00 0 00 032473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3250									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3251									;IN THE SUBTEST) TO LOOP ON ERROR^
  3252	032473	312 02 0 00 034342 		CAME	2,[76543,,654321]	;PASS IF C(E) UNCHANGED
  3253						STOP^
  3254	032474	254 04 0 00 032475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3255	032475	324 00 0 00 032476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3256									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3257									;IN THE SUBTEST) TO LOOP ON ERROR^
  3258
  3259					;**********
  3260
  3261					;THIS TEST VERIFIES THAT TSNA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3262					;NEITHER AC NOR E ARE EFFECTED.
  3263					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654323
  3264					;HENCE, TSNA SHOULD SKIP THE NEXT INSTRUCTION AND
  3265					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED
  3266
  3267	032476	200 00 0 00 034332 	C70410:	MOVE	0,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3268	032477	200 01 0 00 034343 		MOVE	1,[76543,,654323]	;PRELOAD E WITH 076543,,654323
  3269	032500	615 00 0 00 000001 		TSNA	0,1			;*TSNA SHOULD SKIP
  3270						STOP^
  3271	032501	254 04 0 00 032502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3272	032502	324 00 0 00 032503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3273									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3274									;IN THE SUBTEST) TO LOOP ON ERROR^
  3275	032503	312 01 0 00 034343 		CAME	1,[76543,,654323]	;PASS IF C(E) UNCHANGED
  3276						STOP^
  3277	032504	254 04 0 00 032505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3278	032505	324 00 0 00 032506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3279									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3280									;IN THE SUBTEST) TO LOOP ON ERROR^
  3281
  3282					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 58
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0086

  3283					;THIS TEST VERIFIES THAT TSNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3284					;IF AND ONLY IF NOT ALL HITS IN THE AC CORRESPONDING TO 1'S IN C(E) WITH
  3285					;BOTH HALVES SWAPPED ARE ZERO.  NEITHER AC NOR E ARE AFFECTED.
  3286					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076547,,654321
  3287					;HENCE, TSNN SHOULD SKIP THE NEXT INSTRUCTION AND
  3288					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED
  3289
  3290	032506	200 17 0 00 034332 	C70500:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3291	032507	200 00 0 00 034344 		MOVE	0,[76547,,654321]	;PRELOAD E WITH 076547,,654321
  3292	032510	617 17 0 00 000000 		TSNN	17,0			;*TSNN SHOULD SKIP
  3293						STOP^
  3294	032511	254 04 0 00 032512 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3295	032512	324 00 0 00 032513 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3296									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3297									;IN THE SUBTEST) TO LOOP ON ERROR^
  3298	032513	312 17 0 00 034332 		CAME	17,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3299						STOP^
  3300	032514	254 04 0 00 032515 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3301	032515	324 00 0 00 032516 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3302									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3303									;IN THE SUBTEST) TO LOOP ON ERROR^
  3304	032516	312 00 0 00 034344 		CAME	0,[76547,,654321]	;PASS IF C(E) UNCHANGED
  3305						STOP^
  3306	032517	254 04 0 00 032520 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3307	032520	324 00 0 00 032521 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3308									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3309									;IN THE SUBTEST) TO LOOP ON ERROR^
  3310
  3311					;**********
  3312
  3313					;THIS TEST VERIFIES THAT TSNN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3314					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN C(E) WITH
  3315					;BOTH HALVES SWAPPED ARE ZERO.  NEITHER AC NOR E ARE AFFECTED.
  3316					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  3317					;HENCE, TSNN SHOULD NOT SKIP THE NEXT INSTRUCTION AND
  3318					;BOTH C(AC) AND C(E) SHOULD BE UNMODIFIED
  3319
  3320	032521	200 16 0 00 034332 	C70510:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3321	032522	200 17 0 00 034342 		MOVE	17,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  3322	032523	617 16 0 00 000017 		TSNN	16,17			;*TSNN SHOULD NOT SKIP
  3323	032524	334 00 0 00 000000 		SKIPA				;PASS IF TSNN DID NOT SKIP
  3324						STOP^
  3325	032525	254 04 0 00 032526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3326	032526	324 00 0 00 032527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3327									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3328									;IN THE SUBTEST) TO LOOP ON ERROR^
  3329	032527	312 16 0 00 034332 		CAME	16,[123456,,701234]	;PASS IF C(AC) UNCHANGED
  3330						STOP^
  3331	032530	254 04 0 00 032531 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3332	032531	324 00 0 00 032532 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3333									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3334									;IN THE SUBTEST) TO LOOP ON ERROR^
  3335	032532	312 17 0 00 034342 		CAME	17,[76543,,654321]	;PASS IF C(E) UNCHANGED
  3336						STOP^
  3337	032533	254 04 0 00 032534 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 58-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0087

  3338	032534	324 00 0 00 032535 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3339									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3340									;IN THE SUBTEST) TO LOOP ON ERROR^
  3341
  3342					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 59
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0088

  3343					;THIS TEST VERIFIES THAT TRZ CHANGES ALL BITS IN THE AC-RIGHT WHICH
  3344					;CORRESPOND TO 1'S IN E TO ZERO AND DOES NOT SKIP.
  3345					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  3346					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,701234
  3347
  3348	032535	200 15 0 00 034332 	C70600:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234]
  3349	032536	620 12 0 00 000003 		TRZ	12,3			;*TRZ SHOULD PLACE 123456,,701234 INTO
  3350										;THE AC AND NOT SKIP
  3351	032537	334 00 0 00 000000 		SKIPA				;PASS IF TRZ DOES NOT SKIP
  3352						STOP^
  3353	032540	254 04 0 00 032541 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3354	032541	324 00 0 00 032542 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3355									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3356									;IN THE SUBTEST) TO LOOP ON ERROR^
  3357	032542	312 15 0 00 034332 		CAME	15,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3358						STOP^
  3359	032543	254 04 0 00 032544 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3360	032544	324 00 0 00 032545 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3362									;IN THE SUBTEST) TO LOOP ON ERROR^
  3363
  3364					;**********
  3365
  3366					;THIS TEST VERIFIES THAT TRZ CHANGES ALL BITS IN THE AC-RIGHT WHICH
  3367					;CORRESPOND TO 1'S IN E TO ZERO AND DOES NOT SKIP.
  3368					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  3369					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,701034
  3370
  3371	032545	200 14 0 00 034332 	C70610:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3372	032546	620 14 0 00 000300 		TRZ	14,300			;*TRZ SHOULD PLACE 123456,,701234 INTO
  3373										;THE ACAND NOT SKIP
  3374	032547	334 00 0 00 000000 		SKIPA				;PASS IF TRX DOES NOT SKIP
  3375						STOP^
  3376	032550	254 04 0 00 032551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3377	032551	324 00 0 00 032552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3378									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3379									;IN THE SUBTEST) TO LOOP ON ERROR^
  3380	032552	312 14 0 00 034345 		CAME	14,[123456,,701034]	;PASS IF C(AC)=123456,,701034
  3381						STOP^
  3382	032553	254 04 0 00 032554 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3383	032554	324 00 0 00 032555 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3385									;IN THE SUBTEST) TO LOOP ON ERROR^
  3386
  3387					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 60
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0089

  3388					;THIS TEST VERIFIES THAT TLZ CHANGES ALL BITS IN THE AC-LEFT WHICH
  3389					;CORRESPOND TO 1'S IN E TO ZERO AND DOES NOT SKIP.
  3390					;IN THIS CACE, C(AC)=123456,,701234 AND E=300
  3391					;HENCE, THE RESULT IN THE AC SHOUL BE 123456,,701234
  3392
  3393	032555	200 13 0 00 034332 	C70700:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3394	032556	621 13 0 00 000300 		TLZ	13,300			;*TLZ SHOULD PLACE 123456,,701234 INTO
  3395										;THE AC AND NOT SKIP
  3396	032557	334 00 0 00 000000 		SKIPA				;PASS IF TLZ DOES NOT SKIP
  3397						STOP^
  3398	032560	254 04 0 00 032561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3399	032561	324 00 0 00 032562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3400									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3401									;IN THE SUBTEST) TO LOOP ON ERROR^
  3402	032562	312 13 0 00 034332 		CAME	13,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3403						STOP^
  3404	032563	254 04 0 00 032564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3405	032564	324 00 0 00 032565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3406									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3407									;IN THE SUBTEST) TO LOOP ON ERROR^
  3408
  3409					;**********
  3410
  3411					;THIS TEST VERIFIES THAT TLZ CHANGES ALL BITS IN THE AC-LEFT WHICH
  3412					;CORRSPOND TO 1'S IN E TO ZERO AND DOES NOT SKIP.
  3413					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  3414					;HENCE, THE RESULT IN THE AC SHOULD BE 123454,,701234
  3415
  3416	032565	200 12 0 00 034332 	C70710:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3417	032566	621 12 0 00 000003 		TLZ	12,3			;*TLZ SHOULD PLACE 123454,,701234 INTO
  3418										;THE AC AND NOT SKIP
  3419	032567	334 00 0 00 000000 		SKIPA				;PASS IF TLZ DOES NOT SKIP
  3420						STOP^
  3421	032570	254 04 0 00 032571 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3422	032571	324 00 0 00 032572 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3423									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3424									;IN THE SUBTEST) TO LOOP ON ERROR^
  3425	032572	312 12 0 00 034346 		CAME	12,[123454,,701234]	;PASS IF C(AC)=123454,701234
  3426						STOP^
  3427	032573	254 04 0 00 032574 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3428	032574	324 00 0 00 032575 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3430									;IN THE SUBTEST) TO LOOP ON ERROR^
  3431
  3432					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 61
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0090

  3433					;THIS TEST VERIFIES THAT TRZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3434					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  3435					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3436					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  3437					;HENCE, TRZE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3438					;AND THE RESULT IN THE AC SHOULD BE 123456,,701234
  3439
  3440	032575	200 11 0 00 034332 	C71000:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3441	032576	622 11 0 00 000003 		TRZE	11,3			;*TRZE SHOULD SKIP AND
  3442										;PLACE 123456,,701234 INTO THE AC
  3443						STOP^
  3444	032577	254 04 0 00 032600 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3445	032600	324 00 0 00 032601 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3446									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3447									;IN THE SUBTEST) TO LOOP ON ERROR^
  3448	032601	312 11 0 00 034332 		CAME	11,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3449						STOP^
  3450	032602	254 04 0 00 032603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3451	032603	324 00 0 00 032604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3452									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3453									;IN THE SUBTEST) TO LOOP ON ERROR^
  3454
  3455					;**********
  3456
  3457					;THIS TEST VERIFIES THAT TRZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3458					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRSPONDING TO 1'S IN E ARE ZERO.
  3459					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3460					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  3461					;HENCE, TRZE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3462					;AND THE RESULT IN THE AC SHOUDL BE 123456,,701034
  3463
  3464	032604	200 10 0 00 034332 	C71010:	MOVE	10,[123456,,701234]	;PRELOAD AC WIT@ 123456,,701234
  3465	032605	622 10 0 00 000300 		TRZE	10,300			;*TRZE SHOULD PLACE 123456,,701034 INTO
  3466										;THE AC AND NOT SKIP
  3467	032606	334 00 0 00 000000 		SKIPA				;PASS IF TRZE DOES NOT SKIP
  3468						STOP^
  3469	032607	254 04 0 00 032610 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3470	032610	324 00 0 00 032611 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3471									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3472									;IN THE SUBTEST) TO LOOP ON ERROR^
  3473	032611	312 10 0 00 034345 		CAME	10,[123456,,701034]	;PASS IF C(AC)=123456,,701034
  3474						STOP^
  3475	032612	254 04 0 00 032613 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3476	032613	324 00 0 00 032614 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3477									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3478									;IN THE SUBTEST) TO LOOP ON ERROR^
  3479
  3480					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 62
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0091

  3481					;THIS TEST VERIFIES THAT TLZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3482					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3483					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3484					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  3485					;HENCE, TLZE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3486					;AND THE RESULT IN THE AC SHOULD BE 123456,,701234
  3487
  3488	032614	200 07 0 00 034332 	C71100:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3489	032615	623 07 0 00 000300 		TLZE	7,300			;*TLZE SHOULD SKIP AND
  3490										;PLACE 123456,,701234 INTO THE AC
  3491						STOP^
  3492	032616	254 04 0 00 032617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3493	032617	324 00 0 00 032620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3494									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3495									;IN THE SUBTEST) TO LOOP ON ERROR^
  3496	032620	312 07 0 00 034332 		CAME	7,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3497						STOP^
  3498	032621	254 04 0 00 032622 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3499	032622	324 00 0 00 032623 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3500									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3501									;IN THE SUBTEST) TO LOOP ON ERROR^
  3502
  3503					;**********
  3504
  3505					;THIS TEST VERIFIES THAT TLZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3506					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3507					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3508					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  3509					;HENCE, TLZE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3510					;AND THE RESULT IN THE AC SHOULD BE 123454,,701234
  3511
  3512	032623	200 06 0 00 034332 	C71110:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3513	032624	623 06 0 00 000003 		TLZE	6,3			;*TLZE SHOULD PLACE 123454,,701234 INTO
  3514										;THE AC AND NOT SKIP
  3515	032625	334 00 0 00 000000 		SKIPA				;PASS IF TLZE DOES NOT SKIP
  3516						STOP^
  3517	032626	254 04 0 00 032627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3518	032627	324 00 0 00 032630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3519									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3520									;IN THE SUBTEST) TO LOOP ON ERROR^
  3521	032630	312 06 0 00 034346 		CAME	6,[123454,,701234]	;PASS IF C(AC)=123454,,701234
  3522						STOP^
  3523	032631	254 04 0 00 032632 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3524	032632	324 00 0 00 032633 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3526									;IN THE SUBTEST) TO LOOP ON ERROR^
  3527
  3528					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 63
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0092

  3529					;THIS TEST VERIFIES THAT TRZA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3530					;AND CHANGES ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E TO ZERO.
  3531					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3532					;HENCE, TRZA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  3533					;THE AC SHOULD BE 123456,,701234
  3534
  3535	032633	200 05 0 00 034332 	C71200:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3536	032634	624 05 0 00 000003 		TRZA	5,3			;*TRZA SHOULD SKIP AND
  3537										;PLACE 123456,,701234 INTO THE AC
  3538						STOP^
  3539	032635	254 04 0 00 032636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3540	032636	324 00 0 00 032637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3541									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3542									;IN THE SUBTEST) TO LOOP ON ERROR^
  3543	032637	312 05 0 00 034332 		CAME	5,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3544						STOP^
  3545	032640	254 04 0 00 032641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3546	032641	324 00 0 00 032642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3547									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3548									;IN THE SUBTEST) TO LOOP ON ERROR^
  3549
  3550					;**********
  3551
  3552					;THIS TEST VERIFIES THAT TRZA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3553					;AND CHANGES ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E TO ZERO.
  3554					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3555					;HENCE, TRZA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  3556					;THE AC SHOULD BE 123456,,701234.
  3557
  3558	032642	200 04 0 00 034332 	C71210:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3559	032643	624 04 0 00 000300 		TRZA	4,300			;*TRZA SHOULD SKIP AND
  3560										;PLACE 123456,,701034 INTO THE AC
  3561						STOP^
  3562	032644	254 04 0 00 032645 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3563	032645	324 00 0 00 032646 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3564									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3565									;IN THE SUBTEST) TO LOOP ON ERROR^
  3566	032646	312 04 0 00 034345 		CAME	4,[123456,,701034]	;PASS IF C(AC)=123456,,701034
  3567						STOP^
  3568	032647	254 04 0 00 032650 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3569	032650	324 00 0 00 032651 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3570									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3571									;IN THE SUBTEST) TO LOOP ON ERROR^
  3572
  3573					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 64
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0093

  3574					;THIS TEST VERIFIES THAT TLZA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRQCTION
  3575					;AND CHANGES ALL BITS IN AC-LEFT WHICH CORRESPOND TO 1'S IN E TO ZERO.
  3576					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3577					;HENCE, TLZA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  3578					;THE AC SHOULD BE 123454,,701234.
  3579
  3580	032651	200 03 0 00 034332 	C71300:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3581	032652	625 03 0 00 000003 		TLZA	3,3			;*TLZA SHOULD SKIP AND
  3582										;PLACE 123454,,701234 INTO THE AC
  3583						STOP^
  3584	032653	254 04 0 00 032654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3585	032654	324 00 0 00 032655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3586									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3587									;IN THE SUBTEST) TO LOOP ON ERROR^
  3588	032655	312 03 0 00 034346 		CAME	3,[123454,,701234]	;PASS IF C(AC)=123454,,701234
  3589						STOP^
  3590	032656	254 04 0 00 032657 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3591	032657	324 00 0 00 032660 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3592									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3593									;IN THE SUBTEST) TO LOOP ON ERROR^
  3594
  3595					;**********
  3596
  3597					;THIS TEST VERIFIES THAT TLZA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3598					;AND CHANGES ALL BITS IN AC-LEFT WHICH CORRESPOND TO 1'S IN E TO ZERO.
  3599					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3600					;HENCE, TLZA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  3601					;THE AC SHOULD BE 123456,,701234.
  3602
  3603	032660	200 02 0 00 034332 	C71310:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3604	032661	625 02 0 00 000300 		TLZA	2,300			;*TLZA SHOULD SKIP AND
  3605										;PLACE 123456,,701234 INTO THE AC
  3606						STOP^
  3607	032662	254 04 0 00 032663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3608	032663	324 00 0 00 032664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3609									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3610									;IN THE SUBTEST) TO LOOP ON ERROR^
  3611	032664	312 02 0 00 034332 		CAME	2,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3612						STOP^
  3613	032665	254 04 0 00 032666 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3614	032666	324 00 0 00 032667 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3615									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3616									;IN THE SUBTEST) TO LOOP ON ERROR^
  3617
  3618					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 65
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0094

  3619					;THIS TEST VERIFIES THAT TRZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3620					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  3621					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3622					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3623					;HENCE, TRZN SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3624					;AND THE RESULT IN THE AC SHOULD BE 123456,,701034.
  3625
  3626	032667	200 01 0 00 034332 	C71400:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3627	032670	626 01 0 00 000300 		TRZN	1,300			;*TRZN SHOULD SKIP AND
  3628										;PLACE 123456,,701034 INTO THE AC
  3629						STOP^
  3630	032671	254 04 0 00 032672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3631	032672	324 00 0 00 032673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3632									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3633									;IN THE SUBTEST) TO LOOP ON ERROR^
  3634	032673	312 01 0 00 034345 		CAME	1,[123456,,701034]	;PASS IF C(AC)=123456,,701034
  3635						STOP^
  3636	032674	254 04 0 00 032675 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3637	032675	324 00 0 00 032676 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3638									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3639									;IN THE SUBTEST) TO LOOP ON ERROR^
  3640
  3641					;**********
  3642
  3643					;THIS TEST VERIFIES THAT TRZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3644					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  3645					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3646					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3647					;HENCE, TRZN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3648					;AND THE RESULT IN THE AC SHOULD BE 123456,,701234.
  3649
  3650	032676	200 00 0 00 034332 	C71410:	MOVE	0,[123456,,701234]	;PRELOAD AC WATH 123456,,701234
  3651	032677	626 00 0 00 000003 		TRZN	0,3			;*TRZN SHOULD PLACE 123456,,701234 INTO
  3652										;THE AC AND NOT SKIP
  3653	032700	334 00 0 00 000000 		SKIPA				;PASS IF TRZN DOES NOT SKIP
  3654						STOP^
  3655	032701	254 04 0 00 032702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3656	032702	324 00 0 00 032703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3657									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3658									;IN THE SUBTEST) TO LOOP ON ERROR^
  3659	032703	312 00 0 00 034332 		CAME	0,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3660						STOP^
  3661	032704	254 04 0 00 032705 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3662	032705	324 00 0 00 032706 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3663									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3664									;IN THE SUBTEST) TO LOOP ON ERROR^
  3665
  3666					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 66
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0095

  3667					;THIS TEST VERIFIES THAT TLZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3668					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3669					;THESE MASKED AC BITS ARE THEN CHANGED TO ZEROS.
  3670					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  3671					;HENCE, TLZN SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3672					;AND THE RESULT IN THE AC SHOULD BE 123454,,701234.
  3673
  3674	032706	200 17 0 00 034332 	C71500:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3675	032707	627 17 0 00 000003 		TLZN	17,3			;TLZN SHOULD SKIP AND
  3676										;PLACE 123454,,701234 INTO THE AC
  3677						STOP^
  3678	032710	254 04 0 00 032711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3679	032711	324 00 0 00 032712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3680									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3681									;IN THE SUBTEST) TO LOOP ON ERROR^
  3682	032712	312 17 0 00 034346 		CAME	17,[123454,,701234]	;PASS IF C(AC)=123454,,701234
  3683						STOP^
  3684	032713	254 04 0 00 032714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3685	032714	324 00 0 00 032715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3686									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3687									;IN THE SUBTEST) TO LOOP ON ERROR^
  3688
  3689					;**********
  3690
  3691					;THIS TEST VERIFIES THAT TLZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3692					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  3693					;THESE MASKED AC BIPS ARE THEN CHANGED TO ZEROS.
  3694					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  3695					;HENCE, TLZN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  3696					;AND THE RESULT IN THE AC SHOULD BE 123456,,701234.
  3697
  3698	032715	200 16 0 00 034332 	C71510:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3699	032716	627 16 0 00 000300 		TLZN	16,300			;*TLZN SHOULD PLACE 123456,,701234 INTO
  3700										;THE AC AND NOT SKIP
  3701	032717	334 00 0 00 000000 		SKIPA				;PASS IF TLZN DOES NOT SKIP
  3702						STOP^
  3703	032720	254 04 0 00 032721 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3704	032721	324 00 0 00 032722 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3705									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3706									;IN THE SUBTEST) TO LOOP ON ERROR^
  3707	032722	312 16 0 00 034332 		CAME	16,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3708						STOP^
  3709	032723	254 04 0 00 032724 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3710	032724	324 00 0 00 032725 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3711									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3712									;IN THE SUBTEST) TO LOOP ON ERROR^
  3713
  3714					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 67
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0096

  3715					;THIS TEST VERIFIES THAT TSZ CLEARS ALL BITS OF THE AC WHICH
  3716					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND DOES
  3717					;NOT SKIP THE NEXT INSTRUCTION. C(E) IS NOT AFFECTED.
  3718					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321.
  3719					;HENCE, TSZ SHOULD NOT SKIP AND C(AC) SHOULD BE 123456,,701234.
  3720
  3721	032725	200 15 0 00 034332 	C71600:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3722	032726	200 16 0 00 034342 		MOVE	16,[076543,,654321]	;PRELOAD E WITH 076543,,654321
  3723	032727	631 15 0 00 000016 		TSZ	15,16			;*TSZ SHOULD NOT SKIP AND
  3724										;PLACE 123456,,701234 INTO THE AC
  3725	032730	334 00 0 00 000000 		SKIPA				;PASS IF TSZ DID NOT SKIP
  3726						STOP^
  3727	032731	254 04 0 00 032732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3728	032732	324 00 0 00 032733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3729									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3730									;IN THE SUBTEST) TO LOOP ON ERROR^
  3731	032733	312 15 0 00 034332 		CAME	15,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3732						STOP^
  3733	032734	254 04 0 00 032735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3734	032735	324 00 0 00 032736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3735									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3736									;IN THE SUBTEST) TO LOOP ON ERROR^
  3737	032736	312 16 0 00 034342 		CAME	16,[76543,,654321]	;PASS IF C(E) UNCHANCED
  3738						STOP^
  3739	032737	254 04 0 00 032740 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3740	032740	324 00 0 00 032741 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3741									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3742									;IN THE SUBTEST) TO LOOP ON ERROR^
  3743
  3744					;**********
  3745
  3746					;THIS TEST VERIFIES THAT TSZ CLEARS ALL BITS OF THE AC WHICH
  3747					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND DOES
  3748					;NOT SKIP THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED.
  3749					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=252525,,707070.
  3750					;HENCE, TSZ SHOULD NOT SKIP AND C(AC) SHOULD BE 020406,,501210.
  3751
  3752	032741	200 14 0 00 034332 	C71610:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3753	032742	200 15 0 00 034347 		MOVE	15,[252525,,707070]	;PRELOAD E WITH 252525,,707070
  3754	032743	631 14 0 00 000015 		TSZ	14,15			;*TSZ SHOULD NOT SKIP AND
  3755										;PLACE 020406,,501210 INTO THE AC
  3756	032744	334 00 0 00 000000 		SKIPA				;PASS IF TSZ DID NOT SKIP
  3757						STOP^
  3758	032745	254 04 0 00 032746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3759	032746	324 00 0 00 032747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3760									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3761									;IN THE SUBTEST) TO LOOP ON ERROR^
  3762	032747	312 14 0 00 034350 		CAME	14,[020406,,501210]	;PASS IF C(AC)=020406,,501210
  3763						STOP^
  3764	032750	254 04 0 00 032751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3765	032751	324 00 0 00 032752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3766									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3767									;IN THE SUBTEST) TO LOOP ON ERROR^
  3768	032752	312 15 0 00 034347 		CAME	15,[252525,,707070]	;PASS IF C(E) UNCHANGED
  3769						STOP^
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 67-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0097

  3770	032753	254 04 0 00 032754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3771	032754	324 00 0 00 032755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3772									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3773									;IN THE SUBTEST) TO LOOP ON ERROR^
  3774
  3775					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 68
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0098

  3776					;THIS TEST VERIFIES THAT TDZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3777					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  3778					;C(E).
  3779					;AC BITS ARE THEN CHANGED TO ZERO.
  3780					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543.
  3781					;HENCE, TDZE SHOULD SKIP AND THE RESULT IN THE AC
  3782					;SHOULD BE 123456,,701234.  C(E) IS NOT AFFECTED.
  3783
  3784	032755	200 13 0 00 034332 	C71700:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3785	032756	200 14 0 00 034351 		MOVE	14,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  3786	032757	632 13 0 00 000014 		TDZE	13,14			;*TDZE SHOULD SKIP AND
  3787										;PLACE 123456,,701234 INTO THE AC
  3788						STOP^
  3789	032760	254 04 0 00 032761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3790	032761	324 00 0 00 032762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3791									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3792									;IN THE SUBTEST) TO LOOP ON ERROR^
  3793	032762	312 13 0 00 034332 		CAME	13,[123456,,701234]	;PASS IF C(AC)=123456,,701234]
  3794						STOP^
  3795	032763	254 04 0 00 032764 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3796	032764	324 00 0 00 032765 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3797									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3798									;IN THE SUBTEST) TO LOOP ON ERROR^
  3799	032765	312 14 0 00 034351 		CAME	14,[654321,,076543]	;PASS IF C(E) UNCHANGED
  3800						STOP^
  3801	032766	254 04 0 00 032767 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3802	032767	324 00 0 00 032770 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3803									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3804									;IN THE SUBTEST) TO LOOP ON ERROR^
  3805
  3806					;**********
  3807
  3808					;THIS TEST VERIFIES THAT TDZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3809					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  3810					;C(E) ARE ZERO. THESE MASKED
  3811					;AC BITS ARE THEN CHANGED TO ZERO.
  3812					;IN THIS CASE, C(AC)= 123456,,701234 AND C(E)= 754321,,076543
  3813					;HENCE, TDZE SHOULD NOT SKIP AND THE RESULT IN AC
  3814					;SHOULD BE 023456,,701234 C(E) IS NOT AFFECTED
  3815
  3816	032770	200 12 0 00 034332 	C71710:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3817	032771	200 13 0 00 034352 		MOVE	13,[754321,,076543]	;PRELOAD E WITH 754321,,076543
  3818	032772	632 12 0 00 000013 		TDZE	12,13			;*TDZE SHOULD NOT SKIP AND
  3819										;PLACE 023456,,701234 INTO THE AC
  3820	032773	334 00 0 00 000000 		SKIPA				;PASS IF TDZE DOES NOT SKIP
  3821						STOP^
  3822	032774	254 04 0 00 032775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3823	032775	324 00 0 00 032776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3824									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3825									;IN THE SUBTEST) TO LOOP ON ERROR^
  3826	032776	312 12 0 00 034353 		CAME	12,[023456,,701234]	;PASS IF C(AC)= 023456,,701234
  3827						STOP^
  3828	032777	254 04 0 00 033000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3829	033000	324 00 0 00 033001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3830									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 68-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0099

  3831									;IN THE SUBTEST) TO LOOP ON ERROR^
  3832	033001	312 13 0 00 034352 		CAME	13,[754321,,076543]	;PASS IF C(E) UNCHANGED
  3833						STOP^
  3834	033002	254 04 0 00 033003 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3835	033003	324 00 0 00 033004 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3836									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3837									;IN THE SUBTEST) TO LOOP ON ERROR^
  3838
  3839					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 69
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0100

  3840					;THIS TEST VERIFIES THAT TSZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3841					;IF AND ONLY IF ALL BITS IN THE AC CORRECPONDING TO 1'S IN
  3842					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  3843					;AC BITS ARE THEN CHANGED TO ZERO.
  3844					;IN THIS CASE, C(AC)= 123456,,701234 AND C(E)= 076543,,654321
  3845					;HENCE, TSZE SHOULD SKIP AND THE RESULT IN AC
  3846					;SHOULD BE 123456,,701234 C(E) IS NOT AFFECTED
  3847
  3848	033004	200 11 0 00 034332 	C72000:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3849	033005	200 12 0 00 034342 		MOVE	12,[076543,,654321]	;PRELOAD E WITH 076543,,654321
  3850	033006	633 11 0 00 000012 		TSZE	11,12			;*TSZE SHOULD SKIP AND
  3851										;PLACE 123456,,701234 INTO THE AC
  3852						STOP^
  3853	033007	254 04 0 00 033010 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3854	033010	324 00 0 00 033011 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3855									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3856									;IN THE SUBTEST) TO LOOP ON ERROR^
  3857	033011	312 11 0 00 034332 		CAME	11,[123456,,701234]	;PASS IF C(AC)= 123456,,701234
  3858						STOP^
  3859	033012	254 04 0 00 033013 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3860	033013	324 00 0 00 033014 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3861									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3862									;IN THE SUBTEST) TO LOOP ON ERROR^
  3863	033014	312 12 0 00 034342 		CAME	12,[76543,,654321]	;PASS IF C(E) UNCHANGED
  3864						STOP^
  3865	033015	254 04 0 00 033016 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3866	033016	324 00 0 00 033017 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3867									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3868									;IN THE SUBTEST) TO LOOP ON ERROR^
  3869
  3870					;**********
  3871
  3872					;THIS TEST VERIFIES THAT TSZE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  3873					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  3874					;C (E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  3875					;AC BITS ARE THEN CHANGED TO ZERO
  3876					;IN THIS CASE, C(AC)= 123456,,701234 AND C(E)= 076543,,657321
  3877					;HENCE, TSZE SHOULD NOT SKIP AND THE RESULT IN AC
  3878					;SHOULD BE 120456,,701234 C(E) IS NOT AFFECTED
  3879
  3880	033017	200 10 0 00 034332 	C72010:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3881	033020	200 11 0 00 034354 		MOVE	11,[76543,,657321]	;PRELOAD E WITH 076543,,654321
  3882	033021	633 10 0 00 000011 		TSZE	10,11			;*TSZE SHOULD NOT SKIP AND
  3883										;PLACE 120456,,701234 INTO THE AC
  3884	033022	334 00 0 00 000000 		SKIPA				;PASS IF TSZE DID NOT SKIP
  3885						STOP^
  3886	033023	254 04 0 00 033024 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3887	033024	324 00 0 00 033025 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3888									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3889									;IN THE SUBTEST) TO LOOP ON ERROR^
  3890	033025	312 10 0 00 034355 		CAME	10,[120456,,701234]	;PASS IF C(AC)= 120456,,701234
  3891						STOP^
  3892	033026	254 04 0 00 033027 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3893	033027	324 00 0 00 033030 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3894									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 69-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0101

  3895									;IN THE SUBTEST) TO LOOP ON ERROR^
  3896	033030	312 11 0 00 034354 		CAME	11,[76543,,657321]	;PASS IF C(E) UNCHANGED
  3897						STOP^
  3898	033031	254 04 0 00 033032 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3899	033032	324 00 0 00 033033 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3900									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3901									;IN THE SUBTEST) TO LOOP ON ERROR^
  3902
  3903
  3904					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 70
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0102

  3905					;THIS TEST VERIFIES THAT TDZA CLEARS ALL BITS OF THE AC WHICH
  3906					;CORRESPOND TO 1'S IN C(E) AND ALWAYS
  3907					;SKIPS THE NEXT INSTRUCTION C(E) IS NOT AFFECTED
  3908					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)= 654321,,076543
  3909					;HENCE, TD2A SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 123456,,701234
  3910
  3911	033033	200 07 0 00 034332 	C72100:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3912	033034	200 10 0 00 034351 		MOVE	10,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  3913	033035	634 07 0 00 000010 		TDZA	7,10			;*TDZA SHOULD SKIP AND
  3914										;PLACE 123456,,701234 INTO THE AC
  3915						STOP^
  3916	033036	254 04 0 00 033037 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3917	033037	324 00 0 00 033040 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3918									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3919									;IN THE SUBTEST) TO LOOP ON ERROR^
  3920	033040	312 07 0 00 034332 		CAME	7,[123456,,701234]	;PASS IF C(AC)= 123456,,701234
  3921						STOP^
  3922	033041	254 04 0 00 033042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3923	033042	324 00 0 00 033043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3924									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3925									;IN THE SUBTEST) TO LOOP ON ERROR^
  3926	033043	312 10 0 00 034351 		CAME	10,[654321,,076543]	;PASS IF C(AC)=123456,,701234
  3927						STOP^
  3928	033044	254 04 0 00 033045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3929	033045	324 00 0 00 033046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3930									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3931									;IN THE SUBTEST) TO LOOP ON ERROR^
  3932	033046	312 10 0 00 034351 		CAME	10,[654321,,076543]	;PASS IF C(E) UNCHANGED
  3933						STOP^
  3934	033047	254 04 0 00 033050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3935	033050	324 00 0 00 033051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3936									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3937									;IN THE SUBTEST) TO LOOP ON ERROR^
  3938
  3939					;**********
  3940
  3941					;THIS TEST VERIFIES THAT TDZA CLEARS ALL BITS OF THE AC WHICH
  3942					;CORRESPOND TO 1'S IN C(E) AND ALWAYS
  3943					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  3944					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=252525,,707070
  3945					;HENCE, TDZA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 121052,,000204
  3946
  3947	033051	200 06 0 00 034332 	C72110:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3948	033052	200 07 0 00 034347 		MOVE	7,[252525,,707070]	;PRELOAD E WITH 252525,,707070
  3949	033053	634 06 0 00 000007 		TDZA	6,7			;*TDZA SHOULD SKIP AND
  3950									;PLACE 121052,,000204 INTO THE AC
  3951						STOP^
  3952	033054	254 04 0 00 033055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3953	033055	324 00 0 00 033056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3955									;IN THE SUBTEST) TO LOOP ON ERROR^
  3956	033056	312 06 0 00 034356 		CAME	6,[121052,,000204]	;PASS IF C(AC)=121052,,000204
  3957						STOP^
  3958	033057	254 04 0 00 033060 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3959	033060	324 00 0 00 033061 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 70-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0103

  3960									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3961									;IN THE SUBTEST) TO LOOP ON ERROR^
  3962	033061	312 07 0 00 034347 		CAME	7,[252525,,707070]	;PASS IF C(E) UNCHANGED
  3963						STOP^
  3964	033062	254 04 0 00 033063 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3965	033063	324 00 0 00 033064 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3966									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3967									;IN THE SUBTEST) TO LOOP ON ERROR^
  3968
  3969					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 71
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0104

  3970					;THIS TEST VERIFIES TH`T TSZA CLEARS AHL BITS OF THE AC WHICH
  3971					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  3972					;SKIPS THE NEXT INSTRUCTION. C(E) IS NOT AFFECTED.
  3973					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  3974					;HENCE, TSZA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 123456,,701234
  3975
  3976	033064	200 05 0 00 034332 	C72200:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  3977	033065	200 06 0 00 034342 		MOVE	6,[076543,,654321]	;PRELOAD E WITH 076543,,654321
  3978	033066	635 05 0 00 000006 		TSZA	5,6			;*TSZA SHOULD SKIP AND
  3979										;PLACE 123456,,701234 INTO THE AC
  3980						STOP^
  3981	033067	254 04 0 00 033070 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3982	033070	324 00 0 00 033071 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3983									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3984									;IN THE SUBTEST) TO LOOP ON ERROR^
  3985	033071	312 05 0 00 034332 		CAME	5,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  3986						STOP^
  3987	033072	254 04 0 00 033073 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3988	033073	324 00 0 00 033074 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3989									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3990									;IN THE SUBTEST) TO LOOP ON ERROR^
  3991	033074	312 06 0 00 034342 		CAME	6,[076543,,654321]	;PASS IF C(E) UNCHANGED
  3992						STOP^
  3993	033075	254 04 0 00 033076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3994	033076	324 00 0 00 033077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3995									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3996									;IN THE SUBTEST) TO LOOP ON ERROR^
  3997
  3998					;**********
  3999
  4000					;THIS TEST VERIFIES THAT TSZA CLEARS ALL BITS OF THE AC WHICH
  4001					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  4002					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED.
  4003					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=701234,,123456
  4004					;HENCE, TSZA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 0
  4005
  4006	033077	200 04 0 00 034332 	C72210:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4007	033100	200 05 0 00 034357 		MOVE	5,[701234,,123456]	;PRELOAD E WITH 701234,,123456
  4008	033101	635 04 0 00 000005 		TSZA	4,5			;*TSZA SHOULD SKIP AND
  4009										;PLACE 0 INTO THE AC
  4010						STOP^
  4011	033102	254 04 0 00 033103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4012	033103	324 00 0 00 033104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4013									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4014									;IN THE SUBTEST) TO LOOP ON ERROR^
  4015	033104	312 04 0 00 034325 		CAME	4,[0]			;PASS IF C(AC)=0
  4016						STOP^
  4017	033105	254 04 0 00 033106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4018	033106	324 00 0 00 033107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4019									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4020									;IN THE SUBTEST) TO LOOP ON ERROR^
  4021	033107	312 05 0 00 034357 		CAME	5,[701234,,123456]	;PASS IF C(E) UNCHANGED
  4022						SToP^
  4023	033110	254 04 0 00 033111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4024	033111	324 00 0 00 033112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 71-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0105

  4025									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4026									;IN THE SUBTEST) TO LOOP ON ERROR^
  4027
  4028					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 72
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0106

  4029					;THIS TEST VERIFIES THAT TDZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4030					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4031					;C(E) ARE ZERO.  THESE MASKED
  4032					;AC BITS ARE THEN CHANGEDTO ZERO.
  4033					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076547
  4034					;HENCE, TDZN SHOULD SKIP AND THE RESULT IN THE AC
  4035					;SHOULD BE 123456(,701230.  C(E) IS NOT AFFECTED.
  4036
  4037	033112	200 03 0 00 034332 	C72300:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4038	033113	200 04 0 00 034360 		MOVE	4,[654321,,76547]	;PRELOAD E WITH 654321,,076547
  4039	033114	636 03 0 00 000004 		TDZN	3,4			;*TDZN SHoULD SKIP AND
  4040										;PLACE 123456,,701230 INTO THE AC
  4041						STOP^
  4042	033115	254 04 0 00 033116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4043	033116	324 00 0 00 033117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4045									;IN THE SUBTEST) TO LOOP ON ERROR^
  4046	033117	312 03 0 00 034361 		CAME	3,[123456,,701230]	;PASS IF C(AC)=123456,,701230
  4047						STOP^
  4048	033120	254 04 0 00 033121 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4049	033121	324 00 0 00 033122 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4050									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4051									;IN THE SUBTEST) TO LOOP ON ERROR^
  4052	033122	312 04 0 00 034360 		CAME	4,[654321,,076547]	;PASS IF C(E) UNCHANGED
  4053						STOP^
  4054	033123	254 04 0 00 033124 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4055	033124	324 00 0 00 033125 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4056									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4057									;IN THE SUBTEST) TO LOOP ON ERROR^
  4058
  4059					;**********
  4060
  4061					;THIS TEST VERIFIES THAT TDZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4062					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4063					;C(E) ARE ZERO.  THESE MASKED
  4064					;AC BITS ARE THEN CHANGED TO ZERO.
  4065					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543
  4066					;HENCE, TDZN SHOULD NOT SKIP AND THE RESULT IN THE AC
  4067					;SHOULD BE 123456,,701234.  C(E) IS NOT AFFECTED.
  4068
  4069	033125	200 02 0 00 034332 	C72310:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4070	033126	200 03 0 00 034351 		MOVE	3,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  4071	033127	636 02 0 00 000003 		TDZN	2,3			;*TDZN SHOULD NOT SKIP AND
  4072										;PLACE 123456,,701234 INTO THE AC
  4073	033130	334 00 0 00 000000 		SKIPA				;PASS IF TDZN DOES NOT SKIP
  4074						STOP^
  4075	033131	254 04 0 00 033132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4076	033132	324 00 0 00 033133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4077									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4078									;IN THE SUBTEST) TO LOOP ON ERROR^
  4079	033133	312 02 0 00 034332 		CAME	2,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  4080						STOP^
  4081	033134	254 04 0 00 033135 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4082	033135	324 00 0 00 033136 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4083									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 72-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0107

  4084									;IN THE SUBTEST) TO LOOP ON ERROR^
  4085	033136	312 03 0 00 034351 		CAME	3,[654321,,076543]	;PASS IF C(E) UNCHANGED
  4086						STOP^
  4087	033137	254 04 0 00 033140 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4088	033140	324 00 0 00 033141 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4089									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4090									;IN THE SUBTEST) TO LOOP ON ERROR^
  4091
  4092					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 73
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0108

  4093					;THIS TEST VERIFIES THaT TSZN SKIPS THE NEXT SEQQENPIAL INSTRUCTION
  4094					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4095					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4096					;AC BITS ARE THEN CHANGED TO ZERO.
  4097					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=077543,,654321.
  4098					;HENCE, TSZN SHOULD SKIP AND THE RESULT IN THE AC
  4099					;SHOULD BE 123456,,700234.  C(E) IS NOT AFFECTED.
  4100
  4101	033141	200 01 0 00 034332 	C72400:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4102	033142	200 02 0 00 034362 		MOVE	2,[077543,,654321]	;PRELOAD E WITH 077543,,654321
  4103	033143	637 01 0 00 000002 		TSZN	1,2			;*TSZN SHOULD SKIP AND
  4104										;PLACE 123456,,700234 INTO THE AC
  4105						STOP^
  4106	033144	254 04 0 00 033145 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4107	033145	324 00 0 00 033146 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4108									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4109									;IN THE SUBTEST) TO LOOP ON ERROR^
  4110	033146	312 01 0 00 034363 		CAME	1,[123456,,700234]	;PASS IF C(AC)=123456,,700234
  4111						STOP^
  4112	033147	254 04 0 00 033150 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4113	033150	324 00 0 00 033151 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4114									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4115									;IN THE SUBTEST) TO LOOP ON ERROR^
  4116	033151	312 02 0 00 034362 		CAME	2,[77543,,654321]	;PASS IF C(E) UNCHANGED
  4117						STOP^
  4118	033152	254 04 0 00 033153 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4119	033153	324 00 0 00 033154 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4120									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4121									;IN THE SUBTEST) TO LOOP ON ERROR^
  4122
  4123					;**********
  4124
  4125					;THIS TEST VERIFIES THAT TSZN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4126					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4127					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4128					;AC BITS ARE THEN CHANGED TO ZERO.
  4129					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321.-
  4130					;HENCE, TSZN SHOULD NOT SKIP AND THE RESULT IN THE AC
  4131					;SHOULD BE 123456,,701234.  C(E) IS NOT AFFECTED.
  4132
  4133	033154	200 00 0 00 034332 	C72410:	MOVE	0,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4134	033155	200 01 0 00 034342 		MOVE	1,[76543,,654321]	;PRElOAD E WITH 076543,,654321
  4135	033156	637 00 0 00 000001 		TSZN	0,1			;*TSZN SHOULD NOT SKIP AND
  4136										;PLACE 123456,,701234 INTO THE AC
  4137	033157	334 00 0 00 000000 		SKIPA				;PASS IF TSZN DOES NOT SKIP
  4138						STOP^
  4139	033160	254 04 0 00 033161 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4140	033161	324 00 0 00 033162 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4141									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4142									;IN THE SUBTEST) TO LOOP ON ERROR^
  4143	033162	312 00 0 00 034332 		CAME	0,[123456,,701234]	;PASS IF C(AC)=123456,,701234]
  4144						STOP^
  4145	033163	254 04 0 00 033164 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4146	033164	324 00 0 00 033165 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4147									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 73-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0109

  4148									;IN THE SUBTEST) TO LOOP ON ERROR^
  4149	033165	312 01 0 00 034342 		CAME	1,[76543,,654321]	;PASS IF C(E) UNCHANGED
  4150						STOP^
  4151	033166	254 04 0 00 033167 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4152	033167	324 00 0 00 033170 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4153									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4154									;IN THE SUBTEST) TO LOOP ON ERROR^
  4155
  4156					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 74
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0110

  4157					;THIS TEST VERIFIES THAT TRC COMPLEMENTS ALL BITS IN THE AC-RIGHT WHICH
  4158					;CORRESPOND TO 1'S IN E AND DOES NOT SKIP.
  4159					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  4160					;HENCE, THE RESULT IN THE AC SHOUHD BE 123456,,701237
  4161
  4162	033170	200 17 0 00 034332 	C72500:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4163	033171	640 17 0 00 000003 		TRC	17,3			;*TRC SHOULD NOT SKIP AND
  4164										;PLACE 123456,,701237 INTO THE AC
  4165	033172	334 00 0 00 000000 		SKIPA				;PASS IF TRC DID NOT SKIP
  4166						STOP^
  4167	033173	254 04 0 00 033174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4168	033174	324 00 0 00 033175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4169									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4170									;IN THE SUBTEST) TO LOOP ON ERROR^
  4171	033175	312 17 0 00 034364 		CAME	17,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  4172						STOP^
  4173	033176	254 04 0 00 033177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4174	033177	324 00 0 00 033200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4175									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4176									;IN THE SUBTEST) TO LOOP ON ERROR^
  4177
  4178					;**********
  4179
  4180					;THIS TEST VERIFIES THAT TRC COMPLEMENTS ALL BITS IN THE AC-RIGHT WHICH
  4181					;CORRESPOND TO 1'S IN E AND DOES NOT SKIP.
  4182					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  4183					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,701134
  4184
  4185	033200	200 16 0 00 034332 	C72510:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4186	033201	640 16 0 00 000300 		TRC	16,300			;*TRC SHOULD NOT SKIP AND
  4187										;PLACE 123456,,701134 INTO THE AC
  4188	033202	334 00 0 00 000000 		SKIPA				;PASS IF TRC DID NOT SKIP
  4189						STOP^
  4190	033203	254 04 0 00 033204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4191	033204	324 00 0 00 033205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4192									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4193									;IN THE SUBTEST) TO LOOP ON ERROR^
  4194	033205	312 16 0 00 034365 		CAME	16,[123456,,701134]	;PASS IF C(AC)=123456,,701134
  4195						STOP^
  4196	033206	254 04 0 00 033207 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4197	033207	324 00 0 00 033210 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4198									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4199									;IN THE SUBTEST) TO LOOP ON ERROR^
  4200
  4201					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 75
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0111

  4202					;THIS TEST VERIFIES THAT TLC COMPLEMENTS ALL BITS IN THE AC-LEFT WHICH
  4203					;CORRESPOND TO 1'S IN E AND DOES NOT SKIP.
  4204					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  4205					;HENCE, ThE RESULT IN THE AC SHOULD BE 123756,,701234.
  4206
  4207	033210	200 15 0 00 034332 	C72600:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4208	033211	641 15 0 00 000300 		TLC	15,300			;*TLC SHOULD NOT SKIP AND
  4209										;PLACE 123756,,701234 INTO THE AC
  4210	033212	334 00 0 00 000000 		SKIPA				;PASS IF TLC DID NOT SKIP
  4211						STOP^
  4212	033213	254 04 0 00 033214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4213	033214	324 00 0 00 033215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4215									;IN THE SUBTEST) TO LOOP ON ERROR^
  4216	033215	312 15 0 00 034366 		CAME	15,[123756,,701234]	;PASS IF A(AC)=123756,,701234
  4217						STOP^
  4218	033216	254 04 0 00 033217 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4219	033217	324 00 0 00 033220 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4220									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4221									;IN THE SUBTEST) TO LOOP ON ERROR^
  4222
  4223					;**********
  4224
  4225					;THIS TEST VERIFIES THAT TLC COMPLEMENTS ALL BITS IN THE AC-LEFT WHICH
  4226					;CORRESPOND TO 1'S IN E AND DOES NOT SKIP.
  4227					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  4228					;HENCE, THE RESULT IN THE AC SHOULD BE 123455,,701234.
  4229
  4230	033220	200 14 0 00 034332 	C72610:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4231	033221	641 14 0 00 000003 		TLC	14,3			;*TLC SHOULD NOT SKIP AND
  4232										;PLACE 123455,,701234 INTO THE AC
  4233	033222	334 00 0 00 000000 		SKIPA				;PASS IF TLC DID NOT SKIP
  4234						STOP^
  4235	033223	254 04 0 00 033224 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4236	033224	324 00 0 00 033225 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4237									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4238									;IN THE SUBTEST) TO LOOP ON ERROR^
  4239	033225	312 14 0 00 034367 		CAME	14,[123455,,701234]	;PASS IF C(AC)=123455,,701234
  4240						STOP^
  4241	033226	254 04 0 00 033227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4242	033227	324 00 0 00 033230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4243									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4244									;IN THE SUBTEST) TO LOOP ON ERROR^
  4245
  4246					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 76
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0112

  4247					;THIS TEST VERIFIES THAT TRCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4248					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  4249					;THESE MASKED AC BITS ARE THEN COMPLEMENTED.
  4250					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  4251					;HENCE, TRCE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4252					;AND THE RESULT IN THE AC SHOULD BE 123456,,701237.
  4253
  4254	033230	200 13 0 00 034332 	C72700:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4255	033231	642 13 0 00 000003 		TRCE	13,3			;*TRCE SHOULD SKIP AND
  4256										;PLACE 123456,,701237 INTO ThE AC
  4257						STOP^
  4258	033232	254 04 0 00 033233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4259	033233	324 00 0 00 033234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4260									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4261									;IN THE SUBTEST) TO LOOP ON ERROR^
  4262	033234	312 13 0 00 034364 		CAME	13,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  4263						STOP^
  4264	033235	254 04 0 00 033236 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4265	033236	324 00 0 00 033237 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4266									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4267									;IN THE SUBTEST) TO LOOP ON ERROR^
  4268
  4269					;**********
  4270
  4271					;THIS TEST VERIFIES THAT TRCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4272					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  4273					;THESE MASKED AC BITS ARE THEN COMPLEMENTED.
  4274					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  4275					;HENCE, TRCE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4276					;AND THE RESULT IN THE AC SHOULD BE 123456,,701134
  4277
  4278	033237	200 12 0 00 034332 	C72710:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4279	033240	642 12 0 00 000300 		TRCE	12,300			;*TRCE SHOULD NOT SKIP AND
  4280										;PLACE 123456,,701134 INTO THE AC
  4281	033241	334 00 0 00 000000 		SKIPA				;PASS IF TRCE DID NOT SKIP
  4282						STOP^
  4283	033242	254 04 0 00 033243 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4284	033243	324 00 0 00 033244 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4285									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4286									;IN THE SUBTEST) TO LOOP ON ERROR^
  4287	033244	312 12 0 00 034365 		CAME	12,[123456,,701134]	;PASS IF C(AC)=123456,,701134
  4288						STOP^
  4289	033245	254 04 0 00 033246 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4290	033246	324 00 0 00 033247 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4291									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4292									;IN THE SUBTEST) TO LOOP ON ERROR^
  4293
  4294					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 77
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0113

  4295					;THIS TEST VERIFIES THAT TLCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4296					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  4297					;THESE MASKED AC BITS ARE THEN COMPLEMENTED.
  4298					;IN THIS CASE, C(AC)=123456,,701234 AND E=300.
  4299					;HENCE, TLCE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4300					;AND THE RESULT IN THE AC SHOULD BE 123756,,701234.
  4301
  4302	033247	200 11 0 00 034332 	C73000:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4303	033250	643 11 0 00 000300 		TLCE	11,300			;*TLCE SHOULD SKIP AND
  4304										;PLACE 123756,,701234 INTO THE AC
  4305						STOP^
  4306	033251	254 04 0 00 033252 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4307	033252	324 00 0 00 033253 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4308									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4309									;IN THE SUBTEST) TO LOOP ON ERROR^
  4310	033253	312 11 0 00 034366 		CAME	11,[123756,,701234]	;PASS IF C(AC)=123756,,701234
  4311						STOP^
  4312	033254	254 04 0 00 033255 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4313	033255	324 00 0 00 033256 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4314									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4315									;IN THE SUBTEST) TO LOOP ON ERROR^
  4316
  4317					;**********
  4318
  4319					;THIS TEST VERIFIES THAT TLCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4320					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  4321					;THESE MASKED AC BITS ARE THEN COMPLEMENTED.
  4322					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  4323					;HENCE, TLCE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4324					;AND THE RESULT IN THE AC SHOULD BE 123455,,701234.
  4325
  4326	033256	200 10 0 00 034332 	C73010:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4327	033257	643 10 0 00 000003 		TLCE	10,3			;*TLCE SHOULD NOT SKIP AND
  4328										;PLACE 123455,,701234 INTO THE AC
  4329	033260	334 00 0 00 000000 		SKIPA				;PASS IF TLCE DID NOT SKIP
  4330						STOP^
  4331	033261	254 04 0 00 033262 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4332	033262	324 00 0 00 033263 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4333									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4334									;IN THE SUBTEST) TO LOOP ON ERROR^
  4335	033263	312 10 0 00 034367 		CAME	10,[123455,,701234]	;PASS IF C(AC)=123455,,701234]
  4336						STOP^
  4337	033264	254 04 0 00 033265 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4338	033265	324 00 0 00 033266 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4339									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4340									;IN THE SUBTEST) TO LOOP ON ERROR^
  4341
  4342					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 78
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0114

  4343					;THIS TEST VERIFIES THAT TRCA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4344					;AND COMPLEMENTS ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E.
  4345					;IN THIS CASE, C(AC)=123456,,701234 AND E=3.
  4346					;HENCE, TRCA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  4347					;THE AC SHOULD BE 123456,,701237.
  4348
  4349	033266	200 07 0 00 034332 	C73100:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4350	033267	644 07 0 00 000003 		TRCA	7,3			;*TRCA SHOULD SKIP AND
  4351										;PLACE 123456,,701237 INTO THE AC
  4352						STOP^
  4353	033270	254 04 0 00 033271 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4354	033271	324 00 0 00 033272 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4355									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4356									;IN THE SUBTEST) TO LOOP ON ERROR^
  4357	033272	312 07 0 00 034364 		CAME	7,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  4358						STOP^
  4359	033273	254 04 0 00 033274 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4360	033274	324 00 0 00 033275 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4362									;IN THE SUBTEST) TO LOOP ON ERROR^
  4363
  4364					;**********
  4365
  4366					;THIS TEST VERIFIES THAT TRCA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4367					;AND COMPLEMENTS ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E
  4368					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  4369					;HENCE, TRCA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  4370					;THE AC SHOULD BE 123456,,701134
  4371
  4372	033275	200 06 0 00 034332 	C73110:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4373	033276	644 06 0 00 000300 		TRCA	6,300			;*TRCA SHOULD SKIP AND
  4374										;PLACE 123456,,701134 INTO THE AC
  4375						STOP^
  4376	033277	254 04 0 00 033300 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4377	033300	324 00 0 00 033301 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4378									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4379									;IN THE SUBTEST) TO LOOP ON ERROR^
  4380	033301	312 06 0 00 034365 		CAME	6,[123456,,701134]	;PASS IF C(AC)=123456,,701134
  4381						STOP^
  4382	033302	254 04 0 00 033303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4383	033303	324 00 0 00 033304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4385									;IN THE SUBTEST) TO LOOP ON ERROR^
  4386
  4387					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 79
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0115

  4388					;THIS TEST VERIFIES THAT TLCA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4389					;AND COMPLEMENTS ALL BITS IN AC-LEFT WHICH CORRESPOND TO 1'S IN E
  4390					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  4391					;HENCE, TLCA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  4392					;THE AC SHOULD 123456,,701234
  4393
  4394	033304	200 05 0 00 034332 	C73200:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4395	033305	645 05 0 00 000003 		TLCA	5,3			;*TLCA SHOULD SKIP AND
  4396										;PLACE 12345,,701234 INTO THE AC
  4397						STOP^
  4398	033306	254 04 0 00 033307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4399	033307	324 00 0 00 033310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4400									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4401									;IN THE SUBTEST) TO LOOP ON ERROR^
  4402	033310	312 05 0 00 034367 		CAME	5,[123455,,701234]	;PASS IF C(AC)=123455,,701234
  4403						STOP^
  4404	033311	254 04 0 00 033312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4405	033312	324 00 0 00 033313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4406									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4407									;IN THE SUBTEST) TO LOOP ON ERROR^
  4408
  4409					;**********
  4410
  4411					;THIS TEST VERIFIES THAT TLCA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4412					;AND COMPLEMENTS ALL BITS IN AC-LEFT WHICH CORRESPOND TO 1'S IN E
  4413					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  4414					;HENCE, TLCA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  4415					;THE AC SHOULD BE 123756,,701234
  4416
  4417	033313	200 04 0 00 034332 	C73210:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4418	033314	645 04 0 00 000300 		TLCA	4,300			;*TLCA SHOULD SKIP AND
  4419										;PLACE 123756,,701234 INTO THE AC
  4420						STOP^
  4421	033315	254 04 0 00 033316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4422	033316	324 00 0 00 033317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4423									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4424									;IN THE SUBTEST) TO LOOP ON ERROR^
  4425	033317	312 04 0 00 034366 		CAME	4,[123756,,701234]	;PASS IF C(AC)=123756,,701234
  4426						STOP^
  4427	033320	254 04 0 00 033321 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4428	033321	324 00 0 00 033322 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4429									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4430									;IN THE SUBTEST) TO LOOP ON ERROR^
  4431
  4432					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 80
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0116

  4433					;THIS TEST VERIFIES THAT TRCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4434					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  4435					;THESE MASKED AC BITS ARE THEN COMPLEMENTED
  4436					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  4437					;HENCE, TRCN SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4438					;AND RESULT IN THE AC SHOULD BE 123456,,701134
  4439
  4440	033322	200 03 0 00 034332 	C73300:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4441	033323	646 03 0 00 000300 		TRCN	3,300			;*SHOULD SKIP AND
  4442										;PLACE 123456,,701134 INTO THE AC
  4443						STOP^
  4444	033324	254 04 0 00 033325 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4445	033325	324 00 0 00 033326 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4446									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4447									;IN THE SUBTEST) TO LOOP ON ERROR^
  4448	033326	312 03 0 00 034365 		CAME	3,[123456,,701134]	;PASS IF C(AC)=123456,,701134
  4449						STOP^
  4450	033327	254 04 0 00 033330 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4451	033330	324 00 0 00 033331 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4452									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4453									;IN THE SUBTEST) TO LOOP ON ERROR^
  4454
  4455					;**********
  4456
  4457					;THIS TEST VERIFIES THAT TRCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4458					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  4459					;THESE MASKED AC BITS ARE THEN COMPLEMENTED
  4460					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  4461					;HENCE, TRCN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4462					;AND THE RESULT IN THE AC SHOULD BE 123456,,701237
  4463
  4464	033331	200 02 0 00 034332 	C73310:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4465	033332	646 02 0 00 000003 		TRCN	2,3			;*TRCN SHOULD NOT SKIP AND
  4466										;PLACE 123456,,701237 INTO THE AC
  4467	033333	334 00 0 00 000000 		SKIPA				;PASS IF TRCN DID NOT SKIP
  4468						STOP^
  4469	033334	254 04 0 00 033335 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4470	033335	324 00 0 00 033336 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4471									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4472									;IN THE SUBTEST) TO LOOP ON ERROR^
  4473	033336	312 02 0 00 034364 		CAME	2,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  4474						STOP^
  4475	033337	254 04 0 00 033340 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4476	033340	324 00 0 00 033341 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4477									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4478									;IN THE SUBTEST) TO LOOP ON ERROR^
  4479
  4480					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 81
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0117

  4481					;THIS TEST VERIFIES THAT TLCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4482					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  4483					;THESE MASKED AC BITS ARE THEN COMPLEMENTED
  4484					;IN THE CASE, C(AC)=123456,,701234 AND E=3
  4485					;HENCE, TLCN SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4486					;AND THE RESULT IN THE AC SHOULD BE 123456,,701234
  4487
  4488	033341	200 01 0 00 034332 	C73400:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4489	033342	647 01 0 00 000003 		TLCN	1,3			;*TLCN SHOULD SKIP AND
  4490										;PLACE 123455,701234 INTO THE AC
  4491						STOP^
  4492	033343	254 04 0 00 033344 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4493	033344	324 00 0 00 033345 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4494									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4495									;IN THE SUBTEST) TO LOOP ON ERROR^
  4496	033345	312 01 0 00 034367 		CAME	1,[123455,,701234]	;PASS IF C(AC)=123455,,701234
  4497						STOP^
  4498	033346	254 04 0 00 033347 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4499	033347	324 00 0 00 033350 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4500									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4501									;IN THE SUBTEST) TO LOOP ON ERROR^
  4502
  4503					;**********
  4504
  4505					;THIS TEST VERIFIES THAT TLCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4506					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZER.
  4507					;THESE MASKED AC BITS ARE THEN COMPLEMENTED
  4508					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  4509					;HENCE, TLCN SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  4510					;AND THE RESULT IN THE AC SHOULD BE 123756,,701234
  4511
  4512	033350	200 00 0 00 034332 	C73410:	MOVE	0,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4513	033351	647 00 0 00 000300 		TLCN	0,300			;*TLCN SHOULD NOT SKIP AND
  4514										;PLACE 123756,,701234 INTO THE AC
  4515	033352	334 00 0 00 000000 		SKIPA				;PASS IF TLCN DID NOT SKIP
  4516						STOP^
  4517	033353	254 04 0 00 033354 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4518	033354	324 00 0 00 033355 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4519									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4520									;IN THE SUBTEST) TO LOOP ON ERROR^
  4521	033355	312 00 0 00 034366 		CAME	0,[123756,,701234]	;PASS IF C(AC)=123756,,701234
  4522						STOP^
  4523	033356	254 04 0 00 033357 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4524	033357	324 00 0 00 033360 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4526									;IN THE SUBTEST) TO LOOP ON ERROR^
  4527
  4528					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 82
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0118

  4529					;THIS TEST VERIFIES THAT TSL COMPLEMENTS ALL BITS OF THE AC WHICH
  4530					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND DOES
  4531					;NOT SKIP THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  4532					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)6543,,654321
  4533					;HENCE, TSC SHOULD NOT SKIP AND C(AC) SHOULD BE -1,,-1
  4534
  4535	033360	200 17 0 00 034332 	C73500:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4536	033361	200 00 0 00 034342 		MOVE	0,[076543,,654321]	;PRELOAD E WITH 076543,,654321
  4537	033362	651 17 0 00 000000 		TSC	17,0			;*TSC SHOULD NOT SKIP AND
  4538										;PLACE -1,,-1 INTO THE AC
  4539	033363	334 00 0 00 000000 		SKIPA				;PASS IF TSC DOES NOT SKIP
  4540						STOP^
  4541	033364	254 04 0 00 033365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4542	033365	324 00 0 00 033366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4543									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4544									;IN THE SUBTEST) TO LOOP ON ERROR^
  4545	033366	312 17 0 00 034217 		CAME	17,[-1]			;PASS IF C(AC)=-1,,-1
  4546						STOP^
  4547	033367	254 04 0 00 033370 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4548	033370	324 00 0 00 033371 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4550									;IN THE SUBTEST) TO LOOP ON ERROR^
  4551	033371	312 00 0 00 034342 		CAME	0,[076543,,654321]	;PASS IF C(E) UNCHANGED
  4552						STOP^
  4553	033372	254 04 0 00 033373 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4554	033373	324 00 0 00 033374 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4555									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4556									;IN THE SUBTEST) TO LOOP ON ERROR^
  4557
  4558					;**********
  4559
  4560					;THIS TEST VERIFIES THAT TSC COMPLEMENTS ALL BITS OF THE AC WHICH
  4561					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND DOES
  4562					;NOT SKIP THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  4563					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=252525,,707070
  4564					;HENCE, TSC SHOULD NOT SKIP AND C(AC) SHOULD BE 624426,,553711
  4565
  4566	033374	200 16 0 00 034332 	C73510:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4567	033375	200 17 0 00 034347 		MOVE	17,[252525,,707070]	;PRELOAD E WITH 252525,,707070
  4568	033376	651 16 0 00 000017 		TSC	16,17			;*TSC SHOULD NOT SKIP AND
  4569										;PLACE 624426,,553711 INTO THE AC
  4570	033377	334 00 0 00 000000 		SKIPA				;PASS IF TSC DOES NOT SKIP
  4571						STOP^
  4572	033400	254 04 0 00 033401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4573	033401	324 00 0 00 033402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4574									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4575									;IN THE SUBTEST) TO LOOP ON ERROR^
  4576	033402	312 16 0 00 034370 		CAME	16,[624426,,553711]	;PASS IF C(AC)=624426,,553711
  4577						STOP^
  4578	033403	254 04 0 00 033404 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4579	033404	324 00 0 00 033405 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4580									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4581									;IN THE SUBTEST) TO LOOP ON ERROR^
  4582	033405	312 17 0 00 034347 		CAME	17,[252525,,707070]	;PASS IF C(E) UNCHANGED
  4583						STOP^
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 82-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0119

  4584	033406	254 04 0 00 033407 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4585	033407	324 00 0 00 033410 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4586									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4587									;IN THE SUBTEST) TO LOOP ON ERROR^
  4588
  4589					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 83
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0120

  4590					;THIS TEST VERIFIES THAT TDCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4591					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4592					;C(E) ARE ZERO.  THESE MASKED
  4593					;AC BITS ARE THEN COMPLEMENTED
  4594					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543
  4595					;HENCE, TDCE SHOULD SKIP AND THE RESULT IN AC
  4596					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTED
  4597
  4598	033410	200 15 0 00 034332 	C73600:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4599	033411	200 16 0 00 034351 		MOVE	16,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  4600	033412	652 15 0 00 000016 		TDCE	15,16			;*TDCE SHOULD SKIP AND
  4601										;PLACE -1,,-1 INTO THE AC
  4602						STOP^
  4603	033413	254 04 0 00 033414 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4604	033414	324 00 0 00 033415 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4605									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4606									;IN THE SUBTEST) TO LOOP ON ERROR^
  4607	033415	312 15 0 00 034217 		CAME	15,[-1]			;PASS IF C(AC)=-1,,-1
  4608						STOP^
  4609	033416	254 04 0 00 033417 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4610	033417	324 00 0 00 033420 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4611									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4612									;IN THE SUBTEST) TO LOOP ON ERROR^
  4613	033420	312 16 0 00 034351 		CAME	16,[654321,,076543]	;PASS IF C(E) UNCHANGED
  4614						STOP^
  4615	033421	254 04 0 00 033422 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4616	033422	324 00 0 00 033423 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4617									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4618									;IN THE SUBTEST) TO LOOP ON ERROR^
  4619
  4620					;**********
  4621
  4622					;THIS TEST VERIFIES THAT TDCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4623					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4624					;C(E) ARE ZERO.  THESE MASKED 
  4625					;AC BITS ARE THEN COMPLEMENTED
  4626					;IN THIS CASE, C(AC)=123456,,701234 AND C(E) 754321,,076543
  4627					;HENCE, TDCE SHOULD NOT SKIP AND THE RESULT IN AC
  4628					;SHOULD BE 677777,,-1 C(E) IS NOT AFFECTED.
  4629
  4630	033423	200 14 0 00 034332 	C73610:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4631	033424	200 15 0 00 034352 		MOVE	15,[754321,,076543]	;PRELOAD E WITH 754321,,076543
  4632	033425	652 14 0 00 000015 		TDCE	14,15			;*TDCE SHOULD NOT SKIP AND
  4633										;PLACE 677777,,-1 INTO THE AC
  4634	033426	334 00 0 00 000000 		SKIPA				;PASS IF TDCE DOES NOT SKIP
  4635						STOP^
  4636	033427	254 04 0 00 033430 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4637	033430	324 00 0 00 033431 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4638									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4639									;IN THE SUBTEST) TO LOOP ON ERROR^
  4640	033431	312 14 0 00 034371 		CAME	14,[677777,,-1]		;PASS IF C(AC)=677777,,-1
  4641						STOP^
  4642	033432	254 04 0 00 033433 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4643	033433	324 00 0 00 033434 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4644									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 83-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0121

  4645									;IN THE SUBTEST) TO LOOP ON ERROR^
  4646	033434	312 15 0 00 034352 		CAME	15,[754321,,076543]	;PASS IF C(E) UNCHANGED
  4647						STOP^
  4648	033435	254 04 0 00 033436 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4649	033436	324 00 0 00 033437 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4650									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4651									;IN THE SUBTEST) TO LOOP ON ERROR^
  4652
  4653					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 84
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0122

  4654					;THIS TEST VERIFIES THAT TSCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4655					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4656					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4657					;AC BITS ARE THEN COMPLEMENTED
  4658					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  4659					;HENCE, TSCE SHOULD SKIP AND THE RESULT IN THE AC
  4660					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTED
  4661
  4662	033437	200 13 0 00 034332 	C73700:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4663	033440	200 14 0 00 034342 		MOVE	14,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  4664	033441	653 13 0 00 000014 		TSCE	13,14			;*TSCE SHOULD SKIP AND
  4665										;PLACE -1,,-1 INTO THE AC
  4666						STOP^
  4667	033442	254 04 0 00 033443 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4668	033443	324 00 0 00 033444 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4669									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4670									;IN THE SUBTEST) TO LOOP ON ERROR^
  4671	033444	312 13 0 00 034217 		CAME 	13,[-1]			;PASS IF C(E) UNCHANGED
  4672						STOP^
  4673	033445	254 04 0 00 033446 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4674	033446	324 00 0 00 033447 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4675									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4676									;IN THE SUBTEST) TO LOOP ON ERROR^
  4677
  4678					;**********
  4679
  4680					;THIS TEST VERIFIES THAT TSCE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4681					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4682					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4683					;AC BITS ARE THEN COMPLEMENTED
  4684					;IN THIS CASE, C(AC)=123456,701234 AND C(E)=076543,,657321
  4685					;HENCE, TSCE SHOULD NOT SKIP AND THE RESULT IN THE AC
  4686					;SHOULD BE 774777,,-1.  C(E) IS NOT AFFECTED.
  4687
  4688	033447	200 12 0 00 034332 	C73710:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4689	033450	200 13 0 00 034354 		MOVE	13,[76543,,657321]	;PRELOAD E WITH 076543,,657321
  4690	033451	653 12 0 00 000013 		TSCE	12,13			;*TSCE HOULD NOT SKIP AND
  4691										;PLACE 774777,,-1 INTO THE AC
  4692	033452	334 00 0 00 000000 		SKIPA				;PASS IF TSCE DOES NOT SKIP
  4693						STOP^
  4694	033453	254 04 0 00 033454 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4695	033454	324 00 0 00 033455 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4696									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4697									;IN THE SUBTEST) TO LOOP ON ERROR^
  4698	033455	312 12 0 00 034372 		CAME	12,[774777,,-1]		;PASS IF C(AC)=774777,,-1
  4699						STOP^
  4700	033456	254 04 0 00 033457 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4701	033457	324 00 0 00 033460 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4702									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4703									;IN THE SUBTEST) TO LOOP ON ERROR^
  4704	033460	312 13 0 00 034354 		CAME	13,[76543,,657321]	;PASS IF C(E) UNCHANGED
  4705						STOP^
  4706	033461	254 04 0 00 033462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4707	033462	324 00 0 00 033463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4708									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 84-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0123

  4709									;IN THE SUBTEST) TO LOOP ON ERROR^
  4710
  4711					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 85
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0124

  4712					;THIS TEST VERIFIES THAT TDCA COMPLEMENTS ALL BITS OF THE AC WHICH
  4713					;CORRESPOND TO 1'S IN C(E) AND ALWAYS
  4714					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  4715					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543
  4716					;HENCE, TDCA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE -1,,-1
  4717
  4718	033463	200 11 0 00 034332 	C74000:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4719	033464	200 12 0 00 034351 		MOVE	12,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  4720	033465	654 11 0 00 000012 		TDCA	11,12			;*TDCA SHOULD SKIP AND
  4721										;PLACE -1,,-1 INTO THE AC
  4722						STOP^
  4723	033466	254 04 0 00 033467 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4724	033467	324 00 0 00 033470 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4725									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4726									;IN THE SUBTEST) TO LOOP ON ERROR^
  4727	033470	312 11 0 00 034217 		CAME	11,[-1]			;PASS IF C(AC)=-1,,-1
  4728						STOP^
  4729	033471	254 04 0 00 033472 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4730	033472	324 00 0 00 033473 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4731									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4732									;IN THE SUBTEST) TO LOOP ON ERROR^
  4733	033473	312 12 0 00 034351 		CAME	12,[654321,,76543]	;PASS IF C(E) UNCHANGED
  4734						STOP^
  4735	033474	254 04 0 00 033475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4736	033475	324 00 0 00 033476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4737									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4738									;IN THE SUBTEST) TO LOOP ON ERROR^
  4739
  4740					;**********
  4741
  4742					;THIS TEST VERIFIES THAT TDCA COMPLEMENTS ALL BITS OF THE AC WHICH
  4743					;CORRESPOND TO 1'S IN C(E) AND SLWAYS
  4744					;SKIPS THE NEXT INSTRUCTION C(E) IS NOT AFFECTED
  4745					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=252525,,707070
  4746					;HENCE, TDCA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 371173,,006244
  4747
  4748	033476	200 10 0 00 034332 	C74100:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4749	033477	200 11 0 00 034347 		MOVE	11,[252525,,707070]	;PRELOAD E WITH 252525,,707070
  4750	033500	654 10 0 00 000011 		TDCA	10,11			;*TDCA SHOULD SKP AND
  4751										;PLACE 371173,,006244 INTO THE AC
  4752						STOP^
  4753	033501	254 04 0 00 033502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4754	033502	324 00 0 00 033503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4755									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4756									;IN THE SUBTEST) TO LOOP ON ERROR^
  4757	033503	312 10 0 00 034373 		CAME	10,[371173,,6244]	;PASS IF C(AC)=371173,,006244
  4758						STOP^
  4759	033504	254 04 0 00 033505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4760	033505	324 00 0 00 033506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4761									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4762									;IN THE SUBTEST) TO LOOP ON ERROR^
  4763	033506	312 11 0 00 034347 		CAME	11,[252525,,707070]	;PASS IF C(E) UNCHANGED
  4764						STOP^
  4765	033507	254 04 0 00 033510 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4766	033510	324 00 0 00 033511 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 85-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0125

  4767									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4768									;IN THE SUBTEST) TO LOOP ON ERROR^
  4769
  4770					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 86
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0126

  4771					;THIS TEST VERIFIES THAT TSCA COMPLEMENTS ALL BITS OF THE AC WHICH
  4772					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  4773					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  4774					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  4775					;HENCE, TSCA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE -1,,-1
  4776
  4777	033511	200 07 0 00 034332 	C74200:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4778	033512	200 10 0 00 034342 		MOVE	10,[076543,,654321]	;PRELOAD E WITH 076543,,654321
  4779	033513	655 07 0 00 000010 		TSCA	7,10			;*TSCA CHOULD SKIP AND
  4780										;PLACE -1,,-1 INTO THE AC
  4781						STOP^
  4782	033514	254 04 0 00 033515 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4783	033515	324 00 0 00 033516 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4784									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4785									;IN THE SUBTEST) TO LOOP ON ERROR^
  4786	033516	312 07 0 00 034217 		CAME	7,[-1]			;PASS IF C(AC)=-1,,-1
  4787						STOP^
  4788	033517	254 04 0 00 033520 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4789	033520	324 00 0 00 033521 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4790									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4791									;IN THE SUBTEST) TO LOOP ON ERROR^
  4792	033521	312 10 0 00 034342 		CAME	10,[076543,,654321]	;PASS IF C(E) UNCHANGED
  4793						STOP^
  4794	033522	254 04 0 00 033523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4795	033523	324 00 0 00 033524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4797									;IN THE SUBTEST) TO LOOP ON ERROR^
  4798
  4799					;**********
  4800
  4801					;THIS TEST VERIFIES THAT TSCA COMPLEMENTS ALL BITS OF THE AC WHICH
  4802					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  4803					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  4804					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=701234,,123456
  4805					;HENCE, TSCA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 0
  4806
  4807	033524	200 06 0 00 034332 	C74210:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4808	033525	200 07 0 00 034357 		MOVE	7,[701234,,123456]	;PRELOAD E WITH 701234,,123456
  4809	033526	655 06 0 00 000007 		TSCA	6,7			;*TSCA SHOULD SKIP AND
  4810										;PLACE 0 INTO THE AC
  4811						STOP^
  4812	033527	254 04 0 00 033530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4813	033530	324 00 0 00 033531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4814									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4815									;IN THE SUBTEST) TO LOOP ON ERROR^
  4816	033531	312 06 0 00 034325 		CAME	6,[0]			;PASS IF C(AC)=0
  4817						STOP^
  4818	033532	254 04 0 00 033533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4819	033533	324 00 0 00 033534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4820									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4821									;IN THE SUBTEST) TO LOOP ON ERROR^
  4822	033534	312 07 0 00 034357 		CAME	7,[701234,,123456]	;PASS IF C(E) UNCHANGED
  4823						STOP^
  4824	033535	254 04 0 00 033536 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4825	033536	324 00 0 00 033537 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 86-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0127

  4826									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4827									;IN THE SUBTEST) TO LOOP ON ERROR^
  4828
  4829					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 87
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0128

  4830					;THIS TEST VERIFIES THAT TDCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4831					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4832					;C(E) ARE ZERO.  THESE MASKED
  4833					;AC BITS ARE THEN COMPLEMENTED
  4834					;IN THE CASE, C(AC)=123456,,701234 AND C(E)=654321,,076547
  4835					;HENCE, TDCN SHOULD SKIP AND THE RESULT IN AC
  4836					;SHOULD BE -1,,777773 C(E) IS NOT AFFECTED
  4837
  4838	033537	200 05 0 00 034332 	C74300:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4839	033540	200 06 0 00 034360 		MOVE	6,[654321,,76547]	;PRELOAD E WITH 654321,,076547
  4840	033541	656 05 0 00 000006 		TDCN	5,6			;*TDCN SHOULD SKIP AND
  4841										;PLACE -1,,777773 INTO THE AC
  4842						STOP^
  4843	033542	254 04 0 00 033543 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4844	033543	324 00 0 00 033544 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4845									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4846									;IN THE SUBTEST) TO LOOP ON ERROR^
  4847	033544	312 05 0 00 034374 		CAME	5,[-1,,777773]		;PASS IF C(AC)=-1,777773
  4848						STOP^
  4849	033545	254 04 0 00 033546 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4850	033546	324 00 0 00 033547 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4851									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4852									;IN THE SUBTEST) TO LOOP ON ERROR^
  4853	033547	312 06 0 00 034360 		CAME	6,[654321,,76547]	;PASS IF C(E) UNCHANGED
  4854						STOP^
  4855	033550	254 04 0 00 033551 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4856	033551	324 00 0 00 033552 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4857									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4858									;IN THE SUBTEST) TO LOOP ON ERROR^
  4859
  4860					;**********
  4861
  4862					;THIS TEST VERIFIES THAT TDCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4863					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4864					;C(E) ARE ZERO.  THESE MASKED
  4865					;AC BITS ARE THEN COMPLEMENTED
  4866					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543
  4867					;HENCE, TDCN SHOULD NOT SKIP AND THE REUSLT IN AC
  4868					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTED
  4869
  4870	033552	200 04 0 00 034332 	C74310:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4871	033553	200 05 0 00 034351 		MOVE	5,[654321,,76543]	;PRELOAD E WITH 654321,,076543
  4872	033554	656 04 0 00 000005 		TDCN	4,5			;*TDCN SHOULD NOT SKIP AND
  4873										;PLACE -1,,-1 INTO THE AC
  4874	033555	334 00 0 00 000000 		SKIPA				;PASS IF TDCN DOES NOT SKIP
  4875						STOP^
  4876	033556	254 04 0 00 033557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4877	033557	324 00 0 00 033560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4878									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4879									;IN THE SUBTEST) TO LOOP ON ERROR^
  4880	033560	312 04 0 00 034217 		CAME	4,[-1]			;PASS IF C(AC)=-1,,-1
  4881						STOP^
  4882	033561	254 04 0 00 033562 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4883	033562	324 00 0 00 033563 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4884									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 87-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0129

  4885									;IN THE SUBTEST) TO LOOP ON ERROR^
  4886	033563	312 05 0 00 034351 		CAME	5,[654321,,76543]	;PASS IF C(E) UNCHANGED
  4887						STOP^
  4888	033564	254 04 0 00 033565 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4889	033565	324 00 0 00 033566 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4890									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4891									;IN THE SUBTEST) TO LOOP ON ERROR^
  4892
  4893					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 88
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0130

  4894					;THIS TEST VERIFIES THAT TSCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4895					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4896					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4897					;AC BITS ARE THEN COMPLEMENTED
  4898					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=077543,,654321
  4899					;HENCE, TSCN SHOULD SKIP AND THE RESULT IN AC
  4900					;SHOULD BE -1,,776777.  C(E) IS NOT AFFECTED
  4901
  4902	033566	200 03 0 00 034332 	C74400:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4903	033567	200 04 0 00 034362 		MOVE	4,[77543,,654321]	;PRELOAD E WITH 077543,,654321
  4904	033570	657 03 0 00 000004 		TSCN	3,4			;*TSCN SHOULD SKIP AND
  4905										;PLACE -1,,776777 INTO THE AC
  4906						STOP^
  4907	033571	254 04 0 00 033572 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4908	033572	324 00 0 00 033573 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4909									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4910									;IN THE SUBTEST) TO LOOP ON ERROR^
  4911	033573	312 03 0 00 034375 		CAME	3,[-1,,776777]		;PASS IF C(AC)=-1,776777
  4912						STOP^
  4913	033574	254 04 0 00 033575 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4914	033575	324 00 0 00 033576 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4915									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4916									;IN THE SUBTEST) TO LOOP ON ERROR^
  4917	033576	312 04 0 00 034362 		CAME	4,[77543,,654321]	;PASS IF C(E) UNCHANGED
  4918						STOP^
  4919	033577	254 04 0 00 033600 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4920	033600	324 00 0 00 033601 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4921									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4922									;IN THE SUBTEST) TO LOOP ON ERROR^
  4923
  4924					;**********
  4925
  4926					;THIS TEST VERIFIES THAT TSCN SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  4927					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  4928					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  4929					;AC BITS ARE THEN COMPLEMENTD
  4930					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  4931					;HENCE, TSCN SHOULD NOT SKIP AND THE RESULT IN AC
  4932					;SHOULD BE -1,,-1.  C(E) IS NOT AFFECTED.
  4933
  4934	033601	200 02 0 00 034332 	C74410:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4935	033602	200 03 0 00 034342 		MOVE	3,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  4936	033603	657 02 0 00 000003 		TSCN	2,3			;*TSCN SHOULD NOT SKIP AND
  4937										;PLACE -1,,-1 INTO THE AC
  4938	033604	334 00 0 00 000000 		SKIPA				;PASS IF TSCN DOES NOT SKIP
  4939						STOP^
  4940	033605	254 04 0 00 033606 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4941	033606	324 00 0 00 033607 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4942									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4943									;IN THE SUBTEST) TO LOOP ON ERROR^
  4944	033607	312 02 0 00 034217 		CAME	2,[-1]			;PASS IF C(AC)=-1,,-1
  4945						STOP^
  4946	033610	254 04 0 00 033611 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4947	033611	324 00 0 00 033612 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4948									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 88-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0131

  4949									;IN THE SUBTEST) TO LOOP ON ERROR^
  4950	033612	312 03 0 00 034342 		CAME	3,[76543,,654321]	;PASS IF C(E) UNCHANGED
  4951						STOP^
  4952	033613	254 04 0 00 033614 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4953	033614	324 00 0 00 033615 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4955									;IN THE SUBTEST) TO LOOP ON ERROR^
  4956
  4957					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 89
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0132

  4958					;THIS TEST VERIFIES THAT TRO CHANGES ALL BITS IN THE AC-RIGHT WHICH
  4959					;CORRESPOND TO 1'S IN E TO ONES AND DOES ANT SKIP
  4960					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  4961					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,701237
  4962
  4963	033615	200 01 0 00 034332 	C74500:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4964	033616	660 01 0 00 000003 		TRO	1,3			;*TRO SHOULD NOT SKIP AND
  4965										;PLACE 123456,,701237 INTO THE AC
  4966	033617	334 00 0 00 000000 		SKIPA				;PASS IF TRO DID NOT SKIP
  4967						STOP^
  4968	033620	254 04 0 00 033621 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4969	033621	324 00 0 00 033622 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4970									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4971									;IN THE SUBTEST) TO LOOP ON ERROR^
  4972	033622	312 01 0 00 034364 		CAME	1,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  4973						STOP^
  4974	033623	254 04 0 00 033624 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4975	033624	324 00 0 00 033625 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4976									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4977									;IN THE SUBTEST) TO LOOP ON ERROR^
  4978
  4979					;**********
  4980
  4981					;THIS TEST VERIFIES THAT TRO CHANGES ALL BITS IN THE AC-RIGHT WHICH
  4982					;CORRESPOND TO 1'S IN E TO ONES AND DOES NOT SKIP
  4983					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  4984					;HENCE, THE RESULT IN THE AC SHOULD BE 123456,,701224
  4985
  4986	033625	200 00 0 00 034332 	C74510:	MOVE	0,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  4987	033626	660 00 0 00 000300 		TRO	0,300			;*TRO SHOULD NOT SKIP AND
  4988										;PLACE 123456,,701334 INTO THE AC
  4989	033627	334 00 0 00 000000 		SKIPA				;PASS IF TRO DID NOT SKIP
  4990						STOP^
  4991	033630	254 04 0 00 033631 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4992	033631	324 00 0 00 033632 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4993									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4994									;IN THE SUBTEST) TO LOOP ON ERROR^
  4995	033632	312 00 0 00 034376 		CAME	0,[123456,,701334]	;PASS IF C(AC)=123456,,701334
  4996						STOP^
  4997	033633	254 04 0 00 033634 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4998	033634	324 00 0 00 033635 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5000									;IN THE SUBTEST) TO LOOP ON ERROR^
  5001
  5002					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 90
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0133

  5003					;THIS TEST VERIFIES THAT TLO CHANGES ALL BITS IN THE AC-LEFT WHICH
  5004					;CORRESPOND TO 1'S IN E TO ONES AND DOES NOT SKIP
  5005					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5006					;HENCE, THE RESULT IN THE AC SHOULD BE 123756,,701234
  5007
  5008	033635	200 17 0 00 034332 	C74600:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5009	033636	661 17 0 00 000300 		TLO	17,300			;*TLO SHOULD NOT SKIP AND
  5010										;PLACE 123756,,701234 INTO THE AC
  5011	033637	334 00 0 00 000000 		SKIPA				;PASS IF TLO DID NOT SKIP
  5012						STOP^
  5013	033640	254 04 0 00 033641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5014	033641	324 00 0 00 033642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5015									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5016									;IN THE SUBTEST) TO LOOP ON ERROR^
  5017	033642	312 17 0 00 034366 		CAME	17,[123756,,701234]	;PASS IF C(AC)=123456,,701234
  5018						STOP^
  5019	033643	254 04 0 00 033644 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5020	033644	324 00 0 00 033645 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5021									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5022									;IN THE SUBTEST) TO LOOP ON ERROR^
  5023
  5024					;**********
  5025
  5026					;THIS TEST VERIFIES THAT TLO CHANGES ALL BITS IN THE AC-LEFT WHICH
  5027					;CORRESPOND TO 1'S IN E TO ONES AND DOES NOT SKIP
  5028					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5029					;HENCE, THE RESULT IN THE AC SHOULD BE 123457,,701234
  5030
  5031	033645	200 16 0 00 034377 	C74610:	MOVE	16,[123456,,70234]	;PRELOAD AC WITH 123456,,701234
  5032	033646	661 16 0 00 000003 		TLO	16,3			;*TLO SHOULD NOT SKIP AND
  5033										;PLACE 123457,,701234 INTO THE AC
  5034	033647	334 00 0 00 000000 		SKIPA				;PASS IF DID NOT SKIP
  5035						STOP^
  5036	033650	254 04 0 00 033651 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5037	033651	324 00 0 00 033652 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5038									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5039									;IN THE SUBTEST) TO LOOP ON ERROR^
  5040	033652	312 16 0 00 034400 		CAME	16,[123457,,70234]	;PASS IF C(AC)=123457,,701234
  5041						STOP^
  5042	033653	254 04 0 00 033654 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5043	033654	324 00 0 00 033655 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5044									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5045									;IN THE SUBTEST) TO LOOP ON ERROR^
  5046
  5047					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 91
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0134

  5048					;THIS TEST VERIFIES THAT TROE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5049					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  5050					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5051					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5052					;HENCE, TROE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5053					;AND RESULT IN THE AC SHOUD BE 123456,,701237
  5054
  5055	033655	200 15 0 00 034332 	C74700:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5056	033656	662 15 0 00 000003 		TROE	15,3			;TROE SHOULD SKIP AND
  5057										;PLACE 123456,,701237 IN TO THE AC
  5058						STOP^
  5059	033657	254 04 0 00 033660 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5060	033660	324 00 0 00 033661 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5061									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5062									;IN THE SUBTEST) TO LOOP ON ERROR^
  5063	033661	312 15 0 00 034364 		CAME	15,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  5064						STOP^
  5065	033662	254 04 0 00 033663 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5066	033663	324 00 0 00 033664 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5067									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5068									;IN THE SUBTEST) TO LOOP ON ERROR^
  5069
  5070					;**********
  5071
  5072					;THIS TEST VERIFIES THAT TROE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5073					;IF AND ONLY IF ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  5074					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5075					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5076					;HENCE, TROE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5077					;AND THE RESULT IN THE AC SHOULD BE 123456,,701334
  5078
  5079	033664	200 14 0 00 034332 	C74710:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5080	033665	662 14 0 00 000300 		TROE	14,300			;*TROE SHOULD NOT SKIP AND
  5081										;PLACE 123456,,701224 INTO THE AC
  5082	033666	334 00 0 00 000000 		SKIPA				;PASS IF DID NOT SKIP
  5083						STOP^
  5084	033667	254 04 0 00 033670 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5085	033670	324 00 0 00 033671 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5086									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5087									;IN THE SUBTEST) TO LOOP ON ERROR^
  5088	033671	312 14 0 00 034376 		CAME	14,[123456,,701334]	;PASS IF C(AC)=123456,,701334
  5089						STOP^
  5090	033672	254 04 0 00 033673 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5091	033673	324 00 0 00 033674 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5092									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5093									;IN THE SUBTEST) TO LOOP ON ERROR^
  5094
  5095					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 92
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0135

  5096					;THIS TEST VERIFIES THAT TLOE SKIPS THE NEXT SEQUENTIAL  INSTRUCTION
  5097					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  5098					;THESE MASKED AC BITS ARE TEN CHANGED TO ONES
  5099					;IN THES CASE, C(AC)=123456,,701234 AND E=300
  5100					;HENCE, TLOE SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5101					;AND THE RESULT IN THE AC SHOULD BE 123756,,701234
  5102
  5103	033674	200 13 0 00 034332 	C75000:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5104	033675	663 13 0 00 000300 		TLOE	13,300			;*TLOE SOULD SKIP AND
  5105										;PLAND 123756,,701234 INTO THE AC
  5106						STOP^
  5107	033676	254 04 0 00 033677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5108	033677	324 00 0 00 033700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5110									;IN THE SUBTEST) TO LOOP ON ERROR^
  5111	033700	312 13 0 00 034366 		CAME	13,[123756,,701234]	;PASS IF C(AC)=123456,,701234
  5112						STOP^
  5113	033701	254 04 0 00 033702 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5114	033702	324 00 0 00 033703 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5115									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5116									;IN THE SUBTEST) TO LOOP ON ERROR^
  5117
  5118					;********
  5119
  5120					;THIS TEST VERIFIES THAT TLOE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5121					;IF AND ONLY IF ALL BITS IN AC-LEFT CORRESPONDING  TO 1'S IN E ARE ZERO.
  5122					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5123					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5124					;HENCE, TLOE SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5125					;AND THE RESULT IN THE AC SHOULD BE 123457,,701234
  5126
  5127	033703	200 12 0 00 034332 	C75010:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5128	033704	663 12 0 00 000003 		TLOE	12,3			;*TLOE SHOULD NOT SKIP AND
  5129										;PLACE 123457,,701234 INTO THE AC
  5130	033705	334 00 0 00 000000 		SKIPA				;PASS IF TLOE DID NOT SKIP
  5131						STOP^
  5132	033706	254 04 0 00 033707 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5133	033707	324 00 0 00 033710 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5135									;IN THE SUBTEST) TO LOOP ON ERROR^
  5136	033710	312 12 0 00 034401 		CAME	12,[123457,,701234]	;PASS IF C(AC)=123457,,701234
  5137						STOP^
  5138	033711	254 04 0 00 033712 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5139	033712	324 00 0 00 033713 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5140									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5141									;IN THE SUBTEST) TO LOOP ON ERROR^
  5142
  5143					;*******
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 93
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0136

  5144					;THIS TEST VERIFIES THAT TROA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTUCTION
  5145					;AND CHANGES ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E TO ONES
  5146					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5147					;HENCE, TROA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  5148					;THE AC SHOULD BE 123456,,701237
  5149
  5150	033713	200 11 0 00 034332 	C75100:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5151	033714	664 11 0 00 000003 		TROA	11,3			;*TROA SHOULD SKIP AND
  5152										;PLACE 123456,,701237
  5153						STOP^
  5154	033715	254 04 0 00 033716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5155	033716	324 00 0 00 033717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5156									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5157									;IN THE SUBTEST) TO LOOP ON ERROR^
  5158	033717	312 11 0 00 034364 		CAME	11,[123456,,701237]	;PASS IF C(AC)=123456,,701237
  5159						STOP^
  5160	033720	254 04 0 00 033721 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5161	033721	324 00 0 00 033722 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5162									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5163									;IN THE SUBTEST) TO LOOP ON ERROR^
  5164
  5165					;**********
  5166
  5167					;THIS TEST VERIFIES THAT TROA ALWAYS SKIPS THE NEXT SEQUENTAIL INSTRUCTION
  5168					;AND CHANGES ALL BITS IN AC-RIGHT WHICH CORRESPOND TO 1'S IN E TO ONES
  5169					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5170					;HENCE, TROA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  5171					;THE AC SHOULD BE 123456,,701334
  5172
  5173	033722	200 10 0 00 034332 	C75110:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5174	033723	664 10 0 00 000300 		TROA	10,300			;*TROA SHOULD SKIP AND
  5175										;PLACE 123456,,701334 INTO THE AC
  5176						STOP^
  5177	033724	254 04 0 00 033725 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5178	033725	324 00 0 00 033726 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5179									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5180									;IN THE SUBTEST) TO LOOP ON ERROR^
  5181	033726	312 10 0 00 034376 		CAME	10,[123456,,701334]	;PASS IF C (AC)=123456,,701334
  5182						STOP^
  5183	033727	254 04 0 00 033730 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5184	033730	324 00 0 00 033731 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5185									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5186									;IN THE SUBTEST) TO LOOP ON ERROR^
  5187
  5188					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 94
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0137

  5189					;THIS TEST VERIFIES THAT TLOA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTUCTION
  5190					;AND CHANGES ALL BITS IN AC-LEFT WHICH CORRESPOND 1'S IN E TO ONES
  5191					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5192					;HENCE, TLOA SHOULD SKIP THE NEXT INSTRUCTION AND RESULT IN
  5193					;THE AC SHOULD BE 123457,,701234
  5194
  5195	033731	200 07 0 00 034332 	C75200:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5196	033732	665 07 0 00 000003 		TLOA	7,3			;*TLOA SHOULD SKIP AND
  5197										;PLACE 123457,,701234 INTO THE AC
  5198						STOP^
  5199	033733	254 04 0 00 033734 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5200	033734	324 00 0 00 033735 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5201									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5202									;IN THE SUBTEST) TO LOOP ON ERROR^
  5203	033735	312 07 0 00 034401 		CAME	7,[123457,,701234]	;PASS IF C(AC)=123457,,701234]
  5204						STOP^
  5205	033736	254 04 0 00 033737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5206	033737	324 00 0 00 033740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5207									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5208									;IN THE SUBTEST) TO LOOP ON ERROR^
  5209
  5210					;**********
  5211
  5212					;THIS TEST VERIFIES THAT TLOA ALWAYS SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5213					;AND CHANGES ALL BITS IN AC-LEFT WHICH CORRESPOND TO 1'S IN E TO ONES
  5214					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5215					;HENCE, TLOA SHOULD SKIP THE NEXT INSTRUCTION AND THE RESULT IN
  5216					;THE AC SHOULD BE 123756,,701234
  5217
  5218	033740	200 06 0 00 034332 	C75210:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5219	033741	665 06 0 00 000300 		TLOA	6,300			;*TLOA SHOULD SKIP AND
  5220										;PLACE 123756,,701234 INTO THE AC
  5221						STOP^
  5222	033742	254 04 0 00 033743 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5223	033743	324 00 0 00 033744 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5224									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5225									;IN THE SUBTEST) TO LOOP ON ERROR^
  5226	033744	312 06 0 00 034366 		CAME	6,[123756,,701234]	;PASS IF C(AC)=123756,,701234
  5227						STOP^
  5228	033745	254 04 0 00 033746 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5229	033746	324 00 0 00 033747 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5230									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5231									;IN THE SUBTEST) TO LOOP ON ERROR^
  5232
  5233					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 95
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0138

  5234					;THIS TEST VERIFIES THAT TRON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5235					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  5236					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5237					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5238					;HENCE, TRON SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5239					;AND THE RESULT IN THE AC SHOULD BE 123456,,701334
  5240
  5241	033747	200 05 0 00 034332 	C75300:	MOVE	5,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5242	033750	666 05 0 00 000300 		TRON	5,300			;*TRON SHOULD SKIP AND
  5243										;PLACE 123456,,701334 INTO THE AC
  5244						STOP^
  5245	033751	254 04 0 00 033752 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5246	033752	324 00 0 00 033753 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5247									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5248									;IN THE SUBTEST) TO LOOP ON ERROR^
  5249	033753	312 05 0 00 034376 		CAME	5,[123456,,701334]	;PASS IF C(AC)=123456,,701334
  5250						STOP^
  5251	033754	254 04 0 00 033755 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5252	033755	324 00 0 00 033756 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5253									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5254									;IN THE SUBTEST) TO LOOP ON ERROR^
  5255
  5256					;**********
  5257
  5258					;THIS TEST VERIFIES THAT TRON SKIPS THE NEXT SEQUENTIAL INSTUCTION
  5259					;IF AND ONLY IF NOT ALL BITS IN AC-RIGHT CORRESPONDING TO 1'S IN E ARE ZERO.
  5260					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5261					;IN THIS CASE, C(AC)=123456,,701234 AND E=3
  5262					;HENCE, TRON SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5263					;AND THE RESULT IN THE AC SHOULD BE 123456,,701237
  5264
  5265	033756	200 04 0 00 034332 	C75310:	MOVE	4,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5266	033757	666 04 0 00 000003 		TRON	4,3			;*TRON SHOULD NOT  SKIP AND
  5267										;PLACE 123456,,701237 INTO THE AC
  5268	033760	334 00 0 00 000000 		SKIPA				;PASS IF TRON DID NOT SKIP
  5269						STOP^
  5270	033761	254 04 0 00 033762 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5271	033762	324 00 0 00 033763 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5272									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5273									;IN THE SUBTEST) TO LOOP ON ERROR^
  5274	033763	312 04 0 00 034364 		CAME	4,[123456,,701237]	;PASS IF C(AC)=123456,701237
  5275						STOP^
  5276	033764	254 04 0 00 033765 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5277	033765	324 00 0 00 033766 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5278									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5279									;IN THE SUBTEST) TO LOOP ON ERROR^
  5280
  5281					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 96
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0139

  5282					;THIS TEST VERIFIES THAT TLON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5283					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  5284					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5285					;IN THIS CASE, C(AC)-123456,,701234 AND E=3
  5286					;HENCE, TLON SHOULD SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5287					;AND THE RESULT IN THE AC SHOULD BE 123457,,701234
  5288
  5289	033766	200 03 0 00 034332 	C75400:	MOVE	3,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5290	033767	667 03 0 00 000003 		TLON	3,3			;*TLON SHOULD SKIP AND
  5291										;PLACE 123457,,701234 INTO THE AC
  5292						STOP^
  5293	033770	254 04 0 00 033771 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5294	033771	324 00 0 00 033772 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5295									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5296									;IN THE SUBTEST) TO LOOP ON ERROR^
  5297	033772	312 03 0 00 034401 		CAME	3,[123457,,701234]	;PASS IF C(AC)=123457,,701234
  5298						STOP^
  5299	033773	254 04 0 00 033774 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5300	033774	324 00 0 00 033775 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5301									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5302									;IN THE SUBTEST) TO LOOP ON ERROR^
  5303
  5304					;*******
  5305
  5306					;THIS TEST VERIFIES THAT TLON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5307					;IF AND ONLY IF NOT ALL BITS IN AC-LEFT CORRESPONDING TO 1'S IN E ARE ZERO.
  5308					;THESE MASKED AC BITS ARE THEN CHANGED TO ONES
  5309					;IN THIS CASE, C(AC)=123456,,701234 AND E=300
  5310					;HENCE, TLON SHOULD NOT SKIP THE NEXT SEQUENTIAL INSTRUCTION
  5311					;AND THE RESULT IN THE AC SHOULD BE 123756,,701234
  5312
  5313	033775	200 02 0 00 034332 	C75410:	MOVE	2,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5314	033776	667 02 0 00 000300 		TLON	2,300			;*TLON SHOULD NOT SKIP AND
  5315										;PLACE 123756,,701234 INTO THE AC
  5316	033777	334 00 0 00 000000 		SKIPA				;PASS IF TLON DID NOT SKIP
  5317						STOP^
  5318	034000	254 04 0 00 034001 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5319	034001	324 00 0 00 034002 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5320									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5321									;IN THE SUBTEST) TO LOOP ON ERROR^
  5322	034002	312 02 0 00 034366 		CAME	2,[123756,,701234]	;PASS IF C(AC)=123756,,701234
  5323						STOP^
  5324	034003	254 04 0 00 034004 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5325	034004	324 00 0 00 034005 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5326									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5327									;IN THE SUBTEST) TO LOOP ON ERROR^
  5328
  5329					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 97
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0140

  5330					;THIS TEST VERIFIES THAT TDOE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5331					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5332					;C(E)ARE ZERO.  THESE MASKED
  5333					;AC BITS ARE THEN CHANGED TO ONES
  5334					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543 
  5335					;HENCE, TDOE SHOULD SKIP AND THE RESULT IN AC
  5336					;SHOULD BE -1,,-1  C(E) IS NOT AFFECTED
  5337
  5338	034005	200 01 0 00 034332 	C75500:	MOVE	1,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5339	034006	200 02 0 00 034351 		MOVE	2,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  5340	034007	672 01 0 00 000002 		TDOE	1,2			;*TDOE SHOULD SKIP AND
  5341										;PLACE -1,,-1 INTO THE AC
  5342						STOP^
  5343	034010	254 04 0 00 034011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5344	034011	324 00 0 00 034012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5345									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5346									;IN THE SUBTEST) TO LOOP ON ERROR^
  5347	034012	312 01 0 00 034217 		CAME	1,[-1]			;PASS IF C(AC)=-1,,-1
  5348						STOP^
  5349	034013	254 04 0 00 034014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5350	034014	324 00 0 00 034015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5351									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5352									;IN THE SUBTEST) TO LOOP ON ERROR^
  5353	034015	312 02 0 00 034351 		CAME	2,[654321,,76543]	;PASS IF C(E) UNCHANGED
  5354						STOP^
  5355	034016	254 04 0 00 034017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5356	034017	324 00 0 00 034020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5357									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5358									;IN THE SUBTEST) TO LOOP ON ERROR^
  5359
  5360					;**********
  5361
  5362					;THIS TEST VERIFIES THAT TDOE SKIPS THE NEXT SEQUENTAIL INSTRUCTION
  5363					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5364					;C(E) ARE ZERO.  THESE MASKED
  5365					;AC BITS ARE THEN CHANGED TO ONES
  5366					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=754321,,076543
  5367					;HENCE, TDOE SHOULD NOT SKIP AND THE RESULT IN AC
  5368					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTD
  5369
  5370	034020	200 00 0 00 034332 	C75510:	MOVE	0,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5371	034021	200 01 0 00 034352 		MOVE	1,[754321,,76543]	;PRELOAD E WITH 754321,,076543
  5372	034022	672 00 0 00 000001 		TDOE	0,1			;*TDOE SHOULD NOT SKIP AND
  5373										;PLACE -1,,-1 INTO THE AC
  5374	034023	334 00 0 00 000000 		SKIPA				;PASS IF TDOE DOES NOT SKIP
  5375						STOP^
  5376	034024	254 04 0 00 034025 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5377	034025	324 00 0 00 034026 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5378									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5379									;IN THE SUBTEST) TO LOOP ON ERROR^
  5380	034026	312 00 0 00 034217 		CAME	0,[-1]			;PASS IF C(AC)=-1,,-1
  5381						STOP^
  5382	034027	254 04 0 00 034030 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5383	034030	324 00 0 00 034031 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 97-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0141

  5385									;IN THE SUBTEST) TO LOOP ON ERROR^
  5386	034031	312 01 0 00 034352 		CAME	1,[754321,,76543]	;PASS IF C(E) UNCHANGED
  5387						STOP^
  5388	034032	254 04 0 00 034033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5389	034033	324 00 0 00 034034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5391									;IN THE SUBTEST) TO LOOP ON ERROR^
  5392
  5393					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 98
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0142

  5394					;THIS TEST VERIFIES THAT TSOE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5395					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5396					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  5397					;AC BITS ARE THEN CHANGED TO ONES.
  5398					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  5399					;HENCE, TSOE SHOULD SKIP AND THE RESULT IN AC
  5400					;SHOULD BE -1,,-1.  C(E) IS NOT AFFECTED
  5401
  5402	034034	200 17 0 00 034332 	C75600:	MOVE	17,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5403	034035	200 00 0 00 034342 		MOVE	0,[76543,,654321]	;PRELOAD E WITH 076543,,654321
  5404	034036	673 17 0 00 000000 		TSOE	17,0			;*TSOE SHOULD SKIP AND
  5405										;PLACE -1,,-1 INTO THE AC
  5406						STOP^
  5407	034037	254 04 0 00 034040 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5408	034040	324 00 0 00 034041 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5409									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5410									;IN THE SUBTEST) TO LOOP ON ERROR^
  5411	034041	312 17 0 00 034217 		CAME	17,[-1]			;PASS IF C(AC)=-1,,-1
  5412						STOP^
  5413	034042	254 04 0 00 034043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5414	034043	324 00 0 00 034044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5415									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5416									;IN THE SUBTEST) TO LOOP ON ERROR^
  5417	034044	312 00 0 00 034342 		CAME	0,[76543,,654321]	;PASS IF C(E) UNCHANGED
  5418						STOP^
  5419	034045	254 04 0 00 034046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5420	034046	324 00 0 00 034047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5421									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5422									;IN THE SUBTEST) TO LOOP ON ERROR^
  5423
  5424					;**********
  5425
  5426					;THIS TEST VERIFIES THAT TSOE SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5427					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5428					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  5429					;AC BITS ARE THEN  CHANGED TO ONES.
  5430					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,657321
  5431					;HENCE, TSOE SHOULD NOT SKIP AND THE RESULT IN THE AC
  5432					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTED.
  5433
  5434	034047	200 16 0 00 034332 	C75610:	MOVE	16,[123456,,701234]	;PRELOAD AC WITH 123456,701234
  5435	034050	200 17 0 00 034354 		MOVE	17,[76543,,657321]	;PRELOAD E WITH 076543,,657321
  5436	034051	673 16 0 00 000017 		TSOE	16,17			;*TSOE SHOULD NOT SKIP AND
  5437										;*TSOE SHOULD NOT SKIP AND
  5438										;PLACE -1,,-1 INTO THE AC
  5439	034052	334 00 0 00 000000 		SKIPA				;PASS IF SKIP
  5440						STOP^
  5441	034053	254 04 0 00 034054 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5442	034054	324 00 0 00 034055 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5443									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5444									;IN THE SUBTEST) TO LOOP ON ERROR^
  5445	034055	312 16 0 00 034217 		CAME	16,[-1]			;PASS IF C(AC)=-1,,-1
  5446						STOP^
  5447	034056	254 04 0 00 034057 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5448	034057	324 00 0 00 034060 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 98-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0143

  5449									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5450									;IN THE SUBTEST) TO LOOP ON ERROR^
  5451	034060	312 17 0 00 034354 		CAME	17,[76543,,657321]	;PASS IF C(E) UNCHANGED
  5452						STOP^
  5453	034061	254 04 0 00 034062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5454	034062	324 00 0 00 034063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5455									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5456									;IN THE SUBTEST) TO LOOP ON ERROR^
  5457
  5458					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 99
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0144

  5459					;THIS TEST VERIFIES THAT TDOA PLACES ONES INTO ALL BITS OF THE AC WHICH
  5460					;CORRRESPOND TO 1'S IN C(E) AND ALWAYS
  5461					;SKIPS THE NEXT INSTRUCTION C(E) IS NOT AFFECTED
  5462					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)= 654321,,076543
  5463					;HENCE, TDOA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE -1,,-1
  5464
  5465	034063	200 15 0 00 034332 	C75700:	MOVE	15,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5466	034064	200 16 0 00 034351 		MOVE	16,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  5467	034065	674 15 0 00 000016 		TDOA	15,16			;*TDOA SHOULD SKIP AND
  5468										;PLACE -1,,-1 INTO THE AC
  5469						STOP^
  5470	034066	254 04 0 00 034067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5471	034067	324 00 0 00 034070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5472									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5473									;IN THE SUBTEST) TO LOOP ON ERROR^
  5474	034070	312 15 0 00 034217 		CAME	15,[-1]			;PASS IF C(AC)=-1,,-1
  5475						STOP^
  5476	034071	254 04 0 00 034072 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5477	034072	324 00 0 00 034073 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5478									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5479									;IN THE SUBTEST) TO LOOP ON ERROR^
  5480	034073	312 16 0 00 034351 		CAME	16,[654321,,076543]	;PASS IF C(E) UNCHANGED
  5481						STOP^
  5482	034074	254 04 0 00 034075 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5483	034075	324 00 0 00 034076 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5484									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5485									;IN THE SUBTEST) TO LOOP ON ERROR^
  5486
  5487					;**********
  5488
  5489					;THIS TEST VERIFIES THAT TDOA PLACE ONES ALL BIT OF THE AC WHICH
  5490					;CORRESPOND TO 1'S IN C(E) AND ALWAYS
  5491					;SKIPS THE NEXT INSTRUCTION C(E) IS NOT AFFECTED
  5492					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=252525,,707070
  5493					;HENCE, TDOA SHOULD ALWAYS SKIP AND C(AC) SHOULD BE 373577,,707274
  5494
  5495	034076	200 14 0 00 034332 	C75710:	MOVE	14,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5496	034077	200 15 0 00 034347 		MOVE	15,[252525,,707070]	;PRELOAD E WITH 252525,,707070
  5497	034100	674 14 0 00 000015 		TDOA	14,15			;*TDOA SHOULD SKIP AND
  5498										;PLACE 373577,707274 ONTO THE AC
  5499						STOP^
  5500	034101	254 04 0 00 034102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5501	034102	324 00 0 00 034103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5502									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5503									;IN THE SUBTEST) TO LOOP ON ERROR^
  5504	034103	312 14 0 00 034402 		CAME	14,[373577,,707274]	;PASS IF C(AC)=373577,,707274
  5505						STOP^
  5506	034104	254 04 0 00 034105 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5507	034105	324 00 0 00 034106 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5508									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5509									;IN THE SUBTEST) TO LOOP ON ERROR^
  5510	034106	312 15 0 00 034347 		CAME	15,[252525,,707070]	;PASS IF C(E) UNCHANGED
  5511						STOP^
  5512	034107	254 04 0 00 034110 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5513	034110	324 00 0 00 034111 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 99-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0145

  5514									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5515									;IN THE SUBTEST) TO LOOP ON ERROR^
  5516
  5517					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 100
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0146

  5518					;THIS TEST VERIFIES THAT TSOA PLACE ONES INTO ALL BITS OF THE AC WHICH
  5519					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  5520					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  5521					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  5522					;HENCE, TSOA SHOULD SLAWAYS SKIP AND C(AC) SHOULD BE -1,,-1
  5523
  5524	034111	200 13 0 00 034332 	C76000:	MOVE	13,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5525	034112	200 14 0 00 034403 		MOVE	14,[176543,,654321]	;PRELOAD E WITH 076543,,654321
  5526	034113	675 13 0 00 000014 		TSOA	13,14			;*TSOA SHOULD SKIP AND
  5527										;PLACE -1,,-1 ONTO THE AC
  5528						STOP^
  5529	034114	254 04 0 00 034115 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5530	034115	324 00 0 00 034116 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5531									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5532									;IN THE SUBTEST) TO LOOP ON ERROR^
  5533	034116	312 13 0 00 034217 		CAME	13,[-1]			;PASS IF C(AC)=-1,,-1
  5534						STOP^
  5535	034117	254 04 0 00 034120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5536	034120	324 00 0 00 034121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5537									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5538									;IN THE SUBTEST) TO LOOP ON ERROR^
  5539	034121	312 14 0 00 034403 		CAME	14,[176543,,654321]	;PASS IF C(E) UNCHANGED
  5540						STOP^
  5541	034122	254 04 0 00 034123 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5542	034123	324 00 0 00 034124 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5543									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5544									;IN THE SUBTEST) TO LOOP ON ERROR^
  5545
  5546					;**********
  5547
  5548					;THIS TEST VERIFIES THAT TSOA PLACES ONES INTO ALL BITS OF THE AC WHICH
  5549					;CORRESPOND TO 1'S IN C(E) WITH BOTH HALVES SWAPPED AND ALWAYS
  5550					;SKIPS THE NEXT INSTRUCTION.  C(E) IS NOT AFFECTED
  5551					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=701234,,123456
  5552					;HENCE, TSOA SHOULD SLWAYS SKIP AND C(AC) SHOULD BE 123456,,701234
  5553
  5554	034124	200 12 0 00 034332 	C76010:	MOVE	12,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5555	034125	200 13 0 00 034357 		MOVE	13,[701234,,123456]	;PRELOAD E WITH 701234,123456
  5556	034126	675 12 0 00 000013 		TSOA	12,13			;*TSOA SHOULD SKIP AND
  5557										;PLACE 123456,,701234 INTO THE AC
  5558						STOP^
  5559	034127	254 04 0 00 034130 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5560	034130	324 00 0 00 034131 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5561									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5562									;IN THE SUBTEST) TO LOOP ON ERROR^
  5563	034131	312 12 0 00 034332 		CAME	12,[123456,,701234]	;PASS IF C(AC)=123456,,701234
  5564						STOP^
  5565	034132	254 04 0 00 034133 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5566	034133	324 00 0 00 034134 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5567									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5568									;IN THE SUBTEST) TO LOOP ON ERROR^
  5569	034134	312 13 0 00 034357 		CAME	13,[701234,,123456]	;PASS IF C(E) UNCHANGED
  5570						STOP^
  5571	034135	254 04 0 00 034136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5572	034136	324 00 0 00 034137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 100-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0147

  5573									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5574									;IN THE SUBTEST) TO LOOP ON ERROR^
  5575
  5576					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 101
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0148

  5577					;THIS TEST VERIFIES THAT TDON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5578					;IF AND ONLY IF ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5579					;C(E) ARE ZERO.  THESE MASKED
  5580					;AC BITS ARE THEN CHANGED TO ONES
  5581					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076547
  5582					;HENCE, TDON SHOULD SKIP AND THE RESULT IN AC
  5583					;SHOULD BE -1,,-1  C(E) IS NOT AFFECTED
  5584
  5585	034137	200 11 0 00 034332 	C76100:	MOVE	11,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5586	034140	200 12 0 00 034360 		MOVE	12,[654321,,076547]	;PRELOAD E WITH 654321,,076547
  5587	034141	676 11 0 00 000012 		TDON	11,12			;*TDON SHOULD SKIP AND
  5588										;PLACE -1,,-1 INTO THE AC
  5589						STOP^
  5590	034142	254 04 0 00 034143 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5591	034143	324 00 0 00 034144 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5592									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5593									;IN THE SUBTEST) TO LOOP ON ERROR^
  5594	034144	312 11 0 00 034217 		CAME	11,[-1]			;PASS IF C(AC)=-1,,-1
  5595						STOP^
  5596	034145	254 04 0 00 034146 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5597	034146	324 00 0 00 034147 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5598									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5599									;IN THE SUBTEST) TO LOOP ON ERROR^
  5600	034147	312 12 0 00 034360 		CAME	12,[654321,,076547]	;PASS IF C(E) UNCHANGED
  5601						STOP^
  5602	034150	254 04 0 00 034151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5603	034151	324 00 0 00 034152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5604									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5605									;IN THE SUBTEST) TO LOOP ON ERROR^
  5606
  5607					;**********
  5608
  5609					;THIS TEST VERIFIES THAT TDON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5610					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5611					;C(E) ARE ZERO.  THESE MASKED
  5612					;AC BITS ARE THEN CHANGED TO ONES.
  5613					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=654321,,076543
  5614					;THENC, TDON SHOULD NOT SKIP AND THE RESULT IN TH AC
  5615					;SHOULD BE -1,,-1 C(E) IS NOT AFFECTED
  5616
  5617	034152	200 10 0 00 034332 	C76110:	MOVE	10,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5618	034153	200 11 0 00 034351 		MOVE	11,[654321,,076543]	;PRELOAD E WITH 654321,,076543
  5619	034154	676 10 0 00 000011 		TDON	10,11			;*TDON SHOULD NOT SKIP AND
  5620										;PLACE -1,,-1 INTO THE AC
  5621	034155	334 00 0 00 000000 		SKIPA				;PASS IF TDON DOES NOT SKIP
  5622						STOP	^
  5623	034156	254 04 0 00 034157 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5624	034157	324 00 0 00 034160 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5625									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5626									;IN THE SUBTEST) TO LOOP ON ERROR^
  5627	034160	312 10 0 00 034217 		CAME	10,[-1]			;PASS IF C(AC)=-1,,-1
  5628						STOP^
  5629	034161	254 04 0 00 034162 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5630	034162	324 00 0 00 034163 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5631									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 101-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0149

  5632									;IN THE SUBTEST) TO LOOP ON ERROR^
  5633	034163	312 11 0 00 034351 		CAME	11,[654321,,076543]	;PASS IF C(E) UNCHANGED
  5634						STOP^
  5635	034164	254 04 0 00 034165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5636	034165	324 00 0 00 034166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5637									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5638									;IN THE SUBTEST) TO LOOP ON ERROR^
  5639
  5640					;**********
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 102
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0150

  5641					;THIS TEST VERIFIES THAT TSON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5642					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5643					;C(E) WITH BOTH HALVE SWAPPED ARE ZERO.  THESE MASKED
  5644					;AC BITS ARE THEN CHANGED TO ONES
  5645					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=077543,,654321
  5646					;HENCE, TSON SHOULD SKIP AND THE RESULT IN AC
  5647					;SHOULD BE -1,,-1  C(E) IS NOT AFFECTED
  5648
  5649	034166	200 07 0 00 034332 	C76200:	MOVE	7,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5650	034167	200 10 0 00 034362 		MOVE	10,[77543,,654321]	;PRELOAD E WITH 077543,,654321]
  5651	034170	677 07 0 00 000010 		TSON	7,10			;*TSON HOULD SKIP AND
  5652										;PLACE -1,,-1 INTO THE AC
  5653						STOP^
  5654	034171	254 04 0 00 034172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5655	034172	324 00 0 00 034173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5656									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5657									;IN THE SUBTEST) TO LOOP ON ERROR^
  5658	034173	312 07 0 00 034217 		CAME	7,[-1]			;PASS IF C(AC)=-1,,-1
  5659						STOP^
  5660	034174	254 04 0 00 034175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5661	034175	324 00 0 00 034176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5662									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5663									;IN THE SUBTEST) TO LOOP ON ERROR^
  5664	034176	312 10 0 00 034362 		CAME	10,[77543,,654321]	;PASS IF C(E) UNCHANGED
  5665						STOP^
  5666	034177	254 04 0 00 034200 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5667	034200	324 00 0 00 034201 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5668									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5669									;IN THE SUBTEST) TO LOOP ON ERROR^
  5670
  5671					;**********
  5672
  5673					;THIS TEST VERIFIES THAT TSON SKIPS THE NEXT SEQUENTIAL INSTRUCTION
  5674					;IF AND ONLY IF NOT ALL BITS IN THE AC CORRESPONDING TO 1'S IN
  5675					;C(E) WITH BOTH HALVES SWAPPED ARE ZERO.  THESE MASKED
  5676					;AC BITS ARE THEN CHANGED TO ONES.
  5677					;IN THIS CASE, C(AC)=123456,,701234 AND C(E)=076543,,654321
  5678					;HENCE, TSON SHOULD NOT SKIP AND THE RESULT IN AC
  5679					;SHOULD BE -1,,-1  C(E) IS NOT AFFECTED
  5680
  5681	034201	200 06 0 00 034332 	C76210:	MOVE	6,[123456,,701234]	;PRELOAD AC WITH 123456,,701234
  5682	034202	200 07 0 00 034342 		MOVE	7,[76543,,654321]	;PRELOAD E WITH 076543MM654321
  5683	034203	677 06 0 00 000007 		TSON	6,7			;*TSON SHOULD NOT SKIP AND
  5684										;PLACE -1,,-1 INTO THE AC
  5685	034204	334 00 0 00 000000 		SKIPA				;PASS IF TSON DOES NOT SKIP
  5686						STOP^
  5687	034205	254 04 0 00 034206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5688	034206	324 00 0 00 034207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5689									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5690									;IN THE SUBTEST) TO LOOP ON ERROR^
  5691	034207	312 06 0 00 034217 		CAME	6,[-1]			;PASS IF C(AC)-=1,,-1
  5692						STOP^
  5693	034210	254 04 0 00 034211 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5694	034211	324 00 0 00 034212 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5695									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 102-1
DSKAF1	MAC	28-Mar-78 14:15		TEST OF MSCL LOGICAL TEST INSTRUCTIONS                                             SEQ 0151

  5696									;IN THE SUBTEST) TO LOOP ON ERROR^
  5697	034212	312 07 0 00 034342 		CAME	7,[76543,,654321]	;PASS IF C(E) UNCHANGED
  5698						STOP^
  5699	034213	254 04 0 00 034214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5700	034214	324 00 0 00 034215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5701									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5702									;IN THE SUBTEST) TO LOOP ON ERROR^
  5703
  5704					;**********
  5705	034215	402 00 0 00 034405 	ENDIT:	SETZM	TNUMB#
  5706	034216	254 00 0 00 030057 		JRST	BEGEND
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0152

  5707					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  5708
  5709					;PROGRAM LITERALS
  5710
  5711						XLIST
  5712					IFNDEF	$LPAPER,<LIST>
  5713	034217					LIT
  5714	034217	777777	777777
  5715	034220	777000	707070
  5716	034221	777000	000777
  5717	034222	123456	123456
  5718	034223	123000	000456
  5719	034224	121212	000000
  5720	034225	777350	777776
  5721	034226	000767	777777
  5722	034227	777010	000000
  5723	034230	000777	770077
  5724	034231	123456	246123
  5725	034232	123000	006100
  5726	034233	000100	777600
  5727	034234	123456	246135
  5728	034235	123456	040104
  5729	034236	123321	456654
  5730	034237	770077	007770
  5731	034240	003300	450004
  5732	034241	123456	663322
  5733	034242	777000	700770
  5734	034243	000456	063002
  5735	034244	123456	777776
  5736	034245	010203	123450
  5737	034246	123456	000000
  5738	034247	000777	123456
  5739	034250	000777	517067
  5740	034251	707077	555666
  5741	034252	123456	765432
  5742	034253	624421	230254
  5743	034254	707070	123456
  5744	034255	707070	767577
  5745	034256	123456	777666
  5746	034257	777001	123470
  5747	034260	777457	777676
  5748	034261	777000	123456
  5749	034262	000777	050321
  5750	034263	777007	771100
  5751	034264	063202	123477
  5752	034265	000570	004200
  5753	034266	707070	123426
  5754	034267	070707	777032
  5755	034270	123456	123457
  5756	034271	707633	121212
  5757	034272	153512	775132
  5758	034273	000777	654321
  5759	034274	654321	012345
  5760	034275	777000	123477
  5761	034276	000777	775701
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0153

  5762	034277	707070	707072
  5763	034300	707777	757372
  5764	034301	777777	070707
  5765	034302	777777	133777
  5766	034303	707070	070706
  5767	034304	777777	707777
  5768	034305	123456	770077
  5769	034306	777001	123324
  5770	034307	654777	657753
  5771	034310	123456	707070
  5772	034311	707070	707070
  5773	034312	123456	123422
  5774	034313	707070	717171
  5775	034314	123422	000000
  5776	034315	123456	707076
  5777	034316	707076	000000
  5778	034317	123456	777777
  5779	034320	123456	135724
  5780	034321	765432	246135
  5781	034322	246135	777777
  5782	034323	123123	456765
  5783	034324	456765	777777
  5784	034325	000000	000000
  5785	034326	707076	777777
  5786	034327	765432	777777
  5787	034330	365432	123456
  5788	034331	365432	000000
  5789	034332	123456	701234
  5790	034333	123123	246135
  5791	034334	123123	123123
  5792	034335	777777	701234
  5793	034336	765432	107654
  5794	034337	777777	765432
  5795	034340	777777	000000
  5796	034341	777777	123456
  5797	034342	076543	654321
  5798	034343	076543	654323
  5799	034344	076547	654321
  5800	034345	123456	701034
  5801	034346	123454	701234
  5802	034347	252525	707070
  5803	034350	020406	501210
  5804	034351	654321	076543
  5805	034352	754321	076543
  5806	034353	023456	701234
  5807	034354	076543	657321
  5808	034355	120456	701234
  5809	034356	121052	000204
  5810	034357	701234	123456
  5811	034360	654321	076547
  5812	034361	123456	701230
  5813	034362	077543	654321
  5814	034363	123456	700234
  5815	034364	123456	701237
  5816	034365	123456	701134
DSKAF DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (6) 0,1	MACRO %53(1020) 14:20 28-Mar-78 Page 1-2
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0154

  5817	034366	123756	701234
  5818	034367	123455	701234
  5819	034370	624426	553711
  5820	034371	677777	777777
  5821	034372	774777	777777
  5822	034373	371173	006244
  5823	034374	777777	777773
  5824	034375	777777	776777
  5825	034376	123456	701334
  5826	034377	123456	070234
  5827	034400	123457	070234
  5828	034401	123457	701234
  5829	034402	373577	707274
  5830	034403	176543	654321
  5831						LIST
  5832	034404	000000	000000		ENDSLD:	0
  5833
  5834					IFDEF	DEBUG,<
  5835					PATCH:	BLOCK DEBUG		;PATCHING AREA
  5836					>
  5837
  5838					;PROGRAM VARIABLES
  5839	034405					VAR
  5840
  5841					IFDEF	PGMEND,<
  5842	034406	000000	000000		END:	0
  5843			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 034407
CPU TIME USED 00:19.792

22P CORE USED

ABORT	    92#
AC0	   687#                                                                                                            SEQ 0155
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
BEGEND	   438#	  5706
BEGIN	   307	   308	   369#	   708	   771	  5843
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#
C56100	   815#
C56200	   837#
C56300	   858#
C56400	   879#
C56500	   899#
C56600	   921#
C56700	   937#
C56701	   961#
C57000	   988#
C57001	  1011#
C57100	  1038#
C57200	  1055#
C57300	  1078#
C57400	  1101#
C57500	  1115#
C57600	  1137#
C57700	  1159#
C60000	  1176#
C60100	  1198#
C60200	  1222#
C60300	  1243#
C60400	  1258#
C60500	  1280#
C60600	  1296#
C60700	  1319#
C61000	  1335#
C61100	  1358#
C61200	  1382#
C61300	  1398#
C61400	  1422#
C61500	  1445#
C61600	  1462#
C61700	  1484#
C62000	  1508#
C62100	  1524#
C62200	  1548#
C62300	  1571#
C62400	  1588#
C62500	  1611#
C62600	  1635#
C62700	  1651#
C63000	  1675#                                                                                                            SEQ 0156
C63100	  1698#
C63200	  1715#
C63300	  1738#
C63400	  1762#
C63500	  1777#
C63600	  1800#
C63700	  1826#
C64000	  1843#
C64010	  1866#
C64100	  1891#
C64110	  1916#
C64200	  1940#
C64300	  1964#
C64310	  1990#
C64400	  2013#
C64500	  2038#
C64510	  2063#
C64600	  2087#
C64700	  2108#
C65000	  2130#
C65100	  2144#
C65200	  2171#
C65210	  2196#
C65300	  2220#
C65400	  2244#
C65410	  2270#
C65500	  2293#
C65600	  2318#
C65610	  2343#
C65700	  2367#
C66000	  2391#
C66010	  2418#
C66100	  2443#
C66110	  2468#
C66200	  2490#
C66300	  2506#
C66301	  2528#
C66400	  2557#
C66410	  2582#
C66411	  2607#
C66500	  2634#
C66600	  2660#
C66610	  2684#
C66700	  2707#
C67000	  2728#
C67100	  2744#
C67200	  2768#
C67210	  2794#
C67300	  2819#
C67310	  2845#
C67400	  2870#
C67410	  2896#
C67500	  2924#                                                                                                            SEQ 0157
C67510	  2946#
C67600	  2968#
C67610	  2990#
C67700	  3011#
C67710	  3032#
C70000	  3052#
C70010	  3073#
C70100	  3093#
C70110	  3114#
C70200	  3135#
C70210	  3156#
C70300	  3179#
C70310	  3209#
C70400	  3238#
C70410	  3267#
C70500	  3290#
C70510	  3320#
C70600	  3348#
C70610	  3371#
C70700	  3393#
C70710	  3416#
C71000	  3440#
C71010	  3464#
C71100	  3488#
C71110	  3512#
C71200	  3535#
C71210	  3558#
C71300	  3580#
C71310	  3603#
C71400	  3626#
C71410	  3650#
C71500	  3674#
C71510	  3698#
C71600	  3721#
C71610	  3752#
C71700	  3784#
C71710	  3816#
C72000	  3848#
C72010	  3880#
C72100	  3911#
C72110	  3947#
C72200	  3976#
C72210	  4006#
C72300	  4037#
C72310	  4069#
C72400	  4101#
C72410	  4133#
C72500	  4162#
C72510	  4185#
C72600	  4207#
C72610	  4230#
C72700	  4254#
C72710	  4278#                                                                                                            SEQ 0158
C73000	  4302#
C73010	  4326#
C73100	  4349#
C73110	  4372#
C73200	  4394#
C73210	  4417#
C73300	  4440#
C73310	  4464#
C73400	  4488#
C73410	  4512#
C73500	  4535#
C73510	  4566#
C73600	  4598#
C73610	  4630#
C73700	  4662#
C73710	  4688#
C74000	  4718#
C74100	  4748#
C74200	  4777#
C74210	  4807#
C74300	  4838#
C74310	  4870#
C74400	  4902#
C74410	  4934#
C74500	  4963#
C74510	  4986#
C74600	  5008#
C74610	  5031#
C74700	  5055#
C74710	  5079#
C75000	  5103#
C75010	  5127#
C75100	  5150#
C75110	  5173#
C75200	  5195#
C75210	  5218#
C75300	  5241#
C75310	  5265#
C75400	  5289#
C75410	  5313#
C75500	  5338#
C75510	  5370#
C75600	  5402#
C75610	  5434#
C75700	  5465#
C75710	  5495#
C76000	  5524#
C76010	  5554#
C76100	  5585#
C76110	  5617#
C76200	  5649#
C76210	  5681#
CCA	   356#                                                                                                            SEQ 0159
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  5834
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
E56701	   962	   964	   971	   980#
E57001	  1013	  1014	  1021	  1030#
E66301	  2530	  2531	  2538	  2547#
E66411	  2609	  2610	  2618	  2627#
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  5842#                                                                                                            SEQ 0160
ENDFIX	   684#
ENDIT	  5705#
ENDSLD	  5832#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#                                                                                                            SEQ 0161
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#                                                                                                            SEQ 0162
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492                                                                                                     SEQ 0163
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  5841
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#                                                                                                            SEQ 0164
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#                                                                                                            SEQ 0165
SM10	   667#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   806#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  5705#	  5705
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#                                                                                                            SEQ 0166
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#
$ITRX1	   451#
$LPAPE	  5712
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#                                                                                                            SEQ 0167
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0168
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   820	   826	   842	   848	   862	   868
	   883	   889	   903	   909	   925	   942	   948	   967	   974	   993	   999	  1017	  1024	  1042
	  1061	  1067	  1084	  1090	  1105	  1120	  1126	  1142	  1148	  1164	  1181	  1187	  1204	  1210
	  1227	  1233	  1247	  1263	  1269	  1284	  1302	  1308	  1323	  1341	  1347	  1364	  1370	  1387
	  1404	  1410	  1428	  1434	  1450	  1467	  1473	  1490	  1496	  1513	  1530	  1536	  1554	  1560
	  1576	  1594	  1600	  1617	  1623	  1640	  1657	  1663	  1681	  1687	  1703	  1721	  1727	  1744
	  1750	  1766	  1783	  1789	  1806	  1812	  1830	  1848	  1854	  1871	  1877	  1897	  1903	  1922
	  1928	  1945	  1951	  1969	  1975	  1996	  2002	  2018	  2024	  2044	  2050	  2069	  2075	  2092
	  2098	  2113	  2119	  2134	  2150	  2156	  2177	  2183	  2202	  2208	  2225	  2231	  2250	  2256
	  2276	  2282	  2298	  2304	  2324	  2330	  2349	  2355	  2372	  2378	  2397	  2403	  2424	  2430
	  2448	  2454	  2474	  2480	  2494	  2511	  2517	  2534	  2541	  2562	  2568	  2588	  2594	  2614
	  2621	  2639	  2645	  2665	  2671	  2690	  2696	  2712	  2718	  2732	  2749	  2755	  2774	  2780
	  2800	  2806	  2825	  2831	  2851	  2857	  2876	  2882	  2902	  2908	  2927	  2933	  2950	  2956
	  2971	  2977	  2994	  3000	  3014	  3020	  3035	  3041	  3055	  3061	  3076	  3082	  3096	  3102
	  3118	  3124	  3138	  3144	  3160	  3166	  3183	  3189	  3195	  3214	  3220	  3226	  3242	  3248
	  3254	  3271	  3277	  3294	  3300	  3306	  3325	  3331	  3337	  3353	  3359	  3376	  3382	  3398
	  3404	  3421	  3427	  3444	  3450	  3469	  3475	  3492	  3498	  3517	  3523	  3539	  3545	  3562
	  3568	  3584	  3590	  3607	  3613	  3630	  3636	  3655	  3661	  3678	  3684	  3703	  3709	  3727
	  3733	  3739	  3758	  3764	  3770	  3789	  3795	  3801	  3822	  3828	  3834	  3853	  3859	  3865
	  3886	  3892	  3898	  3916	  3922	  3928	  3934	  3952	  3958	  3964	  3981	  3987	  3993	  4011
	  4017	  4023	  4042	  4048	  4054	  4075	  4081	  4087	  4106	  4112	  4118	  4139	  4145	  4151
	  4167	  4173	  4190	  4196	  4212	  4218	  4235	  4241	  4258	  4264	  4283	  4289	  4306	  4312
	  4331	  4337	  4353	  4359	  4376	  4382	  4398	  4404	  4421	  4427	  4444	  4450	  4469	  4475
	  4492	  4498	  4517	  4523	  4541	  4547	  4553	  4572	  4578	  4584	  4603	  4609	  4615	  4636
	  4642	  4648	  4667	  4673	  4694	  4700	  4706	  4723	  4729	  4735	  4753	  4759	  4765	  4782
	  4788	  4794	  4812	  4818	  4824	  4843	  4849	  4855	  4876	  4882	  4888	  4907	  4913	  4919
	  4940	  4946	  4952	  4968	  4974	  4991	  4997	  5013	  5019	  5036	  5042	  5059	  5065	  5084     SEQ 0169
	  5090	  5107	  5113	  5132	  5138	  5154	  5160	  5177	  5183	  5199	  5205	  5222	  5228	  5245
	  5251	  5270	  5276	  5293	  5299	  5318	  5324	  5343	  5349	  5355	  5376	  5382	  5388	  5407
	  5413	  5419	  5441	  5447	  5453	  5470	  5476	  5482	  5500	  5506	  5512	  5529	  5535	  5541
	  5559	  5565	  5571	  5590	  5596	  5602	  5623	  5629	  5635	  5654	  5660	  5666	  5687	  5693
	  5699
JEN	   160#
JRSTF	   159#
MAPADR	   295#
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#                                                                                                            SEQ 0170
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#
SIXBTZ	   261#
STOP	    48#	   819	   825	   841	   847	   861	   867	   882	   888	   902	   908	   924	   941	   947
	   966	   973	   992	   998	  1016	  1023	  1041	  1060	  1066	  1083	  1089	  1104	  1119	  1125
	  1141	  1147	  1163	  1180	  1186	  1203	  1209	  1226	  1232	  1246	  1262	  1268	  1283	  1301
	  1307	  1322	  1340	  1346	  1363	  1369	  1386	  1403	  1409	  1427	  1433	  1449	  1466	  1472
	  1489	  1495	  1512	  1529	  1535	  1553	  1559	  1575	  1593	  1599	  1616	  1622	  1639	  1656     SEQ 0171
	  1662	  1680	  1686	  1702	  1720	  1726	  1743	  1749	  1765	  1782	  1788	  1805	  1811	  1829
	  1847	  1853	  1870	  1876	  1896	  1902	  1921	  1927	  1944	  1950	  1968	  1974	  1995	  2001
	  2017	  2023	  2043	  2049	  2068	  2074	  2091	  2097	  2112	  2118	  2133	  2149	  2155	  2176
	  2182	  2201	  2207	  2224	  2230	  2249	  2255	  2275	  2281	  2297	  2303	  2323	  2329	  2348
	  2354	  2371	  2377	  2396	  2402	  2423	  2429	  2447	  2453	  2473	  2479	  2493	  2510	  2516
	  2533	  2540	  2561	  2567	  2587	  2593	  2613	  2620	  2638	  2644	  2664	  2670	  2689	  2695
	  2711	  2717	  2731	  2748	  2754	  2773	  2779	  2799	  2805	  2824	  2830	  2850	  2856	  2875
	  2881	  2901	  2907	  2926	  2932	  2949	  2955	  2970	  2976	  2993	  2999	  3013	  3019	  3034
	  3040	  3054	  3060	  3075	  3081	  3095	  3101	  3117	  3123	  3137	  3143	  3159	  3165	  3182
	  3188	  3194	  3213	  3219	  3225	  3241	  3247	  3253	  3270	  3276	  3293	  3299	  3305	  3324
	  3330	  3336	  3352	  3358	  3375	  3381	  3397	  3403	  3420	  3426	  3443	  3449	  3468	  3474
	  3491	  3497	  3516	  3522	  3538	  3544	  3561	  3567	  3583	  3589	  3606	  3612	  3629	  3635
	  3654	  3660	  3677	  3683	  3702	  3708	  3726	  3732	  3738	  3757	  3763	  3769	  3788	  3794
	  3800	  3821	  3827	  3833	  3852	  3858	  3864	  3885	  3891	  3897	  3915	  3921	  3927	  3933
	  3951	  3957	  3963	  3980	  3986	  3992	  4010	  4016	  4022	  4041	  4047	  4053	  4074	  4080
	  4086	  4105	  4111	  4117	  4138	  4144	  4150	  4166	  4172	  4189	  4195	  4211	  4217	  4234
	  4240	  4257	  4263	  4282	  4288	  4305	  4311	  4330	  4336	  4352	  4358	  4375	  4381	  4397
	  4403	  4420	  4426	  4443	  4449	  4468	  4474	  4491	  4497	  4516	  4522	  4540	  4546	  4552
	  4571	  4577	  4583	  4602	  4608	  4614	  4635	  4641	  4647	  4666	  4672	  4693	  4699	  4705
	  4722	  4728	  4734	  4752	  4758	  4764	  4781	  4787	  4793	  4811	  4817	  4823	  4842	  4848
	  4854	  4875	  4881	  4887	  4906	  4912	  4918	  4939	  4945	  4951	  4967	  4973	  4990	  4996
	  5012	  5018	  5035	  5041	  5058	  5064	  5083	  5089	  5106	  5112	  5131	  5137	  5153	  5159
	  5176	  5182	  5198	  5204	  5221	  5227	  5244	  5250	  5269	  5275	  5292	  5298	  5317	  5323
	  5342	  5348	  5354	  5375	  5381	  5387	  5406	  5412	  5418	  5440	  5446	  5452	  5469	  5475
	  5481	  5499	  5505	  5511	  5528	  5534	  5540	  5558	  5564	  5570	  5589	  5595	  5601	  5622
	  5628	  5634	  5653	  5659	  5665	  5686	  5692	  5698
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#                                                                                                            SEQ 0172
WRTIM	   356#
WRUBR	   356#

ANDB	   990	  1014
ANDCAB	  1080                                                                                                             SEQ 0173
ANDCAI	  1039
ANDCAM	  1057
ANDCBB	  1424
ANDCBI	  1383
ANDCBM	  1400
ANDCMB	  1200
ANDCMI	  1160
ANDCMM	  1178
ANDI	   922
ANDM	   939	   964
AOS	   444	   757
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAIE	   923	  1040	  1103	  1828	  2376	  2452	  2472	  2478	  2515	  2539	  2566	  2586	  2592	  2612
	  2619	  2772	  2880	  2900	  2906
CAME	   824	   840	   860	   887	   901	   907	   940	   946	   965	   972	   991	   997	  1015	  1022
	  1059	  1065	  1082	  1088	  1124	  1140	  1146	  1162	  1179	  1185	  1202	  1208	  1225	  1231
	  1245	  1261	  1267	  1282	  1300	  1306	  1321	  1339	  1345	  1362	  1368	  1385	  1402	  1408
	  1426	  1432	  1448	  1465	  1471	  1488	  1494	  1511	  1528	  1534	  1552	  1558	  1574	  1592
	  1598	  1615	  1621	  1638	  1655	  1661	  1679	  1685	  1701	  1719	  1725	  1742	  1748	  1764
	  1781	  1787	  1804	  1810	  1846	  1852	  1869	  1875	  1895	  1901	  1920	  1926	  1943	  1949
	  1967	  1973	  1994	  2000	  2016	  2022	  2042	  2048	  2067	  2073	  2090	  2096	  2111	  2117
	  2132	  2147	  2154	  2175	  2181	  2200	  2206	  2223	  2229	  2248	  2254	  2274	  2280	  2296
	  2302	  2322	  2328	  2347	  2353	  2370	  2395	  2401	  2422	  2428	  2446	  2509	  2532	  2560
	  2637	  2643	  2663	  2669	  2688	  2694	  2710	  2716	  2730	  2747	  2753	  2778	  2798	  2804
	  2829	  2849	  2855	  2874	  2931	  2954	  2975	  2998	  3018	  3039	  3059	  3080	  3100	  3122
	  3142	  3164	  3187	  3193	  3218	  3224	  3246	  3252	  3275	  3298	  3304	  3329	  3335	  3357
	  3380	  3402	  3425	  3448	  3473	  3496	  3521	  3543	  3566	  3588	  3611	  3634	  3659	  3682
	  3707	  3731	  3737	  3762	  3768	  3793	  3799	  3826	  3832	  3857	  3863	  3890	  3896	  3920
	  3926	  3932	  3956	  3962	  3985	  3991	  4015	  4021	  4046	  4052	  4079	  4085	  4110	  4116
	  4143	  4149	  4171	  4194	  4216	  4239	  4262	  4287	  4310	  4335	  4357	  4380	  4402	  4425
	  4448	  4473	  4496	  4521	  4545	  4551	  4576	  4582	  4607	  4613	  4640	  4646	  4671	  4698
	  4704	  4727	  4733	  4757	  4763	  4786	  4792	  4816	  4822	  4847	  4853	  4880	  4886	  4911
	  4917	  4944	  4950	  4972	  4995	  5017	  5040	  5063	  5088	  5111	  5136	  5158	  5181	  5203
	  5226	  5249	  5274	  5297	  5322	  5347	  5353	  5380	  5386	  5411	  5417	  5445	  5451	  5474
	  5480	  5504	  5510	  5533	  5539	  5563	  5569	  5594	  5600	  5627	  5633	  5658	  5664	  5691
	  5697
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  5843
EQVB	  1486
EQVI	  1446
EQVM	  1464
HLLEM	  2222	  2295
HLLES	  2246	  2272
HLLI	  1827
HLLOM	  2089
HLLS	  1845	  1868
HLLZM	  1942
HLLZS	  1966	  1992
HLRES	  2872	  2898                                                                                                     SEQ 0174
HLRM	  2369
HLRO	  2709
HLROI	  2729
HLROM	  2746
HLROS	  2770	  2796
HLRS	  2393	  2420
HLRZI	  2491
HLRZM	  2508	  2531
HLRZS	  2559	  2584	  2610
HRLES	  2320	  2345
HRLO	  2110
HRLOI	   989	  1012	  1055	  2131
HRLOM	  2146
HRLOS	  2173	  2198
HRLS	  1893	  1918
HRLZI	  1258	  2245	  2271
HRLZM	  2015
HRLZS	  2040	  2065
HRRES	  2821	  2847
HRROI	   988	  1011
HRROM	  2636
HRROS	  2662	  2686
HRRZI	  2319	  2344
HRRZS	  2445	  2470
IFDEF	   356	   407	   408	   409	   410	  5834	  5841
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  5712
IORB	  1360
IORI	  1320
IORM	  1337
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   806	  5706
JSP	   166	   743	   776
JUMPA	   821	   827	   843	   849	   863	   869	   884	   890	   904	   910	   926	   943	   949	   968
	   975	   994	  1000	  1018	  1025	  1043	  1062	  1068	  1085	  1091	  1106	  1121	  1127	  1143
	  1149	  1165	  1182	  1188	  1205	  1211	  1228	  1234	  1248	  1264	  1270	  1285	  1303	  1309
	  1324	  1342	  1348	  1365	  1371	  1388	  1405	  1411	  1429	  1435	  1451	  1468	  1474	  1491
	  1497	  1514	  1531	  1537	  1555	  1561	  1577	  1595	  1601	  1618	  1624	  1641	  1658	  1664
	  1682	  1688	  1704	  1722	  1728	  1745	  1751	  1767	  1784	  1790	  1807	  1813	  1831	  1849
	  1855	  1872	  1878	  1898	  1904	  1923	  1929	  1946	  1952	  1970	  1976	  1997	  2003	  2019
	  2025	  2045	  2051	  2070	  2076	  2093	  2099	  2114	  2120	  2135	  2151	  2157	  2178	  2184
	  2203	  2209	  2226	  2232	  2251	  2257	  2277	  2283	  2299	  2305	  2325	  2331	  2350	  2356
	  2373	  2379	  2398	  2404	  2425	  2431	  2449	  2455	  2475	  2481	  2495	  2512	  2518	  2535
	  2542	  2563	  2569	  2589	  2595	  2615	  2622	  2640	  2646	  2666	  2672	  2691	  2697	  2713
	  2719	  2733	  2750	  2756	  2775	  2781	  2801	  2807	  2826	  2832	  2852	  2858	  2877	  2883
	  2903	  2909	  2928	  2934	  2951	  2957	  2972	  2978	  2995	  3001	  3015	  3021	  3036	  3042
	  3056	  3062	  3077	  3083	  3097	  3103	  3119	  3125	  3139	  3145	  3161	  3167	  3184	  3190
	  3196	  3215	  3221	  3227	  3243	  3249	  3255	  3272	  3278	  3295	  3301	  3307	  3326	  3332
	  3338	  3354	  3360	  3377	  3383	  3399	  3405	  3422	  3428	  3445	  3451	  3470	  3476	  3493
	  3499	  3518	  3524	  3540	  3546	  3563	  3569	  3585	  3591	  3608	  3614	  3631	  3637	  3656
	  3662	  3679	  3685	  3704	  3710	  3728	  3734	  3740	  3759	  3765	  3771	  3790	  3796	  3802
	  3823	  3829	  3835	  3854	  3860	  3866	  3887	  3893	  3899	  3917	  3923	  3929	  3935	  3953     SEQ 0175
	  3959	  3965	  3982	  3988	  3994	  4012	  4018	  4024	  4043	  4049	  4055	  4076	  4082	  4088
	  4107	  4113	  4119	  4140	  4146	  4152	  4168	  4174	  4191	  4197	  4213	  4219	  4236	  4242
	  4259	  4265	  4284	  4290	  4307	  4313	  4332	  4338	  4354	  4360	  4377	  4383	  4399	  4405
	  4422	  4428	  4445	  4451	  4470	  4476	  4493	  4499	  4518	  4524	  4542	  4548	  4554	  4573
	  4579	  4585	  4604	  4610	  4616	  4637	  4643	  4649	  4668	  4674	  4695	  4701	  4707	  4724
	  4730	  4736	  4754	  4760	  4766	  4783	  4789	  4795	  4813	  4819	  4825	  4844	  4850	  4856
	  4877	  4883	  4889	  4908	  4914	  4920	  4941	  4947	  4953	  4969	  4975	  4992	  4998	  5014
	  5020	  5037	  5043	  5060	  5066	  5085	  5091	  5108	  5114	  5133	  5139	  5155	  5161	  5178
	  5184	  5200	  5206	  5223	  5229	  5246	  5252	  5271	  5277	  5294	  5300	  5319	  5325	  5344
	  5350	  5356	  5377	  5383	  5389	  5408	  5414	  5420	  5442	  5448	  5454	  5471	  5477	  5483
	  5501	  5507	  5513	  5530	  5536	  5542	  5560	  5566	  5572	  5591	  5597	  5603	  5624	  5630
	  5636	  5655	  5661	  5667	  5688	  5694	  5700
LALL	    10
LIST	     9	   318	   356	   489	  5712	  5831
LIT	  5713
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
MOVE	   921	   937	   938	   961	   963	   971	  1021	  1038	  1056	  1078	  1079	  1138	  1159	  1176
	  1177	  1198	  1199	  1222	  1223	  1243	  1280	  1296	  1297	  1319	  1335	  1336	  1358	  1359
	  1382	  1398	  1399	  1422	  1423	  1445	  1462	  1463	  1484	  1485	  1508	  1524	  1548	  1571
	  1588	  1589	  1611	  1612	  1635	  1651	  1675	  1698	  1715	  1716	  1738	  1739	  1762	  1777
	  1778	  1800	  1801	  1826	  1844	  1867	  1892	  1917	  1940	  1941	  1965	  1991	  2013	  2014
	  2039	  2064	  2087	  2088	  2108	  2109	  2145	  2172	  2197	  2220	  2293	  2367	  2392	  2419
	  2444	  2469	  2506	  2507	  2528	  2529	  2538	  2558	  2583	  2608	  2618	  2634	  2661	  2685
	  2708	  2728	  2744	  2745	  2769	  2795	  2820	  2846	  2871	  2897	  2924	  2946	  2968	  2990
	  3011	  3032	  3052	  3073	  3093	  3114	  3135	  3156	  3179	  3180	  3209	  3210	  3238	  3239
	  3267	  3268	  3290	  3291	  3320	  3321	  3348	  3371	  3393	  3416	  3440	  3464	  3488	  3512
	  3535	  3558	  3580	  3603	  3626	  3650	  3674	  3698	  3721	  3722	  3752	  3753	  3784	  3785
	  3816	  3817	  3848	  3849	  3880	  3881	  3911	  3912	  3947	  3948	  3976	  3977	  4006	  4007
	  4037	  4038	  4069	  4070	  4101	  4102	  4133	  4134	  4162	  4185	  4207	  4230	  4254	  4278
	  4302	  4326	  4349	  4372	  4394	  4417	  4440	  4464	  4488	  4512	  4535	  4536	  4566	  4567
	  4598	  4599	  4630	  4631	  4662	  4663	  4688	  4689	  4718	  4719	  4748	  4749	  4777	  4778
	  4807	  4808	  4838	  4839	  4870	  4871	  4902	  4903	  4934	  4935	  4963	  4986	  5008	  5031
	  5055	  5079	  5103	  5127	  5150	  5173	  5195	  5218	  5241	  5265	  5289	  5313	  5338	  5339
	  5370	  5371	  5402	  5403	  5434	  5435	  5465	  5466	  5495	  5496	  5524	  5525	  5554	  5555
	  5585	  5586	  5617	  5618	  5649	  5650	  5681	  5682
MOVEM	   962	  1013	  2530	  2609
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
ORCAB	  1613
ORCAI	  1572
ORCAM	  1590
ORCBB	  1802
ORCBI	  1763
ORCBM	  1779
ORCMB	  1740
ORCMI	  1699                                                                                                             SEQ 0176
ORCMM	  1717
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
SETA	  1224
SETAI	  1244
SETAM	  1260
SETCAB	  1550
SETCAI	  1509
SETCAM	  1526
SETCMB	  1677
SETCMI	  1636
SETCMM	  1653
SETMB	  1139
SETMI	  1102
SETMM	  1117
SETO	   815	   816	   837	   838	  1101	  1116	  1137	  1259	  1525	  1549	  1652	  1676	  1843	  1866
	  1891	  1916	  1964	  1990	  2038	  2063	  2443	  2468	  2490	  2557	  2582	  2607	  2870	  2896
SETOB	   900
SETOI	   859
SETOM	   745	   752	   778	   880	  2221	  2294
SETZ	  1115	  2130	  2171	  2196	  2244	  2270	  2318	  2343	  2391	  2418	  2660	  2684	  2707	  2768
	  2794	  2819	  2845
SETZB	   858	   879	   899
SETZI	   817
SETZM	   742	   747	   775	   780	   839	  2144	  2368	  2635	  5705
SIXBIT	    77	    78	   574	   575	   583	   584
SKIPA	   979	  1029	  2546	  2626	  2948	  2992	  3116	  3158	  3212	  3323	  3351	  3374	  3396	  3419
	  3467	  3515	  3653	  3701	  3725	  3756	  3820	  3884	  4073	  4137	  4165	  4188	  4210	  4233
	  4281	  4329	  4467	  4515	  4539	  4570	  4634	  4692	  4874	  4938	  4966	  4989	  5011	  5034
	  5082	  5130	  5268	  5316	  5374	  5439	  5621	  5685
SKIPE	   748	   762	   768	   818	   846	   866	   881	  1118	  2492	  2823
SKIPL	   783
SKIPN	   746	   751	   759	   764	   770	   779	   781
SOS	   758
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   807	  1818	  2914	  5707
TDCA	  4720	  4750
TDCE	  4600	  4632
TDCN	  4840	  4872
TDOA	  5467	  5497
TDOE	  5340	  5372
TDON	  5587	  5619
TDZA	  3913	  3949
TDZE	  3786	  3818
TDZN	  4039	  4071
TITLE	    14
TLC	  4208	  4231
TLCA	  4395	  4418
TLCE	  4303	  4327
TLCN	  4489	  4513
TLNA	  3053	  3074
TLNE	   744	   777	  2969	  2991                                                                                     SEQ 0177
TLNN	  3136	  3157
TLO	  5009	  5032
TLOA	  5196	  5219
TLOE	  5104	  5128
TLON	  5290	  5314
TLZ	  3394	  3417
TLZA	  3581	  3604
TLZE	  3489	  3513
TLZN	  3675	  3699
TRC	  4163	  4186
TRCA	  4350	  4373
TRCE	  4255	  4279
TRCN	  4441	  4465
TRNA	  3012	  3033
TRNE	  2925	  2947
TRNN	  3094	  3115
TRO	  4964	  4987
TROA	  5151	  5174
TROE	  5056	  5080
TRON	  5242	  5266
TRZ	  3349	  3372
TRZA	  3536	  3559
TRZE	  3441	  3465
TRZN	  3627	  3651
TSC	  4537	  4568
TSCA	  4779	  4809
TSCE	  4664	  4690
TSCN	  4904	  4936
TSNA	  3240	  3269
TSNE	  3181	  3211
TSNN	  3292	  3322
TSOA	  5526	  5556
TSOE	  5404	  5436
TSON	  5651	  5683
TSZ	  3723	  3754
TSZA	  3978	  4008
TSZE	  3850	  3882
TSZN	  4103	  4135
TTCALL	   784
VAR	  5839
XLIST	     8	   317	   355	   488	  5711
XORB	  1298
XORI	  1281

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0178
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0179

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0180

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0181

*030662  SETO 	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*030663  SETZI	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 000002 
FINAL
C(AC)= 000000 000000 
----------

*030664  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030666  JUMPA	0,030667

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030667 
----------

*030667  CAME	2,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030671  JUMPA	0,030672

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030672 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0182

*030672  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*030673  SETO 	2,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*030674  SETZM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
 C(E)= 000000 000000 
----------

*030675  CAME	1,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030677  JUMPA	0,030700

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030700 
----------

*030700  SKIPE	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0183

*030702  JUMPA	0,030703

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030703 
----------

*030703  SETZB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030704  SETOI	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000002 
FINAL
C(AC)= 777777 777777 
----------

*030705  CAME	1,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030707  JUMPA	0,030710

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030710 
----------

*030710  SKIPE	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0184

*030712  JUMPA	0,030713

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030713 
----------

*030713  SETZB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030714  SETOM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 777777 777777 
----------

*030715  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030717  JUMPA	0,030720

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030720 
----------

*030720  CAME	2,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0185

*030722  JUMPA	0,030723

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030723 
----------

*030723  SETZB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030724  SETOB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030725  CAME	1,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*030727  JUMPA	0,030730

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030730 
----------

*030730  CAME	2,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0186

*030732  JUMPA	0,030733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030733 
----------

*030733  MOVE 	1,034220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777000 707070 
FINAL
C(AC)= 777000 707070 
----------

*030734  ANDI	1,123123

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 707070     E= 000000 123123 
FINAL
C(AC)= 000000 103020 
----------

*030735  CAIE	1,103020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 103020     E= 000000 103020 
----------

*030737  JUMPA	0,030740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030740 
----------

*030740  MOVE 	1,034221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 103020  C(E)= 777000 000777 
FINAL
C(AC)= 777000 000777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0187

*030741  MOVE 	2,034222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 123456 
FINAL
C(AC)= 123456 123456 
----------

*030742  ANDM	2,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 777000 000777 
FINAL
 C(E)= 123000 000456 
----------

*030743  CAME	2,034222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 123456 
----------

*030745  JUMPA	0,030746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030746 
----------

*030746  CAME	1,034223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 000456  C(E)= 123000 000456 
----------

*030750  JUMPA	0,030751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030751 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0188

*030751  MOVE 	1,034221

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 000456  C(E)= 777000 000777 
FINAL
C(AC)= 777000 000777 
----------

*030752  MOVEM	1,030765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 000777  C(E)= 000000 000000 
FINAL
 C(E)= 777000 000777 
----------

*030753  MOVE 	2,034222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 123456 
FINAL
C(AC)= 123456 123456 
----------

*030754  ANDM	2,030765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 777000 000777 
FINAL
 C(E)= 123000 000456 
----------

*030755  CAME	2,034222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0189

*030757  JUMPA	0,030760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030760 
----------

*030760  MOVE 	1,030765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 000777  C(E)= 123000 000456 
FINAL
C(AC)= 123000 000456 
----------

*030761  CAME	1,034223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 000456  C(E)= 123000 000456 
----------

*030763  JUMPA	0,030764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030764 
----------

*030764  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

*030766  HRROI	3,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0190

*030767  HRLOI	6,121212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 121212 
FINAL
C(AC)= 121212 777777 
----------

*030770  ANDB	3,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 121212 777777 
FINAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

*030771  CAME	3,034224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

*030773  JUMPA	0,030774

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030774 
----------

*030774  CAME	6,034224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

*030776  JUMPA	0,030777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0191

*030777  HRROI	3,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000     E= 000000 000000 
FINAL
C(AC)= 777777 000000 
----------

*031000  HRLOI	6,121212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000     E= 000000 121212 
FINAL
C(AC)= 121212 777777 
----------

*031001  MOVEM	6,031013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 777777  C(E)= 000000 000000 
FINAL
 C(E)= 121212 777777 
----------

*031002  ANDB	3,031013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 121212 777777 
FINAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

*031003  CAME	3,034224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0192

*031005  JUMPA	0,031006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031006 
----------

*031006  MOVE 	6,031013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 777777  C(E)= 121212 000000 
FINAL
C(AC)= 121212 000000 
----------

*031007  CAME	6,034224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 121212 000000 
----------

*031011  JUMPA	0,031012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031012 
----------

*031012  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

*031014  MOVE 	5,034220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777000 707070 
FINAL
C(AC)= 777000 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0193

*031015  ANDCAI	5,135246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 707070     E= 000000 135246 
FINAL
C(AC)= 000000 030206 
----------

*031016  CAIE	5,030206

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030206     E= 000000 030206 
----------

*031020  JUMPA	0,031021

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031021 
----------

*031021  HRLOI	4,000767

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000767 
FINAL
C(AC)= 000767 777777 
----------

*031022  MOVE 	6,034225

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 777350 777776 
FINAL
C(AC)= 777350 777776 
----------

*031023  ANDCAM	4,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000767 777777  C(E)= 777350 777776 
FINAL
 C(E)= 777010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0194

*031024  CAME	4,034226

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000767 777777  C(E)= 000767 777777 
----------

*031026  JUMPA	0,031027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031027 
----------

*031027  CAME	6,034227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777010 000000  C(E)= 777010 000000 
----------

*031031  JUMPA	0,031032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031032 
----------

*031032  MOVE 	1,034230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 000456  C(E)= 000777 770077 
FINAL
C(AC)= 000777 770077 
----------

*031033  MOVE 	2,034231

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123456  C(E)= 123456 246123 
FINAL
C(AC)= 123456 246123 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0195

*031034  ANDCAB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 770077  C(E)= 123456 246123 
FINAL
C(AC)= 123000 006100  C(E)= 123000 006100 
----------

*031035  CAME	1,034232

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 006100  C(E)= 123000 006100 
----------

*031037  JUMPA	0,031040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031040 
----------

*031040  CAME	2,034232

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 006100  C(E)= 123000 006100 
----------

*031042  JUMPA	0,031043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031043 
----------

*031043  SETO 	5,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030206  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0196

*031044  SETMI	5,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*031045  CAIE	5,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*031047  JUMPA	0,031050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031050 
----------

*031050  SETZ 	16,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 000000 000000 
----------

*031051  SETO 	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*031052  SETMM	16,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
 C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0197

*031053  SKIPE	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*031055  JUMPA	0,031056

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031056 
----------

*031056  CAME	17,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031060  JUMPA	0,031061

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 031061 
----------

*031061  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 777777 777777 
----------

*031062  MOVE 	1,034233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 006100  C(E)= 000100 777600 
FINAL
C(AC)= 000100 777600 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0198

*031063  SETMB	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000100 777600 
FINAL
C(AC)= 000100 777600  C(E)= 000100 777600 
----------

*031064  CAME	0,034233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600  C(E)= 000100 777600 
----------

*031066  JUMPA	0,031067

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031067 
----------

*031067  CAME	1,034233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600  C(E)= 000100 777600 
----------

*031071  JUMPA	0,031072

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031072 
----------

*031072  MOVE 	15,034234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 246135 
FINAL
C(AC)= 123456 246135 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0199

*031073  ANDCMI	15,717273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 246135     E= 000000 717273 
FINAL
C(AC)= 123456 040104 
----------

*031074  CAME	15,034235

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 040104  C(E)= 123456 040104 
----------

*031076  JUMPA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031077 
----------

*031077  MOVE 	14,034236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123321 456654 
FINAL
C(AC)= 123321 456654 
----------

*031100  MOVE 	15,034237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 040104  C(E)= 770077 007770 
FINAL
C(AC)= 770077 007770 
----------

*031101  ANDCMM	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123321 456654  C(E)= 770077 007770 
FINAL
 C(E)= 003300 450004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0200

*031102  CAME	14,034236

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123321 456654  C(E)= 123321 456654 
----------

*031104  JUMPA	0,031105

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031105 
----------

*031105  CAME	15,034240

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 003300 450004  C(E)= 003300 450004 
----------

*031107  JUMPA	0,031110

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031110 
----------

*031110  MOVE 	13,034241

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 663322 
FINAL
C(AC)= 123456 663322 
----------

*031111  MOVE 	14,034242

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123321 456654  C(E)= 777000 700770 
FINAL
C(AC)= 777000 700770 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0201

*031112  ANDCMB	13,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 663322  C(E)= 777000 700770 
FINAL
C(AC)= 000456 063002  C(E)= 000456 063002 
----------

*031113  CAME	13,034243

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000456 063002  C(E)= 000456 063002 
----------

*031115  JUMPA	0,031116

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031116 
----------

*031116  CAME	14,034243

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000456 063002  C(E)= 000456 063002 
----------

*031120  JUMPA	0,031121

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031121 
----------

*031121  MOVE 	12,034244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 777776 
FINAL
C(AC)= 123456 777776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0202

*031122  MOVE 	13,034245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000456 063002  C(E)= 010203 123450 
FINAL
C(AC)= 010203 123450 
----------

*031123  SETA 	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776  C(E)= 010203 123450 
FINAL
C(AC)= 123456 777776 
----------

*031124  CAME	12,034244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776  C(E)= 123456 777776 
----------

*031126  JUMPA	0,031127

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031127 
----------

*031127  CAME	13,034245

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010203 123450  C(E)= 010203 123450 
----------

*031131  JUMPA	0,031132

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031132 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0203

*031132  MOVE 	12,034244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776  C(E)= 123456 777776 
FINAL
C(AC)= 123456 777776 
----------

*031133  SETAI	12,123450

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776     E= 000000 123450 
FINAL
C(AC)= 123456 777776 
----------

*031134  CAME	12,034244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776  C(E)= 123456 777776 
----------

*031136  JUMPA	0,031137

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031137 
----------

*031137  HRLZI	11,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 123456 
FINAL
C(AC)= 123456 000000 
----------

*031140  SETO 	12,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777776  C(E)= 000100 777600 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0204

*031141  SETAM	11,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 777777 777777 
FINAL
 C(E)= 123456 000000 
----------

*031142  CAME	11,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031144  JUMPA	0,031145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031145 
----------

*031145  CAME	12,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031147  JUMPA	0,031150

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031150 
----------

*031150  MOVE 	10,034247

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000777 123456 
FINAL
C(AC)= 000777 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0205

*031151  XORI	10,434431

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 123456     E= 000000 434431 
FINAL
C(AC)= 000777 517067 
----------

*031152  CAME	10,034250

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 517067  C(E)= 000777 517067 
----------

*031154  JUMPA	0,031155

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031155 
----------

*031155  MOVE 	7,034251

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 707077 555666 
FINAL
C(AC)= 707077 555666 
----------

*031156  MOVE 	10,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 517067  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031157  XORB	7,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707077 555666  C(E)= 123456 765432 
FINAL
C(AC)= 624421 230254  C(E)= 624421 230254 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0206

*031160  CAME	7,034253

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624421 230254  C(E)= 624421 230254 
----------

*031162  JUMPA	0,031163

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031163 
----------

*031163  CAME	10,034253

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624421 230254  C(E)= 624421 230254 
----------

*031165  JUMPA	0,031166

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031166 
----------

*031166  MOVE 	6,034254

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777010 000000  C(E)= 707070 123456 
FINAL
C(AC)= 707070 123456 
----------

*031167  IORI	6,765567

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 123456     E= 000000 765567 
FINAL
C(AC)= 707070 767577 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0207

*031170  CAME	6,034255

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 767577  C(E)= 707070 767577 
----------

*031172  JUMPA	0,031173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031173 
----------

*031173  MOVE 	5,034256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 777666 
FINAL
C(AC)= 123456 777666 
----------

*031174  MOVE 	6,034257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 767577  C(E)= 777001 123470 
FINAL
C(AC)= 777001 123470 
----------

*031175  IORM	5,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777666  C(E)= 777001 123470 
FINAL
 C(E)= 777457 777676 
----------

*031176  CAME	5,034256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777666  C(E)= 123456 777666 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0208

*031200  JUMPA	0,031201

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031201 
----------

*031201  CAME	6,034260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 777457 777676 
----------

*031203  JUMPA	0,031204

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031204 
----------

*031204  MOVE 	5,034256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777666  C(E)= 123456 777666 
FINAL
C(AC)= 123456 777666 
----------

*031205  MOVE 	6,034257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 777001 123470 
FINAL
C(AC)= 777001 123470 
----------

*031206  IORB	5,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777666  C(E)= 777001 123470 
FINAL
C(AC)= 777457 777676  C(E)= 777457 777676 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0209

*031207  CAME	5,034260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 777457 777676 
----------

*031211  JUMPA	0,031212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031212 
----------

*031212  CAME	6,034260

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 777457 777676 
----------

*031214  JUMPA	0,031215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031215 
----------

*031215  MOVE 	4,034261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000767 777777  C(E)= 777000 123456 
FINAL
C(AC)= 777000 123456 
----------

*031216  ANDCBI	4,706050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123456     E= 000000 706050 
FINAL
C(AC)= 000777 050321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0210

*031217  CAME	4,034262

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 050321  C(E)= 000777 050321 
----------

*031221  JUMPA	0,031222

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031222 
----------

*031222  MOVE 	3,034263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121212 000000  C(E)= 777007 771100 
FINAL
C(AC)= 777007 771100 
----------

*031223  MOVE 	4,034264

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 050321  C(E)= 063202 123477 
FINAL
C(AC)= 063202 123477 
----------

*031224  ANDCBM	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777007 771100  C(E)= 063202 123477 
FINAL
 C(E)= 000570 004200 
----------

*031225  CAME	3,034263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777007 771100  C(E)= 777007 771100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0211

*031227  JUMPA	0,031230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031230 
----------

*031230  CAME	4,034265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 000570 004200 
----------

*031232  JUMPA	0,031233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031233 
----------

*031233  MOVE 	3,034263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777007 771100  C(E)= 777007 771100 
FINAL
C(AC)= 777007 771100 
----------

*031234  MOVE 	4,034264

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 063202 123477 
FINAL
C(AC)= 063202 123477 
----------

*031235  ANDCBB	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777007 771100  C(E)= 063202 123477 
FINAL
C(AC)= 000570 004200  C(E)= 000570 004200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0212

*031236  CAME	3,034265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 000570 004200 
----------

*031240  JUMPA	0,031241

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031241 
----------

*031241  CAME	4,034265

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 000570 004200 
----------

*031243  JUMPA	0,031244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031244 
----------

*031244  MOVE 	2,034266

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123000 006100  C(E)= 707070 123426 
FINAL
C(AC)= 707070 123426 
----------

*031245  EQVI	2,123363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 123426     E= 000000 123363 
FINAL
C(AC)= 070707 777032 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0213

*031246  CAME	2,034267

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 070707 777032  C(E)= 070707 777032 
----------

*031250  JUMPA	0,031251

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031251 
----------

*031251  MOVE 	1,034270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600  C(E)= 123456 123457 
FINAL
C(AC)= 123456 123457 
----------

*031252  MOVE 	2,034271

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 070707 777032  C(E)= 707633 121212 
FINAL
C(AC)= 707633 121212 
----------

*031253  EQVM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123457  C(E)= 707633 121212 
FINAL
 C(E)= 153512 775132 
----------

*031254  CAME	1,034270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123457  C(E)= 123456 123457 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0214

*031256  JUMPA	0,031257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031257 
----------

*031257  CAME	2,034272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 153512 775132 
----------

*031261  JUMPA	0,031262

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031262 
----------

*031262  MOVE 	1,034270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123457  C(E)= 123456 123457 
FINAL
C(AC)= 123456 123457 
----------

*031263  MOVE 	2,034271

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 707633 121212 
FINAL
C(AC)= 707633 121212 
----------

*031264  EQVB	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123457  C(E)= 707633 121212 
FINAL
C(AC)= 153512 775132  C(E)= 153512 775132 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0215

*031265  CAME	1,034272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 153512 775132 
----------

*031267  JUMPA	0,031270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031270 
----------

*031270  CAME	2,034272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 153512 775132 
----------

*031272  JUMPA	0,031273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600     E= 000000 031273 
----------

*031273  MOVE 	0,034261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 777600  C(E)= 777000 123456 
FINAL
C(AC)= 777000 123456 
----------

*031274  SETCAI	0,707070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123456     E= 000000 707070 
FINAL
C(AC)= 000777 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0216

*031275  CAME	0,034273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 654321  C(E)= 000777 654321 
----------

*031277  JUMPA	0,031300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 654321     E= 000000 031300 
----------

*031300  MOVE 	17,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031301  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 654321  C(E)= 000777 654321 
FINAL
C(AC)= 777777 777777 
----------

*031302  SETCAM	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 777777 777777 
FINAL
 C(E)= 654321 012345 
----------

*031303  CAME	17,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0217

*031305  JUMPA	0,031306

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031306 
----------

*031306  CAME	0,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031310  JUMPA	0,031311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031311 
----------

*031311  MOVE 	17,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031312  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
FINAL
C(AC)= 777777 777777 
----------

*031313  SETCAB	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 777777 777777 
FINAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0218

*031314  CAME	17,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031316  JUMPA	0,031317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031317 
----------

*031317  CAME	0,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031321  JUMPA	0,031322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031322 
----------

*031322  MOVE 	16,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031323  ORCAI	16,765401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477     E= 000000 765401 
FINAL
C(AC)= 000777 775701 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0219

*031324  CAME	16,034276

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 775701  C(E)= 000777 775701 
----------

*031326  JUMPA	0,031327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031327 
----------

*031327  MOVE 	15,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 003300 450004  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031330  MOVE 	16,034277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000777 775701  C(E)= 707070 707072 
FINAL
C(AC)= 707070 707072 
----------

*031331  ORCAM	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477  C(E)= 707070 707072 
FINAL
 C(E)= 707777 757372 
----------

*031332  CAME	15,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477  C(E)= 777000 123477 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0220

*031334  JUMPA	0,031335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031335 
----------

*031335  CAME	16,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031337  JUMPA	0,031340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031340 
----------

*031340  MOVE 	15,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031341  MOVE 	16,034277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707070 707072 
FINAL
C(AC)= 707070 707072 
----------

*031342  ORCAB	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477  C(E)= 707070 707072 
FINAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0221

*031343  CAME	15,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031345  JUMPA	0,031346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031346 
----------

*031346  CAME	16,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031350  JUMPA	0,031351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031351 
----------

*031351  MOVE 	0,034261

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 777000 123456 
FINAL
C(AC)= 777000 123456 
----------

*031352  SETCMI	0,707070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123456     E= 000000 707070 
FINAL
C(AC)= 777777 070707 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0222

*031353  CAME	0,034301

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 070707  C(E)= 777777 070707 
----------

*031355  JUMPA	0,031356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 070707     E= 000000 031356 
----------

*031356  MOVE 	17,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031357  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 070707  C(E)= 777777 070707 
FINAL
C(AC)= 777777 777777 
----------

*031360  SETCMM	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 765432 
FINAL
 C(E)= 654321 012345 
----------

*031361  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0223

*031363  JUMPA	0,031364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031364 
----------

*031364  CAME	17,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031366  JUMPA	0,031367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031367 
----------

*031367  MOVE 	17,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031370  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031371  SETCMB	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 765432 
FINAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0224

*031372  CAME	0,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031374  JUMPA	0,031375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031375 
----------

*031375  CAME	17,034274

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
----------

*031377  JUMPA	0,031400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031400 
----------

*031400  MOVE 	16,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031401  ORCMI	16,765401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 123477     E= 000000 765401 
FINAL
C(AC)= 777777 133777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0225

*031402  CAME	16,034302

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 133777  C(E)= 777777 133777 
----------

*031404  JUMPA	0,031405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031405 
----------

*031405  MOVE 	15,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031406  MOVE 	16,034277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 133777  C(E)= 707070 707072 
FINAL
C(AC)= 707070 707072 
----------

*031407  ORCMM	16,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707072  C(E)= 777000 123477 
FINAL
 C(E)= 707777 757372 
----------

*031410  CAME	16,034277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707072  C(E)= 707070 707072 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0226

*031412  JUMPA	0,031413

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031413 
----------

*031413  CAME	15,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031415  JUMPA	0,031416

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031416 
----------

*031416  MOVE 	15,034275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 777000 123477 
FINAL
C(AC)= 777000 123477 
----------

*031417  MOVE 	16,034277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707072  C(E)= 707070 707072 
FINAL
C(AC)= 707070 707072 
----------

*031420  ORCMB	16,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707072  C(E)= 777000 123477 
FINAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0227

*031421  CAME	16,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031423  JUMPA	0,031424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031424 
----------

*031424  CAME	15,034300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707777 757372 
----------

*031426  JUMPA	0,031427

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031427 
----------

*031427  MOVE 	15,034303

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 707070 070706 
FINAL
C(AC)= 707070 070706 
----------

*031430  ORCBI	15,770011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 070706     E= 000000 770011 
FINAL
C(AC)= 777777 707777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0228

*031431  CAME	15,034304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 707777  C(E)= 777777 707777 
----------

*031433  JUMPA	0,031434

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031434 
----------

*031434  MOVE 	14,034305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000456 063002  C(E)= 123456 770077 
FINAL
C(AC)= 123456 770077 
----------

*031435  MOVE 	15,034306

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 707777  C(E)= 777001 123324 
FINAL
C(AC)= 777001 123324 
----------

*031436  ORCBM	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 770077  C(E)= 777001 123324 
FINAL
 C(E)= 654777 657753 
----------

*031437  CAME	14,034305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 770077  C(E)= 123456 770077 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0229

*031441  JUMPA	0,031442

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031442 
----------

*031442  CAME	15,034307

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 654777 657753 
----------

*031444  JUMPA	0,031445

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031445 
----------

*031445  MOVE 	14,034305

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 770077  C(E)= 123456 770077 
FINAL
C(AC)= 123456 770077 
----------

*031446  MOVE 	15,034306

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 777001 123324 
FINAL
C(AC)= 777001 123324 
----------

*031447  ORCBB	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 770077  C(E)= 777001 123324 
FINAL
C(AC)= 654777 657753  C(E)= 654777 657753 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0230

*031450  CAME	14,034307

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 654777 657753 
----------

*031452  JUMPA	0,031453

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031453 
----------

*031453  CAME	15,034307

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 654777 657753 
----------

*031455  JUMPA	0,031456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031456 
----------

*031456  MOVE 	17,034254

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 707070 123456 
FINAL
C(AC)= 707070 123456 
----------

*031457  HLLI	17,777000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 123456     E= 000000 777000 
FINAL
C(AC)= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0231

*031460  CAIE	17,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*031462  JUMPA	0,031463

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345     E= 000000 031463 
----------

*031463  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 012345  C(E)= 654321 012345 
FINAL
C(AC)= 777777 777777 
----------

*031464  MOVE 	2,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031465  HLLS	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 765432 
FINAL
C(AC)= 777777 777777  C(E)= 123456 765432 
----------

*031466  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0232

*031470  JUMPA	0,031471

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031471 
----------

*031471  CAME	2,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
----------

*031473  JUMPA	0,031474

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031474 
----------

*031474  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 153512 775132  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031475  MOVE 	2,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*031476  HLLS	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432  C(E)= 123456 765432 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0233

*031477  CAME	1,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
----------

*031501  JUMPA	0,031502

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031502 
----------

*031502  CAME	2,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 123456 765432 
----------

*031504  JUMPA	0,031505

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031505 
----------

*031505  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031506  MOVE 	3,034310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 123456 707070 
FINAL
C(AC)= 123456 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0234

*031507  HRLS	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707070 
FINAL
C(AC)= 777777 777777  C(E)= 707070 707070 
----------

*031510  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031512  JUMPA	0,031513

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031513 
----------

*031513  CAME	3,034311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*031515  JUMPA	0,031516

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031516 
----------

*031516  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0235

*031517  MOVE 	3,034310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 123456 707070 
FINAL
C(AC)= 123456 707070 
----------

*031520  HRLS	1,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707070 
FINAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*031521  CAME	1,034311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*031523  JUMPA	0,031524

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031524 
----------

*031524  CAME	3,034311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
----------

*031526  JUMPA	0,031527

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031527 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0236

*031527  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*031530  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*031531  HLLZM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 123456 000000 
----------

*031532  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

*031534  JUMPA	0,031535

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031535 
----------

*031535  CAME	2,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0237

*031537  JUMPA	0,031540

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031540 
----------

*031540  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031541  MOVE 	17,034310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 707070 
FINAL
C(AC)= 123456 707070 
----------

*031542  HLLZS	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707070 
FINAL
C(AC)= 777777 777777  C(E)= 123456 000000 
----------

*031543  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031545  JUMPA	0,031546

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031546 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0238

*031546  CAME	17,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031550  JUMPA	0,031551

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031551 
----------

*031551  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031552  MOVE 	17,034310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 707070 
FINAL
C(AC)= 123456 707070 
----------

*031553  HLLZS	1,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707070 
FINAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031554  CAME	1,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0239

*031556  JUMPA	0,031557

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031557 
----------

*031557  CAME	17,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031561  JUMPA	0,031562

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031562 
----------

*031562  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*031563  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*031564  HRLZM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 123422 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0240

*031565  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

*031567  JUMPA	0,031570

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031570 
----------

*031570  CAME	2,034314

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123422 000000  C(E)= 123422 000000 
----------

*031572  JUMPA	0,031573

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031573 
----------

*031573  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031574  MOVE 	16,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707777 757372  C(E)= 123456 707076 
FINAL
C(AC)= 123456 707076 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0241

*031575  HRLZS	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707076 
FINAL
C(AC)= 777777 777777  C(E)= 707076 000000 
----------

*031576  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*031600  JUMPA	0,031601

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031601 
----------

*031601  CAME	16,034316

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 707076 000000 
----------

*031603  JUMPA	0,031604

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031604 
----------

*031604  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0242

*031605  MOVE 	16,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 123456 707076 
FINAL
C(AC)= 123456 707076 
----------

*031606  HRLZS	1,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 707076 
FINAL
C(AC)= 707076 000000  C(E)= 707076 000000 
----------

*031607  CAME	1,034316

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 707076 000000 
----------

*031611  JUMPA	0,031612

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031612 
----------

*031612  CAME	16,034316

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 707076 000000 
----------

*031614  JUMPA	0,031615

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031615 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0243

*031615  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*031616  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123422 000000  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*031617  HLLOM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 123456 777777 
----------

*031620  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

*031622  JUMPA	0,031623

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031623 
----------

*031623  CAME	2,034317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777777  C(E)= 123456 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0244

*031625  JUMPA	0,031626

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031626 
----------

*031626  MOVE 	15,034320

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 123456 135724 
FINAL
C(AC)= 123456 135724 
----------

*031627  MOVE 	16,034321

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 000000  C(E)= 765432 246135 
FINAL
C(AC)= 765432 246135 
----------

*031630  HRLO 	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 135724  C(E)= 765432 246135 
FINAL
C(AC)= 246135 777777 
----------

*031631  CAME	15,034322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 246135 777777  C(E)= 246135 777777 
----------

*031633  JUMPA	0,031634

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031634 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0245

*031634  CAME	16,034321

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 246135  C(E)= 765432 246135 
----------

*031636  JUMPA	0,031637

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031637 
----------

*031637  SETZ 	14,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654777 657753  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031640  HRLOI	14,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 123456 
FINAL
C(AC)= 123456 777777 
----------

*031641  CAME	14,034317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777777  C(E)= 123456 777777 
----------

*031643  JUMPA	0,031644

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031644 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0246

*031644  SETZM	0,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 777777 
FINAL
 C(E)= 000000 000000 
----------

*031645  MOVE 	13,034323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010203 123450  C(E)= 123123 456765 
FINAL
C(AC)= 123123 456765 
----------

*031646  HRLOM	13,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 456765  C(E)= 000000 000000 
FINAL
 C(E)= 456765 777777 
----------

*031647  CAME	13,034323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 456765  C(E)= 123123 456765 
----------

*031651  JUMPA	0,031652

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031652 
----------

*031652  CAME	14,034324

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 456765 777777  C(E)= 456765 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0247

*031654  JUMPA	0,031655

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 031655 
----------

*031655  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031656  MOVE 	16,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 246135  C(E)= 123456 707076 
FINAL
C(AC)= 123456 707076 
----------

*031657  HRLOS	0,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 707076 
FINAL
C(AC)= 000000 000000  C(E)= 707076 777777 
----------

*031660  CAME	0,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031662  JUMPA	0,031663

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031663 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0248

*031663  CAME	16,034326

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 707076 777777 
----------

*031665  JUMPA	0,031666

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031666 
----------

*031666  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031667  MOVE 	16,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 123456 707076 
FINAL
C(AC)= 123456 707076 
----------

*031670  HRLOS	1,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 707076 
FINAL
C(AC)= 707076 777777  C(E)= 707076 777777 
----------

*031671  CAME	1,034326

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 707076 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0249

*031673  JUMPA	0,031674

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031674 
----------

*031674  CAME	16,034326

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 707076 777777 
----------

*031676  JUMPA	0,031677

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031677 
----------

*031677  MOVE 	12,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 707076 
FINAL
C(AC)= 123456 707076 
----------

*031700  SETOM	0,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123123 456765 
FINAL
 C(E)= 777777 777777 
----------

*031701  HLLEM	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 707076  C(E)= 777777 777777 
FINAL
 C(E)= 123456 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0250

*031702  CAME	12,034315

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 707076  C(E)= 123456 707076 
----------

*031704  JUMPA	0,031705

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031705 
----------

*031705  CAME	13,034246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 000000 
----------

*031707  JUMPA	0,031710

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031710 
----------

*031710  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031711  HRLZI	2,765432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 777777     E= 000000 765432 
FINAL
C(AC)= 765432 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0251

*031712  HLLES	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 765432 000000 
FINAL
C(AC)= 000000 000000  C(E)= 765432 777777 
----------

*031713  CAME	0,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031715  JUMPA	0,031716

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031716 
----------

*031716  CAME	2,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031720  JUMPA	0,031721

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031721 
----------

*031721  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0252

*031722  HRLZI	2,765432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777     E= 000000 765432 
FINAL
C(AC)= 765432 000000 
----------

*031723  HLLES	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 765432 000000 
FINAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031724  CAME	1,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031726  JUMPA	0,031727

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031727 
----------

*031727  CAME	2,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031731  JUMPA	0,031732

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031732 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0253

*031732  MOVE 	12,034330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 707076  C(E)= 365432 123456 
FINAL
C(AC)= 365432 123456 
----------

*031733  SETOM	0,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 000000 
FINAL
 C(E)= 777777 777777 
----------

*031734  HLLEM	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 365432 123456  C(E)= 777777 777777 
FINAL
 C(E)= 365432 000000 
----------

*031735  CAME	12,034330

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 365432 123456  C(E)= 365432 123456 
----------

*031737  JUMPA	0,031740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031740 
----------

*031740  CAME	13,034331

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 365432 000000  C(E)= 365432 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0254

*031742  JUMPA	0,031743

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031743 
----------

*031743  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031744  HRRZI	2,765432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777     E= 000000 765432 
FINAL
C(AC)= 000000 765432 
----------

*031745  HRLES	0,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 765432 
FINAL
C(AC)= 000000 000000  C(E)= 765432 777777 
----------

*031746  CAME	0,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*031750  JUMPA	0,031751

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031751 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0255

*031751  CAME	2,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031753  JUMPA	0,031754

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031754 
----------

*031754  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031755  HRRZI	2,765432

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777     E= 000000 765432 
FINAL
C(AC)= 000000 765432 
----------

*031756  HRLES	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 765432 
FINAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031757  CAME	1,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0256

*031761  JUMPA	0,031762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031762 
----------

*031762  CAME	2,034327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 765432 777777 
----------

*031764  JUMPA	0,031765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031765 
----------

*031765  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*031766  SETZM	0,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 365432 123456 
FINAL
 C(E)= 000000 000000 
----------

*031767  HLRM	11,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 000000 000000 
FINAL
 C(E)= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0257

*031770  CAME	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*031772  JUMPA	0,031773

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031773 
----------

*031773  CAIE	12,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*031775  JUMPA	0,031776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031776 
----------

*031776  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031777  MOVE 	12,034333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123123 246135 
FINAL
C(AC)= 123123 246135 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0258

*032000  HLRS	0,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123123 246135 
FINAL
C(AC)= 000000 000000  C(E)= 123123 123123 
----------

*032001  CAME	0,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032003  JUMPA	0,032004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032004 
----------

*032004  CAME	12,034334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 123123 123123 
----------

*032006  JUMPA	0,032007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032007 
----------

*032007  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0259

*032010  MOVE 	12,034333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 123123 246135 
FINAL
C(AC)= 123123 246135 
----------

*032011  HLRS	1,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123123 246135 
FINAL
C(AC)= 123123 123123  C(E)= 123123 123123 
----------

*032012  CAME	1,034334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 123123 123123 
----------

*032014  JUMPA	0,032015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032015 
----------

*032015  CAME	12,034334

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 123123 123123 
----------

*032017  JUMPA	0,032020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0260

*032020  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032021  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 000000  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032022  HRRZS	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 777777 777777  C(E)= 000000 701234 
----------

*032023  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032025  JUMPA	0,032026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032026 
----------

*032026  CAIE	17,701234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234     E= 000000 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0261

*032030  JUMPA	0,032031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032031 
----------

*032031  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032032  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032033  HRRZS	1,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 000000 701234  C(E)= 000000 701234 
----------

*032034  CAIE	1,701234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234     E= 000000 701234 
----------

*032036  JUMPA	0,032037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032037 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0262

*032037  CAIE	17,701234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234     E= 000000 701234 
----------

*032041  JUMPA	0,032042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032042 
----------

*032042  SETO 	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 624421 230254 
FINAL
C(AC)= 777777 777777 
----------

*032043  HLRZI	7,777777

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624421 230254     E= 000000 777777 
FINAL
C(AC)= 000000 000000 
----------

*032044  SKIPE	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032046  JUMPA	0,032047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032047 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0263

*032047  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*032050  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 777777  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*032051  HLRZM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 000000 123456 
----------

*032052  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

*032054  JUMPA	0,032055

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032055 
----------

*032055  CAIE	2,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0264

*032057  JUMPA	0,032060

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032060 
----------

*032060  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*032061  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*032062  MOVEM	2,032074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 717171  C(E)= 000000 000000 
FINAL
 C(E)= 707070 717171 
----------

*032063  HLRZM	1,032074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0265

*032064  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

*032066  JUMPA	0,032067

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032067 
----------

*032067  MOVE 	2,032074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 717171  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*032070  CAIE	2,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032072  JUMPA	0,032073

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032073 
----------

*032073  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0266

*032075  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032076  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032077  HLRZS	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 777777 777777  C(E)= 000000 123456 
----------

*032100  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032102  JUMPA	0,032103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032103 
----------

*032103  CAIE	7,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0267

*032105  JUMPA	0,032106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032106 
----------

*032106  SETO 	6,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032107  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032110  HLRZS	6,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 000000 123456  C(E)= 000000 123456 
----------

*032111  CAIE	6,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032113  JUMPA	0,032114

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032114 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0268

*032114  CAIE	7,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032116  JUMPA	0,032117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032117 
----------

*032117  SETO 	6,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032120  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032121  MOVEM	7,032133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 000000 000000 
FINAL
 C(E)= 123456 701234 
----------

*032122  HLRZS	6,032133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 000000 123456  C(E)= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0269

*032123  CAIE	6,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032125  JUMPA	0,032126

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032126 
----------

*032126  MOVE 	7,032133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 000000 123456 
FINAL
C(AC)= 000000 123456 
----------

*032127  CAIE	7,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032131  JUMPA	0,032132

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032132 
----------

*032132  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0270

*032134  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777457 777676  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032135  SETZM	0,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 123456 
FINAL
 C(E)= 000000 000000 
----------

*032136  HRROM	5,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 000000 000000 
FINAL
 C(E)= 777777 701234 
----------

*032137  CAME	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032141  JUMPA	0,032142

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032142 
----------

*032142  CAME	6,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0271

*032144  JUMPA	0,032145

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032145 
----------

*032145  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*032146  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032147  HRROS	0,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 000000 000000  C(E)= 777777 701234 
----------

*032150  CAME	0,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*032152  JUMPA	0,032153

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032153 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0272

*032153  CAME	17,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032155  JUMPA	0,032156

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032156 
----------

*032156  SETZ 	16,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707076 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032157  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032160  HRROS	16,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032161  CAME	16,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0273

*032163  JUMPA	0,032164

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032164 
----------

*032164  CAME	17,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032166  JUMPA	0,032167

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032167 
----------

*032167  SETZ 	4,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000570 004200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032170  MOVE 	5,034336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 765432 107654 
FINAL
C(AC)= 765432 107654 
----------

*032171  HLRO 	4,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 765432 107654 
FINAL
C(AC)= 777777 765432 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0274

*032172  CAME	4,034337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 765432  C(E)= 777777 765432 
----------

*032174  JUMPA	0,032175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032175 
----------

*032175  CAME	5,034336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 107654  C(E)= 765432 107654 
----------

*032177  JUMPA	0,032200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032200 
----------

*032200  MOVE 	3,034252

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 707070 707070  C(E)= 123456 765432 
FINAL
C(AC)= 123456 765432 
----------

*032201  HLROI	3,070707

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 765432     E= 000000 070707 
FINAL
C(AC)= 777777 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0275

*032202  CAME	3,034340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
----------

*032204  JUMPA	0,032205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032205 
----------

*032205  MOVE 	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
FINAL
C(AC)= 123456 123422 
----------

*032206  MOVE 	2,034313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 707070 717171 
FINAL
C(AC)= 707070 717171 
----------

*032207  HLROM	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 707070 717171 
FINAL
 C(E)= 777777 123456 
----------

*032210  CAME	1,034312

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 123456 123422 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0276

*032212  JUMPA	0,032213

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032213 
----------

*032213  CAME	2,034341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 777777 123456 
----------

*032215  JUMPA	0,032216

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032216 
----------

*032216  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032217  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032220  HLROS	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 000000 000000  C(E)= 777777 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0277

*032221  CAIE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 000000 
----------

*032223  JUMPA	0,032224

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032224 
----------

*032224  CAME	7,034341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 777777 123456 
----------

*032226  JUMPA	0,032227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032227 
----------

*032227  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 123422  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032230  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0278

*032231  HLROS	1,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 777777 123456  C(E)= 777777 123456 
----------

*032232  CAME	1,034341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 777777 123456 
----------

*032234  JUMPA	0,032235

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032235 
----------

*032235  CAME	7,034341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 777777 123456 
----------

*032237  JUMPA	0,032240

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032240 
----------

*032240  SETZ 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0279

*032241  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 000000  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032242  HRRES	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 000000 000000  C(E)= 777777 701234 
----------

*032243  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032245  JUMPA	0,032246

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032246 
----------

*032246  CAME	3,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032250  JUMPA	0,032251

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032251 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0280

*032251  SETZ 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032252  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032253  HRRES	1,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 123456 701234 
FINAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032254  CAME	1,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

*032256  JUMPA	0,032257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032257 
----------

*032257  CAME	3,034335

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0281

*032261  JUMPA	0,032262

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 032262 
----------

*032262  SETO 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*032263  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032264  HLRES	0,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 777777 777777  C(E)= 000000 123456 
----------

*032265  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*032267  JUMPA	0,032270

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032270 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0282

*032270  CAIE	7,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032272  JUMPA	0,032273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032273 
----------

*032273  SETO 	1,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032274  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032275  HLRES	1,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 000000 123456  C(E)= 000000 123456 
----------

*032276  CAIE	1,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0283

*032300  JUMPA	0,032301

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032301 
----------

*032301  CAIE	7,123456

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456     E= 000000 123456 
----------

*032303  JUMPA	0,032304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032304 
----------

*032304  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032305  TRNE	17,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032307  JUMPA	0,032310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032310 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0284

*032310  CAME	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032312  JUMPA	0,032313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032313 
----------

*032313  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032314  TRNE	16,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032315  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032317  JUMPA	0,032320

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032320 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0285

*032320  CAME	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032322  JUMPA	0,032323

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032323 
----------

*032323  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 246135 777777  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032324  TLNE	15,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032326  JUMPA	0,032327

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032327 
----------

*032327  CAME	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0286

*032331  JUMPA	0,032332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032332 
----------

*032332  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 456765 777777  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032333  TLNE	14,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032334  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032336  JUMPA	0,032337

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032337 
----------

*032337  CAME	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0287

*032341  JUMPA	0,032342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032342 
----------

*032342  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 365432 000000  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032343  TRNA	13,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032345  JUMPA	0,032346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032346 
----------

*032346  CAME	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032350  JUMPA	0,032351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032351 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0288

*032351  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123123 123123  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032352  TRNA	12,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032354  JUMPA	0,032355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032355 
----------

*032355  CAME	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032357  JUMPA	0,032360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032360 
----------

*032360  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*032361  TLNA	11,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032363  JUMPA	0,032364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032364 
----------

*032364  CAME	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032366  JUMPA	0,032367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032367 
----------

*032367  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624421 230254  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032370  TLNA	10,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*032372  JUMPA	0,032373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032373 
----------

*032373  CAME	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032375  JUMPA	0,032376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032376 
----------

*032376  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032377  TRNN	7,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032401  JUMPA	0,032402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032402 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*032402  CAME	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032404  JUMPA	0,032405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032405 
----------

*032405  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032406  TRNN	6,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032407  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032411  JUMPA	0,032412

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032412 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*032412  CAME	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032414  JUMPA	0,032415

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032415 
----------

*032415  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 765432 107654  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032416  TLNN	5,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032420  JUMPA	0,032421

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032421 
----------

*032421  CAME	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*032423  JUMPA	0,032424

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032424 
----------

*032424  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 765432  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032425  TLNN	4,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032426  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032430  JUMPA	0,032431

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032431 
----------

*032431  CAME	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*032433  JUMPA	0,032434

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032434 
----------

*032434  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032435  MOVE 	4,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*032436  TSNE	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*032440  JUMPA	0,032441

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032441 
----------

*032441  CAME	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*032443  JUMPA	0,032444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032444 
----------

*032444  CAME	4,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*032446  JUMPA	0,032447

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032447 
----------

*032447  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032450  MOVE 	3,034343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654323 
FINAL
C(AC)= 076543 654323 
----------

*032451  TSNE	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654323 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*032452  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032454  JUMPA	0,032455

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032455 
----------

*032455  CAME	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032457  JUMPA	0,032460

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032460 
----------

*032460  CAME	3,034343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654323  C(E)= 076543 654323 
----------

*032462  JUMPA	0,032463

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032463 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*032463  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032464  MOVE 	2,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*032465  TSNA	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*032467  JUMPA	0,032470

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032470 
----------

*032470  CAME	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032472  JUMPA	0,032473

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032473 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*032473  CAME	2,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*032475  JUMPA	0,032476

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 032476 
----------

*032476  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032477  MOVE 	1,034343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654323 
FINAL
C(AC)= 076543 654323 
----------

*032500  TSNA	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654323 
FINAL
C(AC)= 123456 701234 
----------

*032502  JUMPA	0,032503

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032503 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*032503  CAME	1,034343

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654323  C(E)= 076543 654323 
----------

*032505  JUMPA	0,032506

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032506 
----------

*032506  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032507  MOVE 	0,034344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032510  TSNN	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076547 654321 
FINAL
C(AC)= 123456 701234 
----------

*032512  JUMPA	0,032513

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032513 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*032513  CAME	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032515  JUMPA	0,032516

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032516 
----------

*032516  CAME	0,034344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
----------

*032520  JUMPA	0,032521

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032521 
----------

*032521  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032522  MOVE 	17,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*032523  TSNN	16,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*032524  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032526  JUMPA	0,032527

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032527 
----------

*032527  CAME	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032531  JUMPA	0,032532

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032532 
----------

*032532  CAME	17,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*032534  JUMPA	0,032535

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032535 
----------

*032535  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032536  TRZ 	12,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032537  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032541  JUMPA	0,032542

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032542 
----------

*032542  CAME	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*032544  JUMPA	0,032545

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032545 
----------

*032545  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032546  TRZ 	14,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701034 
----------

*032547  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032551  JUMPA	0,032552

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032552 
----------

*032552  CAME	14,034345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701034 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*032554  JUMPA	0,032555

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032555 
----------

*032555  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032556  TLZ 	13,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032557  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032561  JUMPA	0,032562

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032562 
----------

*032562  CAME	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*032564  JUMPA	0,032565

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032565 
----------

*032565  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032566  TLZ 	12,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123454 701234 
----------

*032567  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032571  JUMPA	0,032572

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032572 
----------

*032572  CAME	12,034346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123454 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*032574  JUMPA	0,032575

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032575 
----------

*032575  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032576  TRZE	11,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032600  JUMPA	0,032601

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032601 
----------

*032601  CAME	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032603  JUMPA	0,032604

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032604 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*032604  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032605  TRZE	10,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701034 
----------

*032606  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032610  JUMPA	0,032611

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032611 
----------

*032611  CAME	10,034345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701034 
----------

*032613  JUMPA	0,032614

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032614 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*032614  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032615  TLZE	7,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032617  JUMPA	0,032620

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032620 
----------

*032620  CAME	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032622  JUMPA	0,032623

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032623 
----------

*032623  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*032624  TLZE	6,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123454 701234 
----------

*032625  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 076547 654321 
FINAL
C(AC)= 076547 654321 
----------

*032627  JUMPA	0,032630

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032630 
----------

*032630  CAME	6,034346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123454 701234 
----------

*032632  JUMPA	0,032633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032633 
----------

*032633  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*032634  TRZA	5,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032636  JUMPA	0,032637

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032637 
----------

*032637  CAME	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032641  JUMPA	0,032642

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032642 
----------

*032642  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032643  TRZA	4,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701034 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*032645  JUMPA	0,032646

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032646 
----------

*032646  CAME	4,034345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701034 
----------

*032650  JUMPA	0,032651

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032651 
----------

*032651  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654323  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032652  TLZA	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123454 701234 
----------

*032654  JUMPA	0,032655

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032655 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*032655  CAME	3,034346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123454 701234 
----------

*032657  JUMPA	0,032660

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032660 
----------

*032660  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032661  TLZA	2,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032663  JUMPA	0,032664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032664 
----------

*032664  CAME	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*032666  JUMPA	0,032667

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032667 
----------

*032667  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654323  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032670  TRZN	1,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701034 
----------

*032672  JUMPA	0,032673

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032673 
----------

*032673  CAME	1,034345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701034 
----------

*032675  JUMPA	0,032676

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321     E= 000000 032676 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*032676  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076547 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032677  TRZN	0,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701234 
----------

*032700  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032702  JUMPA	0,032703

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032703 
----------

*032703  CAME	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032705  JUMPA	0,032706

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032706 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*032706  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032707  TLZN	17,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123454 701234 
----------

*032711  JUMPA	0,032712

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032712 
----------

*032712  CAME	17,034346

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123454 701234 
----------

*032714  JUMPA	0,032715

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032715 
----------

*032715  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*032716  TLZN	16,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701234 
----------

*032717  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032721  JUMPA	0,032722

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032722 
----------

*032722  CAME	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032724  JUMPA	0,032725

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032725 
----------

*032725  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*032726  MOVE 	16,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*032727  TSZ 	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*032730  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032732  JUMPA	0,032733

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032733 
----------

*032733  CAME	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032735  JUMPA	0,032736

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032736 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*032736  CAME	16,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*032740  JUMPA	0,032741

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032741 
----------

*032741  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032742  MOVE 	15,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 252525 707070 
----------

*032743  TSZ 	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 020406 501210 
----------

*032744  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*032746  JUMPA	0,032747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032747 
----------

*032747  CAME	14,034350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020406 501210  C(E)= 020406 501210 
----------

*032751  JUMPA	0,032752

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032752 
----------

*032752  CAME	15,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 252525 707070 
----------

*032754  JUMPA	0,032755

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032755 
----------

*032755  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*032756  MOVE 	14,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020406 501210  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*032757  TDZE	13,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 123456 701234 
----------

*032761  JUMPA	0,032762

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032762 
----------

*032762  CAME	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*032764  JUMPA	0,032765

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032765 
----------

*032765  CAME	14,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*032767  JUMPA	0,032770

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032770 
----------

*032770  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*032771  MOVE 	13,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 754321 076543 
FINAL
C(AC)= 754321 076543 
----------

*032772  TDZE	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 754321 076543 
FINAL
C(AC)= 023456 701234 
----------

*032773  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*032775  JUMPA	0,032776

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 032776 
----------

*032776  CAME	12,034353

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023456 701234  C(E)= 023456 701234 
----------

*033000  JUMPA	0,033001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033001 
----------

*033001  CAME	13,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 754321 076543  C(E)= 754321 076543 
----------

*033003  JUMPA	0,033004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033004 
----------

*033004  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*033005  MOVE 	12,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 023456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033006  TSZE	11,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*033010  JUMPA	0,033011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033011 
----------

*033011  CAME	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*033013  JUMPA	0,033014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033014 
----------

*033014  CAME	12,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*033016  JUMPA	0,033017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033017 
----------

*033017  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033020  MOVE 	11,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 657321 
FINAL
C(AC)= 076543 657321 
----------

*033021  TSZE	10,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 657321 
FINAL
C(AC)= 120456 701234 
----------

*033022  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*033024  JUMPA	0,033025

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033025 
----------

*033025  CAME	10,034355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 120456 701234  C(E)= 120456 701234 
----------

*033027  JUMPA	0,033030

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033030 
----------

*033030  CAME	11,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 657321  C(E)= 076543 657321 
----------

*033032  JUMPA	0,033033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033033 
----------

*033033  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*033034  MOVE 	10,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 120456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*033035  TDZA	7,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 123456 701234 
----------

*033037  JUMPA	0,033040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033040 
----------

*033040  CAME	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*033042  JUMPA	0,033043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033043 
----------

*033043  CAME	10,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*033045  JUMPA	0,033046

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033046 
----------

*033046  CAME	10,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*033050  JUMPA	0,033051

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033051 
----------

*033051  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033052  MOVE 	7,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 252525 707070 
----------

*033053  TDZA	6,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 121052 000204 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*033055  JUMPA	0,033056

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033056 
----------

*033056  CAME	6,034356

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121052 000204  C(E)= 121052 000204 
----------

*033060  JUMPA	0,033061

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033061 
----------

*033061  CAME	7,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 252525 707070 
----------

*033063  JUMPA	0,033064

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033064 
----------

*033064  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*033065  MOVE 	6,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 121052 000204  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033066  TSZA	5,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*033070  JUMPA	0,033071

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033071 
----------

*033071  CAME	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*033073  JUMPA	0,033074

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033074 
----------

*033074  CAME	6,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*033076  JUMPA	0,033077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033077 
----------

*033077  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033100  MOVE 	5,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 701234 123456 
FINAL
C(AC)= 701234 123456 
----------

*033101  TSZA	4,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 701234 123456 
FINAL
C(AC)= 000000 000000 
----------

*033103  JUMPA	0,033104

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033104 
----------

*033104  CAME	4,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*033106  JUMPA	0,033107

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033107 
----------

*033107  CAME	5,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 701234 123456  C(E)= 701234 123456 
----------

*033111  JUMPA	0,033112

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033112 
----------

*033112  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033113  MOVE 	4,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 654321 076547 
FINAL
C(AC)= 654321 076547 
----------

*033114  TDZN	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076547 
FINAL
C(AC)= 123456 701230 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*033116  JUMPA	0,033117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033117 
----------

*033117  CAME	3,034361

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701230  C(E)= 123456 701230 
----------

*033121  JUMPA	0,033122

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033122 
----------

*033122  CAME	4,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076547  C(E)= 654321 076547 
----------

*033124  JUMPA	0,033125

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033125 
----------

*033125  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*033126  MOVE 	3,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701230  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*033127  TDZN	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 123456 701234 
----------

*033130  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033132  JUMPA	0,033133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033133 
----------

*033133  CAME	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*033135  JUMPA	0,033136

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033136 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*033136  CAME	3,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*033140  JUMPA	0,033141

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033141 
----------

*033141  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701034  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033142  MOVE 	2,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 077543 654321 
FINAL
C(AC)= 077543 654321 
----------

*033143  TSZN	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 077543 654321 
FINAL
C(AC)= 123456 700234 
----------

*033145  JUMPA	0,033146

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033146 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*033146  CAME	1,034363

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 700234  C(E)= 123456 700234 
----------

*033150  JUMPA	0,033151

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033151 
----------

*033151  CAME	2,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 077543 654321  C(E)= 077543 654321 
----------

*033153  JUMPA	0,033154

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033154 
----------

*033154  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033155  MOVE 	1,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 700234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*033156  TSZN	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 123456 701234 
----------

*033157  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033161  JUMPA	0,033162

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033162 
----------

*033162  CAME	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*033164  JUMPA	0,033165

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033165 
----------

*033165  CAME	1,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*033167  JUMPA	0,033170

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033170 
----------

*033170  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123454 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033171  TRC 	17,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033172  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033174  JUMPA	0,033175

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033175 
----------

*033175  CAME	17,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*033177  JUMPA	0,033200

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033200 
----------

*033200  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033201  TRC 	16,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701134 
----------

*033202  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033204  JUMPA	0,033205

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033205 
----------

*033205  CAME	16,034365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701134 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*033207  JUMPA	0,033210

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033210 
----------

*033210  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033211  TLC 	15,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033212  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033214  JUMPA	0,033215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033215 
----------

*033215  CAME	15,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0340

*033217  JUMPA	0,033220

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033220 
----------

*033220  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033221  TLC 	14,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123455 701234 
----------

*033222  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033224  JUMPA	0,033225

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033225 
----------

*033225  CAME	14,034367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123455 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0341

*033227  JUMPA	0,033230

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033230 
----------

*033230  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 754321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033231  TRCE	13,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033233  JUMPA	0,033234

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033234 
----------

*033234  CAME	13,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033236  JUMPA	0,033237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033237 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0342

*033237  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033240  TRCE	12,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701134 
----------

*033241  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033243  JUMPA	0,033244

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033244 
----------

*033244  CAME	12,034365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701134 
----------

*033246  JUMPA	0,033247

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033247 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0343

*033247  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 657321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033250  TLCE	11,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033252  JUMPA	0,033253

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033253 
----------

*033253  CAME	11,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*033255  JUMPA	0,033256

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033256 
----------

*033256  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0344

*033257  TLCE	10,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123455 701234 
----------

*033260  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033262  JUMPA	0,033263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033263 
----------

*033263  CAME	10,034367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123455 701234 
----------

*033265  JUMPA	0,033266

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033266 
----------

*033266  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0345

*033267  TRCA	7,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033271  JUMPA	0,033272

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033272 
----------

*033272  CAME	7,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033274  JUMPA	0,033275

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033275 
----------

*033275  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033276  TRCA	6,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701134 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0346

*033300  JUMPA	0,033301

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033301 
----------

*033301  CAME	6,034365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701134 
----------

*033303  JUMPA	0,033304

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033304 
----------

*033304  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 701234 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033305  TLCA	5,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123455 701234 
----------

*033307  JUMPA	0,033310

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033310 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0347

*033310  CAME	5,034367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123455 701234 
----------

*033312  JUMPA	0,033313

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033313 
----------

*033313  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076547  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033314  TLCA	4,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033316  JUMPA	0,033317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033317 
----------

*033317  CAME	4,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0348

*033321  JUMPA	0,033322

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033322 
----------

*033322  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033323  TRCN	3,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701134 
----------

*033325  JUMPA	0,033326

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033326 
----------

*033326  CAME	3,034365

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701134 
----------

*033330  JUMPA	0,033331

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033331 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0349

*033331  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 077543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033332  TRCN	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033333  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033335  JUMPA	0,033336

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033336 
----------

*033336  CAME	2,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033340  JUMPA	0,033341

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033341 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0350

*033341  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033342  TLCN	1,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123455 701234 
----------

*033344  JUMPA	0,033345

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033345 
----------

*033345  CAME	1,034367

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123455 701234 
----------

*033347  JUMPA	0,033350

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 033350 
----------

*033350  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0351

*033351  TLCN	0,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033352  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
FINAL
C(AC)= 123756 701234 
----------

*033354  JUMPA	0,033355

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234     E= 000000 033355 
----------

*033355  CAME	0,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*033357  JUMPA	0,033360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234     E= 000000 033360 
----------

*033360  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0352

*033361  MOVE 	0,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033362  TSC 	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

*033363  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033365  JUMPA	0,033366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033366 
----------

*033366  CAME	17,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033370  JUMPA	0,033371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033371 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0353

*033371  CAME	0,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*033373  JUMPA	0,033374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033374 
----------

*033374  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033375  MOVE 	17,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 707070 
FINAL
C(AC)= 252525 707070 
----------

*033376  TSC 	16,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 624426 553711 
----------

*033377  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0354

*033401  JUMPA	0,033402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033402 
----------

*033402  CAME	16,034370

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624426 553711  C(E)= 624426 553711 
----------

*033404  JUMPA	0,033405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033405 
----------

*033405  CAME	17,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 252525 707070 
----------

*033407  JUMPA	0,033410

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033410 
----------

*033410  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 178
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0355

*033411  MOVE 	16,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 624426 553711  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*033412  TDCE	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*033414  JUMPA	0,033415

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033415 
----------

*033415  CAME	15,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033417  JUMPA	0,033420

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033420 
----------

*033420  CAME	16,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 179
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0356

*033422  JUMPA	0,033423

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033423 
----------

*033423  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033424  MOVE 	15,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 754321 076543 
FINAL
C(AC)= 754321 076543 
----------

*033425  TDCE	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 754321 076543 
FINAL
C(AC)= 677777 777777 
----------

*033426  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 180
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0357

*033430  JUMPA	0,033431

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033431 
----------

*033431  CAME	14,034371

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777  C(E)= 677777 777777 
----------

*033433  JUMPA	0,033434

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033434 
----------

*033434  CAME	15,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 754321 076543  C(E)= 754321 076543 
----------

*033436  JUMPA	0,033437

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033437 
----------

*033437  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 181
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0358

*033440  MOVE 	14,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 677777 777777  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033441  TSCE	13,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

*033443  JUMPA	0,033444

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033444 
----------

*033444  CAME	13,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033446  JUMPA	0,033447

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033447 
----------

*033447  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 182
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0359

*033450  MOVE 	13,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 076543 657321 
FINAL
C(AC)= 076543 657321 
----------

*033451  TSCE	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 657321 
FINAL
C(AC)= 774777 777777 
----------

*033452  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033454  JUMPA	0,033455

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033455 
----------

*033455  CAME	12,034372

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 774777 777777  C(E)= 774777 777777 
----------

*033457  JUMPA	0,033460

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033460 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 183
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0360

*033460  CAME	13,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 657321  C(E)= 076543 657321 
----------

*033462  JUMPA	0,033463

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033463 
----------

*033463  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033464  MOVE 	12,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 774777 777777  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*033465  TDCA	11,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*033467  JUMPA	0,033470

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033470 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 184
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0361

*033470  CAME	11,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033472  JUMPA	0,033473

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033473 
----------

*033473  CAME	12,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*033475  JUMPA	0,033476

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033476 
----------

*033476  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033477  MOVE 	11,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 707070 
FINAL
C(AC)= 252525 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 185
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0362

*033500  TDCA	10,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 371173 006244 
----------

*033502  JUMPA	0,033503

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033503 
----------

*033503  CAME	10,034373

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 371173 006244  C(E)= 371173 006244 
----------

*033505  JUMPA	0,033506

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033506 
----------

*033506  CAME	11,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 252525 707070 
----------

*033510  JUMPA	0,033511

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033511 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 186
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0363

*033511  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033512  MOVE 	10,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 371173 006244  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033513  TSCA	7,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

*033515  JUMPA	0,033516

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033516 
----------

*033516  CAME	7,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033520  JUMPA	0,033521

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033521 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 187
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0364

*033521  CAME	10,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*033523  JUMPA	0,033524

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033524 
----------

*033524  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033525  MOVE 	7,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 701234 123456 
FINAL
C(AC)= 701234 123456 
----------

*033526  TSCA	6,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 701234 123456 
FINAL
C(AC)= 000000 000000 
----------

*033530  JUMPA	0,033531

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033531 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 188
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0365

*033531  CAME	6,034325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*033533  JUMPA	0,033534

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033534 
----------

*033534  CAME	7,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 701234 123456  C(E)= 701234 123456 
----------

*033536  JUMPA	0,033537

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033537 
----------

*033537  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033540  MOVE 	6,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 654321 076547 
FINAL
C(AC)= 654321 076547 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 189
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0366

*033541  TDCN	5,000006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076547 
FINAL
C(AC)= 777777 777773 
----------

*033543  JUMPA	0,033544

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033544 
----------

*033544  CAME	5,034374

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773  C(E)= 777777 777773 
----------

*033546  JUMPA	0,033547

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033547 
----------

*033547  CAME	6,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076547  C(E)= 654321 076547 
----------

*033551  JUMPA	0,033552

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033552 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 190
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0367

*033552  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033553  MOVE 	5,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777773  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*033554  TDCN	4,000005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*033555  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033557  JUMPA	0,033560

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033560 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 191
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0368

*033560  CAME	4,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033562  JUMPA	0,033563

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033563 
----------

*033563  CAME	5,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*033565  JUMPA	0,033566

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033566 
----------

*033566  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701134  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033567  MOVE 	4,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 077543 654321 
FINAL
C(AC)= 077543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 192
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0369

*033570  TSCN	3,000004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 077543 654321 
FINAL
C(AC)= 777777 776777 
----------

*033572  JUMPA	0,033573

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033573 
----------

*033573  CAME	3,034375

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777  C(E)= 777777 776777 
----------

*033575  JUMPA	0,033576

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033576 
----------

*033576  CAME	4,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 077543 654321  C(E)= 077543 654321 
----------

*033600  JUMPA	0,033601

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033601 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 193
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0370

*033601  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033602  MOVE 	3,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 776777  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033603  TSCN	2,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

*033604  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033606  JUMPA	0,033607

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033607 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 194
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0371

*033607  CAME	2,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*033611  JUMPA	0,033612

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033612 
----------

*033612  CAME	3,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*033614  JUMPA	0,033615

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033615 
----------

*033615  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123455 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033616  TRO 	1,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 195
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0372

*033617  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*033621  JUMPA	0,033622

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033622 
----------

*033622  CAME	1,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033624  JUMPA	0,033625

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 033625 
----------

*033625  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033626  TRO 	0,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701334 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 196
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0373

*033627  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

*033631  JUMPA	0,033632

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033632 
----------

*033632  CAME	0,034376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
----------

*033634  JUMPA	0,033635

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033635 
----------

*033635  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033636  TLO 	17,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 197
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0374

*033637  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

*033641  JUMPA	0,033642

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033642 
----------

*033642  CAME	17,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*033644  JUMPA	0,033645

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033645 
----------

*033645  MOVE 	16,034377

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 070234 
FINAL
C(AC)= 123456 070234 
----------

*033646  TLO 	16,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 070234     E= 000000 000003 
FINAL
C(AC)= 123457 070234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 198
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0375

*033647  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

*033651  JUMPA	0,033652

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033652 
----------

*033652  CAME	16,034400

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 070234  C(E)= 123457 070234 
----------

*033654  JUMPA	0,033655

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033655 
----------

*033655  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 754321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033656  TROE	15,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 199
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0376

*033660  JUMPA	0,033661

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033661 
----------

*033661  CAME	15,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033663  JUMPA	0,033664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033664 
----------

*033664  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033665  TROE	14,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701334 
----------

*033666  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 200
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0377

*033670  JUMPA	0,033671

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033671 
----------

*033671  CAME	14,034376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
----------

*033673  JUMPA	0,033674

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033674 
----------

*033674  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 657321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033675  TLOE	13,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033677  JUMPA	0,033700

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033700 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 201
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0378

*033700  CAME	13,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*033702  JUMPA	0,033703

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033703 
----------

*033703  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033704  TLOE	12,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123457 701234 
----------

*033705  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

*033707  JUMPA	0,033710

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033710 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 202
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0379

*033710  CAME	12,034401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 701234  C(E)= 123457 701234 
----------

*033712  JUMPA	0,033713

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033713 
----------

*033713  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033714  TROA	11,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033716  JUMPA	0,033717

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033717 
----------

*033717  CAME	11,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 203
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0380

*033721  JUMPA	0,033722

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033722 
----------

*033722  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033723  TROA	10,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701334 
----------

*033725  JUMPA	0,033726

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033726 
----------

*033726  CAME	10,034376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
----------

*033730  JUMPA	0,033731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033731 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 204
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0381

*033731  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 701234 123456  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033732  TLOA	7,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123457 701234 
----------

*033734  JUMPA	0,033735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033735 
----------

*033735  CAME	7,034401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 701234  C(E)= 123457 701234 
----------

*033737  JUMPA	0,033740

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033740 
----------

*033740  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076547  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 205
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0382

*033741  TLOA	6,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033743  JUMPA	0,033744

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033744 
----------

*033744  CAME	6,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*033746  JUMPA	0,033747

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033747 
----------

*033747  MOVE 	5,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033750  TRON	5,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123456 701334 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 206
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0383

*033752  JUMPA	0,033753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033753 
----------

*033753  CAME	5,034376

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
----------

*033755  JUMPA	0,033756

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033756 
----------

*033756  MOVE 	4,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 077543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033757  TRON	4,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123456 701237 
----------

*033760  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 207
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0384

*033762  JUMPA	0,033763

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033763 
----------

*033763  CAME	4,034364

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701237 
----------

*033765  JUMPA	0,033766

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033766 
----------

*033766  MOVE 	3,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033767  TLON	3,000003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000003 
FINAL
C(AC)= 123457 701234 
----------

*033771  JUMPA	0,033772

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033772 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 208
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0385

*033772  CAME	3,034401

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 701234  C(E)= 123457 701234 
----------

*033774  JUMPA	0,033775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 033775 
----------

*033775  MOVE 	2,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*033776  TLON	2,000300

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234     E= 000000 000300 
FINAL
C(AC)= 123756 701234 
----------

*033777  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701334 
FINAL
C(AC)= 123456 701334 
----------

*034001  JUMPA	0,034002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 034002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 209
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0386

*034002  CAME	2,034366

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123756 701234 
----------

*034004  JUMPA	0,034005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 034005 
----------

*034005  MOVE 	1,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034006  MOVE 	2,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*034007  TDOE	1,000002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*034011  JUMPA	0,034012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 034012 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 210
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0387

*034012  CAME	1,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034014  JUMPA	0,034015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 034015 
----------

*034015  CAME	2,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*034017  JUMPA	0,034020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334     E= 000000 034020 
----------

*034020  MOVE 	0,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034021  MOVE 	1,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 754321 076543 
FINAL
C(AC)= 754321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 211
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0388

*034022  TDOE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 754321 076543 
FINAL
C(AC)= 777777 777777 
----------

*034023  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034025  JUMPA	0,034026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 034026 
----------

*034026  CAME	0,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034030  JUMPA	0,034031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 034031 
----------

*034031  CAME	1,034352

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 754321 076543  C(E)= 754321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 212
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0389

*034033  JUMPA	0,034034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 034034 
----------

*034034  MOVE 	17,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034035  MOVE 	0,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*034036  TSOE	17,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

*034040  JUMPA	0,034041

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034041 
----------

*034041  CAME	17,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 213
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0390

*034043  JUMPA	0,034044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034044 
----------

*034044  CAME	0,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*034046  JUMPA	0,034047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034047 
----------

*034047  MOVE 	16,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 070234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034050  MOVE 	17,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 076543 657321 
FINAL
C(AC)= 076543 657321 
----------

*034051  TSOE	16,000017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 657321 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 214
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0391

*034052  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*034054  JUMPA	0,034055

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034055 
----------

*034055  CAME	16,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034057  JUMPA	0,034060

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034060 
----------

*034060  CAME	17,034354

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 657321  C(E)= 076543 657321 
----------

*034062  JUMPA	0,034063

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034063 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 215
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0392

*034063  MOVE 	15,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034064  MOVE 	16,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

*034065  TDOA	15,000016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*034067  JUMPA	0,034070

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034070 
----------

*034070  CAME	15,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034072  JUMPA	0,034073

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034073 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 216
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0393

*034073  CAME	16,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

*034075  JUMPA	0,034076

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034076 
----------

*034076  MOVE 	14,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034077  MOVE 	15,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 252525 707070 
FINAL
C(AC)= 252525 707070 
----------

*034100  TDOA	14,000015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 252525 707070 
FINAL
C(AC)= 373577 707274 
----------

*034102  JUMPA	0,034103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034103 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 217
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0394

*034103  CAME	14,034402

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 373577 707274  C(E)= 373577 707274 
----------

*034105  JUMPA	0,034106

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034106 
----------

*034106  CAME	15,034347

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 252525 707070  C(E)= 252525 707070 
----------

*034110  JUMPA	0,034111

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034111 
----------

*034111  MOVE 	13,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034112  MOVE 	14,034403

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 373577 707274  C(E)= 176543 654321 
FINAL
C(AC)= 176543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 218
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0395

*034113  TSOA	13,000014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 176543 654321 
FINAL
C(AC)= 777777 777777 
----------

*034115  JUMPA	0,034116

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034116 
----------

*034116  CAME	13,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034120  JUMPA	0,034121

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034121 
----------

*034121  CAME	14,034403

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 176543 654321  C(E)= 176543 654321 
----------

*034123  JUMPA	0,034124

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034124 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 219
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0396

*034124  MOVE 	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034125  MOVE 	13,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 701234 123456 
FINAL
C(AC)= 701234 123456 
----------

*034126  TSOA	12,000013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 701234 123456 
FINAL
C(AC)= 123456 701234 
----------

*034130  JUMPA	0,034131

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034131 
----------

*034131  CAME	12,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 123456 701234 
----------

*034133  JUMPA	0,034134

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034134 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 220
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0397

*034134  CAME	13,034357

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 701234 123456  C(E)= 701234 123456 
----------

*034136  JUMPA	0,034137

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034137 
----------

*034137  MOVE 	11,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701237  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034140  MOVE 	12,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076547 
FINAL
C(AC)= 654321 076547 
----------

*034141  TDON	11,000012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076547 
FINAL
C(AC)= 777777 777777 
----------

*034143  JUMPA	0,034144

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034144 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 221
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0398

*034144  CAME	11,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034146  JUMPA	0,034147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034147 
----------

*034147  CAME	12,034360

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076547  C(E)= 654321 076547 
----------

*034151  JUMPA	0,034152

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034152 
----------

*034152  MOVE 	10,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701334  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034153  MOVE 	11,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 654321 076543 
FINAL
C(AC)= 654321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 222
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0399

*034154  TDON	10,000011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 654321 076543 
FINAL
C(AC)= 777777 777777 
----------

*034155  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*034157  JUMPA	0,034160

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034160 
----------

*034160  CAME	10,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034162  JUMPA	0,034163

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034163 
----------

*034163  CAME	11,034351

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 654321 076543  C(E)= 654321 076543 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 223
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0400

*034165  JUMPA	0,034166

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034166 
----------

*034166  MOVE 	7,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123457 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034167  MOVE 	10,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 077543 654321 
FINAL
C(AC)= 077543 654321 
----------

*034170  TSON	7,000010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 077543 654321 
FINAL
C(AC)= 777777 777777 
----------

*034172  JUMPA	0,034173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034173 
----------

*034173  CAME	7,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 224
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0401

*034175  JUMPA	0,034176

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034176 
----------

*034176  CAME	10,034362

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 077543 654321  C(E)= 077543 654321 
----------

*034200  JUMPA	0,034201

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034201 
----------

*034201  MOVE 	6,034332

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123756 701234  C(E)= 123456 701234 
FINAL
C(AC)= 123456 701234 
----------

*034202  MOVE 	7,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*034203  TSON	6,000007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 123456 701234  C(E)= 076543 654321 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 225
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0402

*034204  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
FINAL
C(AC)= 076543 654321 
----------

*034206  JUMPA	0,034207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034207 
----------

*034207  CAME	6,034217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
----------

*034211  JUMPA	0,034212

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034212 
----------

*034212  CAME	7,034342

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 076543 654321 
----------

*034214  JUMPA	0,034215

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321     E= 000000 034215 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 226
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0403

*034215  SETZM	0,034405

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*034216  JRST	0,030057

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 076543 654321  C(E)= 000000 000000 
FINAL
C(AC)= 076543 654321  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 076543 654321  C(E)= 000000 000001 
FINAL
C(AC)= 076543 654321  C(E)= 000000 000000 
----------

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 076543 654321  C(E)= 000000 000000 
FINAL
C(AC)= 076543 654321 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 227
DSKAF	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0404

*030616  JRST	0,030624

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 076543 654321  C(E)= 000000 000000 
FINAL
C(AC)= 076543 654321 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 076543 654321  C(E)= 777777 777777 
FINAL
C(AC)= 076543 654321 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 431110 
----------

