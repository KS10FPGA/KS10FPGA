;DSKAA







				IDENTIFICATION
				--------------

	PRODUCT CODE:		AH-E297A-DD

	DIAGNOSTIC CODE:	DSKAA

	PRODUCT NAME:	 	DSKAAA0 DECSYSTEM 2020 BASIC
				INSTRUCTION DIAGNOSTIC (1)

	VERSION:		0.1

	DATE RELEASED:		MARCH 1978

	MAINTAINED BY:		DIAGNOSTIC ENGINEERING

	AUTHOR:			JOHN R. KIRCHOFF

		        COPYRIGHT (C) 1978

	        DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR  USE  ONLY  ON  A
	SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
	OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR  ANY  OTHER
	COPIES  THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
	TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
	AGREES  TO  THESE  LICENSE TERMS.  TITLE TO AND OWNERSHIP OF THE
	SOFTWARE  SHALL  AT   ALL  TIMES  REMAIN  IN  DIGITAL  EQUIPMENT
	CORPORATION.

	THE INFORMATION IN THIS DOCUMENT IS SUBJECT  TO  CHANGE  WITHOUT
	NOTICE  AND  SHOULD  NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
	EQUIPMENT CORPORATION.

	DIGITAL EQUIPMENT CORPORATION ASSUMES NO  RESPONSIBILITY FOR THE
	USE  OR  RELIABILITY  OF  ITS SOFTWARE IN EQUIPMENT WHICH IS NOT
	SUPPLIED BY DIGITAL EQUIPMENT CORPORATION.
							MAINDEC-10-DSKAA.TXT
							PAGE 2                                                             SEQ 0003


			TABLE OF CONTENTS
			-----------------

1.0	ABSTRACT

2.0	REQUIREMENTS

2.1	EQUIPMENT

2.2	STORAGE

2.3	PRELIMINARY PROGRAMS

3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

3.2	STARTING PROCEDURE

3.3	OPERATING PROCEDURE

4.0	ERRORS

5.0	ITERATION COUNTER

6.0	CYCLE TIME

7.0	OPERATIONAL VARIATIONS

8.0	MISCELLANEOUS

9.0	LISTING
							MAINDEC-10-DSKAA.TXT
							PAGE 3                                                             SEQ 0004


1.0	ABSTRACT

	THIS DECSYSTEM 2020 KS-10 BASIC INSTRUCTION DIAGNOSTIC IS
	THE FIRST IN A SERIES OF DECSYSTEM 2020 KS-10 PROCESSOR
	DIAGNOSTICS.  IT IS THE MOST BASIC OF THE PROCESSOR
	DIAGNOSTICS.  THIS DIAGNOSTIC ASSUMES THE HALT INSTRUCTION
	AND THE COMPUTER CONSOLE TO BE OPERATIVE.  IT MAKES NO FURTHER
	ASSUMPTIONS EXCEPT THAT IT IS LOADED INTO MEMORY CORRECTLY.

	THE DIAGNOSTIC TESTS THE BASIC FUNCTIONALITY OF THE PROCESSOR
	AND MICRO-CODE.

2.0	REQUIREMENTS

2.1	EQUIPMENT

	A PDP-10 SM10 WITH A MINIMUM OF 32K OF MEMORY

	CONSOLE PROCESSOR
	CONSOLE TELETYPE

2.2	STORAGE

	THE PROGRAM RUNS WITHIN 32K OF MEMORY.

2.3	PRELIMINARY PROGRAMS

	CONSOLE FUNCTIONS WORKING PROPERLY
							MAINDEC-10-DSKAA.TXT
							PAGE 4                                                             SEQ 0005


3.0	PROGRAM PROCEDURES

3.1	LOADING PROCEDURE

	LOAD VIA CONSOLE PROCESSOR

3.2	STARTING PROCEDURE

	STAND-ALONE STARTING ADDRESS IS 30000.

	IF THE DIAGNOSTIC FAILS TO START CORRECTLY TRY STARTING AT THE
	FIRST TEST INSTEAD OF AT THE BEGINNING OF THE CONTROL SEQUENCE.
	(SEE LISTING).

3.3	OPERATING PROCEDURE

	ONCE STARTED THE PROGRAM WILL CYCLE CONTINUALLY UNTIL STOPPED
	OR AN ERROR OCCURS.

4.0	ERRORS

	ERRORS ARE IN THE FORM OF HALT INSTRUCTIONS.  THE LISTING
	SHOULD BE CONSULTED TO DETERMINE THE CAUSE OF THE ERROR.  A
	NO OPERATION (JUMP) INSTRUCTION FOLLOWS EACH HALT.  THIS
	MAY BE USEFUL IN CONSTRUCTING A SCOPE LOOP TO CYCLE ON THE
	FAILING INSTRUCTION.

5.0	ITERATION COUNTER

	THE ITERATION COUNT OF THE PROGRAM CAN BE DETERMINED BY
	EXAMINING 30047 "PASCNT".

6.0	CYCLE TIME

	THE CYCLE TIME OF THE PROGRAM IS IN THE MILLISECOND RANGE AND
	IS THEREFORE SUITABLE FOR TAKING MARGINS, VIBRATION TESTS, ETC.

							MAINDEC-10-DSKAA.TXT
							PAGE 5                                                             SEQ 0006


7.0	OPERATIONAL VARIATIONS

	A.  DIAGNOSTIC MONITOR

	    THE PROGRAM IS USABLE WITH THE DIAGNOSTIC MONITOR TO PRO-
	    VIDE RELIABILITY TESTS, ACCEPTANCE TESTS, AND/OR TO PRO-
	    VIDE A QUICK METHOD OF ISOLATION OF A FAULT TO A PARTICULAR
	    AREA OF THE PROCESSOR.  CERTAIN PROCEDURES ARE USED WHEN
	    THE PROGRAM IS USED IN THIS MANNER.  THEY ARE:

	    1.  THE DIAGNOSTIC MONITOR TRANSFERS CONTROL TO THE PRO-
		GRAM AND STARTS IT AT LOCATION 30002.

	    2.  MONCTL - LOCATION 30043 IS USED AS THE DIAGNOSTIC MON-
		ITOR CONTROL FLAG WORD.

	B.  USER MODE

	    THE PROGRAM WILL OPERATE IN USER MODE AND AS SUCH PROVIDES
	    ASSURANCE THAT THE PROCESSOR IS PERFORMING ALL FUNCTIONS
	    CORRECTLY.  USER MODE STARTING ADDRESS IS 30000.

	C.  SYSTEM EXERCISER

	    STARTING ADDRESS IS 30003.  NO DATA SWITCHES ARE USED BY
	    THIS PROGRAM.

8.0	MISCELLANEOUS

	NONE

9.0	LISTING

		HISTORY FILE FOR DSKAA                                                                                     SEQ 0007
		----------------------

---------------------------------------------------------------

CODE:		MAINDEC-10-DSKAA

TITLE:		DECSYSTEM 2020 BASIC INSTRUCTION DIAGNOSTIC (1)

VERSION:	0.1

DATE:		MARCH 1978

REASON:		ORIGINAL RELEASE OF THIS PROGRAM FOR KS-10.
---------------------------------------------------------------
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
DSKAAT	MAC	28-Mar-78 09:37		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0008

     1					;DSKAA
     2
     3
     4			000000		MCNVER==0
     5			000001		DECVER==1
     6
     7
     8						XLIST
     9						LIST
    10						LALL
    11
    12						NAME	\MCNVER,\DECVER^
    13
    14					TITLE	DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1
    15					^
    16
    17					;TEST DESIGNED FOR INITIAL DEBUGGING OF PROCESSOR HARDWARE
    18					;AND TO DETECT (SOLID) FAILURES IN THE FIELD.
    19
    20					;COPYRIGHT 1978
    21					;DIGITAL EQUIPMENT CORPORATION
    22					;MARLBORO, MASS. 01752
    23
    24					;JOHN R. KIRCHOFF
    25
    26	000137					LOC	137
    27	000137	000000	000001			MCNVER,,DECVER
    28
    29						NOSYM
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2
DSKAAT	MAC	28-Mar-78 09:37		DIAGNOSTIC PARAMETERS                                                              SEQ 0009

    30					SUBTTL	DIAGNOSTIC PARAMETERS
    31
    32					;PARAMETER DEFINITIONS
    33
    34			000001		EXCASB==1
    35			000001		USRASB==1
    36			000001		PGMEND==1
    37
    38					;FLAG DEFINITIONS
    39
    40			010000		USERF=10000		;USER MODE FLAG
    41
    42
    43					;MACROS
    44
    45					; STOP - USED FOR SCOPE LOOP, IF INSTRUCTION FAILS, CHANGE (JUMPA .+1)
    46					;	 TO A (JUMPA .-X) TO CYCLE ON FAILING INSTRUCTION
    47
    48					DEFINE	STOP	(A)<
    49						HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
    50						JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
    51									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
    52									;IN THE SUBTEST) TO LOOP ON ERROR>
    53
    54					; SFLAG - USED TO CLEAR ALL FLAGS THEN TO SET SELECTED FLAG
    55
    56					DEFINE	SFLAG	(A)<
    57						MOVSI	1,A
    58						JFCL	17,.+1	;RESET ALL FLAGS
    59						JRST	2,.+1(1)		;SET A FLAG>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3
DSKAAT	MAC	28-Mar-78 09:37		DIAGNOSTIC PARAMETERS                                                              SEQ 0010

    60					;SPECIAL FEATURE PARAMETERS
    61
    62			030660		SADR1=STARTA
    63			030660		SADR2=STARTA
    64			030660		SADR3=STARTA
    65			030660		SADR4=STARTA
    66		254000	030660		SADR5=JRST STARTA
    67		254000	030660		SADR6=JRST STARTA
    68		254000	030660		SADR7=JRST STARTA
    69		254000	030660		SADR8=JRST STARTA
    70		254000	030660		SADR9=JRST STARTA
    71		254000	030660		SADR10=JRST STARTA
    72		254000	030660		SADR11=JRST STARTA
    73
    74			000000		PAREA0=0
    75			000000		PAREA1=0
    76			000000		PAREA2=0
    77		446353	414100		PAREA3=SIXBIT/DSKAA/
    78		645560	000000		PAREA4=SIXBIT/TMP/
    79			000000		PAREA5=0
    80			000000		PAREA6=0
    81			000001		ITERAT==1
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
PARAM	KSM	28-Mar-78 11:27		CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978                                        SEQ 0011

    82					SUBTTL	CONSOLE DATA SWITCH ASSIGNMENTS, MARCH 1978
    83
    84					DEFINE	S,<;*********************************************************************>
    85
    86					S^;*********************************************************************^
    87					;*DATA SWITCHES
    88					;*LEFT HALF SWITCHES ARE PRE-ASSIGNED FOR SUBROUTINE PACKAGE USE
    89					;*AND CONTROL LOOPING, PRINTING (TTY OR OTHER DEVICE) AND MISC. FUNCTIONS
    90					S^;*********************************************************************^
    91
    92			400000		ABORT==	400000			;ABORT PROGRAM ON PASS COMPLETION
    93			200000		RSTART==200000			;RESTART TEST, PRINT TOTALS
    94			100000		TOTALS==100000			;PRINT TOTALS, CONTINUE
    95
    96			040000		NOPNT==	040000			;INHIBIT ALL PRINT/TYPE OUT (EXCEPT FORCED)
    97			020000		PNTLPT==020000			;PRINT ALL DATA ON LPT (LOGICAL DEVICE, USER MODE)
    98			010000		DING==	010000			;RING BELL ON ERROR
    99
   100			004000		LOOPER==004000			;ENTER EXERCISE/CHECK LOOP ON ERROR
   101			002000		ERSTOP==002000			;HALT ON TEST ERROR
   102			001000		PALERS==001000			;PRINT ALL ERRORS
   103
   104			000400		RELIAB==000400			;RELIABILITY MODE
   105			000200		TXTINH==000200			;INHIBIT ERROR TEXT
   106			000100		INHPAG==000100			;INHIBIT PAGING
   107
   108			000040		MODDVC==000040			;MODIFY DEVICE CODE
   109			000020		INHCSH==000020			;INHIBIT CACHE
   110			000010		OPRSEL==000010			;OPERATOR SELECTION
   111
   112			000004		CHAIN==	000004			;CHAIN CONTROL SWITCH
   113
   114									;SWITCH 16 RESERVED
   115
   116									;SWITCH 17 RESERVED !!!
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0012

   117					SUBTTL	PROGRAM/SUBROUTINE PARAMETERS
   118
   119					S^;*********************************************************************^
   120					;*SPECIAL SUBPROGRAM LINKAGES
   121					S^;*********************************************************************^
   122
   123			027772		FSELNK=	27772	;FILE SELECT LINK
   124			027773		FRDLNK=	27773	;FILE READ LINK
   125			027774		LDLNK=	27774	;LOAD LINKAGE ADDRESS
   126			027775		DDTLNK=	27775	;DDT LINKAGE ADDRESS
   127			027776		MODLNK=	27776	;OPERATIONAL MODE CHECK LINKAGE ADDRESS
   128			027777		SUBLNK=	27777	;SUBROUTINE LINKAGE ADDRESS
   129
   130					S^;*********************************************************************^
   131					;*SPECIAL SUBROUTINE FATAL HALTS
   132					;*USED TO REPORT ERRORS THAT CAUSE THE SUBROUTINES TO BE UNUSABLE
   133					S^;*********************************************************************^
   134
   135					;ADDRESS   TAG	REASON
   136					;---------------------
   137
   138					; 1010 	NOEXEC	;PROGRAM NOT CODED FOR EXEC MODE OPERATION
   139					; 1011  PLERR	;FATAL PUSH LIST POINTER ERROR
   140					; 1012  PLERR1	;INITIAL PUSH LIST POINTER ERROR
   141					; 1013  MUOERR	;MUUO WITH LUUO HANDLER WIPED OUT
   142					; 1014  SMBER	;KS-10 INTERRUPT WITHOUT DOORBELL
   143					; 1015  SMCER	;KS-10 CLOCK INTERRUPT WITHOUT FLAG SET
   144					; 1016  CPIERR	;CPU INITIALIZATION ERROR
   145					; 1017  EOPERR	;END OF PROGRAM ERROR
   146					; 1020  LUOERR	;INTERRUPT WITH LUUO HANDLER WIPED OUT
   147
   148					S^;*********************************************************************^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0013

   149					S^;*********************************************************************^
   150					;OPERATOR DEFINITIONS (NON-UUO'S)
   151					S^;*********************************************************************^
   152
   153		260740	000000		OPDEF	GO	[PUSHJ	P,]	;SUBROUTINE CALL
   154		263740	000000		OPDEF	RTN	[POPJ	P,]	;SUBROUTINE RETURN 
   155		261740	000000		OPDEF	PUT	[PUSH	P,]	;PUT DATA ON PUSH LIST
   156		262740	000000		OPDEF	GET	[POP	P,]	;GET DATA FROM PUSH LIST 
   157		254000	000000		OPDEF	PJRST	[JRST	]	;JRST TO ROUTINE THAT RTN'S
   158		254200	000000		OPDEF	HALT	[JRST	4,]	;DEFINITION FOR DDT
   159		254100	000000		OPDEF	JRSTF	[JRST	2,]	;DEFINITION FOR DDT
   160		254500	000000		OPDEF	JEN	[JRST	12,]	;DEFINITION FOR DDT
   161
   162					S^;*********************************************************************^
   163					;*SUBROUTINE INITIALIZATION CALL
   164					S^;*********************************************************************^
   165
   166		265000	030011		OPDEF	PGMINT	[JSP	0,SBINIT]	;SUBROUTINE INITIALIZATION
   167
   168					S^;*********************************************************************^
   169					;*HALTING UUO'S (A MORE GRACEFUL HALT THAN SIMPLY USING THE HALT INSTRUCTION).
   170					S^;*********************************************************************^
   171
   172		037640	000004		OPDEF	FATAL	[37B8!15B12!4]	;FATAL PROGRAMMING HALT
   173		037600	000004		OPDEF	ERRHLT	[37B8!14B12!4]	;PROGRAM ERROR HALT
   174
   175					S^;*********************************************************************^
   176					;*TERMINAL INPUT UUO'S
   177					;*ALWAYS COME FROM THE CONSOLE TERMINAL IN EXEC MODE OR THE
   178					;*CONTROLLING TERMINAL (REAL TERMINAL OR PTY) IN USER MODE.
   179					S^;*********************************************************************^
   180
   181		037000	000003		OPDEF	TTICHR 	[37B8!0B12!3]	;TTY, INPUT ANY CHARACTER
   182		037040	000003		OPDEF	TTIYES	[37B8!1B12!3]	;TTY, NORMAL RETURN Y
   183		037100	000003		OPDEF	TTINO	[37B8!2B12!3]	;TTY, NORMAL RETURN N
   184		037140	000003		OPDEF	TTIOCT	[37B8!3B12!3]	;TTY, INPUT OCTAL WORD
   185		037200	000003		OPDEF	TTIDEC	[37B8!4B12!3]	;TTY, INPUT DECIMAL WORD
   186		037240	000003		OPDEF	TTICNV	[37B8!5B12!3]	;TTY, INPUT CONVERTABLE WORD
   187		037300	000003		OPDEF	TTLOOK	[37B8!6B12!3]	;TTY, KEYBOARD CHECK
   188		037340	000003		OPDEF	TTALTM	[37B8!7B12!3]	;TTY, ALT-MODE CHECK
   189		037400	000003		OPDEF	TTSIXB	[37B8!10B12!3]	;TTY, INPUT SIXBIT WORD
   190		037440	000003		OPDEF	TTYINP	[37B8!11B12!3]	;TTY, IMAGE MODE INPUT
   191		037500	000003		OPDEF	TTICLR	[37B8!12B12!3]	;TTY, CLEAR INPUT
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 4
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0014

   192					;*TERMINAL OUTPUT UUO'S.
   193
   194		037000	000000		OPDEF	PNTA	[37B8!0B12!0]	;PRINT ASCII WORD
   195		037000	000001		OPDEF	PNTAF	[37B8!0B12!1]	;PRINT ASCII WORD FORCED
   196		037740	000000		OPDEF	PNTAL	[37B8!17B12!0]	;PRINT ASCIZ LINE
   197		037740	000001		OPDEF	PNTALF	[37B8!17B12!1]	;PRINT ASCIZ LINE FORCED
   198		037600	000003		OPDEF	PSIXL	[37B8!14B12!3]	;PRINT SIXBIT'Z LINE
   199		037640	000003		OPDEF	PSIXLF	[37B8!15B12!3]	;PRINT SIXBIT'Z LINE FORCED
   200		037000	000000		OPDEF	PNTMSG	[37B8!0B12!0]	;PRINT MESSAGE IMMEDIATE
   201		037040	000000		OPDEF	PNTMSF	[37B8!1B12!0]	;PRINT MESSAGE IMMEDIATE FORCED
   202		037100	000000		OPDEF	PSIXM	[37B8!2B12!0]	;PRINT SIXBIT'Z MSG IMMEDIATE
   203		037200	000000		OPDEF	PSIXMF	[37B8!4B12!0]	;PRINT SIXBIT'Z MSG IMM FORCED
   204		037000	000000		OPDEF	PNTCI	[37B8!0B12!0]	;PRINT CHARACTER IMMEDIATE
   205		037040	000000		OPDEF	PNTCIF	[37B8!1B12!0]	;PRINT CHARACTER IMMEDIATE FORCED
   206		037500	000000		OPDEF	PNTCHR	[37B8!12B12!0]	;PRINT CHARACTER
   207		037500	000001		OPDEF	PNTCHF	[37B8!12B12!1]	;PRINT CHARACTER FORCED
   208		037040	000000		OPDEF	PNT1	[37B8!1B12!0]	;PRINT ONE OCTAL DIGIT
   209		037040	000001		OPDEF	PNT1F	[37B8!1B12!1]	;PRINT 1 OCTAL DIGIT FORCED	
   210		037100	000000		OPDEF	PNT2	[37B8!2B12!0]	;PRINT TWO OCTAL DIGITS
   211		037100	000001		OPDEF	PNT2F	[37B8!2B12!1]	;PRINT 2 OCTAL DIGITS FORCED	
   212		037140	000000		OPDEF	PNT3	[37B8!3B12!0]	;PRINT THREE OCTAL DIGITS
   213		037140	000001		OPDEF	PNT3F	[37B8!3B12!1]	;PRINT THREE OCTAL DIGITS FORCED	
   214		037200	000000		OPDEF	PNT4	[37B8!4B12!0]	;PRINT FOUR OCTAL DIGITS
   215		037200	000001		OPDEF	PNT4F	[37B8!4B12!1]	;PRINT FOUR OCTAL DIGITS FORCED
   216		037240	000000		OPDEF	PNT5	[37B8!5B12!0]	;PRINT FIVE OCTAL DIGITS
   217		037240	000001		OPDEF	PNT5F	[37B8!5B12!1]	;PRINT FIVE OCTAL DIGITS FORCED
   218		037300	000000		OPDEF	PNT6	[37B8!6B12!0]	;PRINT SIX OCTAL DIGITS
   219		037300	000001		OPDEF	PNT6F	[37B8!6B12!1]	;PRINT SIX OCTAL DIGITS FORCED
   220		037340	000000		OPDEF	PNT7	[37B8!7B12!0]	;PRINT 7 OCTAL DIGITS
   221		037340	000001		OPDEF	PNT7F	[37B8!7B12!1]	;PRINT 7 OCTAL DIGITS FORCED
   222		037440	000000		OPDEF	PNT11	[37B8!11B12!0]	;PRINT 11 OCTAL DIGITS
   223		037440	000001		OPDEF	PNT11F	[37B8!11B12!1]	;PRINT 11 OCTAL DIGITS FORCED.
   224		037400	000000		OPDEF	PNTADR	[37B8!10B12!0]	;PRINT PHYSICAL ADDRESS
   225		037400	000001		OPDEF	PNTADF	[37B8!10B12!1]	;PRINT PHYSICAL ADDRESS FORCED
   226		037600	000000		OPDEF	PNTOCT  [37B8!14B12!0]	;PRINT FULL WORD OCTAL
   227		037600	000001		OPDEF	PNTOTF	[37B8!14B12!1]	;PRINT FULL WORD OCTAL FORCED
   228		037540	000000		OPDEF	PNTHW	[37B8!13B12!0]	;PRINT OCTAL HALF WORDS, 6 SP 6
   229		037540	000001		OPDEF	PNTHWF	[37B8!13B12!1]	;PRINT OCTAL HALF WORDS, 6 SP 6 FORCED
   230		037700	000003		OPDEF	PNTOCS	[37B8!16B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S
   231		037740	000003		OPDEF	PNTOCF	[37B8!17B12!3]	;PRINT OCTAL, SUPPRESS LEADING 0'S FORCED
   232		037640	000000		OPDEF	PNTDEC	[37B8!15B12!0]	;PRINT DECIMAL, SUPRESS LEADING 0'S
   233		037640	000001		OPDEF	PNTDCF	[37B8!15B12!1]	;PRINT DECIMAL, SUPRESS LEADING 0'S FORCED
   234		037700	000000		OPDEF	PNTDS	[37B8!16B12!0]	;PRINT DECIMAL, SPACES FOR LD 0'S
   235		037700	000001		OPDEF	PNTDSF	[37B8!16B12!1]	;PRINT DECIMAL, SPACES FOR LD 0'S FORCED
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 5
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0015

   236		037200	000002		OPDEF	PNTNM	[37B8!4B12!2]	;PRINT PROGRAM NAME
   237		037000	000002		OPDEF	PNTSIX	[37B8!0B12!2]	;PRINT SIXBIT WORD
   238		037040	000002		OPDEF	PNTSXF	[37B8!1B12!2]	;PRINT SIXBIT WORD FORCED
   239		037240	000002		OPDEF	DROPDV	[37B8!5B12!2]	;CLOSE LOGICAL FILE, USER MODE
   240		037100	000002		OPDEF	PNTCW	[37B8!2B12!2]	;PRINT DF10 CONTROL WORD
   241		037140	000002		OPDEF	PNTCWF	[37B8!3B12!2]	;PRINT DF10 CONTROL WORD FORCED
   242		037000	030242		OPDEF	PCRL	[37B8!0B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED
   243		037040	030242		OPDEF	PCRLF	[37B8!1B12!CRLF] ;PRINT CARRIAGE RETURN/LINE FEED FORCED
   244		037000	000040		OPDEF	PSP	[37B8!0B12!40]	;PRINT SPACE
   245		037040	000040		OPDEF	PSPF	[37B8!1B12!40]	;PRINT SPACE FORCED
   246		037000	030243		OPDEF	PCRL2	[37B8!0B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE)
   247		037040	030243		OPDEF	PCRL2F	[37B8!1B12!CRLF2] ;PRINT CARRIAGE RETURN/LINE FEED (TWICE) FORCED
   248		037040	000007		OPDEF	PBELL	[37B8!1B12!7]	;PRINT TTY BELL
   249
   250		037040	000026		OPDEF	PFORCE	[37B8!1B12!26]	;PRINT FORCE, CONTROL O OVERRIDE
   251
   252					DEFINE	PMSG	(ARG),<
   253						PSIXM	[SIXBIT\ARG'_\]>
   254
   255					DEFINE	PMSGF	(ARG),<
   256						PSIXMF	[SIXBIT\ARG'_\]>
   257
   258					;*SIXBTZ -- MACRO TO GENERATE SIXBIT DATA FOR PRINTING
   259					;*	CONSERVES CORE OVER ASCIZ
   260
   261					DEFINE	SIXBTZ	(ARG),<	[SIXBIT\ARG'_\]>
   262
   263					;*CONSOLE SWITCH INPUT UUO.
   264					;*READS CONSOLE SWITCHES IF IN EXEC MODE OR ASKS FOR THEM IF
   265					;* USER MODE.
   266
   267		037400	000002		OPDEF	SWITCH	[37B8!10B12!2]	;INPUT CONSOLE SWITCHES
   268
   269					;*CLOCK INITIALIZATION UUO - TO SET DESIRED CLOCK OPERATION
   270					;*EITHER IGNORE CLOCK, ONLY LET IT TICK OR CAUSE INTERRUPT TO OCCUR.
   271
   272		037540	000004		OPDEF	CLOKOP	[37B8!13B12!4]	;CLOCK OPERATION UUO - CLOCK
   273		037200	000004		OPDEF	MTROP	[37B8!4B12!4]	;CLOCK OPERATION UUO - METER
   274
   275					;*KS-10 CACHE OPERATION UUO'S
   276
   277		037040	000004		OPDEF	CINVAL	[37B8!1B12!4]	;CACHE INVALIDATE
   278		037100	000004		OPDEF	CFLUSH	[37B8!2B12!4]	;CACHE FLUSH
   279		037140	000004		OPDEF	CWRTBI	[37B8!3B12!4]	;CACHE WRITE-BACK & INVALIDATE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 6
PARAM	KSM	28-Mar-78 11:27		PROGRAM/SUBROUTINE PARAMETERS                                                      SEQ 0016

   280					;*END OF PASS/PROGRAM UUOS
   281
   282					;PERFORMS THE END OF PASS FUNCTIONS. INCREMENT PASS COUNT,
   283					;*DECREMENT ITERATION COUNT, CHECK IF FINISHED WITH THIS PROGRAM ETC.
   284
   285		037500	000004		OPDEF	ENDUUO	[37B8!12B12!4]	;UUO TO DISPLAY LIGHTS
   286		037700	000004		OPDEF	EOPUUO	[37B8!16B12!4]	;END OF PROGRAM UUO
   287
   288					;*MEMORY MANAGEMENT UUO'S
   289					;*UUO'S TO PERFORM VARIOUS MEMORY FUNCTIONS. MAPPING, ZEROING, PAGING,
   290					;*ADDRESS CONVERSION, ETC...
   291
   292		037000	000004		OPDEF	MAPMEM	[37B8!0B12!4]	;MAP MEMORY
   293		037500	000002		OPDEF	MEMZRO	[37B8!12B12!2]	;ZERO MEMORY
   294		037440	000002		OPDEF	MEMSEG	[37B8!11B12!2]	;SETUP MEMORY SEGMENT
   295		037540	000002		OPDEF	MAPADR	[37B8!13B12!2]	;VIRTUAL TO PHYSICAL ADR CONVERT
   296		037640	000002		OPDEF	MAPCNK	[37B8!15B12!2]	;MAP MEMORY CHUNK
   297		037600	000002		OPDEF	MAPSET	[37B8!14B12!2]	;SET KI10 EXEC PAGE MAP
   298		037740	000002		OPDEF	MAPPNT	[37B8!17B12!2]	;PRINT MEMORY MAP
   299
   300					;*DEVICE CODE MODIFICATION UUO
   301					;*ALLOWS THE MODIFICATION OF IOT'S TO ONE DEVICE TO BE CHANGED TO
   302					;*IOT'S TO A DIFFERENT DEVICE CODE.
   303
   304		037340	000002		OPDEF	MODPCU	[37B8!7B12!2]	;MODIFY PERHIPERAL CODE, USER
   305		037300	000002		OPDEF	MODPCP	[37B8!6B12!2]	;MODIFY PERHIPERAL CODE, PROGRAM
   306
   307			030000			IFNDEF	MODDVL,<MODDVL==BEGIN>
   308			030000			IFNDEF	MODDVU,<MODDVU==BEGIN>
   309
   310					;*"DIAMON" FILE SELECTION AND READ UUOS
   311
   312		037240	000004		OPDEF	FSELECT	[37B8!5B12!4]	;FILE SELECTION
   313		037300	000004		OPDEF	FREAD	[37B8!6B12!4]	;FILE READ - ASCII DATA
   314		037340	000004		OPDEF	FRD36	[37B8!7B12!4]	;FILE READ - 36 BIT DATA
   315		037400	000004		OPDEF	FRD8	[37B8!10B12!4]	;FILE READ - 8 BIT DATA
   316
   317						XLIST
   318					IFNDEF	EROLD,<LIST
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 7
PARAM	KSM	28-Mar-78 11:27		ERROR HANDLING UUO DEFINITIONS                                                     SEQ 0017

   319					SUBTTL	ERROR HANDLING UUO DEFINITIONS
   320
   321					S^;*********************************************************************^
   322					;*ERROR HANDLER PARAMETERS
   323					S^;*********************************************************************^
   324
   325		036000	000000		OPDEF	ERUUO	[36B8]		;ERROR CALL UUO
   326		035000	000000		OPDEF	ERLOOP	[35B8]		;ERROR LOOP, CHECKS PC,REPT,REPT1,ERROR
   327		035040	000000		OPDEF	ERLP1	[35B8!1B12]	;ERROR LOOP IF PC'S MATCH
   328		035100	000000		OPDEF	ERLP2	[35B8!2B12]	;ERROR LOOP IF ANY ERROR
   329		034000	000000		OPDEF	REPTUO	[34B8]		;REPEAT LOOP UUO
   330
   331					;*THE ERROR HANDLER MACROS
   332
   333					;*A MACRO TO REPORT AN ERROR AND LOOP
   334
   335						DEFINE	ERROR	(ADR,FORMAT,CORECT,ACTUAL,F,D,ERR)<
   336												SALL
   337						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   338							   CORECT,,ACTUAL
   339							   [SIXBIT\D'_\],,ERR]
   340												XALL
   341						ERLOOP	ADR		;IF ERROR, LOOP TO ADR
   342					>
   343
   344					;*A MACRO TO REPORT AN ERROR AND NOT LOOP
   345
   346						DEFINE	ERROR1	(FORMAT,CORECT,ACTUAL,F,D,ERR)<
   347												SALL
   348						ERUUO	FORMAT,[T,,[SIXBIT\F'_\]
   349							   CORECT,,ACTUAL
   350							   [SIXBIT\D'_\],,ERR]
   351												XALL>
   352
   353					>;END OF EROLD CONDITIONAL
   354
   355						XLIST
   356						LIST
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0018

   357					SUBTTL	*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978
   358
   359	030000					LOC	30000
   360
   361					S^;*********************************************************************^
   362					;*PROGRAM STARTING ADDRESSES
   363					;*THESE ADDRESSES CALL VARIOUS SPECIAL START ROUTINES AND OR OPTIONS
   364					;*NORMAL START ADDRESS IS 30000 ALL OTHERS ARE SPECIAL. INVOKED BECAUSE
   365					;*OF END OF PASS, POWER FAILURE, DDT START, RE-ENTERING(TYPICALLY USER
   366					;*MODE), OR ANY NUMBER OF SPECIAL FEATURE TESTS.
   367					S^;*********************************************************************^
   368
   369	030000	254 00 1 00 027776 	BEGIN:	JRST	@MODLNK		;STAND-ALONE START
   370	030001	254 00 0 00 030631 	$START:	JRST	START		;MODE CHECK STARTING ADDRESS
   371
   372	030002	254 00 1 00 027774 	DIAGMN:	JRST	@LDLNK		;DIAGNOSTIC MONITOR START
   373
   374	030003	254 00 1 00 027774 	SYSEXR:	JRST	@LDLNK		;SYSTEM EXERCISER START
   375
   376	030004	254 00 0 00 030660 	SFSTRT:	JRST	SADR1		;SPECIAL FEATURE START
   377
   378	030005	254 00 0 00 030660 	PFSTRT:	JRST	SADR2		;POWER FAIL RESTART
   379
   380	030006	254 00 0 00 030660 	REENTR:	JRST	SADR3		;REENTER START(USUALLY USER MODE ONLY)
   381
   382	030007				SRTDDT:				;COMMONLY MISTAKEN NAME FOR "DDTSRT"
   383	030007	254 00 1 00 027775 	DDTSRT:	JRST	@DDTLNK		;DDT START
   384
   385	030010	254 00 0 00 030660 	BEGIN1:	JRST	STARTA		;LOOP START(END OF PASS COMES HERE)
   386	030011	254 00 1 00 027777 	SBINIT:	JRST	@SUBLNK		;PMGINT LINKAGE
   387	030012	000000	000000		RETURN:	0			;RETURN ADDRESS STORAGE
   388
   389	030013	254000	030660		START1:	SADR7			;OPTIONAL STARTING ADR/INSTRUCTIONS
   390	030014	254000	030660		START2:	SADR8			; "
   391	030015	254000	030660		START3:	SADR9			; "
   392	030016	254000	030660		START4:	SADR10			; "
   393	030017	254000	030660		START5:	SADR11			; "
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0019

   394					S^;*********************************************************************^
   395					;*PROGRAM FIXED PARAMETER AREA
   396					S^;*********************************************************************^
   397
   398	030020	446353	414100		PNTNAM:	PAREA3		;SIXBIT PROGRAM NAME
   399	030021	645560	000000		PNTEXT:	PAREA4		;SIXBIT PROGRAM EXTENSION
   400	030022	000000	000000		RANDBS:	PAREA1		;RANDOM BASE NUMBER
   401	030023	000000	000000		SWTEXR:	PAREA2		;SYSTEM EXERCISER SWITCHES
   402	030024	000000	000001		ITRCNT:	ITERAT		;PROGRAM ITERATIONS
   403	030025	000000	030644		$PNAME:	PGMNAM		;POINTER TO PROGRAMS NAME
   404	030026	000000	000001		$PVER:	MCNVER,,DECVER	;MCN & DEC VERSION LEVEL
   405	030027	000000	030000		$MODVL:	MODDVL		;DEVICE CODE CHANGE LOWER LIMIT
   406	030030	000000	030000		$MODVU:	MODDVU		;DEVICE CODE CHANGE UPPER LIMIT
   407	030031	777777	777777		$EMODE:	IFNDEF EXCASB,<0> IFDEF EXCASB,<-1>	;EXEC ALLOWED
   408	030032	777777	777777		$UMODE:	IFNDEF USRASB,<0> IFDEF USRASB,<-1>	;USER ALLOWED
   409	030033	000000	000000		$DSKUP:	IFNDEF DSKUPD,<0> IFDEF DSKUPD,<-1>	;DISK UPDATE MODE
   410	030034	000000	000000		$MMAP:	IFNDEF MEMMAP,<0> IFDEF MEMMAP,<-1>	;ALLOW MEMORY RTNS
   411	030035	000000	000000		PAREA7:	PAREA5		;OPTIONAL PARAMETER
   412	030036	000000	000000		PAREA8:	PAREA6		;OPTIONAL PARAMETER
   413
   414					S^;*********************************************************************^
   415					;*PROGRAM VARIABLE PARAMETER AREA
   416					S^;*********************************************************************^
   417
   418	030037	000000	000000		USER:	0		; 0 = EXEC, -1 = USER MODE FLAG
   419	030040	000000	000000		KAIFLG:	0		;PROCESSOR TYPE, 0 = KA10, -1 = KI10
   420	030041	000000	000000		KLFLG:	0		;PROCESSOR TYPE, 0 = KA/KI, -1 = KL10
   421	030042	777777	777777		MONFLG:	-1		;DIAG MONITOR SPECIAL USER FLAG
   422	030043	000000	000000		MONCTL:	0		;DIAG MON/SYS EXR FLAG
   423	030044	000000	000000		MONTEN:	0		;-1= LOADED BY 10
   424	030045	000000	000000		CLOCKF:	0		;CLOCK TICKED FLAG
   425	030046	000000	000000		CONSW:	0		;CONSOLE SWITCH SETTINGS
   426	030047	000000	000000		PASCNT:	0		;PROGRAM PASS COUNT
   427	030050	000000	000000		RUNFLG:	0		;PROGRAM RUN FLAG
   428	030051	000000	000000		TESTPC:	0		;SUBTEST PC
   429	030052	000000	000000		ERRPC:	0		;ERROR PC
   430	030053	000000	000000		ERRTLS:	0		;ERROR TOTALS
   431	030054	000000	000000		TICKS:	0		;PROGRAM RUNNING TIME
   432	030055	000000	000000		MARGIN:	0		;KI10 MARGIN WORD VALUE
   433	030056	000000	000000		$ONETM:	0		;SUBROUTINE INITIALIZATION FLAG
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0020

   434					S^;*********************************************************************^
   435					;*SPECIAL PROGRAM DISPATCH ADDRESSES
   436					S^;*********************************************************************^
   437
   438	030057	037 12 0 00 000004 	BEGEND:	ENDUUO		;END OF PASS
   439	030060	254 00 0 00 030010 	$BEND1:	JRST	BEGIN1	;KEEP RUNNING PROGRAM
   440	030061	037 16 0 00 000004 	$BEND2:	EOPUUO		;END OF PROGRAM - NO RETURN
   441	030062	254000	030660		CNTLC:	SADR5		;CONTROL C XFER ADDRESS
   442	030063	254000	030660		ALTMGO:	SADR6		;ALTMODE XFER ADDRESS
   443	030064				CPOPJ1:			;SKIP RETURN
   444	030064	350 00 0 17 000000 	UUOSKP:	AOS	(P)	;SKIP RETURN FROM UUO
   445	030065				CPOPJ:			;NON-SKIP REGULAR RETURN
   446	030065	263 17 0 00 000000 	UUOEXT:	RTN		;UUO RETURN
   447	030066	255 00 0 00 000000 	UUORTN:	JFCL		;ADDITIONAL USERS UUO ROUTINE
   448	030067	255 00 0 00 000000 	$UORTX:	JFCL		;ADDITIONAL UUO LINKAGE
   449	030070	255 00 0 00 000000 	$UUOER:	JFCL		;INITED AS (JRST $UOERX)
   450	030071	255 00 0 00 000000 	$ITRHL:	JFCL		;ADDITIONAL INTERRUPT LINKAGE
   451	030072	255 00 0 00 000000 	$ITRX1:	JFCL		; "
   452	030073	255 00 0 00 000000 	$USRHL:	JFCL		; "
   453	030074	255 00 0 00 000000 	$RSRTX:	JFCL		;ADDITIONAL POWER FAIL LINKAGE
   454	030075	255 00 0 00 000000 	$RSRTY:	JFCL		; "
   455	030076	255 00 0 00 000000 	RESRT1:	JFCL		; INITED AS (JRST RESRTX)
   456	030077	255 00 0 00 000000 	RESRT2:	JFCL		; "
   457	030100	255 00 0 00 000000 	$PARER:	JFCL		;ADDITIONAL PARITY ERROR LINKAGE
   458	030101	255 00 0 00 000000 	ERMORE:	JFCL		;ADDITIONAL ERROR HANDLER LINKAGE
   459	030102	254 04 0 00 030102 		HALT	.	;IMPROPER TRANSFER HALT
   460
   461	030103	000000	000000		$PSHER:	0		;INITED AS (JRST PSHERR)
   462	030104	000000	000000		ITRCH1:	0		;PC & FLAGS OF CURRENT INTERRUPT
   463	030105	000000	000000			0		;INITED AS (JRST $ITRC1)
   464
   465					S^;*********************************************************************^
   466					;*PROCESSOR CONTROL STORAGE
   467					S^;*********************************************************************^
   468
   469	030106	000000	000000		$ACC0:	0		;INTERRUPT SAVED AC0
   470	030107	000000	000000		$SVPI:	0		;INTERRUPT SAVED PI
   471	030110	000000	000000		$SVAPR:	0		;INTERRUPT SAVED APR
   472	030111	000000	000000		$SVPAG:	0		;INTERRUPT SAVED PAG (DATAI)
   473	030112	000000	000000		$SPAG1:	0		;INTERRUPT SAVED PAG (CONI)
   474
   475	030113	000000	000000		$SVUUO:	0		;CURRENT USERS UUO
   476	030114	000000	000000		$SVUPC:	0		;PC OF CURRENT USERS UUO
   477
   478	030115	000000	000000		REPTU:	0		;REPEAT UUO ITERATIONS
   479	030116	000000	000000		SCOPE:	0		;ERROR HANDLER SCOPE LOOP FLAG
   480	030117	000000	000000		%CORFLG:0		; " CORRECT FLAG
   481	030120	000000	000000		%COREC:	0		; " CORRECT DATA
   482	030121	000000	000000		%ACTFL:	0		; " ACTUAL FLAG
   483	030122	000000	000000		%ACTUL:	0		; " ACTUAL DATA
   484	030123	000000	000000		%DISCR:	0		; " DISCREPENCY DATA
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 4
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0021

   485					S^;*********************************************************************^
   486					;*UUO DISPATCH TABLE
   487					S^;*********************************************************************^
   488						XLIST
   489						LIST
   490	030124	030070	030070		UUODIS:	LUUO1,,$UUOER
   491	030125	030070	030070			LUUO3,,LUUO2
   492	030126	030070	030070			LUUO5,,LUUO4
   493	030127	030070	030070			LUUO7,,LUUO6
   494	030130	030070	030070			LUUO11,,LUUO10
   495	030131	030070	030070			LUUO13,,LUUO12
   496	030132	030070	030070			LUUO15,,LUUO14
   497	030133	030070	030070			LUUO17,,LUUO16
   498	030134	030070	030070			LUUO21,,LUUO20
   499	030135	030070	030070			LUUO23,,LUUO22
   500	030136	030070	030070			LUUO25,,LUUO24
   501	030137	030070	030070			LUUO27,,LUUO26
   502	030140	030070	030070			LUUO31,,LUUO30
   503	030141	030070	030070			LUUO33,,LUUO32
   504
   505					S^;*********************************************************************^
   506					;*MEMORY MANAGMENT STORAGE
   507					S^;*********************************************************************^
   508
   509	030142	000000	000000		DF22F:	0		;DF10 CONTROL FLAG, 0 = 18, -1 = 22 BIT
   510	030143	000000	000000		MAPNEW:	0		;MEMORY MAPPING CONTROL FLAG, -1 = 4096K MAPPING
   511	030144	000000	000000		MEMTOT:	0		;TOTAL MEMORY SIZE IN K (1024.)
   512	030145	000000	000000		MEMLOW:	0		;LOWEST USABLE MEMORY
   513	030146				MEMSIZ:	BLOCK ^D41	;MEMORY SEGMENT POINTER TABLE
   514
   515					S^;*********************************************************************^
   516					;*PRINT CONTROL STORAGE
   517					S^;*********************************************************************^
   518
   519	030217	000000	000000		PNTFLG:	0		;PRINT FLAG, -1 WHILE IN PRINT ROUTINE
   520	030220	000000	000000		PNTENB:	0		;PRINT ENABLE
   521	030221	000000	000000		PDISF:	0		;PRINT DISABLED FLAG
   522	030222	000000	000000		PNTINH:	0		;INHIBIT PRINT INPUT CHECKS
   523	030223	000000	000000		PNTSPC:	0		;PRINT SPACE CONTROL
   524	030224	000000	000000		OPTIME:	0		;TYPE-IN WAIT TIME
   525	030225	000000	000000		$TWCNT:	0		;TIME WAITED
   526	030226	000000	000000		$DVOFF:	0		;LOGICAL DEVICE INITED FLAG
   527	030227	000000	000000		TTYFIL:	0		;TTY EXEC FILLERS FLAG
   528	030230	000000	000000		TTYSPD:	0		;TTY EXEC BAUD RATE
   529	030231	000000	000000		$TTCHR:	0		;ACTUAL TYPED IN CHAR
   530	030232	000000	000000		$CHRIN:	0		;UPPER CASED & PARITY STRIPPED CHAR
   531	030233	000000	000000		$TYPNB:	0		;TYPED IN NUMBER
   532	030234	000000	000000		$CRLF:	0		;FREE CR/LF FLAG
   533	030235	000000	000000		$TABF:	0		;TAB CONVERSION FLAG
   534	030236	000000	000000		$FFF:	0		;FORM FEED CONVERSION FLAG
   535	030237	000000	000000		$VTF:	0		;VERTICAL TAB CONVERSION FLAG
   536	030240	000000	000000		USRLFF:	0		;USER LF FILLERS
   537	030241	000000	000000		USRCRF:	0		;USER CR FILLERS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 5
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0022

   538					S^;*********************************************************************^
   539					;*THE FOLLOWING MISCELLANEOUS PRINT CHARACTERS ARE INCLUDED
   540					;*TO FACILITATE PRINTING AND ARE CALLED AS FOLLOWS:
   541					;*	MOVEI	NAME
   542					;*	PNTA		;OR PNTAF
   543					S^;*********************************************************************^
   544
   545	030242				CRLF:	ASCII/
   546	030242	015 012 000 000 000 	/
   547	030243				CRLF2:	ASCII/
   548
   549	030243	015 012 015 012 000 	/
   550	030244	054 000 000 000 000 	COMMA:	ASCII/,/
   551	030245	056 000 000 000 000 	PERIOD:	ASCII/./
   552	030246	040 000 000 000 000 	SPACE:	ASCII/ /
   553	030247	011 000 000 000 000 	TAB:	ASCII/	/
   554	030250				MINUS:
   555	030250	055 000 000 000 000 	HYPEN:	ASCII/-/
   556	030251	053 000 000 000 000 	PLUS:	ASCII/+/
   557	030252	052 000 000 000 000 	AST:	ASCII/*/
   558	030253	100 000 000 000 000 	ATSIN:	ASCII/@/
   559	030254	050 000 000 000 000 	LFP:	ASCII/(/
   560	030255	051 000 000 000 000 	RTP:	ASCII/)/
   561	030256	007 0000000000 		BELL:	BYTE (7) 007
   562	030257	077 000 000 000 000 	QUEST:	ASCII/?/
   563	030260	057 000 000 000 000 	SLASH:	ASCII!/!
   564	030261	044 000 000 000 000 	DOLLAR:	ASCII/$/
   565	030262	000000	000012		RADIX:	^D10			;DECIMAL PRINT RADIX
   566	030263	000000	000040		RADLSP:	40			;DECIMAL PRINT LEADING CHAR
   567	030264	000000	000012		RADLSC:	^D10			;DECIMAL PRINT LEADING CHAR COUNT
   568
   569					S^;*********************************************************************^
   570					;*USER MODE OUTPUT FILE INFORMATION
   571					S^;*********************************************************************^
   572
   573	030265				$OBUF:	BLOCK	3		;LOGICAL FILE OUTPUT BUFFER HEADER
   574	030270	60 62 51 56 64 00 	$OUTNM:	SIXBIT	/PRINT/		;FILE NAME
   575	030271	60 56 64 00 00 00 	$OUTEX:	SIXBIT	/PNT/		;FILE NAME EXTENSION
   576	030272					BLOCK	2
   577
   578					S^;*********************************************************************^
   579					;*DISK UPDATE MODE FILE INFORMATION
   580					S^;*********************************************************************^
   581
   582	030274				$IBUF:	BLOCK	3
   583	030277	60 62 51 56 64 00 	$INNM:	SIXBIT	/PRINT/
   584	030300	60 56 64 00 00 00 	$INEXT:	SIXBIT	/PNT/
   585	030301					BLOCK	2
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 6
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0023

   586					S^;*********************************************************************^
   587					;*PUSHDOWN LIST CONTROL INFORMATION
   588					S^;*********************************************************************^
   589
   590	030303	777577	030303		PLIST:	PLIST-PLISTE,,PLIST
   591	030304				PLISTS:	BLOCK	200
   592	030504	000000	000000		PLISTE:	0		;END OF PUSHDOWN LIST
   593
   594					S^;*********************************************************************^
   595					;*POWER LINE CLOCK FREQUENCY FLAG
   596					S^;*********************************************************************^
   597
   598	030505	000000	000000		CYCL60:	0	;0 = 60, -1 = 50 CYCLE
   599
   600					S^;*********************************************************************^
   601					;*KL10 CACHE CONTROL FLAGS
   602					S^;*********************************************************************^
   603
   604	030506	000000	000000		CSHFLG:	0	;ALLOW CACHE IF 0
   605	030507	000000	000000		CSHMEM:	0	;CACHE MEMORY SEGMENTS IF 0
   606
   607					S^;*********************************************************************^
   608					;*NUMBER INPUT DIGIT FLAG
   609					S^;*********************************************************************^
   610
   611	030510	000000	000000		TTNBRF:	0	;-1 IF ANY DIGIT TYPED
   612
   613					S^;*********************************************************************^
   614					;*KL10 & KI10 "INHPAG" SWITCH PAGING PREVENTION
   615					S^;*********************************************************************^
   616
   617	030511	000000	000000		PVPAGI:	0	;IF NON-ZERO, OVERRIDE "INHPAG" SWITCH ACTION
   618
   619					S^;*********************************************************************^
   620					;*ERROR REPORTING ROUTINE ADDITIONAL USERS CONTROL INSTRUCTIONS
   621					S^;*********************************************************************^
   622
   623	030512	000000	000000		%ERHI1:	0	;IF NON-ZERO, XCT'D AT START OF %ERUUO
   624	030513	000000	000000		%ERHI2:	0	;IF NON-ZERO, XCT'D AT END OF %ERUUO
   625	030514	000000	000000		%ERHI3:	0	;IF NON-ZERO, XCT'D AFTER "PC" OF %ERUUO
   626
   627					S^;*********************************************************************^
   628					;*SPECIAL USERS UUO INTERCEPT INSTRUCTION
   629					S^;*********************************************************************^
   630
   631	030515	000000	000000		$$UUO:	0	;IF NON-ZERO, XCT'D AT START OF $UORTN
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 7
FIXED	KSM	28-Mar-78 11:28		*FIXED* FIXED CONTROL AND DISPATCH STORAGE, MARCH 1978                             SEQ 0024

   632					S^;*********************************************************************^
   633					;*USER MODE MONITOR TYPE FLAG
   634					S^;*********************************************************************^
   635
   636	030516	000000	000000		MONTYP:	0	;0 = TOPS10, -1 = TOPS20
   637
   638					S^;*********************************************************************^
   639					;*SPECIAL USERS MUUO INTERCEPT INSTRUCTION
   640					S^;*********************************************************************^
   641
   642	030517	000000	000000		$$MUUO:	0	;IF NON-ZERO, XCT'D AT START OF MUUOER
   643
   644					S^;*********************************************************************^
   645					;*SPECIAL USERS USER MODE OUTPUT ERROR INTERCEPT INSTUCTION
   646					S^;*********************************************************************^
   647
   648	030520	000000	000000		$$OUTER:0	;IF NON-ZERO, XCT'D AT END OF USER MODE ERROR
   649
   650					S^;*********************************************************************^
   651					;*"SWITCH" CALL USAGE CONTROL
   652					S^;*********************************************************************^
   653
   654	030521	000000	000000		$$TOGGLE:0	;IF NON-ZERO, USE C(CONSW) FOR SWITCHES
   655
   656					S^;*********************************************************************^
   657					;*SPECIAL USERS ALTMODE SWITCH CALL INTERCEPT INSTRUCTIONS
   658					S^;*********************************************************************^
   659
   660	030522	000000	000000		$$TAX1:	0	;IF NON-ZERO, XCT'D AT START OF ALTMODE SWITCH CALL
   661	030523	000000	000000		$$TAX2:	0	;IF NON-ZERO, XCT'D AT END OF ALTMODE SWITCH CALL
   662
   663					S^;*********************************************************************^
   664					;*SM10 (KS-10) PROCESSOR TYPE FLAG
   665					S^;*********************************************************************^
   666
   667	030524	000000	000000		SM10:	0	;IF -1 THIS IS AN KS-10
   668
   669					S^;*********************************************************************^
   670					;*RIGHT HALF SWITCHES PROMPT TABLE ADDRESS
   671					S^;*********************************************************************^
   672
   673	030525	000000	000000		SWPTAB:	0	;0 = NO PROMPT, ADR = ADR OF SIXBIT PROMPT TABLE
   674
   675					S^;*********************************************************************^
   676					;*SPECIAL FUTURE EXPANSION ROOM
   677					S^;*********************************************************************^
   678
   679					S^;*********************************************************************^
   680					;*END OF FIXED STORAGE
   681					S^;*********************************************************************^
   682
   683	030577					LOC	30577
   684	030577	000000	000000		ENDFIX:	0		;END OF FIXED STORAGE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0025

   685					SUBTTL	*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978
   686
   687			000000		AC0=	0
   688			030000		DIAGNOS=30000		;PDP-10 DIAGNOSTIC START ADDRESS
   689			010000		DDT=	10000		;PDP-10 DDT START ADDRESS
   690			020000		DIAMON=	20000		;PDP-10 DIAGNOSTIC LOADER START ADDRESS
   691
   692					;KS-10 EPT COMMUNICATION AREA
   693
   694			000440		$STD=	440		;PDP-10 DIAGNOSTIC START ADDRESS
   695			000441		$DDT=	441		;PDP-10 DDT START ADDRESS
   696			000442		$STL=	442		;PDP-10 LOADER START ADDRESS
   697			000443		$STM=	443		;PDP-10 MONITOR START ADDRESS
   698
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0026

   699					;SPECIAL "FIXED" REASSIGNMENTS
   700
   701			030600			$$LOC=.			;SAVE CURRENT LOCATION
   702
   703	030000					LOC	30000
   704	030000	254 00 0 00 030600 	$$BEGIN:JRST	$$START		;SETUP SPECIAL START
   705	030001	254 00 0 00 030600 		JRST	$$START		;"DIAMON" CHAIN START ADDRESS
   706
   707	000440					LOC	440
   708	000440	254 00 0 00 030000 	$STD:	JRST	BEGIN		;SETUP FOR "STD"
   709
   710	030057					LOC	30057
   711	030057	254 00 0 00 030613 	$BEGEND:JRST	$SPBEND		;SETUP SPECIAL "BEGEND"
   712
   713					;SPECIAL MUUO, TRAP & PAGE FAIL SETUP
   714
   715	000420					LOC	420
   716	000420	254 04 0 00 000420 	$$420:	HALT	.
   717	000421	255 00 0 00 000000 	$$421:	JFCL			;OVERFLOW
   718	000422	254 04 0 00 000422 	$$422:	HALT	.		;PUSHDOWN OVERFLOW
   719	000423	254 04 0 00 000423 	$$423:	HALT	.		;TRAP 3
   720	000424	000000	000000		$$424:	0			;MMUO
   721	000425	000000	000000		$$425:	0			;MMUO PC
   722	000426	000000	000000		$$426:	0			;KS-10 PROCESS CONTEXT
   723	000427	254 04 0 00 000427 	$$427:	HALT	.
   724	000430	000000	000427		$$430:	427			;MMUO NEW PC'S
   725	000431	000000	000427		$$431:	427
   726	000432	000000	000427		$$432:	427
   727	000433	000000	000427		$$433:	427
   728	000434	000000	000427		$$434:	427
   729	000435	000000	000427		$$435:	427
   730	000436	000000	000427		$$436:	427
   731	000437	000000	000427		$$437:	427
   732
   733	000500					LOC	500
   734	000500	000000	000000		$$500:	0			;KS-10 PAGE FAIL WORD
   735	000501	000000	000000		$$501:	0			;KS-10 PAGE FAIL PC
   736	000502	000000	000503		$$502:	503			;KS-10 PAGE FAIL NEW PC
   737	000503	254 04 0 00 000503 	$$503:	HALT	.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3
SPCCPU	KSM	28-Mar-78 11:24		*SPCCPU* SPECIAL BASIC CPU PROCESSOR CONTROL, MARCH 1978                           SEQ 0027

   738	030600					LOC	$$LOC		;RESET CURRENT LOCATION
   739
   740					;SPECIAL STARTUP SEQUENCE
   741
   742	030600	402 00 0 00 030037 	$$START:SETZM	USER
   743	030601	265 00 0 00 030602 		JSP	0,.+1		;IN USER MODE ?
   744	030602	603 00 0 00 010000 		TLNE	0,USERF
   745	030603	476 00 0 00 030037 		SETOM	USER		;YES, SET CONTROL WORD
   746	030604	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE ?
   747	030605	402 00 0 00 030037 		SETZM	USER		;YES, RUN AS EXEC
   748	030606	332 00 0 00 030037 		SKIPE	USER
   749	030607	254 00 0 00 030631 		JRST	START		;USER MODE, DON'T NEED CPU TYPE
   750
   751	030610	336 00 0 00 030044 	$STKIL:	SKIPN	MONTEN		;LOADED BY "DIAMON" ?
   752	030611	476 00 0 00 030024 		SETOM	ITRCNT		;NO, RUN FOREVER
   753	030612	254 00 0 00 030631 		JRST	START		;KS-10, NO ADDITIONAL SETUP
   754
   755					;SPECIAL "BEGEND" ROUTINE
   756
   757	030613	350 00 0 00 030047 	$SPBEND:AOS	PASCNT		;INCREMENT PASS COUNT
   758	030614	370 00 0 00 030024 		SOS	ITRCNT		;DECREMENT ITERATION COUNT
   759	030615	336 00 0 00 030037 	$SPB1:	SKIPN	USER
   760	030616	254 00 0 00 030624 		JRST	$SPBEX		;EXEC MODE
   761
   762	030617	332 00 0 00 030024 	$SPBUS:	SKIPE	ITRCNT		;USER MODE, COMPLETED ?
   763	030620	254 00 0 00 030660 		JRST	STARTA		;NO, KEEP RUNNING
   764	030621	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   765	030622	047 00 0 00 000012 		EXIT			;NO, RETURN TO MONITOR
   766	030623	254 00 1 00 030012 		JRST	@RETURN		;YES, RETURN TO "DIAMON"
   767
   768	030624	332 00 0 00 030024 	$SPBEX:	SKIPE	ITRCNT
   769	030625	254 00 0 00 030660 		JRST	STARTA		;NOT COMPLETED YET
   770	030626	336 00 0 00 030044 		SKIPN	MONTEN		;DONE, LOADED BY "DIAMON" ?
   771	030627	254 04 0 00 030000 		HALT	BEGIN		;NO, HALT AT BEGINNING
   772	030630	254 00 1 00 030012 		JRST	@RETURN		;DONE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
DSKAA1	MAC	28-Mar-78 09:38		DIAGNOSTIC SECTION                                                                 SEQ 0028

   773					SUBTTL	DIAGNOSTIC SECTION
   774
   775	030631	402 00 0 00 030037 	START:	SETZM	USER#		;CLEAR USER CONTROL WORD
   776	030632	265 00 0 00 030633 		JSP	0,.+1		;GET FLAGS
   777	030633	603 00 0 00 010000 		TLNE	USERF		;IN USER MODE?
   778	030634	476 00 0 00 030037 		SETOM	USER		;YES, SET USER CONTROL WORD
   779	030635	336 00 0 00 030042 		SKIPN	MONFLG		;SPECIAL USER MODE?
   780	030636	402 00 0 00 030037 		SETZM	USER		;YES, CLEAR USER CONTROL WORD
   781	030637	336 00 0 00 030037 		SKIPN	USER
   782	030640	254 00 0 00 030660 		JRST	STARTA
   783	030641	331 00 0 00 030043 		SKIPL	MONCTL
   784	030642	051 03 0 00 030644 		TTCALL	3,PGMNAM
   785	030643	254 00 0 00 030660 		JRST	STARTA
   786
   787	030644				PGMNAM:	ASCIZ/
   788	030644	015 012 104 105 103 	DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) [DSKAA]
   789	030645	123 131 123 124 105 
   790	030646	115 055 062 060 062 
   791	030647	060 040 102 101 123 
   792	030650	111 103 040 111 116 
   793	030651	123 124 122 125 103 
   794	030652	124 111 117 116 040 
   795	030653	104 111 101 107 116 
   796	030654	117 123 124 111 103 
   797	030655	040 050 061 051 040 
   798	030656	133 104 123 113 101 
   799	030657	101 135 015 012 000 	/
   800
   801					;BASIC INSTRUCTION TEST (1)
   802					;THE TEST IS DESIGNED FOR INITIAL DEBUGGING OF
   803					;PROCESSOR HARDWARE AND TO DETECT (SOLID) FAILURES
   804					;IN THE FIELD.
   805
   806
   807	030660	254 00 0 00 030661 	STARTA:	JRST	.+1
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0029

   808					SUBTTL	TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS
   809
   810					;NOTE: AN "*" IN THE COMMENT FIELD OF AN INSTRUCTION INDICATES THAT IT IS THE TESTED
   811					;INSTRUCTION.
   812					;**********
   813
   814					;THIS TEST VERIFIES THAT SKIPA ALWAYS SKIPS THE NEXT INSTRUCTION
   815
   816			030661		A00=.
   817	030661	334 00 0 00 000000 	A12500:	SKIPA			;*SKIPA SHOULD ALWAYS SKIP THE NEXT INSTRUCTION
   818	030662	254 04 0 00 000000 		HALT			;IF PROGRAM HALTS, SKIPA DID NOT SKIP
   819
   820					;IF PROGRAM HANGS UP ON SKIPA INSTRUCTION, CHECK AB PC EN [ABC], AB PC F/F [ABC],
   821					;AB PC B [ABC OR AB], AB PC (FETCH) EN [ABC], IR SKIPS [IR3], IR SKIPX [IR1],
   822					;IR 3XX [IR1], IR BITS 00 - 08 [IR1], F CYC ACT EN C [FI], FT6 F/F [F2],
   823					;PC CLOCK EN [PCC],  ET2 J F/F [E], PC CLK (ET2) EN [PCC], ADZ COND P [ADZ] AND
   824					;ADZ COND R [ADZ], PC CLOCK A [PCC], PC CLOCK B [PCC]
   825
   826					;IF PROGRAM HALTED ON HALT INSTRUCTION, CHECK ST1 COND [ST2]
   827
   828					;**********
   829
   830					;THIS TEST VERIFIES THAT JUMP NEVER JUMPS
   831
   832	030663	320 00 0 00 030664 	A15000:	JUMP	.+1		;*JUMP SHOULD NEVER JUMP
   833	030664	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF JUMP IS SUCCESSFUL
   834	030665	254 04 0 00 000000 		HALT			;HALT IF JUMP FAILS
   835
   836					;IF PROGRAM HANGS UP ON JUMP .+1 INSTRUCTION, THE JUMP INSTRUCTION
   837					;MAY HAVE FAILED.  CHECK ST1 COND [ST2], ST INST FET ST1 EN [ST2], ET2 D F/F [E],
   838					;IR JUMPS [IR1], IR JUMPX [IR1]
   839
   840					;**********
   841					;THIS TEST VERIFIES THAT JUMP NEVER JUMPS
   842
   843	030666	320 00 0 00 030670 	A15100:	JUMP	.+2		;*JUMP SHOULD NEVER JUMP
   844	030667	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF JUMP IS SUCCESSFUL
   845	030670	254 04 0 00 000000 		HALT			;HALT IF JUMP FAILS
   846
   847					;AB PC EN [ABC]
   848
   849					;**********
   850
   851					;THIS TEST VERIFIES THAT JUMPA .+1 ALWAYS JUMPS TO THE NEXT INSTRUCTION
   852
   853	030671	324 00 0 00 030672 	A12700:	JUMPA	.+1		;*JUMPA .+1 SHOULD NEVER JUMP
   854	030672	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF JUMPA IS SUCCESSFUL
   855	030673	254 04 0 00 000000 		HALT			;HALT IF JUMPA .+1 FAILED
   856
   857					;**********
   858
   859					;THIS TEST VERIFIES THAT JUMPA JUMPS TO THE LOCATION SPECIFIED BY E WHEN E=.+2
   860
   861	030674	324 00 0 00 030676 	A12600:	JUMPA	.+2		;*JUMPA .+2 SHOULD ALWAYS SKIP THE NEXT INSTRUCTION
   862	030675	254 04 0 00 000000 		HALT			;PROGRAM HALTS HERE IF JUMPA .+2 FAILS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 2-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0030

   863
   864					;ST1 COND [ST2]
   865
   866					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0031

   867					;THIS TEST VERIFIES THAT SKIPA IS DATA INDEPENDENT.  HENCE, IT ALWAYS SKIPS THE NEXT
   868					;INSTRUCTION.
   869					;THE MOVE [0] INSTRUCTION IS USED TO TEST THE DATA INDEPENDENCE OF SKIPA.
   870
   871	030676	200 00 0 00 035000 	A100:	MOVE	[0]		;PRESET LOCATION 0 TO ALL ZEROS
   872	030677	334 00 0 00 000000 		SKIPA			;*SKIPA SHOULD ALWAYS SKIP THE NEXT INSTRUCTION
   873						STOP^
   874	030700	254 04 0 00 030701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   875	030701	324 00 0 00 030702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   876									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   877									;IN THE SUBTEST) TO LOOP ON ERROR^
   878
   879					;**********
   880					;THIS TEST INSURES THAT SKIPA IS DATA INDEPENDENT.  HENCE, IT ALWAYS SKIPS THE NEXT
   881					;INSTRUCTION.
   882					;THE MOVE [-1] INSTRUCTION IS USED TO TEST THE DATA INDEPENDENCE OF SKIPA.
   883
   884	030702	200 00 0 00 035001 	A200:	MOVE	[-1]		;PRESET LOCATION 0 TO ALL ONES
   885	030703	334 00 0 00 000000 		SKIPA			;*SKIPA SKOULD ALWAYS SKIP THE NEXT INSTRUCTION
   886						STOP^
   887	030704	254 04 0 00 030705 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   888	030705	324 00 0 00 030706 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   889									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   890									;IN THE SUBTEST) TO LOOP ON ERROR^
   891
   892					;COND P [ADZ]
   893
   894					;**********
   895					;THIS TEST VERIFIES THAT SKIPGE SKIPS THE NEXT INSTRUCTION WHEN C(E)
   896					;IS ALL ZEROS.  THE MOVE INSTRUCTION IS USED TO LOAD E WITH ALL ZEROS.
   897
   898	030706	200 00 0 00 035000 	A300:	MOVE	[0]		;PRESET E TO ALL ZEROS
   899	030707	335 00 0 00 000000 		SKIPGE			;*SKIPGE SHOULD SKIP THE NEXT INSTRUCTION
   900						STOP^
   901	030710	254 04 0 00 030711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   902	030711	324 00 0 00 030712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   903									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   904									;IN THE SUBTEST) TO LOOP ON ERROR^
   905
   906					;COND R [ADZ], AD00 S-A-1, AD AR + EN [ADAP], AD LT AR + EN [ADAP],
   907					;AD RT AR + EN [ADAP], AD AR + EN C [ADAP], F CYC ACT EN A [F1]
   908
   909					;**********
   910
   911					;THIS TEST VERIFIES THAT SKIP IS DATA INDEPENDENT.  HENCE, SKIP NEVER SKIPS.  IT ALWAYS
   912					;CONTINUES ON TO THE NEXT INSTRUCTION.
   913
   914	030712	200 00 0 00 035001 	A400:	MOVE	[-1]		;PRESET E TO ALL ONES
   915	030713	330 00 0 00 000000 		SKIP			;*SKIP SHOULD NEVER SKIP THE NEXT INSTRUCTION
   916	030714	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
   917						STOP^
   918	030715	254 04 0 00 030716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   919	030716	324 00 0 00 030717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   920									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   921									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 3-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0032

   922
   923					;PC CHANGE [PCC], PC CHANGE A [PCC], SEE MEMORY CONTROL DWGS [MC1-4]
   924
   925					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0033

   926					;THIS TEST VERIFIES THAT SKIPGE WILL NOT SKIP THE NEXT INSTRUCTION WHEN C(E) IS
   927					;NEGATIVE.  THE MOVE INSTRUCTION LOADS E WITH -1, A NEGATIVE NUMBER.
   928
   929	030717	200 00 0 00 035001 	A500:	MOVE	[-1]		;PRESET E WITH ALL ONES, A NEGATIVE NUMBER
   930	030720	335 00 0 00 000000 		SKIPGE			;*SKIPGE SHOULD NOT SKIP THE NEXT INSTRUCTION
   931	030721	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
   932						STOP^
   933	030722	254 04 0 00 030723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   934	030723	324 00 0 00 030724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   935									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   936									;IN THE SUBTEST) TO LOOP ON ERROR^
   937
   938					;IF MOVE INSTRUCTION FAILED, CHECK MOVX-: FCE [F1], -IR XXXI [IR1], -IR XXXM [IR1], 
   939					;IR HWTFWT [IR3], IR FWT [IR2], IR2XX [IR1]
   940
   941					;IF SKIPGE FAILED, CHECK SKIPX: FCE [F1]
   942
   943					;**********
   944
   945					;THIS TEST VERIFIES THAT SKIPN WILL NOT SKIP THE NEXT INSTRUCTION WHEN
   946					;C(E) IS ZERO.  THE MOVE INSTRUCTION  LOADS E WITH ALL ZEROS.
   947
   948	030724	200 00 0 00 035000 	A600:	MOVE	[0]		;PRESET E WITH ALL ZEROS
   949	030725	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD NOT SKIP THE NEXT INSTRUCTION
   950	030726	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
   951						STOP^
   952	030727	254 04 0 00 030730 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   953	030730	324 00 0 00 030731 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   954									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   955									;IN THE SUBTEST) TO LOOP ON ERROR^
   956
   957					;**********
   958
   959					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT SHOULD SKIP
   960					;THE NEXT INSTRUCTION WHEN C(E) IS NON-ZERO.  THE MOVE INSTRUCTION LOADS
   961					;E WITH -1, A NON-ZERO NUMBER.
   962
   963	030731	200 00 0 00 035001 	A700:	MOVE	[-1]		;PRESET E WITH ALL ONES, A NON-ZERO NUMBER
   964	030732	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
   965						STOP^
   966	030733	254 04 0 00 030734 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   967	030734	324 00 0 00 030735 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   968									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   969									;IN THE SUBTEST) TO LOOP ON ERROR^
   970
   971					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0034

   972					;THIS TEST VERIFIES THAT SKIPE IS DATA DEPENDENT.  HENCE, IT SHOULD NOT
   973					;SKIP THE NEXT INSTRUCTION WHEN C(E) IS NON-ZERO.  THE MOVE INSTRUCTION LOADS E
   974					;WITH -1, A NON-ZERO NUMBER.
   975
   976	030735	200 00 0 00 035001 	A1000:	MOVE	[-1]		;PRESET E WITH ALL ONES, A NON-ZERO NUMBER
   977	030736	332 00 0 00 000000 		SKIPE			;*SKIPE SHOULD NOT SKIP THE NEXT INSTRUCTION
   978	030737	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
   979						STOP^
   980	030740	254 04 0 00 030741 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   981	030741	324 00 0 00 030742 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   982									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   983									;IN THE SUBTEST) TO LOOP ON ERROR^
   984
   985					;**********
   986
   987					;THIS TEST VERIFIES THAT SKIPE IS DATA DEPENDENT.  HENCE, IT SHOULD SKIP
   988					;THE NEXT INSTRUCTION WHEN C(E) IS ZERO.  THE MOVE INSTRUCTION LOADS ALL
   989					;ZEROS INTO E.
   990
   991	030742	200 00 0 00 035000 	A1100:	MOVE	[0]		;PRESET E TO ALL ZEROS
   992	030743	332 00 0 00 000000 		SKIPE			;*SKIPE SHOULD SKIP THE NEXT INSTRUCTION
   993						STOP^
   994	030744	254 04 0 00 030745 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
   995	030745	324 00 0 00 030746 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
   996									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
   997									;IN THE SUBTEST) TO LOOP ON ERROR^
   998
   999					;**********
  1000
  1001					;THIS TEST VERIFIES THAT SKIP IS DATA INDEPENDENT.  HENCE, IT NEVER SKIPS.  IT ALWAYS
  1002					;CONTINUES ON TO THE NEXT INSTRUCTION.
  1003
  1004	030746	200 00 0 00 035000 	A1200:	MOVE	[0]		;PRESET E TO ALL ZEROS
  1005	030747	330 00 0 00 000000 		SKIP			;*SKIP SHOULD NEVER SKIP THE NEXT INSTRUCTION
  1006	030750	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
  1007						STOP^
  1008	030751	254 04 0 00 030752 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1009	030752	324 00 0 00 030753 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1010									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1011									;IN THE SUBTEST) TO LOOP ON ERROR^
  1012
  1013					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0035

  1014					;THIS TEST VERIFIES THAT SKIPL IS DATA DEPENDENT.  HENCE, IT WILL NOT SKIP THE NEXT
  1015					;INSTRUCTION WHEN C(E) IS NOT NEGATIVE.  THE MOVE INSTRUCTION IS USED TO LOAD
  1016					;E WITH ALL ZEROS, A NON-NEGATIVE NUMBER.
  1017
  1018	030753	200 00 0 00 035000 	A1300:	MOVE	[0]		;PRESET E T0 ZERO, A NON-NEGATIVE NUMBER
  1019	030754	331 00 0 00 000000 		SKIPL			;*SKIPL SHOULD NOT SKIP THE NEXT INSTRUCTION
  1020	030755	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
  1021						STOP^
  1022	030756	254 04 0 00 030757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1023	030757	324 00 0 00 030760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1024									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1025									;IN THE SUBTEST) TO LOOP ON ERROR^
  1026
  1027					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0036

  1028					;THIS TEST VERIFIES THAT SKIPL IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1029					;INSTRUCTION WHEN C(E) IS NEGATIVE.  THE MOVE INSTRUCTION IS USED TO LOAD E WITH -1,
  1030					;A NEGATIVE NUMBER.
  1031
  1032	030760	200 00 0 00 035001 	A1400:	MOVE	[-1]		;PRESET E TO -1, A NEGATIVE NUMBER
  1033	030761	331 00 0 00 000000 		SKIPL			;*SKIPL SHOULD SKIP THE NEXT INSTRUCTION
  1034						STOP^
  1035	030762	254 04 0 00 030763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1036	030763	324 00 0 00 030764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1037									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1038									;IN THE SUBTEST) TO LOOP ON ERROR^
  1039
  1040					;**********
  1041
  1042					;THIS TEST VERIFIES THAT SKIPG IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1043					;INSTRUCTION WHEN C(E) IS GREATER THAN ZERO.  THE MOVE INSTRUCTION IS USED TO LOAD
  1044					;E WITH A NON-ZERO POSITIVE NUMBER.
  1045
  1046	030764	200 00 0 00 035002 	A1500:	MOVE	[XWD 377777,-1]	;PRESET E TO 377777777777, A NON-ZERO POSITIVE NUMBER
  1047	030765	337 00 0 00 000000 		SKIPG			;*SKIPG SHOULD SKIP THE NEXT INSTRUCTION
  1048						STOP^
  1049	030766	254 04 0 00 030767 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1050	030767	324 00 0 00 030770 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1051									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1052									;IN THE SUBTEST) TO LOOP ON ERROR^
  1053
  1054					;**********
  1055
  1056					;THIS TEST VERIFIES THAT SKIPG IS DATA DEPENDENT.  HENCE, IT WILL NOT SKIP THE NEXT
  1057					;INSTRUCTION WHEN C(E) IS NOT GREATER THAN ZERO.  THE MOVE INSTRUCTION IS USED TO
  1058					;LOAD E WITH -1, A NUMBER NOT GREATER THAN ZERO.
  1059
  1060	030770	200 00 0 00 035001 	A1600:	MOVE	[-1]		;PRESET E TO -1, A NEGATIVE NUMBER
  1061	030771	337 00 0 00 000000 		SKIPG			;*SKIPG SHOULD NOT SKIP THE NEXT INSTRUCTION
  1062	030772	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
  1063						STOP^
  1064	030773	254 04 0 00 030774 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1065	030774	324 00 0 00 030775 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1066									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1067									;IN THE SUBTEST) TO LOOP ON ERROR^
  1068
  1069					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0037

  1070					;THIS TEST VERIFIES THAT SKIPL IS DATA  DEPENDENT.  HENCE, IT WILL NOT SKIP THE NEXT
  1071					;INSTRUCTION WHEN C(E) IS NON-NEGATIVE.  THE MOVE INSTRUCTION IS USED TO LOAD E WITH
  1072					;377777777777, A NON-NEGATIVE NUMBER.
  1073
  1074	030775	200 00 0 00 035002 	A1700:	MOVE	[XWD 377777,-1]	;PRESET E TO 377777777777, A NON-NEGATIVE NUMBER
  1075	030776	331 00 0 00 000000 		SKIPL			;*SKIPL SHOULD NOT SKIP THE NEXT INSTRUCTION
  1076	030777	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
  1077						STOP^
  1078	031000	254 04 0 00 031001 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1079	031001	324 00 0 00 031002 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1080									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1081									;IN THE SUBTEST) TO LOOP ON ERROR^
  1082
  1083					;**********
  1084
  1085					;THIS TEST VERIFIES THAT SKIPLE IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1086					;INSTRUCTION WHEN C(E) IS ZERO.  THE MOVE INSTRUCTION LOADS E WITH ALL ZEROS.
  1087
  1088	031002	200 00 0 00 035000 	A2000:	MOVE	[0]		;PRESET E TO ALL ZEROS
  1089	031003	333 00 0 00 000000 		SKIPLE			;*SKIPLE SHOULD SKIP THE NEXT INSTRUCTION
  1090						STOP^
  1091	031004	254 04 0 00 031005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1092	031005	324 00 0 00 031006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1093									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1094									;IN THE SUBTEST) TO LOOP ON ERROR^
  1095
  1096					;**********
  1097
  1098					;THIS TEST VERIFIES THAT SKIPLE IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1099					;INSTRUCTION WHEN E CONTAINS A NEGATIVE NUMBER.  THE MOVE INSTRUCTION IS USED TO LOAD
  1100					;E WITH 400000000000, A NEGATIVE NUMBER.
  1101
  1102	031006	200 00 0 00 035003 	A2100:	MOVE	[XWD 400000,0]	;PRESET E TO 400000000000, A NEGATIVE NUMBER.
  1103	031007	333 00 0 00 000000 		SKIPLE			;*SKIPLE SHOULD SKIP THE NEXT INSTRUCTION
  1104						STOP^
  1105	031010	254 04 0 00 031011 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1106	031011	324 00 0 00 031012 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1107									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1108									;IN THE SUBTEST) TO LOOP ON ERROR^
  1109
  1110					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0038

  1111					;THIS TEST VERIFIES THAT SKIPLE IS DATA DEPENDENT.  HENCE, IT WILL NOT SKIP THE NEXT
  1112					;INSTRUCTION WHEN E CONTAINS A POSITIVE NUMBER.  THE MOVE INSTRUCTION LOADS
  1113					;E WITH 377777777777, A POSITIVE NUMBER.
  1114
  1115	031012	200 00 0 00 035002 	A2200:	MOVE	[XWD 377777,-1]	;PRESET E TO 377777777777, A POSITIVE NUMBER
  1116	031013	333 00 0 00 000000 		SKIPLE			;*SKIPLE SHOULD NOT SKIP THE NEXT INSTRUCTION
  1117	031014	334 00 0 00 000000 		SKIPA			;SKIP HALT INSTRUCTION IF TEST PASSES
  1118						STOP^
  1119	031015	254 04 0 00 031016 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1120	031016	324 00 0 00 031017 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1121									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1122									;IN THE SUBTEST) TO LOOP ON ERROR^
  1123
  1124					;*********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0039

  1125					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1126					;INSTRUCTION ;WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1127					;LOAD 777000000000, A NON-ZERO NUMBER INTO E.
  1128
  1129	031017	200 00 0 00 035004 	A2300:	MOVE	[XWD 777000,0]	;PRESET E WITH 777000000000, A NON-ZERO NUMBER
  1130	031020	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1131						STOP^
  1132	031021	254 04 0 00 031022 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1133	031022	324 00 0 00 031023 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1135									;IN THE SUBTEST) TO LOOP ON ERROR^
  1136
  1137					;**********
  1138
  1139					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1140					;INSTRUCTION WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1141					;LOAD A NON-ZERO NUMBER, 377000000 INTO E.
  1142
  1143	031023	200 00 0 00 035005 	A2400:	MOVE	[XWD 377,0]	;PRESET E TO 377000000, A NON ZERO NUMBER
  1144	031024	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1145						STOP^
  1146	031025	254 04 0 00 031026 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1147	031026	324 00 0 00 031027 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1148									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1149									;IN THE SUBTEST) TO LOOP ON ERROR^
  1150
  1151					;**********
  1152
  1153					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1154					;INSTRUCTION WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1155					;LOAD E WITH A NON-ZERO NUMBER, 177000.
  1156
  1157	031027	200 00 0 00 035006 	A2500:	MOVE	[177000]	;PRESET E WITH 177000, A NON ZERO NUMBER
  1158	031030	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1159						STOP^
  1160	031031	254 04 0 00 031032 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1161	031032	324 00 0 00 031033 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1162									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1163									;IN THE SUBTEST) TO LOOP ON ERROR^
  1164
  1165					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0040

  1166					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1167					;INSTRUCTION WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1168					;LOAD 777, A NON-ZERO NUMBER INTO E.
  1169
  1170	031033	200 00 0 00 035007 	A2600:	MOVE	[777]		;PRESET E WITH 777, A NON-ZERO NUMBER
  1171	031034	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1172						STOP^
  1173	031035	254 04 0 00 031036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1174	031036	324 00 0 00 031037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1175									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1176									;IN THE SUBTEST) TO LOOP ON ERROR^
  1177
  1178					;**********
  1179
  1180					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1181					;INSTRUCTION WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1182					;LOAD E WITH 600000, A NON-ZERO NUMBER.
  1183
  1184	031037	200 00 0 00 035010 	A2700:	MOVE	[600000]	;PRESET E WITK 600000, A NON-ZERO NUMBER
  1185	031040	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1186						STOP^
  1187	031041	254 04 0 00 031042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1188	031042	324 00 0 00 031043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1189									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1190									;IN THE SUBTEST) TO LOOP ON ERROR^
  1191
  1192					;**********
  1193
  1194					;THIS TEST VERIFIES THAT SKIPN IS DATA DEPENDENT.  HENCE, IT WILL SKIP THE NEXT
  1195					;INSTRUCTION WHEN E CONTAINS A NON-ZERO NUMBER.  THE MOVE INSTRUCTION IS USED TO
  1196					;LOAD E WITH 400000000, A NON-ZERO NUMBER.
  1197
  1198	031043	200 00 0 00 035011 	A3000:	MOVE	[XWD 400,000]	;PRESET E WITH 400000000, A NON-ZERO NUMBER
  1199	031044	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1200						STOP^
  1201	031045	254 04 0 00 031046 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1202	031046	324 00 0 00 031047 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1203									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1204									;IN THE SUBTEST) TO LOOP ON ERROR^
  1205
  1206					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0041

  1207			003100		SN=3100
  1208			000000			ZZ=0
  1209
  1210					A3100:	REPEAT	^D36,
  1211					<;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1212					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1213					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1214					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1215					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1216					
  1217					SN=SN+1
  1218						ZZ=ZZ+ZZ
  1219						IFE	ZZ,<ZZ=1>
  1220						MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1221						SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1222						STOP
  1223					
  1224					;**********
  1225					>
  1226					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1227					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1228					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1229					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1230					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1231
  1232			003101		SN=SN+1
  1233			000000			ZZ=ZZ+ZZ
  1234			000001			IFE	ZZ,<ZZ=1>
  1235	031047	200 00 0 00 035012 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1236	031050	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1237						STOP^
  1238	031051	254 04 0 00 031052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1239	031052	324 00 0 00 031053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1240									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1241									;IN THE SUBTEST) TO LOOP ON ERROR^
  1242
  1243					;**********
  1244
  1245					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1246					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1247					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1248					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1249					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1250
  1251			003102		SN=SN+1
  1252			000002			ZZ=ZZ+ZZ
  1253						IFE	ZZ,<ZZ=1>
  1254	031053	200 00 0 00 035013 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1255	031054	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1256						STOP^
  1257	031055	254 04 0 00 031056 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1258	031056	324 00 0 00 031057 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1259									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1260									;IN THE SUBTEST) TO LOOP ON ERROR^
  1261
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0042

  1262					;**********
  1263
  1264					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1265					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1266					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1267					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1268					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1269
  1270			003103		SN=SN+1
  1271			000004			ZZ=ZZ+ZZ
  1272						IFE	ZZ,<ZZ=1>
  1273	031057	200 00 0 00 035014 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1274	031060	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1275						STOP^
  1276	031061	254 04 0 00 031062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1277	031062	324 00 0 00 031063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1278									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1279									;IN THE SUBTEST) TO LOOP ON ERROR^
  1280
  1281					;**********
  1282
  1283					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1284					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1285					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1286					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1287					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1288
  1289			003104		SN=SN+1
  1290			000010			ZZ=ZZ+ZZ
  1291						IFE	ZZ,<ZZ=1>
  1292	031063	200 00 0 00 035015 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1293	031064	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1294						STOP^
  1295	031065	254 04 0 00 031066 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1296	031066	324 00 0 00 031067 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1297									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1298									;IN THE SUBTEST) TO LOOP ON ERROR^
  1299
  1300					;**********
  1301
  1302					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1303					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1304					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1305					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1306					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1307
  1308			003105		SN=SN+1
  1309			000020			ZZ=ZZ+ZZ
  1310						IFE	ZZ,<ZZ=1>
  1311	031067	200 00 0 00 035016 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1312	031070	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1313						STOP^
  1314	031071	254 04 0 00 031072 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1315	031072	324 00 0 00 031073 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1316									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0043

  1317									;IN THE SUBTEST) TO LOOP ON ERROR^
  1318
  1319					;**********
  1320
  1321					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1322					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1323					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1324					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1325					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1326
  1327			003106		SN=SN+1
  1328			000040			ZZ=ZZ+ZZ
  1329						IFE	ZZ,<ZZ=1>
  1330	031073	200 00 0 00 035017 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1331	031074	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1332						STOP^
  1333	031075	254 04 0 00 031076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1334	031076	324 00 0 00 031077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1335									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1336									;IN THE SUBTEST) TO LOOP ON ERROR^
  1337
  1338					;**********
  1339
  1340					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1341					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1342					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1343					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1344					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1345
  1346			003107		SN=SN+1
  1347			000100			ZZ=ZZ+ZZ
  1348						IFE	ZZ,<ZZ=1>
  1349	031077	200 00 0 00 035020 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1350	031100	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1351						STOP^
  1352	031101	254 04 0 00 031102 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1353	031102	324 00 0 00 031103 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1354									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1355									;IN THE SUBTEST) TO LOOP ON ERROR^
  1356
  1357					;**********
  1358
  1359					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1360					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1361					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1362					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1363					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1364
  1365			003110		SN=SN+1
  1366			000200			ZZ=ZZ+ZZ
  1367						IFE	ZZ,<ZZ=1>
  1368	031103	200 00 0 00 035021 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1369	031104	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1370						STOP^
  1371	031105	254 04 0 00 031106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0044

  1372	031106	324 00 0 00 031107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1373									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1374									;IN THE SUBTEST) TO LOOP ON ERROR^
  1375
  1376					;**********
  1377
  1378					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1379					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1380					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1381					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1382					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1383
  1384			003111		SN=SN+1
  1385			000400			ZZ=ZZ+ZZ
  1386						IFE	ZZ,<ZZ=1>
  1387	031107	200 00 0 00 035022 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1388	031110	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1389						STOP^
  1390	031111	254 04 0 00 031112 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1391	031112	324 00 0 00 031113 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1392									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1393									;IN THE SUBTEST) TO LOOP ON ERROR^
  1394
  1395					;**********
  1396
  1397					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1398					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1399					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1400					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1401					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1402
  1403			003112		SN=SN+1
  1404			001000			ZZ=ZZ+ZZ
  1405						IFE	ZZ,<ZZ=1>
  1406	031113	200 00 0 00 035023 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1407	031114	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1408						STOP^
  1409	031115	254 04 0 00 031116 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1410	031116	324 00 0 00 031117 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1411									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1412									;IN THE SUBTEST) TO LOOP ON ERROR^
  1413
  1414					;**********
  1415
  1416					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1417					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1418					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1419					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1420					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1421
  1422			003113		SN=SN+1
  1423			002000			ZZ=ZZ+ZZ
  1424						IFE	ZZ,<ZZ=1>
  1425	031117	200 00 0 00 035024 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1426	031120	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0045

  1427						STOP^
  1428	031121	254 04 0 00 031122 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1429	031122	324 00 0 00 031123 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1430									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1431									;IN THE SUBTEST) TO LOOP ON ERROR^
  1432
  1433					;**********
  1434
  1435					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1436					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1437					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1438					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1439					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1440
  1441			003114		SN=SN+1
  1442			004000			ZZ=ZZ+ZZ
  1443						IFE	ZZ,<ZZ=1>
  1444	031123	200 00 0 00 035025 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1445	031124	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1446						STOP^
  1447	031125	254 04 0 00 031126 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1448	031126	324 00 0 00 031127 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1449									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1450									;IN THE SUBTEST) TO LOOP ON ERROR^
  1451
  1452					;**********
  1453
  1454					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1455					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1456					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1457					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1458					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1459
  1460			003115		SN=SN+1
  1461			010000			ZZ=ZZ+ZZ
  1462						IFE	ZZ,<ZZ=1>
  1463	031127	200 00 0 00 035026 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1464	031130	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1465						STOP^
  1466	031131	254 04 0 00 031132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1467	031132	324 00 0 00 031133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1468									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1469									;IN THE SUBTEST) TO LOOP ON ERROR^
  1470
  1471					;**********
  1472
  1473					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1474					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1475					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1476					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1477					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1478
  1479			003116		SN=SN+1
  1480			020000			ZZ=ZZ+ZZ
  1481						IFE	ZZ,<ZZ=1>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0046

  1482	031133	200 00 0 00 035027 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1483	031134	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1484						STOP^
  1485	031135	254 04 0 00 031136 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1486	031136	324 00 0 00 031137 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1487									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1488									;IN THE SUBTEST) TO LOOP ON ERROR^
  1489
  1490					;**********
  1491
  1492					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1493					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1494					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1495					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1496					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1497
  1498			003117		SN=SN+1
  1499			040000			ZZ=ZZ+ZZ
  1500						IFE	ZZ,<ZZ=1>
  1501	031137	200 00 0 00 035030 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1502	031140	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1503						STOP^
  1504	031141	254 04 0 00 031142 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1505	031142	324 00 0 00 031143 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1506									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1507									;IN THE SUBTEST) TO LOOP ON ERROR^
  1508
  1509					;**********
  1510
  1511					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1512					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1513					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1514					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1515					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1516
  1517			003120		SN=SN+1
  1518			100000			ZZ=ZZ+ZZ
  1519						IFE	ZZ,<ZZ=1>
  1520	031143	200 00 0 00 035031 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1521	031144	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1522						STOP^
  1523	031145	254 04 0 00 031146 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1524	031146	324 00 0 00 031147 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1525									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1526									;IN THE SUBTEST) TO LOOP ON ERROR^
  1527
  1528					;**********
  1529
  1530					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1531					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1532					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1533					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1534					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1535
  1536			003121		SN=SN+1
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0047

  1537			200000			ZZ=ZZ+ZZ
  1538						IFE	ZZ,<ZZ=1>
  1539	031147	200 00 0 00 035032 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1540	031150	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1541						STOP^
  1542	031151	254 04 0 00 031152 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1543	031152	324 00 0 00 031153 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1544									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1545									;IN THE SUBTEST) TO LOOP ON ERROR^
  1546
  1547					;**********
  1548
  1549					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1550					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1551					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1552					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1553					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1554
  1555			003122		SN=SN+1
  1556			400000			ZZ=ZZ+ZZ
  1557						IFE	ZZ,<ZZ=1>
  1558	031153	200 00 0 00 035033 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1559	031154	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1560						STOP^
  1561	031155	254 04 0 00 031156 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1562	031156	324 00 0 00 031157 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1563									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1564									;IN THE SUBTEST) TO LOOP ON ERROR^
  1565
  1566					;**********
  1567
  1568					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1569					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1570					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1571					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1572					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1573
  1574			003123		SN=SN+1
  1575		000001	000000			ZZ=ZZ+ZZ
  1576						IFE	ZZ,<ZZ=1>
  1577	031157	200 00 0 00 035034 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1578	031160	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1579						STOP^
  1580	031161	254 04 0 00 031162 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1581	031162	324 00 0 00 031163 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1582									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1583									;IN THE SUBTEST) TO LOOP ON ERROR^
  1584
  1585					;**********
  1586
  1587					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1588					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1589					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1590					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1591					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0048

  1592
  1593			003124		SN=SN+1
  1594		000002	000000			ZZ=ZZ+ZZ
  1595						IFE	ZZ,<ZZ=1>
  1596	031163	200 00 0 00 035035 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1597	031164	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1598						STOP^
  1599	031165	254 04 0 00 031166 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1600	031166	324 00 0 00 031167 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1601									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1602									;IN THE SUBTEST) TO LOOP ON ERROR^
  1603
  1604					;**********
  1605
  1606					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1607					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1608					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1609					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1610					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1611
  1612			003125		SN=SN+1
  1613		000004	000000			ZZ=ZZ+ZZ
  1614						IFE	ZZ,<ZZ=1>
  1615	031167	200 00 0 00 035036 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1616	031170	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1617						STOP^
  1618	031171	254 04 0 00 031172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1619	031172	324 00 0 00 031173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1620									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1621									;IN THE SUBTEST) TO LOOP ON ERROR^
  1622
  1623					;**********
  1624
  1625					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1626					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1627					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1628					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1629					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1630
  1631			003126		SN=SN+1
  1632		000010	000000			ZZ=ZZ+ZZ
  1633						IFE	ZZ,<ZZ=1>
  1634	031173	200 00 0 00 035037 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1635	031174	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1636						STOP^
  1637	031175	254 04 0 00 031176 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1638	031176	324 00 0 00 031177 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1639									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1640									;IN THE SUBTEST) TO LOOP ON ERROR^
  1641
  1642					;**********
  1643
  1644					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1645					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1646					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0049

  1647					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1648					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1649
  1650			003127		SN=SN+1
  1651		000020	000000			ZZ=ZZ+ZZ
  1652						IFE	ZZ,<ZZ=1>
  1653	031177	200 00 0 00 035040 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1654	031200	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1655						STOP^
  1656	031201	254 04 0 00 031202 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1657	031202	324 00 0 00 031203 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1658									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1659									;IN THE SUBTEST) TO LOOP ON ERROR^
  1660
  1661					;**********
  1662
  1663					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1664					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1665					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1666					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1667					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1668
  1669			003130		SN=SN+1
  1670		000040	000000			ZZ=ZZ+ZZ
  1671						IFE	ZZ,<ZZ=1>
  1672	031203	200 00 0 00 035041 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1673	031204	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1674						STOP^
  1675	031205	254 04 0 00 031206 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1676	031206	324 00 0 00 031207 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1677									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1678									;IN THE SUBTEST) TO LOOP ON ERROR^
  1679
  1680					;**********
  1681
  1682					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1683					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1684					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1685					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1686					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1687
  1688			003131		SN=SN+1
  1689		000100	000000			ZZ=ZZ+ZZ
  1690						IFE	ZZ,<ZZ=1>
  1691	031207	200 00 0 00 035042 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1692	031210	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1693						STOP^
  1694	031211	254 04 0 00 031212 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1695	031212	324 00 0 00 031213 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1696									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1697									;IN THE SUBTEST) TO LOOP ON ERROR^
  1698
  1699					;**********
  1700
  1701					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0050

  1702					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1703					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1704					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1705					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1706
  1707			003132		SN=SN+1
  1708		000200	000000			ZZ=ZZ+ZZ
  1709						IFE	ZZ,<ZZ=1>
  1710	031213	200 00 0 00 035043 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1711	031214	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1712						STOP^
  1713	031215	254 04 0 00 031216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1714	031216	324 00 0 00 031217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1715									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1716									;IN THE SUBTEST) TO LOOP ON ERROR^
  1717
  1718					;**********
  1719
  1720					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1721					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1722					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1723					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1724					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1725
  1726			003133		SN=SN+1
  1727		000400	000000			ZZ=ZZ+ZZ
  1728						IFE	ZZ,<ZZ=1>
  1729	031217	200 00 0 00 035011 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1730	031220	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1731						STOP^
  1732	031221	254 04 0 00 031222 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1733	031222	324 00 0 00 031223 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1734									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1735									;IN THE SUBTEST) TO LOOP ON ERROR^
  1736
  1737					;**********
  1738
  1739					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1740					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1741					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1742					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1743					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1744
  1745			003134		SN=SN+1
  1746		001000	000000			ZZ=ZZ+ZZ
  1747						IFE	ZZ,<ZZ=1>
  1748	031223	200 00 0 00 035044 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1749	031224	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1750						STOP^
  1751	031225	254 04 0 00 031226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1752	031226	324 00 0 00 031227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1753									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1754									;IN THE SUBTEST) TO LOOP ON ERROR^
  1755
  1756					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0051

  1757
  1758					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1759					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1760					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1761					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1762					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1763
  1764			003135		SN=SN+1
  1765		002000	000000			ZZ=ZZ+ZZ
  1766						IFE	ZZ,<ZZ=1>
  1767	031227	200 00 0 00 035045 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1768	031230	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1769						STOP^
  1770	031231	254 04 0 00 031232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1771	031232	324 00 0 00 031233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1772									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1773									;IN THE SUBTEST) TO LOOP ON ERROR^
  1774
  1775					;**********
  1776
  1777					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1778					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1779					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1780					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1781					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1782
  1783			003136		SN=SN+1
  1784		004000	000000			ZZ=ZZ+ZZ
  1785						IFE	ZZ,<ZZ=1>
  1786	031233	200 00 0 00 035046 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1787	031234	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1788						STOP^
  1789	031235	254 04 0 00 031236 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1790	031236	324 00 0 00 031237 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1791									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1792									;IN THE SUBTEST) TO LOOP ON ERROR^
  1793
  1794					;**********
  1795
  1796					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1797					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1798					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1799					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1800					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1801
  1802			003137		SN=SN+1
  1803		010000	000000			ZZ=ZZ+ZZ
  1804						IFE	ZZ,<ZZ=1>
  1805	031237	200 00 0 00 035047 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1806	031240	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1807						STOP^
  1808	031241	254 04 0 00 031242 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1809	031242	324 00 0 00 031243 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1810									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1811									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0052

  1812
  1813					;**********
  1814
  1815					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1816					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1817					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1818					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1819					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1820
  1821			003140		SN=SN+1
  1822		020000	000000			ZZ=ZZ+ZZ
  1823						IFE	ZZ,<ZZ=1>
  1824	031243	200 00 0 00 035050 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1825	031244	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1826						STOP^
  1827	031245	254 04 0 00 031246 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1828	031246	324 00 0 00 031247 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1829									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1830									;IN THE SUBTEST) TO LOOP ON ERROR^
  1831
  1832					;**********
  1833
  1834					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1835					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1836					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1837					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1838					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1839
  1840			003141		SN=SN+1
  1841		040000	000000			ZZ=ZZ+ZZ
  1842						IFE	ZZ,<ZZ=1>
  1843	031247	200 00 0 00 035051 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1844	031250	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1845						STOP^
  1846	031251	254 04 0 00 031252 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1847	031252	324 00 0 00 031253 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1848									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1849									;IN THE SUBTEST) TO LOOP ON ERROR^
  1850
  1851					;**********
  1852
  1853					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1854					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1855					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1856					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1857					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1858
  1859			003142		SN=SN+1
  1860		100000	000000			ZZ=ZZ+ZZ
  1861						IFE	ZZ,<ZZ=1>
  1862	031253	200 00 0 00 035052 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1863	031254	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1864						STOP^
  1865	031255	254 04 0 00 031256 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1866	031256	324 00 0 00 031257 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 12-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF JUMP, JUMPA AND SKIPX INSTRUCTIONS                                         SEQ 0053

  1867									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1868									;IN THE SUBTEST) TO LOOP ON ERROR^
  1869
  1870					;**********
  1871
  1872					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1873					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1874					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1875					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1876					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1877
  1878			003143		SN=SN+1
  1879		200000	000000			ZZ=ZZ+ZZ
  1880						IFE	ZZ,<ZZ=1>
  1881	031257	200 00 0 00 035053 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1882	031260	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1883						STOP^
  1884	031261	254 04 0 00 031262 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1885	031262	324 00 0 00 031263 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1886									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1887									;IN THE SUBTEST) TO LOOP ON ERROR^
  1888
  1889					;**********
  1890
  1891					;THIS TEST VERIFIES THAT SKIPN IS SENSITIVE TO A ONE IN EVERY BIT POSITION.  THIS TEST
  1892					;IS REPEATED 36 TIMES.  EACH TIME A WORD OF ALL ZEROS EXCEPT FOR A ONE IN ONE
  1893					;BIT POSITION IS MOVED INTO E.  THEN SKIPN IS EXECUTED.  THIS TEST ALSO
  1894					;CHECKS ADDER GATING.  IF THIS TEST FAILS, CHECK C(E).
  1895					;IF C(E)=0, MOVE FAILED; OTHERWISE SKIPN FAILED.
  1896
  1897			003144		SN=SN+1
  1898		400000	000000			ZZ=ZZ+ZZ
  1899						IFE	ZZ,<ZZ=1>
  1900	031263	200 00 0 00 035003 		MOVE	[ZZ]		;MOVE THE CURRENT VALUE OF ZZ INTO E. ZZ IS NON-ZERO
  1901	031264	336 00 0 00 000000 		SKIPN			;*SKIPN SHOULD SKIP THE NEXT INSTRUCTION
  1902						STOP^
  1903	031265	254 04 0 00 031266 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1904	031266	324 00 0 00 031267 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1906									;IN THE SUBTEST) TO LOOP ON ERROR^
  1907
  1908					;**********
  1909
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0054

  1910					SUBTTL	TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS
  1911
  1912					;THIS TEST VERIFIES THAT MOVEI LOADS E INTO THE AC.  SKIPG IS USED TO CHECK THAT
  1913					;THE AC WAS INDEED MODIFIED BY MOVEI.
  1914
  1915	031267	201 00 0 00 035001 	A3200:	MOVEI	[-1]		;*MOVEI SHOULD LOAD A POSITIVE NUMBER INTO AC0
  1916	031270	337 00 0 00 000000 		SKIPG			;SKIP HALT INSTRUCTION IF MOVEI LOADED AC CORRECTLY
  1917						STOP^
  1918	031271	254 04 0 00 031272 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1919	031272	324 00 0 00 031273 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1920									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1921									;IN THE SUBTEST) TO LOOP ON ERROR^
  1922
  1923					;IF PROGRAM HANGS UP ON MOVEI INSTRUCTION, CHECK AD FM +EN [ADFP], AD FM + EN A [ADFP],
  1924					;AD FM + F/F [ADFP], F CYC ACT EN C [F1]
  1925
  1926					;**********
  1927
  1928					;THIS TEST VERIFIES THAT SKIPL IS SENSITIVE TO THE DATA IN E AND NOT SENSITIVE TO
  1929					;THE DATA IN THE AC.  HENCE, SKIPL WILL SKIP THE NEXT INSTRUCTION ONLY IF
  1930					;C(E) IS LESS THAN ZERO.  E IS SET TO -1, A NEGATIVE NUMBER; AND
  1931					;THE AC IS SET TO 0 IN THIS TEST.  THEREFORE SKIPL SHOULD SKIP.
  1932
  1933	031273	200 00 0 00 035000 	A3300:	MOVE	[0]		;SET THE AC TO ALL ZEROS
  1934	031274	331 00 0 00 035001 		SKIPL	[-1]		;*SKIPL SHOULD SKIP BECAUSE C(E) IS NEGATIVE
  1935						STOP^
  1936	031275	254 04 0 00 031276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1937	031276	324 00 0 00 031277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1938									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1939									;IN THE SUBTEST) TO LOOP ON ERROR^
  1940
  1941					;**********
  1942
  1943					;THIS TEST VERIFIES THAT SKIPL IS SENSITIVE TO THE SIGN BIT IN E.  SKIPL SHOULD
  1944					;SKIP THE NEXT INSTRUCTION WHEN AND ONLY WHEN THE SIGN BIT IS SET.  IN THIS
  1945					;TEST, C(AC) IS PRESET TO ALL ZEROS, THEN SKIPL IS EXECUTED WITH C(E)=400000,,0.
  1946					;A FAILURE UCCURS IF SKIPL DOES NOT SKIP.
  1947
  1948	031277	200 00 0 00 035000 	A13100:	MOVE	[0]		;SET THE AC TO ALL ZEROS
  1949	031300	331 00 0 00 035003 		SKIPL	[400000,,0]	;*SKIPL SHOULD SKIP BECAUSE C(E) IS NEGATIVE
  1950						STOP^
  1951	031301	254 04 0 00 031302 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1952	031302	324 00 0 00 031303 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1953									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1954									;IN THE SUBTEST) TO LOOP ON ERROR^
  1955
  1956					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0055

  1957					;THIS TEST VERIFIES THAT THE CAM INSTRUCTION DOES NOT MODIFY C(AC).  THE AC IS
  1958					;INITIALLY LOADED WITH ALL ZEROS; THEN CAM IS EXECUTED WITH C(E) NON-ZERO.
  1959					;THE AC IS THEN CHECKED FOR ALL ZEROS.  THIS TEST FAILS IF THE AC WAS MODIFIED BY CAM.
  1960
  1961	031303	200 00 0 00 035000 	A3400:	MOVE	[0]		;PRESET THE AC TO ALL ZEROS
  1962	031304	310 00 0 00 035054 		CAM	[1234]		;*CAM SHOULD NOT MODIFY THE AC
  1963	031305	200 00 0 00 000000 		MOVE			;MOVE C(0) INTO 0 (THIS INSTRUCTION SERVES AS A NO-OP.
  1964									;IT IS A PROGRAM FILLER IN CASE CAM SKIPS.)
  1965	031306	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF AC WAS NOT MODIFIED BY CAM
  1966						STOP^
  1967	031307	254 04 0 00 031310 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1968	031310	324 00 0 00 031311 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1969									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1970									;IN THE SUBTEST) TO LOOP ON ERROR^
  1971
  1972					;IF TEST HANGS ON CAM INSTRUCTION, AB PC EN [ABC], AB PC (FETCH) EN [ABC],
  1973					;IR CAXX [IR3]
  1974
  1975					;IF TEST LOOPS ON CAM INSTRUCTION, MC INSTR FETCH EN [MC1], MC INST FET ET2 EN [MC1],
  1976					;ET2 J F/F [E], IR CAXX [IR3]
  1977
  1978					;IF TEST HALTS AT HALT INSTRUCTION, SAC INH [ST2], IR CAXX [IR3], IR CAMX [IR1]
  1979
  1980					;**********
  1981
  1982					;THIS TEST VERIFIES THAT THE CAI INSTRUCTION DOES NOT MODIFY C(AC).  THE AC IS
  1983					;INITIALLY LOADED WITH ALL ZEROS; THEN CAI IS EXECUTED WITH E NON-ZERO.  THE AC IS
  1984					;THEN CHECKED FOR ALL ZEROS.  THIS TEST FAILS IF THE AC WAS MODIFIED BY CAM.
  1985
  1986	031311	200 00 0 00 035000 	A3500:	MOVE	[0]		;PRESET THE AC TO ALL ZEROS
  1987	031312	300 00 0 00 035054 		CAI	[1234]		;*CAI SHOULD NOT MODIFY THE AC
  1988	031313	200 00 0 00 000000 		MOVE			;MOVE C(0) INTO 0 (THIS INSTRUCTION IS A PROGRAM FILLER
  1989									;IN CASE CAI MODIFIES THE AC.  IT SERVES AS A NO-OP)
  1990	031314	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF CAI DID NOT MODIFY THE AC
  1991						STOP^
  1992	031315	254 04 0 00 031316 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  1993	031316	324 00 0 00 031317 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  1994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  1995									;IN THE SUBTEST) TO LOOP ON ERROR^
  1996
  1997					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 15
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0056

  1998					;THIS TEST VERIFIES THAT CAI DOES NOT MODIFY C(AC0) WHEN AN AC OTHER THAN AC0 IS
  1999					;SPECIFIED BY THE CAI INSTRUCTION.
  2000					;THIS IS THE FIRST TEST THAT USES AN AC OTHER THAN AC0.
  2001					;FIRST, AC0 IS LOADED WITH ALL ZEROS; THEN, THE CAI INSTRUCTION IS EXECUTED WITH
  2002					;A NON-ZERO E.  AC 0 IS THEN TESTED F0R ALL ZEROS.
  2003
  2004	031317	200 00 0 00 035000 	A3600:	MOVE	[0]		;LOAD AC0 WITH ALL ZEROS
  2005	031320	300 17 0 00 035054 		CAI	17,[1234]	;*CAI SHOULD NOT MODIFY AC0
  2006	031321	200 00 0 00 000000 		MOVE			;MOVE C(0) INTO 0 (THIS INSTRUCTION IS A FILLER IN CASE
  2007									;CAI SKIPS THE NEXT INSTRUCTION.  IT ACTS AS A NO-OP)
  2008	031322	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF C(AC0) WAS NOT MODIFIED
  2009						STOP^
  2010	031323	254 04 0 00 031324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2011	031324	324 00 0 00 031325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2012									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2013									;IN THE SUBTEST) TO LOOP ON ERROR^
  2014
  2015					;**********
  2016
  2017					;THIS TEST VERIFIES THAT CAM DOES NOT MODIFY C(AC0) WHEN AN AC OTHER THAN AC0 IS
  2018					;SPECIFIED BY THE CAM INSTRUCTION.
  2019					;FIRST, AC0 IS LOADED WITH ALL ZEROS; THEN, THE CAM INSTRUCTION IS EXECUTED WITH
  2020					;A NON-ZERO E.  AC 0 IS THEN TESTED F0R ALL ZEROS.
  2021
  2022	031325	200 00 0 00 035000 	A3700:	MOVE	[0]		;PRESET C(AC0) TO ALL ZEROS
  2023	031326	310 17 0 00 035054 		CAM	17,[1234]	;*CAM SHOULD NOT MODIFY AC0
  2024	031327	200 00 0 00 000000 		MOVE			;MOVE C(0) INTO 0 (THIS INSTRUCTION IS A FILLER IN CASE
  2025									;CAM SKIPS THE NEXT INSTRUCTION.  IT SERVES AS A NO-OP)
  2026	031330	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF AC0 WAS NOT MODIFIED BY CAM
  2027						STOP^
  2028	031331	254 04 0 00 031332 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2029	031332	324 00 0 00 031333 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2030									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2031									;IN THE SUBTEST) TO LOOP ON ERROR^
  2032
  2033					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 16
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0057

  2034					;THIS TEST VERIFIES THAT MOVE WILL PLACE C(E) INTO THE AC.  AC, E AND C(E) ARE NON-ZERO
  2035					;IN THIS TEST.  THIS TEST PASSES IF  FINAL C(AC) OF THE MOVE INSTRUCTION IS NON-ZERO.
  2036
  2037	031333	200 01 0 00 035000 	A4500:	MOVE	1,[0]		;LOAD THE AC WITH ALL ZEROS
  2038	031334	200 01 0 00 035001 		MOVE	1,[-1]		;*MOVE SHOULD PLACE ALL ONES IN THE AC
  2039	031335	336 00 0 00 000001 		SKIPN	1		;SKIP HALT INSTRUCTION IF MOVE MODIFIED THE AC
  2040						STOP^
  2041	031336	254 04 0 00 031337 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2042	031337	324 00 0 00 031340 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2043									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2044									;IN THE SUBTEST) TO LOOP ON ERROR^
  2045
  2046					;**********
  2047
  2048					;THIS TEST VERIFIES THAT THE MOVE INSTRUCTION WILL PLACE C(E) INTO THE AC.
  2049					;AC, E ARE NON-ZERO AND C(E)=0.
  2050					;THIS TEST FAILS IF THE FINAL C(AC) IS NOT EQUAL TO ZERO, THE ORIGINAL C(E)
  2051
  2052	031340	200 01 0 00 035000 	A4600:	MOVE	1,[0]		;*PLACE ALL ZEROS INTO THE AC
  2053	031341	332 00 0 00 000001 		SKIPE	1		;SKIP HALT INSTRUCTION IF MOVE PLACED ALL ZEROS INTO AC
  2054						STOP^
  2055	031342	254 04 0 00 031343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2056	031343	324 00 0 00 031344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2057									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2058									;IN THE SUBTEST) TO LOOP ON ERROR^
  2059
  2060					;IF JUMP .+1 OF PREVIOUS TEST FAILED, CHECK JUMPS: AD FM + EN [ADFP], IR JUMPS [IR1],
  2061					;IR JUMPX [IR1], AR AD EN [ARMA], AR AD EN A [ARMA], AR LT AD EN A [ARMA],
  2062					;AR LT ADD EN B [ARMA], AR RT AD EN A [ARMA],
  2063					;AR RT AD EN B [ARMA], AR A CLK INPUT [ARMA],
  2064					;ET2 C F/F [E], AR AD ET2 EN [ARMA], AR AD BR (ET2) B [ARMA]
  2065
  2066					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 17
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0058

  2067					;THIS TEST VERIFIES THAT SOS DOES NOT MODIFY C(AC) WHEN THE AC IS AC0.
  2068					;FIRST, AC0 IS LOADED WITH ALL ZEROS AND E IS LOADED WITH A POSITIVE NUMBER;
  2069					;THEN, SOS IS EXECUTED.  SOS SHOULD SUBTRACT ONE FROM C((E)
  2070					;AND EXECUTE THE NEXT INSTRUCTION.  IT SHOULD NOT MODIFY AC0.
  2071					;THE TEST PASSES IF AC0 WAS NOT MODIFIED.
  2072
  2073	031344	200 00 0 00 035000 	A4000:	MOVE	[0]		;PRESET AC0 TO ALL ZEROS
  2074	031345	200 07 0 00 035054 		MOVE	7,[1234]	;PRESET E WITH A POSITIVE NUMBER
  2075	031346	370 00 0 00 000007 		SOS	7		;*SOS SHOULD NOT MODIFY C(AC0)
  2076	031347	200 00 0 00 000000 		MOVE			;MOVE C(0) INTO 0 (THIS INSTRUCTION IS A FILLER IN CASE
  2077									;SOS SKIPS THE NEXT INSTRUCTION.  IT SERVES AS A NO-OP)
  2078	031350	332 00 0 00 000000 		SKIPE			;SKIP THE HALT INSTRUCTION IF C(AC0) WAS NOT MODIFIED
  2079						STOP^
  2080	031351	254 04 0 00 031352 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2081	031352	324 00 0 00 031353 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2082									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2083									;IN THE SUBTEST) TO LOOP ON ERROR^
  2084
  2085					;**********
  2086			004100		SN=4100
  2087			000000			AC=0
  2088
  2089					A4100:	REPEAT	4,		
  2090					<;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL PLACE THE CONTENTS OF E INTO THE AC
  2091					;WHEN THE AC IS NOT AC0. THIS TEST IS PERFORMED FOR AC1, AC2, AC4 AND AC10.
  2092					;FIRST, THE AC IS LOADED WITH ALL ZEROS;  THEN, THE SKIP INSTRUCTION IS EXECUTED
  2093					;WITH AC1, AC2, AC4 OR AC10.  C(E) IS EQUAL TO -1.  THE SKIP INSTRUCTION SHOULD CAUSE
  2094					;THE AC TO CONTAIN -1.  THE AC IS THEN CHECKED FOR
  2095					;NON-ZERO CONTENTS.  THE TEST FAILS IF C(AC)=0.
  2096					;THIS TEST ALSO VERIFIES THAT 'SKIP AC,[-1]' DOES NOT CLOBBER AC0.
  2097					
  2098					SN=SN+1
  2099						AC=AC+AC
  2100						IFE	AC,<AC=1>
  2101						MOVE	0,[0]		;PRESET AC0 TO ALL ZEROS
  2102						MOVE	AC,[0]		;PRESET THE AC TO ALL ZEROS
  2103						SKIP	AC,[-1]		;*SKIP SHOULD PLACE -1 INTO THE AC
  2104						SKIPN	AC		;SKIP THE HALT INSTRUCTION IF THE AC IS NON-ZERO
  2105						STOP
  2106						SKIPE	0		;VERIFY THAT AC0 DID NOT GET CLOBBERED BY SKIP
  2107						STOP
  2108					
  2109					;**********
  2110					>
  2111					;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL PLACE THE CONTENTS OF E INTO THE AC
  2112					;WHEN THE AC IS NOT AC0. THIS TEST IS PERFORMED FOR AC1, AC2, AC4 AND AC10.
  2113					;FIRST, THE AC IS LOADED WITH ALL ZEROS;  THEN, THE SKIP INSTRUCTION IS EXECUTED
  2114					;WITH AC1, AC2, AC4 OR AC10.  C(E) IS EQUAL TO -1.  THE SKIP INSTRUCTION SHOULD CAUSE
  2115					;THE AC TO CONTAIN -1.  THE AC IS THEN CHECKED FOR
  2116					;NON-ZERO CONTENTS.  THE TEST FAILS IF C(AC)=0.
  2117					;THIS TEST ALSO VERIFIES THAT 'SKIP AC,[-1]' DOES NOT CLOBBER AC0.
  2118
  2119			004101		SN=SN+1
  2120			000000			AC=AC+AC
  2121			000001			IFE	AC,<AC=1>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 17-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0059

  2122	031353	200 00 0 00 035000 		MOVE	0,[0]		;PRESET AC0 TO ALL ZEROS
  2123	031354	200 01 0 00 035000 		MOVE	AC,[0]		;PRESET THE AC TO ALL ZEROS
  2124	031355	330 01 0 00 035001 		SKIP	AC,[-1]		;*SKIP SHOULD PLACE -1 INTO THE AC
  2125	031356	336 00 0 00 000001 		SKIPN	AC		;SKIP THE HALT INSTRUCTION IF THE AC IS NON-ZERO
  2126						STOP^
  2127	031357	254 04 0 00 031360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2128	031360	324 00 0 00 031361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2129									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2130									;IN THE SUBTEST) TO LOOP ON ERROR^
  2131	031361	332 00 0 00 000000 		SKIPE	0		;VERIFY THAT AC0 DID NOT GET CLOBBERED BY SKIP
  2132						STOP^
  2133	031362	254 04 0 00 031363 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2134	031363	324 00 0 00 031364 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2135									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2136									;IN THE SUBTEST) TO LOOP ON ERROR^
  2137
  2138					;**********
  2139
  2140					;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL PLACE THE CONTENTS OF E INTO THE AC
  2141					;WHEN THE AC IS NOT AC0. THIS TEST IS PERFORMED FOR AC1, AC2, AC4 AND AC10.
  2142					;FIRST, THE AC IS LOADED WITH ALL ZEROS;  THEN, THE SKIP INSTRUCTION IS EXECUTED
  2143					;WITH AC1, AC2, AC4 OR AC10.  C(E) IS EQUAL TO -1.  THE SKIP INSTRUCTION SHOULD CAUSE
  2144					;THE AC TO CONTAIN -1.  THE AC IS THEN CHECKED FOR
  2145					;NON-ZERO CONTENTS.  THE TEST FAILS IF C(AC)=0.
  2146					;THIS TEST ALSO VERIFIES THAT 'SKIP AC,[-1]' DOES NOT CLOBBER AC0.
  2147
  2148			004102		SN=SN+1
  2149			000002			AC=AC+AC
  2150						IFE	AC,<AC=1>
  2151	031364	200 00 0 00 035000 		MOVE	0,[0]		;PRESET AC0 TO ALL ZEROS
  2152	031365	200 02 0 00 035000 		MOVE	AC,[0]		;PRESET THE AC TO ALL ZEROS
  2153	031366	330 02 0 00 035001 		SKIP	AC,[-1]		;*SKIP SHOULD PLACE -1 INTO THE AC
  2154	031367	336 00 0 00 000002 		SKIPN	AC		;SKIP THE HALT INSTRUCTION IF THE AC IS NON-ZERO
  2155						STOP^
  2156	031370	254 04 0 00 031371 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2157	031371	324 00 0 00 031372 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2158									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2159									;IN THE SUBTEST) TO LOOP ON ERROR^
  2160	031372	332 00 0 00 000000 		SKIPE	0		;VERIFY THAT AC0 DID NOT GET CLOBBERED BY SKIP
  2161						STOP^
  2162	031373	254 04 0 00 031374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2163	031374	324 00 0 00 031375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2164									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2165									;IN THE SUBTEST) TO LOOP ON ERROR^
  2166
  2167					;**********
  2168
  2169					;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL PLACE THE CONTENTS OF E INTO THE AC
  2170					;WHEN THE AC IS NOT AC0. THIS TEST IS PERFORMED FOR AC1, AC2, AC4 AND AC10.
  2171					;FIRST, THE AC IS LOADED WITH ALL ZEROS;  THEN, THE SKIP INSTRUCTION IS EXECUTED
  2172					;WITH AC1, AC2, AC4 OR AC10.  C(E) IS EQUAL TO -1.  THE SKIP INSTRUCTION SHOULD CAUSE
  2173					;THE AC TO CONTAIN -1.  THE AC IS THEN CHECKED FOR
  2174					;NON-ZERO CONTENTS.  THE TEST FAILS IF C(AC)=0.
  2175					;THIS TEST ALSO VERIFIES THAT 'SKIP AC,[-1]' DOES NOT CLOBBER AC0.
  2176
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 17-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF MOVE, SKIP AND COMPARE INSTRUCTIONS                                        SEQ 0060

  2177			004103		SN=SN+1
  2178			000004			AC=AC+AC
  2179						IFE	AC,<AC=1>
  2180	031375	200 00 0 00 035000 		MOVE	0,[0]		;PRESET AC0 TO ALL ZEROS
  2181	031376	200 04 0 00 035000 		MOVE	AC,[0]		;PRESET THE AC TO ALL ZEROS
  2182	031377	330 04 0 00 035001 		SKIP	AC,[-1]		;*SKIP SHOULD PLACE -1 INTO THE AC
  2183	031400	336 00 0 00 000004 		SKIPN	AC		;SKIP THE HALT INSTRUCTION IF THE AC IS NON-ZERO
  2184						STOP^
  2185	031401	254 04 0 00 031402 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2186	031402	324 00 0 00 031403 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2187									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2188									;IN THE SUBTEST) TO LOOP ON ERROR^
  2189	031403	332 00 0 00 000000 		SKIPE	0		;VERIFY THAT AC0 DID NOT GET CLOBBERED BY SKIP
  2190						STOP^
  2191	031404	254 04 0 00 031405 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2192	031405	324 00 0 00 031406 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2193									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2194									;IN THE SUBTEST) TO LOOP ON ERROR^
  2195
  2196					;**********
  2197
  2198					;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL PLACE THE CONTENTS OF E INTO THE AC
  2199					;WHEN THE AC IS NOT AC0. THIS TEST IS PERFORMED FOR AC1, AC2, AC4 AND AC10.
  2200					;FIRST, THE AC IS LOADED WITH ALL ZEROS;  THEN, THE SKIP INSTRUCTION IS EXECUTED
  2201					;WITH AC1, AC2, AC4 OR AC10.  C(E) IS EQUAL TO -1.  THE SKIP INSTRUCTION SHOULD CAUSE
  2202					;THE AC TO CONTAIN -1.  THE AC IS THEN CHECKED FOR
  2203					;NON-ZERO CONTENTS.  THE TEST FAILS IF C(AC)=0.
  2204					;THIS TEST ALSO VERIFIES THAT 'SKIP AC,[-1]' DOES NOT CLOBBER AC0.
  2205
  2206			004104		SN=SN+1
  2207			000010			AC=AC+AC
  2208						IFE	AC,<AC=1>
  2209	031406	200 00 0 00 035000 		MOVE	0,[0]		;PRESET AC0 TO ALL ZEROS
  2210	031407	200 10 0 00 035000 		MOVE	AC,[0]		;PRESET THE AC TO ALL ZEROS
  2211	031410	330 10 0 00 035001 		SKIP	AC,[-1]		;*SKIP SHOULD PLACE -1 INTO THE AC
  2212	031411	336 00 0 00 000010 		SKIPN	AC		;SKIP THE HALT INSTRUCTION IF THE AC IS NON-ZERO
  2213						STOP^
  2214	031412	254 04 0 00 031413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2215	031413	324 00 0 00 031414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2216									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2217									;IN THE SUBTEST) TO LOOP ON ERROR^
  2218	031414	332 00 0 00 000000 		SKIPE	0		;VERIFY THAT AC0 DID NOT GET CLOBBERED BY SKIP
  2219						STOP^
  2220	031415	254 04 0 00 031416 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2221	031416	324 00 0 00 031417 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2222									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2223									;IN THE SUBTEST) TO LOOP ON ERROR^
  2224
  2225					;**********
  2226
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 18
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0061

  2227					SUBTTL	TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS
  2228
  2229					;THIS TEST VERIFIES THAT THE SKIP INSTRUCTION WILL NOT MODIFY THE CONTENTS OF AC0.
  2230					;FIRST, AC0 IS LOADED WITH ALL ZEROS;  THEN,
  2231					;THE SKIP INSTRUCTION IS EXECUTED WITH C(E)=-1 AND AC0.  AC0 IS THEN TESTED FOR ALL
  2232					;ZEROS.  THE TEST FAILS IF AC0 WAS MODIFIED BY THE SKIP INSTRUCTION.
  2233
  2234	031417	200 00 0 00 035000 	A4200:	MOVE	[0]		;PRESET AC0 TO ALL ZEROS
  2235	031420	330 00 0 00 035001 		SKIP	[-1]		;*SKIP SHOULD NOT MODIFY AC0
  2236	031421	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF AC0 WAS NOT MODIFIED BY SKIP
  2237						STOP^
  2238	031422	254 04 0 00 031423 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2239	031423	324 00 0 00 031424 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2240									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2241									;IN THE SUBTEST) TO LOOP ON ERROR^
  2242
  2243					;AC=0: SAC INH, IR BIT 9, 10, 11 OR 12 S-A-1
  2244
  2245					;**********
  2246
  2247					;THIS TEST VERIFIES THAT MOVSS DOES NOT MODIFY C(AC0) WHEN AC0 IS SPECIFIED AS THE AC.
  2248					;FIRST, E IS LOADED WITH ALL ONES AND THE AC (AC0)
  2249					;IS LOADED WITH ALL ZEROS; THEN, MOVSS IS EXECUTED.  MOVSS SHOULD NOT MODIFY AC0.
  2250					;AC0 IS THEN CHECKED TO INSURE THAT IT WAS NOT MODIFIED BY MOVSS.
  2251
  2252	031424	200 07 0 00 035001 	A4300:	MOVE	7,[-1]		;LOAD E OF THE MOVSS INSTRUCTION WITH ALL ONES
  2253	031425	200 00 0 00 035000 		MOVE	[0]		;PRESET AC0 TO ALL ZEROS
  2254	031426	207 00 0 00 000007 		MOVSS	7		;*MOVSS SHOULD NOT MODIFY AC0
  2255	031427	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF AC0 WAS INTACT
  2256						STOP^
  2257	031430	254 04 0 00 031431 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2258	031431	324 00 0 00 031432 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2259									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2260									;IN THE SUBTEST) TO LOOP ON ERROR^
  2261
  2262					;MOVX & AC=0: SAC INH [ST2], IR XXXS [IR1]
  2263
  2264					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 19
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0062

  2265					;THIS TEST VERIFIES THAT HRRS DOES NOT MODIFY C(AC0) WHEN AC0 IS THE SPECIFIED AC.
  2266					;FIRST, E IS LOADED WITH ALL ONES AND AC0 IS LOADED WITH ALL ZEROS;
  2267					;THEN, HRRS IS EXECUTED WITH AC=AC0.  AC0 IS THEN CHECKED FOR ALL ZEROS.
  2268					;IF AC0 WAS MODIFIED BY THE HRRS INSTRUCTION, THE TEST FAIL.
  2269
  2270	031432	200 07 0 00 035001 	A4400:	MOVE	7,[-1]		;PRESET E OF THE HRRS INSTRUCTION TO ALL ONES
  2271	031433	200 00 0 00 035000 		MOVE	[0]		;PRESET AC0 TO ALL ZEROS
  2272	031434	543 00 0 00 000007 		HRRS	7		;*HRRS SHOULD NOT MODIFY THE AC WHEN THE AC IS AC0
  2273	031435	332 00 0 00 000000 		SKIPE			;SKIP THE HALT INSTRUCTION IF AC0 WAS INTACT
  2274						STOP^
  2275	031436	254 04 0 00 031437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2276	031437	324 00 0 00 031440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2277									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2278									;IN THE SUBTEST) TO LOOP ON ERROR^
  2279
  2280					;(HXXXS&AC=0): SAC INH [ST2], IR HWTFWT [IR3], IR XXXS [IR1], IR HWT [IR1],
  2281					;IR BITS S-A-1
  2282
  2283					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 20
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0063

  2284					;THIS TEST VERIFIES THAT THE JUMP INSTRUCTION DOES NOT MODIFY C(AC).
  2285					;THE AC IS FIRST LOADED WITH ALL ZEROS;
  2286					;THEN JUMP .+1 IS EXECUTED.  THE AC IS THEN CHECKED TO INSURE THAT IT WAS NOT MODIFIED
  2287					;BY JUMP.  THE TEST FAILS IF THE AC WAS MODIFIED
  2288
  2289	031440	200 00 0 00 035000 	A4700:	MOVE	[0]		; PRESET THE AC TO ALL ZEROS
  2290	031441	320 00 0 00 031442 		JUMP	.+1		;*JUMP SHOULD NOT MODIFY THE AC
  2291	031442	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF AC WAS INTACT
  2292						STOP^
  2293	031443	254 04 0 00 031444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2294	031444	324 00 0 00 031445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2295									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2296									;IN THE SUBTEST) TO LOOP ON ERROR^
  2297
  2298					;**********
  2299
  2300					;THIS TEST VERIFIES THAT MOVS WILL NOT PICK UP ANY ONES WHEN SWAPPING A WORD
  2301					;OF ALL ZEROS.  FIRST, E IS LOADED WITH A WORD OF ALL ZEROS;
  2302					;THEN, MOVS IS EXECUTED.  THE AC IS THEN CHECKED TO INSURE THAT THE RESULT DOES NOT
  2303					;CONTAIN ANY ONES.
  2304
  2305	031445	200 00 0 00 035000 	A5000:	MOVE	[0]		;PRESET E WITH ALL ZEROS
  2306	031446	204 00 0 00 000000 		MOVS			;*MOVS SHOULD RESULT WITH AN AC 0F ALL ZEROS
  2307	031447	332 00 0 00 000000 		SKIPE			;SKIP HALT INSTRUCTION IF C(AC)=0
  2308						STOP^
  2309	031450	254 04 0 00 031451 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2310	031451	324 00 0 00 031452 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2311									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2312									;IN THE SUBTEST) TO LOOP ON ERROR^
  2313
  2314					;**********
  2315
  2316					;THIS TEST VERIFIES THAT A MOVS EXECUTED ON AN E CONTAINING A NON-ZERO NUMBER
  2317					;RESULTS IN A NON-ZERO NUMBER IN THE AC.  FIRST A NON-ZERO WORD
  2318					;IS LOADED INTO E; THEN, MOVS IS EXECUTED.  THE AC IS CHECKED FOR A NON-ZERO RESULT.
  2319					;IF C(AC)=0, THE TEST FAILS.
  2320
  2321	031452	200 00 0 00 035055 	A5100:	MOVE	[XWD 0,-1]	;LOAD E WITH A NON-ZERO VALUE
  2322	031453	204 00 0 00 000000 		MOVS			;*MOVS SHOULD RESULT IN C(AC) NON-ZERO
  2323	031454	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF C(AC) OF MOVS IS NON-ZERO
  2324						STOP^
  2325	031455	254 04 0 00 031456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2326	031456	324 00 0 00 031457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2327									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2328									;IN THE SUBTEST) TO LOOP ON ERROR^
  2329
  2330					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 21
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0064

  2331					;THIS TEST VERIFIES THAT A MOVS EXECUTED ON AN E CONTAINING A NON-ZERO NUMBER
  2332					;RESULTS IN A NON-ZERO NUMBER IN THE AC.  FIRST A NON-ZERO WORD
  2333					;IS LOADED INTO E; THEN, MOVS IS EXECUTED.  THE AC IS CHECKED FOR A NON-ZERO
  2334					;RESULT.  IF C(AC)=0, THE TEST FAILS.
  2335
  2336	031457	200 00 0 00 035056 	A5200:	MOVE	[XWD -1,0]	;LOAD E OF MOVS WITH A NON-ZERO NUMBER
  2337	031460	204 00 0 00 000000 		MOVS			;*MOVS SHOULD RESULT WITH C(AC) NON-ZERO
  2338	031461	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF C(AC) OF MOVS IS NON-ZERO
  2339						STOP^
  2340	031462	254 04 0 00 031463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2341	031463	324 00 0 00 031464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2342									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2343									;IN THE SUBTEST) TO LOOP ON ERROR^
  2344
  2345					;**********
  2346
  2347					;THIS TEST VERIFIES THAT THE MOVS INSTRUCTION SWAPS BITS 0 AND 188 OF E
  2348					;AND STORES THEM IN THE AC UNLESS AR BIT 0 IS S-A-0.  FIRST, A WORD
  2349					;WITH BIT 0 SET TO A ONE AND BIT 18 CLEARED IS LOADED INTO E.  THEN, MOVS
  2350					;IS EXECUTED.  THE AC IS THEN CHECKED FOR A 0 IN BIT 0, WHICH IS THE
  2351					;CORRECT RESULT.
  2352
  2353	031464	200 00 0 00 035056 	A5300:	MOVE	[XWD -1,0]	;LOAD E OF MOVS WITH 777777000000
  2354	031465	204 00 0 00 000000 		MOVS			;*MOVS SHOULD RESULT WITH AC BIT 0 EQUAL TO 0
  2355	031466	337 00 0 00 000000 		SKIPG			;SKIP HALT INSTRUCTION IF BIT 0 OF AC IS 0
  2356						STOP^
  2357	031467	254 04 0 00 031470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2358	031470	324 00 0 00 031471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2359									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2360									;IN THE SUBTEST) TO LOOP ON ERROR^
  2361
  2362					;MOVSX: AR SWAP [ARMB], AR LT AR RT A [ARMB], AR LT AR RT B [ARMB],
  2363					;AR RT AR LT A [ARMB], AR RT AR LT B [ARMB], ET2 A F/F [E], IR MOVSX [IR1],
  2364					;IR MOV(E,S)X [IR1]
  2365
  2366					;**********
  2367
  2368					;THIS TEST VERIFIES THAT THE MOVS INSTRUCTION SWAPS BITS 0 AND 18 OF E AND
  2369					;STORES THEM IN THE AC UNLESS AR BIT 0 IS S-A-1.  FIRST, A WORD WITH BIT 0
  2370					;SET TO A ONE AND BIT 18 CLEARED IS LOADED INTO E.  THEN, MOVS IS EXECUTED.
  2371					;THE AC IS CHECKED FOR A ZERO IN BIT ZERO, WHICH IS THE CORRECT RESULT.
  2372
  2373	031471	200 00 0 00 035055 	A5400:	MOVE	[XWD 0,-1]	;LOAD E OF MOVS WITH 777777
  2374	031472	204 00 0 00 000000 		MOVS			;*MOVS SHOULD RESULT WITH BIT 0 OF THE AC SET
  2375	031473	331 00 0 00 000000 		SKIPL			;PASS IF AC BIT 0 IS SET
  2376						STOP^
  2377	031474	254 04 0 00 031475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2378	031475	324 00 0 00 031476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2379									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2380									;IN THE SUBTEST) TO LOOP ON ERROR^
  2381
  2382					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0065

  2383			005500		SN=5500
  2384			000000			ZZ=0
  2385
  2386					A5500:	REPEAT	^D18,
  2387					<;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2388					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2389					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2390					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2391					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2392					SN=SN+1
  2393						ZZ=ZZ+ZZ
  2394						IFE	ZZ,<ZZ=1>
  2395						MOVE	[0]		;CLEAR AC
  2396						MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2397						SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2398						STOP
  2399					
  2400					;**********
  2401					>
  2402					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2403					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2404					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2405					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2406					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2407			005501		SN=SN+1
  2408			000000			ZZ=ZZ+ZZ
  2409			000001			IFE	ZZ,<ZZ=1>
  2410	031476	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2411	031477	204 00 0 00 035012 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2412	031500	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2413						STOP^
  2414	031501	254 04 0 00 031502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2415	031502	324 00 0 00 031503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2416									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2417									;IN THE SUBTEST) TO LOOP ON ERROR^
  2418
  2419					;**********
  2420
  2421					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2422					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2423					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2424					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2425					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2426			005502		SN=SN+1
  2427			000002			ZZ=ZZ+ZZ
  2428						IFE	ZZ,<ZZ=1>
  2429	031503	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2430	031504	204 00 0 00 035013 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2431	031505	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2432						STOP^
  2433	031506	254 04 0 00 031507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2434	031507	324 00 0 00 031510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2435									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2436									;IN THE SUBTEST) TO LOOP ON ERROR^
  2437
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0066

  2438					;**********
  2439
  2440					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2441					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2442					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2443					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2444					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2445			005503		SN=SN+1
  2446			000004			ZZ=ZZ+ZZ
  2447						IFE	ZZ,<ZZ=1>
  2448	031510	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2449	031511	204 00 0 00 035014 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2450	031512	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2451						STOP^
  2452	031513	254 04 0 00 031514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2453	031514	324 00 0 00 031515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2454									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2455									;IN THE SUBTEST) TO LOOP ON ERROR^
  2456
  2457					;**********
  2458
  2459					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2460					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2461					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2462					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2463					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2464			005504		SN=SN+1
  2465			000010			ZZ=ZZ+ZZ
  2466						IFE	ZZ,<ZZ=1>
  2467	031515	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2468	031516	204 00 0 00 035015 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2469	031517	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2470						STOP^
  2471	031520	254 04 0 00 031521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2472	031521	324 00 0 00 031522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2473									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2474									;IN THE SUBTEST) TO LOOP ON ERROR^
  2475
  2476					;**********
  2477
  2478					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2479					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2480					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2481					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2482					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2483			005505		SN=SN+1
  2484			000020			ZZ=ZZ+ZZ
  2485						IFE	ZZ,<ZZ=1>
  2486	031522	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2487	031523	204 00 0 00 035016 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2488	031524	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2489						STOP^
  2490	031525	254 04 0 00 031526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2491	031526	324 00 0 00 031527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2492									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0067

  2493									;IN THE SUBTEST) TO LOOP ON ERROR^
  2494
  2495					;**********
  2496
  2497					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2498					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2499					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2500					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2501					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2502			005506		SN=SN+1
  2503			000040			ZZ=ZZ+ZZ
  2504						IFE	ZZ,<ZZ=1>
  2505	031527	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2506	031530	204 00 0 00 035017 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2507	031531	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2508						STOP^
  2509	031532	254 04 0 00 031533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2510	031533	324 00 0 00 031534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2511									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2512									;IN THE SUBTEST) TO LOOP ON ERROR^
  2513
  2514					;**********
  2515
  2516					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2517					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2518					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2519					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2520					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2521			005507		SN=SN+1
  2522			000100			ZZ=ZZ+ZZ
  2523						IFE	ZZ,<ZZ=1>
  2524	031534	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2525	031535	204 00 0 00 035020 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2526	031536	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2527						STOP^
  2528	031537	254 04 0 00 031540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2529	031540	324 00 0 00 031541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2530									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2531									;IN THE SUBTEST) TO LOOP ON ERROR^
  2532
  2533					;**********
  2534
  2535					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2536					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2537					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2538					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2539					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2540			005510		SN=SN+1
  2541			000200			ZZ=ZZ+ZZ
  2542						IFE	ZZ,<ZZ=1>
  2543	031541	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2544	031542	204 00 0 00 035021 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2545	031543	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2546						STOP^
  2547	031544	254 04 0 00 031545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0068

  2548	031545	324 00 0 00 031546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2549									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2550									;IN THE SUBTEST) TO LOOP ON ERROR^
  2551
  2552					;**********
  2553
  2554					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2555					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2556					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2557					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2558					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2559			005511		SN=SN+1
  2560			000400			ZZ=ZZ+ZZ
  2561						IFE	ZZ,<ZZ=1>
  2562	031546	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2563	031547	204 00 0 00 035022 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2564	031550	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2565						STOP^
  2566	031551	254 04 0 00 031552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2567	031552	324 00 0 00 031553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2568									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2569									;IN THE SUBTEST) TO LOOP ON ERROR^
  2570
  2571					;**********
  2572
  2573					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2574					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2575					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2576					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2577					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2578			005512		SN=SN+1
  2579			001000			ZZ=ZZ+ZZ
  2580						IFE	ZZ,<ZZ=1>
  2581	031553	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2582	031554	204 00 0 00 035023 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2583	031555	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2584						STOP^
  2585	031556	254 04 0 00 031557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2586	031557	324 00 0 00 031560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2587									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2588									;IN THE SUBTEST) TO LOOP ON ERROR^
  2589
  2590					;**********
  2591
  2592					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2593					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2594					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2595					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2596					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2597			005513		SN=SN+1
  2598			002000			ZZ=ZZ+ZZ
  2599						IFE	ZZ,<ZZ=1>
  2600	031560	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2601	031561	204 00 0 00 035024 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2602	031562	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0069

  2603						STOP^
  2604	031563	254 04 0 00 031564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2605	031564	324 00 0 00 031565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2606									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2607									;IN THE SUBTEST) TO LOOP ON ERROR^
  2608
  2609					;**********
  2610
  2611					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2612					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2613					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2614					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2615					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2616			005514		SN=SN+1
  2617			004000			ZZ=ZZ+ZZ
  2618						IFE	ZZ,<ZZ=1>
  2619	031565	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2620	031566	204 00 0 00 035025 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2621	031567	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2622						STOP^
  2623	031570	254 04 0 00 031571 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2624	031571	324 00 0 00 031572 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2625									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2626									;IN THE SUBTEST) TO LOOP ON ERROR^
  2627
  2628					;**********
  2629
  2630					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2631					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2632					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2633					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2634					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2635			005515		SN=SN+1
  2636			010000			ZZ=ZZ+ZZ
  2637						IFE	ZZ,<ZZ=1>
  2638	031572	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2639	031573	204 00 0 00 035026 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2640	031574	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2641						STOP^
  2642	031575	254 04 0 00 031576 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2643	031576	324 00 0 00 031577 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2644									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2645									;IN THE SUBTEST) TO LOOP ON ERROR^
  2646
  2647					;**********
  2648
  2649					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2650					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2651					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2652					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2653					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2654			005516		SN=SN+1
  2655			020000			ZZ=ZZ+ZZ
  2656						IFE	ZZ,<ZZ=1>
  2657	031577	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0070

  2658	031600	204 00 0 00 035027 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2659	031601	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2660						STOP^
  2661	031602	254 04 0 00 031603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2662	031603	324 00 0 00 031604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2663									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2664									;IN THE SUBTEST) TO LOOP ON ERROR^
  2665
  2666					;**********
  2667
  2668					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2669					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2670					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2671					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2672					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2673			005517		SN=SN+1
  2674			040000			ZZ=ZZ+ZZ
  2675						IFE	ZZ,<ZZ=1>
  2676	031604	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2677	031605	204 00 0 00 035030 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2678	031606	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2679						STOP^
  2680	031607	254 04 0 00 031610 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2681	031610	324 00 0 00 031611 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2682									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2683									;IN THE SUBTEST) TO LOOP ON ERROR^
  2684
  2685					;**********
  2686
  2687					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2688					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2689					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2690					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2691					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2692			005520		SN=SN+1
  2693			100000			ZZ=ZZ+ZZ
  2694						IFE	ZZ,<ZZ=1>
  2695	031611	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2696	031612	204 00 0 00 035031 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2697	031613	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2698						STOP^
  2699	031614	254 04 0 00 031615 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2700	031615	324 00 0 00 031616 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2701									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2702									;IN THE SUBTEST) TO LOOP ON ERROR^
  2703
  2704					;**********
  2705
  2706					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2707					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2708					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2709					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2710					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2711			005521		SN=SN+1
  2712			200000			ZZ=ZZ+ZZ
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0071

  2713						IFE	ZZ,<ZZ=1>
  2714	031616	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2715	031617	204 00 0 00 035032 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2716	031620	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2717						STOP^
  2718	031621	254 04 0 00 031622 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2719	031622	324 00 0 00 031623 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2720									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2721									;IN THE SUBTEST) TO LOOP ON ERROR^
  2722
  2723					;**********
  2724
  2725					;THIS TEST VERIFIES THAT AR LT INPUT IS FUNCTIONING.  A WORD OF ALL ZER0S,
  2726					;EXCEPT FOR ONE ONE IN THE RIGHT HALF IS SWAPPED.
  2727					;THE AC IS CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES
  2728					;IF C(AC) IS NON-ZERO. THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT
  2729					;OF THE LEFT HALF OF THE AC IS TESTED WITH A 1.
  2730			005522		SN=SN+1
  2731			400000			ZZ=ZZ+ZZ
  2732						IFE	ZZ,<ZZ=1>
  2733	031623	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2734	031624	204 00 0 00 035033 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2735	031625	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2736						STOP^
  2737	031626	254 04 0 00 031627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2738	031627	324 00 0 00 031630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2739									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2740									;IN THE SUBTEST) TO LOOP ON ERROR^
  2741
  2742					;**********
  2743
  2744			005600		SN=5600
  2745
  2746					A5600:	REPEAT	^D18,
  2747					<;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2748					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2749					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2750					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2751					;HALF OF THE AC IS TESTED WITH A 1.
  2752					
  2753					SN=SN+1
  2754						ZZ=ZZ+ZZ
  2755						MOVE	[0]		;CLEAR AC
  2756						MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2757						SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2758						STOP
  2759					
  2760					;**********
  2761					>
  2762					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2763					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2764					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2765					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2766					;HALF OF THE AC IS TESTED WITH A 1.
  2767
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0072

  2768			005601		SN=SN+1
  2769		000001	000000			ZZ=ZZ+ZZ
  2770	031630	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2771	031631	204 00 0 00 035034 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2772	031632	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2773						STOP^
  2774	031633	254 04 0 00 031634 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2775	031634	324 00 0 00 031635 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2776									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2777									;IN THE SUBTEST) TO LOOP ON ERROR^
  2778
  2779					;**********
  2780
  2781					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2782					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2783					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2784					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2785					;HALF OF THE AC IS TESTED WITH A 1.
  2786
  2787			005602		SN=SN+1
  2788		000002	000000			ZZ=ZZ+ZZ
  2789	031635	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2790	031636	204 00 0 00 035035 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2791	031637	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2792						STOP^
  2793	031640	254 04 0 00 031641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2794	031641	324 00 0 00 031642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2795									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2796									;IN THE SUBTEST) TO LOOP ON ERROR^
  2797
  2798					;**********
  2799
  2800					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2801					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2802					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2803					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2804					;HALF OF THE AC IS TESTED WITH A 1.
  2805
  2806			005603		SN=SN+1
  2807		000004	000000			ZZ=ZZ+ZZ
  2808	031642	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2809	031643	204 00 0 00 035036 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2810	031644	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2811						STOP^
  2812	031645	254 04 0 00 031646 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2813	031646	324 00 0 00 031647 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2814									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2815									;IN THE SUBTEST) TO LOOP ON ERROR^
  2816
  2817					;**********
  2818
  2819					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2820					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2821					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2822					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0073

  2823					;HALF OF THE AC IS TESTED WITH A 1.
  2824
  2825			005604		SN=SN+1
  2826		000010	000000			ZZ=ZZ+ZZ
  2827	031647	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2828	031650	204 00 0 00 035037 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2829	031651	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2830						STOP^
  2831	031652	254 04 0 00 031653 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2832	031653	324 00 0 00 031654 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2833									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2834									;IN THE SUBTEST) TO LOOP ON ERROR^
  2835
  2836					;**********
  2837
  2838					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2839					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2840					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2841					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2842					;HALF OF THE AC IS TESTED WITH A 1.
  2843
  2844			005605		SN=SN+1
  2845		000020	000000			ZZ=ZZ+ZZ
  2846	031654	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2847	031655	204 00 0 00 035040 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2848	031656	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2849						STOP^
  2850	031657	254 04 0 00 031660 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2851	031660	324 00 0 00 031661 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2852									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2853									;IN THE SUBTEST) TO LOOP ON ERROR^
  2854
  2855					;**********
  2856
  2857					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2858					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2859					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2860					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2861					;HALF OF THE AC IS TESTED WITH A 1.
  2862
  2863			005606		SN=SN+1
  2864		000040	000000			ZZ=ZZ+ZZ
  2865	031661	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2866	031662	204 00 0 00 035041 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2867	031663	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2868						STOP^
  2869	031664	254 04 0 00 031665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2870	031665	324 00 0 00 031666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2871									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2872									;IN THE SUBTEST) TO LOOP ON ERROR^
  2873
  2874					;**********
  2875
  2876					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2877					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0074

  2878					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2879					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2880					;HALF OF THE AC IS TESTED WITH A 1.
  2881
  2882			005607		SN=SN+1
  2883		000100	000000			ZZ=ZZ+ZZ
  2884	031666	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2885	031667	204 00 0 00 035042 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2886	031670	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2887						STOP^
  2888	031671	254 04 0 00 031672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2889	031672	324 00 0 00 031673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2890									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2891									;IN THE SUBTEST) TO LOOP ON ERROR^
  2892
  2893					;**********
  2894
  2895					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2896					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2897					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2898					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2899					;HALF OF THE AC IS TESTED WITH A 1.
  2900
  2901			005610		SN=SN+1
  2902		000200	000000			ZZ=ZZ+ZZ
  2903	031673	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2904	031674	204 00 0 00 035043 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2905	031675	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2906						STOP^
  2907	031676	254 04 0 00 031677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2908	031677	324 00 0 00 031700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2909									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2910									;IN THE SUBTEST) TO LOOP ON ERROR^
  2911
  2912					;**********
  2913
  2914					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2915					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2916					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2917					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2918					;HALF OF THE AC IS TESTED WITH A 1.
  2919
  2920			005611		SN=SN+1
  2921		000400	000000			ZZ=ZZ+ZZ
  2922	031700	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2923	031701	204 00 0 00 035011 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2924	031702	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2925						STOP^
  2926	031703	254 04 0 00 031704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2927	031704	324 00 0 00 031705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2928									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2929									;IN THE SUBTEST) TO LOOP ON ERROR^
  2930
  2931					;**********
  2932
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0075

  2933					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2934					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2935					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2936					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2937					;HALF OF THE AC IS TESTED WITH A 1.
  2938
  2939			005612		SN=SN+1
  2940		001000	000000			ZZ=ZZ+ZZ
  2941	031705	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2942	031706	204 00 0 00 035044 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2943	031707	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2944						STOP^
  2945	031710	254 04 0 00 031711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2946	031711	324 00 0 00 031712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2947									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2948									;IN THE SUBTEST) TO LOOP ON ERROR^
  2949
  2950					;**********
  2951
  2952					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2953					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2954					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2955					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2956					;HALF OF THE AC IS TESTED WITH A 1.
  2957
  2958			005613		SN=SN+1
  2959		002000	000000			ZZ=ZZ+ZZ
  2960	031712	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2961	031713	204 00 0 00 035045 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2962	031714	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2963						STOP^
  2964	031715	254 04 0 00 031716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2965	031716	324 00 0 00 031717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2966									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2967									;IN THE SUBTEST) TO LOOP ON ERROR^
  2968
  2969					;**********
  2970
  2971					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2972					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2973					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2974					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2975					;HALF OF THE AC IS TESTED WITH A 1.
  2976
  2977			005614		SN=SN+1
  2978		004000	000000			ZZ=ZZ+ZZ
  2979	031717	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2980	031720	204 00 0 00 035046 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  2981	031721	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  2982						STOP^
  2983	031722	254 04 0 00 031723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  2984	031723	324 00 0 00 031724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  2985									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  2986									;IN THE SUBTEST) TO LOOP ON ERROR^
  2987
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0076

  2988					;**********
  2989
  2990					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  2991					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  2992					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  2993					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  2994					;HALF OF THE AC IS TESTED WITH A 1.
  2995
  2996			005615		SN=SN+1
  2997		010000	000000			ZZ=ZZ+ZZ
  2998	031724	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  2999	031725	204 00 0 00 035047 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3000	031726	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3001						STOP^
  3002	031727	254 04 0 00 031730 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3003	031730	324 00 0 00 031731 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3004									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3005									;IN THE SUBTEST) TO LOOP ON ERROR^
  3006
  3007					;**********
  3008
  3009					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  3010					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  3011					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  3012					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  3013					;HALF OF THE AC IS TESTED WITH A 1.
  3014
  3015			005616		SN=SN+1
  3016		020000	000000			ZZ=ZZ+ZZ
  3017	031731	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  3018	031732	204 00 0 00 035050 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3019	031733	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3020						STOP^
  3021	031734	254 04 0 00 031735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3022	031735	324 00 0 00 031736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3023									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3024									;IN THE SUBTEST) TO LOOP ON ERROR^
  3025
  3026					;**********
  3027
  3028					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  3029					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  3030					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  3031					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  3032					;HALF OF THE AC IS TESTED WITH A 1.
  3033
  3034			005617		SN=SN+1
  3035		040000	000000			ZZ=ZZ+ZZ
  3036	031736	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  3037	031737	204 00 0 00 035051 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3038	031740	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3039						STOP^
  3040	031741	254 04 0 00 031742 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3041	031742	324 00 0 00 031743 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3042									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0077

  3043									;IN THE SUBTEST) TO LOOP ON ERROR^
  3044
  3045					;**********
  3046
  3047					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  3048					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  3049					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  3050					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  3051					;HALF OF THE AC IS TESTED WITH A 1.
  3052
  3053			005620		SN=SN+1
  3054		100000	000000			ZZ=ZZ+ZZ
  3055	031743	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  3056	031744	204 00 0 00 035052 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3057	031745	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3058						STOP^
  3059	031746	254 04 0 00 031747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3060	031747	324 00 0 00 031750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3061									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3062									;IN THE SUBTEST) TO LOOP ON ERROR^
  3063
  3064					;**********
  3065
  3066					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  3067					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  3068					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  3069					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  3070					;HALF OF THE AC IS TESTED WITH A 1.
  3071
  3072			005621		SN=SN+1
  3073		200000	000000			ZZ=ZZ+ZZ
  3074	031750	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  3075	031751	204 00 0 00 035053 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3076	031752	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3077						STOP^
  3078	031753	254 04 0 00 031754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3079	031754	324 00 0 00 031755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3080									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3081									;IN THE SUBTEST) TO LOOP ON ERROR^
  3082
  3083					;**********
  3084
  3085					;THIS TEST VERIFIES THAT AR RT INPUT IS FUNCTIONING.  A WORD OF ALL
  3086					;ZEROS, EXCEPT FOR ONE ONE IN THE LEFT HALF IS SWAPPED.  THE AC IS
  3087					;CHECKED FOR ITS CONTENTS NON-ZERO.  THE TEST PASSES IF C(AC) IS
  3088					;NON-ZERO.  THIS TEST IS REPEATED 18 TIMES SO THAT EACH BIT OF THE RIGHT
  3089					;HALF OF THE AC IS TESTED WITH A 1.
  3090
  3091			005622		SN=SN+1
  3092		400000	000000			ZZ=ZZ+ZZ
  3093	031755	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  3094	031756	204 00 0 00 035003 		MOVS	[ZZ]		;*MOVS SHOULD RESULT WITH A NON-ZERO WORD IN THE AC
  3095	031757	336 00 0 00 000000 		SKIPN			;SKIP HALT INSTRUCTION IF SET BIT IS NOT LOST IN SWAP.
  3096						STOP^
  3097	031760	254 04 0 00 031761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 22-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF SKIP, FULL WORD TRANSFER AND HALF WORD TRANSFER INSTRUCTIONS               SEQ 0078

  3098	031761	324 00 0 00 031762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3099									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3100									;IN THE SUBTEST) TO LOOP ON ERROR^
  3101
  3102					;**********
  3103
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 23
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0079

  3104					SUBTTL	TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)
  3105
  3106					;THIS TEST VERIFIES THAT SETM LOADS AC FROM E.  THE AC IS FIRST SET
  3107					;TO ZERO; THEN, SETM IS EXECUTED WITH ALL ONES IN E.  BIT 0 OF THE AC
  3108					;IS THEN CHECKED FOR A 1.
  3109
  3110	031762	200 00 0 00 035000 	A5700:	MOVE	[0]		;PRELOAD AC WITH ALL ZEROS
  3111	031763	414 00 0 00 035001 		SETM	[-1]		;*SETM SHOULD LOAD AC WITH ALL ONES
  3112	031764	331 00 0 00 000000 		SKIPL			;PASS TEST IF AC BIT 0 IS A ONE
  3113						STOP^
  3114	031765	254 04 0 00 031766 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3115	031766	324 00 0 00 031767 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3116									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3117									;IN THE SUBTEST) TO LOOP ON ERROR^
  3118					;FCE [F1], IR BOOLE [IR1], IRXX(0,5,12,17) [IR2]
  3119
  3120					;**********
  3121
  3122					;THIS TEST VERIFIES THAT SETM LOADS AC FROM E.  THE AC IS FIRST SET TO
  3123					;ALL ONES; THEN, SETM IS EXECUTED WITH ALL ZEROS IN E.  THE AC IS CHECKED
  3124					;FOR ALL ZEROS
  3125
  3126	031767	200 00 0 00 035001 	A6000:	MOVE	[-1]		;PRESET AC TO ALL ONES
  3127	031770	414 00 0 00 035000 		SETM	[0]		;*SETM SHOULD LOAD AC WITH ALL ONES
  3128	031771	332 00 0 00 000000 		SKIPE			;PASSES TEST IF C(AC) = 0
  3129						STOP^
  3130	031772	254 04 0 00 031773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3131	031773	324 00 0 00 031774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3132									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3133									;IN THE SUBTEST) TO LOOP ON ERROR^
  3134
  3135					;AD AR + EN [ADAP], AD AR + EN C[ADAP],
  3136					;F CYC ACT EN A[F1], IR BOOLE AD A +F[IR2],
  3137					;IR BOOLE [IR1], IRXX(1-3,6,11,15,16) [IR2]
  3138
  3139					;**********
  3140
  3141					;THIS TEST VERIFIES THAT SETZ LOADS TH AC WITH ALL ZEROS.  FIRST, A WORD
  3142					;OF ALL ZEROS IS LOADED INTO THE AC VIA A MOVE INSTC. THEN, SETZ IS
  3143					;EXECUTED.  THE AC IS CHECKED FOR ALL ZEROS.
  3144					;IF ANY BITS IN THE AC ARE SET, THE TEST FAILS.
  3145
  3146	031774	200 00 0 00 035000 	A6100:	MOVE	[0]		;RESET AC TO ALL ZEROS
  3147	031775	400 00 0 00 000000 		SETZ			;*SETZ SHOULD CLEAR THE AC
  3148	031776	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC) = 0
  3149						STOP^
  3150	031777	254 04 0 00 032000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3151	032000	324 00 0 00 032001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3152									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3153									;IN THE SUBTEST) TO LOOP ON ERROR^
  3154
  3155					;AD MASK GEN EN [ADC1], AD MASK GEN F/F'S [ADC1]
  3156					;AD MASK EN B; F CYC ACT EN B[F1]; IRXX00 [IR1];
  3157					;IR BOOLE [IR1]
  3158
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 23-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0080

  3159					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0081

  3160					;THIS TEST VERIFIES THAT SETZ LOADS THE AC WITH ALL ZEROS.  FIRST,
  3161					;THE AC IS SET TO ALL ONES; THEN, SETZ IS EXECUTED.  THE AC IS THEN
  3162					;CHECKED FOR ALL ZEROS.  IF ANY BITS IN THE AC ARE SET, THE TEST FAILS.
  3163
  3164	032001	200 00 0 00 035001 	A6200:	MOVE	[-1]		;PRESET AC TO ALL ONES
  3165	032002	400 00 0 00 032002 		SETZ	.		;*SETZ SHOULD CLEAR THE AC
  3166	032003	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC) = 0
  3167						STOP^
  3168	032004	254 04 0 00 032005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3169	032005	324 00 0 00 032006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3170									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3171									;IN THE SUBTEST) TO LOOP ON ERROR^
  3172
  3173					;AR AD EN [ARMA], AR AD ET2 EN [ARMA], IR BOOLE [IR]
  3174
  3175					;**********
  3176
  3177					;THIS TEST VERIFIES THAT THE AND INSTRUCTION OPERATING ON AN AC
  3178					;CONTAINING ALL ZEROS AND AN E CONTAINING ALL ZEROS RESULTS IN AN AC
  3179					;OF ALL ZEROS.  THE AC AND E ARE THE SAME IN THIS TEST.
  3180					;AC, E ARE LOADED WITH ZEROS; THEN, AND IS EXECUTED.  THE AC IS THEN
  3181					;CHECKED FOR ALL ZEROS.  IF ANY BITS IN THE AC ARE SET BY THE AND INSTRUCTION,
  3182					;THE TEST FAILS.
  3183
  3184
  3185	032006	200 00 0 00 035000 	A6300:	MOVE	[0]		;PRESET AC, E TO ALL ZEROS
  3186	032007	404 00 0 00 000000 		AND			;*AND SHOULD RESULT IN C(AC) = 0
  3187	032010	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC) = 0
  3188						STOP^
  3189	032011	254 04 0 00 032012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3190	032012	324 00 0 00 032013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3191									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3192									;IN THE SUBTEST) TO LOOP ON ERROR^
  3193
  3194					;**********
  3195			006400		SN=6400
  3196			000000			ZZ=0
  3197
  3198					A6400:	REPEAT	^D36,
  3199					<;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3200					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3201					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3202					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3203					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3204					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3205					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3206					
  3207					SN=SN+1
  3208						ZZ=ZZ+ZZ
  3209						IFE	ZZ,<ZZ=1>
  3210						SETZ			;PRESET E TO ALL ZEROS
  3211						MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3212									;WHERE X VARIES FROM 0 THRU 35
  3213						AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3214						SKIPE	1		;FAIL IF C(AC) NON-ZERO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0082

  3215						STOP
  3216						SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3217						STOP
  3218					;**********
  3219					>
  3220					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3221					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3222					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3223					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3224					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3225					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3226					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3227
  3228			006401		SN=SN+1
  3229			000000			ZZ=ZZ+ZZ
  3230			000001			IFE	ZZ,<ZZ=1>
  3231	032013	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3232	032014	200 01 0 00 035012 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3233									;WHERE X VARIES FROM 0 THRU 35
  3234	032015	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3235	032016	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3236						STOP^
  3237	032017	254 04 0 00 032020 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3238	032020	324 00 0 00 032021 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3239									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3240									;IN THE SUBTEST) TO LOOP ON ERROR^
  3241	032021	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3242						STOP^
  3243	032022	254 04 0 00 032023 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3244	032023	324 00 0 00 032024 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3245									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3246									;IN THE SUBTEST) TO LOOP ON ERROR^
  3247					;**********
  3248
  3249					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3250					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3251					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3252					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3253					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3254					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3255					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3256
  3257			006402		SN=SN+1
  3258			000002			ZZ=ZZ+ZZ
  3259						IFE	ZZ,<ZZ=1>
  3260	032024	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3261	032025	200 01 0 00 035013 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3262									;WHERE X VARIES FROM 0 THRU 35
  3263	032026	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3264	032027	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3265						STOP^
  3266	032030	254 04 0 00 032031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3267	032031	324 00 0 00 032032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3268									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3269									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0083

  3270	032032	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3271						STOP^
  3272	032033	254 04 0 00 032034 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3273	032034	324 00 0 00 032035 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3274									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3275									;IN THE SUBTEST) TO LOOP ON ERROR^
  3276					;**********
  3277
  3278					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3279					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3280					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3281					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3282					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3283					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3284					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3285
  3286			006403		SN=SN+1
  3287			000004			ZZ=ZZ+ZZ
  3288						IFE	ZZ,<ZZ=1>
  3289	032035	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3290	032036	200 01 0 00 035014 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3291									;WHERE X VARIES FROM 0 THRU 35
  3292	032037	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3293	032040	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3294						STOP^
  3295	032041	254 04 0 00 032042 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3296	032042	324 00 0 00 032043 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3297									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3298									;IN THE SUBTEST) TO LOOP ON ERROR^
  3299	032043	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3300						STOP^
  3301	032044	254 04 0 00 032045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3302	032045	324 00 0 00 032046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3303									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3304									;IN THE SUBTEST) TO LOOP ON ERROR^
  3305					;**********
  3306
  3307					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3308					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3309					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3310					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3311					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3312					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3313					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3314
  3315			006404		SN=SN+1
  3316			000010			ZZ=ZZ+ZZ
  3317						IFE	ZZ,<ZZ=1>
  3318	032046	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3319	032047	200 01 0 00 035015 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3320									;WHERE X VARIES FROM 0 THRU 35
  3321	032050	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3322	032051	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3323						STOP^
  3324	032052	254 04 0 00 032053 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0084

  3325	032053	324 00 0 00 032054 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3326									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3327									;IN THE SUBTEST) TO LOOP ON ERROR^
  3328	032054	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3329						STOP^
  3330	032055	254 04 0 00 032056 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3331	032056	324 00 0 00 032057 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3332									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3333									;IN THE SUBTEST) TO LOOP ON ERROR^
  3334					;**********
  3335
  3336					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3337					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3338					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3339					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3340					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3341					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3342					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3343
  3344			006405		SN=SN+1
  3345			000020			ZZ=ZZ+ZZ
  3346						IFE	ZZ,<ZZ=1>
  3347	032057	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3348	032060	200 01 0 00 035016 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3349									;WHERE X VARIES FROM 0 THRU 35
  3350	032061	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3351	032062	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3352						STOP^
  3353	032063	254 04 0 00 032064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3354	032064	324 00 0 00 032065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3355									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3356									;IN THE SUBTEST) TO LOOP ON ERROR^
  3357	032065	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3358						STOP^
  3359	032066	254 04 0 00 032067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3360	032067	324 00 0 00 032070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3362									;IN THE SUBTEST) TO LOOP ON ERROR^
  3363					;**********
  3364
  3365					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3366					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3367					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3368					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3369					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3370					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3371					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3372
  3373			006406		SN=SN+1
  3374			000040			ZZ=ZZ+ZZ
  3375						IFE	ZZ,<ZZ=1>
  3376	032070	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3377	032071	200 01 0 00 035017 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3378									;WHERE X VARIES FROM 0 THRU 35
  3379	032072	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0085

  3380	032073	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3381						STOP^
  3382	032074	254 04 0 00 032075 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3383	032075	324 00 0 00 032076 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3385									;IN THE SUBTEST) TO LOOP ON ERROR^
  3386	032076	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3387						STOP^
  3388	032077	254 04 0 00 032100 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3389	032100	324 00 0 00 032101 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3391									;IN THE SUBTEST) TO LOOP ON ERROR^
  3392					;**********
  3393
  3394					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3395					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3396					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3397					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3398					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3399					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3400					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3401
  3402			006407		SN=SN+1
  3403			000100			ZZ=ZZ+ZZ
  3404						IFE	ZZ,<ZZ=1>
  3405	032101	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3406	032102	200 01 0 00 035020 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3407									;WHERE X VARIES FROM 0 THRU 35
  3408	032103	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3409	032104	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3410						STOP^
  3411	032105	254 04 0 00 032106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3412	032106	324 00 0 00 032107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3413									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3414									;IN THE SUBTEST) TO LOOP ON ERROR^
  3415	032107	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3416						STOP^
  3417	032110	254 04 0 00 032111 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3418	032111	324 00 0 00 032112 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3419									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3420									;IN THE SUBTEST) TO LOOP ON ERROR^
  3421					;**********
  3422
  3423					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3424					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3425					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3426					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3427					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3428					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3429					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3430
  3431			006410		SN=SN+1
  3432			000200			ZZ=ZZ+ZZ
  3433						IFE	ZZ,<ZZ=1>
  3434	032112	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0086

  3435	032113	200 01 0 00 035021 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3436									;WHERE X VARIES FROM 0 THRU 35
  3437	032114	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3438	032115	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3439						STOP^
  3440	032116	254 04 0 00 032117 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3441	032117	324 00 0 00 032120 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3442									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3443									;IN THE SUBTEST) TO LOOP ON ERROR^
  3444	032120	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3445						STOP^
  3446	032121	254 04 0 00 032122 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3447	032122	324 00 0 00 032123 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3448									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3449									;IN THE SUBTEST) TO LOOP ON ERROR^
  3450					;**********
  3451
  3452					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3453					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3454					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3455					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3456					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3457					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3458					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3459
  3460			006411		SN=SN+1
  3461			000400			ZZ=ZZ+ZZ
  3462						IFE	ZZ,<ZZ=1>
  3463	032123	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3464	032124	200 01 0 00 035022 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3465									;WHERE X VARIES FROM 0 THRU 35
  3466	032125	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3467	032126	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3468						STOP^
  3469	032127	254 04 0 00 032130 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3470	032130	324 00 0 00 032131 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3471									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3472									;IN THE SUBTEST) TO LOOP ON ERROR^
  3473	032131	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3474						STOP^
  3475	032132	254 04 0 00 032133 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3476	032133	324 00 0 00 032134 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3477									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3478									;IN THE SUBTEST) TO LOOP ON ERROR^
  3479					;**********
  3480
  3481					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3482					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3483					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3484					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3485					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3486					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3487					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3488
  3489			006412		SN=SN+1
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0087

  3490			001000			ZZ=ZZ+ZZ
  3491						IFE	ZZ,<ZZ=1>
  3492	032134	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3493	032135	200 01 0 00 035023 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3494									;WHERE X VARIES FROM 0 THRU 35
  3495	032136	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3496	032137	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3497						STOP^
  3498	032140	254 04 0 00 032141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3499	032141	324 00 0 00 032142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3500									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3501									;IN THE SUBTEST) TO LOOP ON ERROR^
  3502	032142	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3503						STOP^
  3504	032143	254 04 0 00 032144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3505	032144	324 00 0 00 032145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3506									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3507									;IN THE SUBTEST) TO LOOP ON ERROR^
  3508					;**********
  3509
  3510					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3511					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3512					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3513					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3514					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3515					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3516					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3517
  3518			006413		SN=SN+1
  3519			002000			ZZ=ZZ+ZZ
  3520						IFE	ZZ,<ZZ=1>
  3521	032145	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3522	032146	200 01 0 00 035024 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3523									;WHERE X VARIES FROM 0 THRU 35
  3524	032147	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3525	032150	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3526						STOP^
  3527	032151	254 04 0 00 032152 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3528	032152	324 00 0 00 032153 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3529									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3530									;IN THE SUBTEST) TO LOOP ON ERROR^
  3531	032153	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3532						STOP^
  3533	032154	254 04 0 00 032155 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3534	032155	324 00 0 00 032156 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3535									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3536									;IN THE SUBTEST) TO LOOP ON ERROR^
  3537					;**********
  3538
  3539					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3540					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3541					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3542					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3543					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3544					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0088

  3545					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3546
  3547			006414		SN=SN+1
  3548			004000			ZZ=ZZ+ZZ
  3549						IFE	ZZ,<ZZ=1>
  3550	032156	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3551	032157	200 01 0 00 035025 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3552									;WHERE X VARIES FROM 0 THRU 35
  3553	032160	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3554	032161	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3555						STOP^
  3556	032162	254 04 0 00 032163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3557	032163	324 00 0 00 032164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3558									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3559									;IN THE SUBTEST) TO LOOP ON ERROR^
  3560	032164	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3561						STOP^
  3562	032165	254 04 0 00 032166 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3563	032166	324 00 0 00 032167 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3564									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3565									;IN THE SUBTEST) TO LOOP ON ERROR^
  3566					;**********
  3567
  3568					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3569					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3570					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3571					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3572					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3573					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3574					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3575
  3576			006415		SN=SN+1
  3577			010000			ZZ=ZZ+ZZ
  3578						IFE	ZZ,<ZZ=1>
  3579	032167	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3580	032170	200 01 0 00 035026 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3581									;WHERE X VARIES FROM 0 THRU 35
  3582	032171	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3583	032172	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3584						STOP^
  3585	032173	254 04 0 00 032174 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3586	032174	324 00 0 00 032175 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3587									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3588									;IN THE SUBTEST) TO LOOP ON ERROR^
  3589	032175	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3590						STOP^
  3591	032176	254 04 0 00 032177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3592	032177	324 00 0 00 032200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3593									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3594									;IN THE SUBTEST) TO LOOP ON ERROR^
  3595					;**********
  3596
  3597					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3598					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3599					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0089

  3600					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3601					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3602					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3603					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3604
  3605			006416		SN=SN+1
  3606			020000			ZZ=ZZ+ZZ
  3607						IFE	ZZ,<ZZ=1>
  3608	032200	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3609	032201	200 01 0 00 035027 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3610									;WHERE X VARIES FROM 0 THRU 35
  3611	032202	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3612	032203	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3613						STOP^
  3614	032204	254 04 0 00 032205 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3615	032205	324 00 0 00 032206 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3616									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3617									;IN THE SUBTEST) TO LOOP ON ERROR^
  3618	032206	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3619						STOP^
  3620	032207	254 04 0 00 032210 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3621	032210	324 00 0 00 032211 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3622									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3623									;IN THE SUBTEST) TO LOOP ON ERROR^
  3624					;**********
  3625
  3626					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3627					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3628					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3629					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3630					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3631					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3632					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3633
  3634			006417		SN=SN+1
  3635			040000			ZZ=ZZ+ZZ
  3636						IFE	ZZ,<ZZ=1>
  3637	032211	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3638	032212	200 01 0 00 035030 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3639									;WHERE X VARIES FROM 0 THRU 35
  3640	032213	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3641	032214	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3642						STOP^
  3643	032215	254 04 0 00 032216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3644	032216	324 00 0 00 032217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3645									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3646									;IN THE SUBTEST) TO LOOP ON ERROR^
  3647	032217	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3648						STOP^
  3649	032220	254 04 0 00 032221 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3650	032221	324 00 0 00 032222 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3651									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3652									;IN THE SUBTEST) TO LOOP ON ERROR^
  3653					;**********
  3654
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0090

  3655					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3656					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3657					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3658					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3659					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3660					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3661					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3662
  3663			006420		SN=SN+1
  3664			100000			ZZ=ZZ+ZZ
  3665						IFE	ZZ,<ZZ=1>
  3666	032222	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3667	032223	200 01 0 00 035031 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3668									;WHERE X VARIES FROM 0 THRU 35
  3669	032224	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3670	032225	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3671						STOP^
  3672	032226	254 04 0 00 032227 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3673	032227	324 00 0 00 032230 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3674									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3675									;IN THE SUBTEST) TO LOOP ON ERROR^
  3676	032230	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3677						STOP^
  3678	032231	254 04 0 00 032232 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3679	032232	324 00 0 00 032233 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3680									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3681									;IN THE SUBTEST) TO LOOP ON ERROR^
  3682					;**********
  3683
  3684					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3685					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3686					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3687					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3688					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3689					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3690					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3691
  3692			006421		SN=SN+1
  3693			200000			ZZ=ZZ+ZZ
  3694						IFE	ZZ,<ZZ=1>
  3695	032233	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3696	032234	200 01 0 00 035032 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3697									;WHERE X VARIES FROM 0 THRU 35
  3698	032235	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3699	032236	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3700						STOP^
  3701	032237	254 04 0 00 032240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3702	032240	324 00 0 00 032241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3703									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3704									;IN THE SUBTEST) TO LOOP ON ERROR^
  3705	032241	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3706						STOP^
  3707	032242	254 04 0 00 032243 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3708	032243	324 00 0 00 032244 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3709									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0091

  3710									;IN THE SUBTEST) TO LOOP ON ERROR^
  3711					;**********
  3712
  3713					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3714					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3715					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3716					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3717					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3718					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3719					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3720
  3721			006422		SN=SN+1
  3722			400000			ZZ=ZZ+ZZ
  3723						IFE	ZZ,<ZZ=1>
  3724	032244	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3725	032245	200 01 0 00 035033 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3726									;WHERE X VARIES FROM 0 THRU 35
  3727	032246	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3728	032247	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3729						STOP^
  3730	032250	254 04 0 00 032251 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3731	032251	324 00 0 00 032252 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3732									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3733									;IN THE SUBTEST) TO LOOP ON ERROR^
  3734	032252	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3735						STOP^
  3736	032253	254 04 0 00 032254 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3737	032254	324 00 0 00 032255 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3738									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3739									;IN THE SUBTEST) TO LOOP ON ERROR^
  3740					;**********
  3741
  3742					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3743					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3744					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3745					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3746					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3747					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3748					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3749
  3750			006423		SN=SN+1
  3751		000001	000000			ZZ=ZZ+ZZ
  3752						IFE	ZZ,<ZZ=1>
  3753	032255	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3754	032256	200 01 0 00 035034 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3755									;WHERE X VARIES FROM 0 THRU 35
  3756	032257	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3757	032260	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3758						STOP^
  3759	032261	254 04 0 00 032262 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3760	032262	324 00 0 00 032263 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3761									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3762									;IN THE SUBTEST) TO LOOP ON ERROR^
  3763	032263	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3764						STOP^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0092

  3765	032264	254 04 0 00 032265 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3766	032265	324 00 0 00 032266 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3767									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3768									;IN THE SUBTEST) TO LOOP ON ERROR^
  3769					;**********
  3770
  3771					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3772					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3773					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3774					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3775					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3776					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3777					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3778
  3779			006424		SN=SN+1
  3780		000002	000000			ZZ=ZZ+ZZ
  3781						IFE	ZZ,<ZZ=1>
  3782	032266	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3783	032267	200 01 0 00 035035 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3784									;WHERE X VARIES FROM 0 THRU 35
  3785	032270	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3786	032271	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3787						STOP^
  3788	032272	254 04 0 00 032273 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3789	032273	324 00 0 00 032274 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3790									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3791									;IN THE SUBTEST) TO LOOP ON ERROR^
  3792	032274	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3793						STOP^
  3794	032275	254 04 0 00 032276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3795	032276	324 00 0 00 032277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3797									;IN THE SUBTEST) TO LOOP ON ERROR^
  3798					;**********
  3799
  3800					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3801					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3802					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3803					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3804					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3805					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3806					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3807
  3808			006425		SN=SN+1
  3809		000004	000000			ZZ=ZZ+ZZ
  3810						IFE	ZZ,<ZZ=1>
  3811	032277	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3812	032300	200 01 0 00 035036 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3813									;WHERE X VARIES FROM 0 THRU 35
  3814	032301	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3815	032302	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3816						STOP^
  3817	032303	254 04 0 00 032304 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3818	032304	324 00 0 00 032305 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3819									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0093

  3820									;IN THE SUBTEST) TO LOOP ON ERROR^
  3821	032305	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3822						STOP^
  3823	032306	254 04 0 00 032307 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3824	032307	324 00 0 00 032310 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3825									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3826									;IN THE SUBTEST) TO LOOP ON ERROR^
  3827					;**********
  3828
  3829					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3830					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3831					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3832					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3833					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3834					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3835					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3836
  3837			006426		SN=SN+1
  3838		000010	000000			ZZ=ZZ+ZZ
  3839						IFE	ZZ,<ZZ=1>
  3840	032310	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3841	032311	200 01 0 00 035037 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3842									;WHERE X VARIES FROM 0 THRU 35
  3843	032312	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3844	032313	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3845						STOP^
  3846	032314	254 04 0 00 032315 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3847	032315	324 00 0 00 032316 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3848									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3849									;IN THE SUBTEST) TO LOOP ON ERROR^
  3850	032316	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3851						STOP^
  3852	032317	254 04 0 00 032320 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3853	032320	324 00 0 00 032321 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3854									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3855									;IN THE SUBTEST) TO LOOP ON ERROR^
  3856					;**********
  3857
  3858					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3859					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3860					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3861					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3862					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3863					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3864					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3865
  3866			006427		SN=SN+1
  3867		000020	000000			ZZ=ZZ+ZZ
  3868						IFE	ZZ,<ZZ=1>
  3869	032321	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3870	032322	200 01 0 00 035040 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3871									;WHERE X VARIES FROM 0 THRU 35
  3872	032323	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3873	032324	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3874						STOP^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0094

  3875	032325	254 04 0 00 032326 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3876	032326	324 00 0 00 032327 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3877									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3878									;IN THE SUBTEST) TO LOOP ON ERROR^
  3879	032327	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3880						STOP^
  3881	032330	254 04 0 00 032331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3882	032331	324 00 0 00 032332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3883									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3884									;IN THE SUBTEST) TO LOOP ON ERROR^
  3885					;**********
  3886
  3887					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3888					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3889					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3890					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3891					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3892					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3893					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3894
  3895			006430		SN=SN+1
  3896		000040	000000			ZZ=ZZ+ZZ
  3897						IFE	ZZ,<ZZ=1>
  3898	032332	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3899	032333	200 01 0 00 035041 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3900									;WHERE X VARIES FROM 0 THRU 35
  3901	032334	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3902	032335	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3903						STOP^
  3904	032336	254 04 0 00 032337 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3905	032337	324 00 0 00 032340 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3907									;IN THE SUBTEST) TO LOOP ON ERROR^
  3908	032340	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3909						STOP^
  3910	032341	254 04 0 00 032342 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3911	032342	324 00 0 00 032343 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3912									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3913									;IN THE SUBTEST) TO LOOP ON ERROR^
  3914					;**********
  3915
  3916					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3917					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3918					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3919					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3920					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3921					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3922					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3923
  3924			006431		SN=SN+1
  3925		000100	000000			ZZ=ZZ+ZZ
  3926						IFE	ZZ,<ZZ=1>
  3927	032343	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3928	032344	200 01 0 00 035042 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3929									;WHERE X VARIES FROM 0 THRU 35
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0095

  3930	032345	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3931	032346	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3932						STOP^
  3933	032347	254 04 0 00 032350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3934	032350	324 00 0 00 032351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3935									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3936									;IN THE SUBTEST) TO LOOP ON ERROR^
  3937	032351	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3938						STOP^
  3939	032352	254 04 0 00 032353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3940	032353	324 00 0 00 032354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3941									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3942									;IN THE SUBTEST) TO LOOP ON ERROR^
  3943					;**********
  3944
  3945					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3946					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3947					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3948					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3949					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3950					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3951					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3952
  3953			006432		SN=SN+1
  3954		000200	000000			ZZ=ZZ+ZZ
  3955						IFE	ZZ,<ZZ=1>
  3956	032354	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3957	032355	200 01 0 00 035043 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3958									;WHERE X VARIES FROM 0 THRU 35
  3959	032356	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3960	032357	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3961						STOP^
  3962	032360	254 04 0 00 032361 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3963	032361	324 00 0 00 032362 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3964									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3965									;IN THE SUBTEST) TO LOOP ON ERROR^
  3966	032362	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3967						STOP^
  3968	032363	254 04 0 00 032364 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3969	032364	324 00 0 00 032365 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3970									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3971									;IN THE SUBTEST) TO LOOP ON ERROR^
  3972					;**********
  3973
  3974					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  3975					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  3976					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  3977					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  3978					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  3979					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  3980					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  3981
  3982			006433		SN=SN+1
  3983		000400	000000			ZZ=ZZ+ZZ
  3984						IFE	ZZ,<ZZ=1>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-15
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0096

  3985	032365	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  3986	032366	200 01 0 00 035011 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  3987									;WHERE X VARIES FROM 0 THRU 35
  3988	032367	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  3989	032370	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  3990						STOP^
  3991	032371	254 04 0 00 032372 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3992	032372	324 00 0 00 032373 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3993									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  3994									;IN THE SUBTEST) TO LOOP ON ERROR^
  3995	032373	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  3996						STOP^
  3997	032374	254 04 0 00 032375 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  3998	032375	324 00 0 00 032376 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  3999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4000									;IN THE SUBTEST) TO LOOP ON ERROR^
  4001					;**********
  4002
  4003					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4004					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4005					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4006					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4007					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4008					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4009					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4010
  4011			006434		SN=SN+1
  4012		001000	000000			ZZ=ZZ+ZZ
  4013						IFE	ZZ,<ZZ=1>
  4014	032376	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4015	032377	200 01 0 00 035044 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4016									;WHERE X VARIES FROM 0 THRU 35
  4017	032400	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4018	032401	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4019						STOP^
  4020	032402	254 04 0 00 032403 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4021	032403	324 00 0 00 032404 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4022									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4023									;IN THE SUBTEST) TO LOOP ON ERROR^
  4024	032404	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4025						STOP^
  4026	032405	254 04 0 00 032406 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4027	032406	324 00 0 00 032407 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4028									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4029									;IN THE SUBTEST) TO LOOP ON ERROR^
  4030					;**********
  4031
  4032					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4033					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4034					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4035					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4036					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4037					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4038					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4039
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-16
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0097

  4040			006435		SN=SN+1
  4041		002000	000000			ZZ=ZZ+ZZ
  4042						IFE	ZZ,<ZZ=1>
  4043	032407	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4044	032410	200 01 0 00 035045 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4045									;WHERE X VARIES FROM 0 THRU 35
  4046	032411	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4047	032412	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4048						STOP^
  4049	032413	254 04 0 00 032414 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4050	032414	324 00 0 00 032415 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4051									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4052									;IN THE SUBTEST) TO LOOP ON ERROR^
  4053	032415	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4054						STOP^
  4055	032416	254 04 0 00 032417 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4056	032417	324 00 0 00 032420 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4057									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4058									;IN THE SUBTEST) TO LOOP ON ERROR^
  4059					;**********
  4060
  4061					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4062					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4063					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4064					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4065					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4066					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4067					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4068
  4069			006436		SN=SN+1
  4070		004000	000000			ZZ=ZZ+ZZ
  4071						IFE	ZZ,<ZZ=1>
  4072	032420	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4073	032421	200 01 0 00 035046 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4074									;WHERE X VARIES FROM 0 THRU 35
  4075	032422	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4076	032423	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4077						STOP^
  4078	032424	254 04 0 00 032425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4079	032425	324 00 0 00 032426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4080									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4081									;IN THE SUBTEST) TO LOOP ON ERROR^
  4082	032426	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4083						STOP^
  4084	032427	254 04 0 00 032430 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4085	032430	324 00 0 00 032431 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4086									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4087									;IN THE SUBTEST) TO LOOP ON ERROR^
  4088					;**********
  4089
  4090					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4091					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4092					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4093					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4094					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-17
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0098

  4095					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4096					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4097
  4098			006437		SN=SN+1
  4099		010000	000000			ZZ=ZZ+ZZ
  4100						IFE	ZZ,<ZZ=1>
  4101	032431	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4102	032432	200 01 0 00 035047 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4103									;WHERE X VARIES FROM 0 THRU 35
  4104	032433	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4105	032434	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4106						STOP^
  4107	032435	254 04 0 00 032436 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4108	032436	324 00 0 00 032437 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4110									;IN THE SUBTEST) TO LOOP ON ERROR^
  4111	032437	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4112						STOP^
  4113	032440	254 04 0 00 032441 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4114	032441	324 00 0 00 032442 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4115									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4116									;IN THE SUBTEST) TO LOOP ON ERROR^
  4117					;**********
  4118
  4119					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4120					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4121					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4122					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4123					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4124					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4125					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4126
  4127			006440		SN=SN+1
  4128		020000	000000			ZZ=ZZ+ZZ
  4129						IFE	ZZ,<ZZ=1>
  4130	032442	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4131	032443	200 01 0 00 035050 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4132									;WHERE X VARIES FROM 0 THRU 35
  4133	032444	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4134	032445	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4135						STOP^
  4136	032446	254 04 0 00 032447 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4137	032447	324 00 0 00 032450 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4138									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4139									;IN THE SUBTEST) TO LOOP ON ERROR^
  4140	032450	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4141						STOP^
  4142	032451	254 04 0 00 032452 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4143	032452	324 00 0 00 032453 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4144									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4145									;IN THE SUBTEST) TO LOOP ON ERROR^
  4146					;**********
  4147
  4148					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4149					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-18
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0099

  4150					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4151					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4152					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4153					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4154					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4155
  4156			006441		SN=SN+1
  4157		040000	000000			ZZ=ZZ+ZZ
  4158						IFE	ZZ,<ZZ=1>
  4159	032453	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4160	032454	200 01 0 00 035051 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4161									;WHERE X VARIES FROM 0 THRU 35
  4162	032455	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4163	032456	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4164						STOP^
  4165	032457	254 04 0 00 032460 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4166	032460	324 00 0 00 032461 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4167									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4168									;IN THE SUBTEST) TO LOOP ON ERROR^
  4169	032461	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4170						STOP^
  4171	032462	254 04 0 00 032463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4172	032463	324 00 0 00 032464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4173									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4174									;IN THE SUBTEST) TO LOOP ON ERROR^
  4175					;**********
  4176
  4177					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4178					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4179					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4180					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4181					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4182					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4183					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4184
  4185			006442		SN=SN+1
  4186		100000	000000			ZZ=ZZ+ZZ
  4187						IFE	ZZ,<ZZ=1>
  4188	032464	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4189	032465	200 01 0 00 035052 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4190									;WHERE X VARIES FROM 0 THRU 35
  4191	032466	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4192	032467	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4193						STOP^
  4194	032470	254 04 0 00 032471 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4195	032471	324 00 0 00 032472 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4196									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4197									;IN THE SUBTEST) TO LOOP ON ERROR^
  4198	032472	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4199						STOP^
  4200	032473	254 04 0 00 032474 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4201	032474	324 00 0 00 032475 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4202									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4203									;IN THE SUBTEST) TO LOOP ON ERROR^
  4204					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-19
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0100

  4205
  4206					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4207					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4208					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4209					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4210					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4211					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4212					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4213
  4214			006443		SN=SN+1
  4215		200000	000000			ZZ=ZZ+ZZ
  4216						IFE	ZZ,<ZZ=1>
  4217	032475	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4218	032476	200 01 0 00 035053 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4219									;WHERE X VARIES FROM 0 THRU 35
  4220	032477	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4221	032500	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4222						STOP^
  4223	032501	254 04 0 00 032502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4224	032502	324 00 0 00 032503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4225									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4226									;IN THE SUBTEST) TO LOOP ON ERROR^
  4227	032503	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4228						STOP^
  4229	032504	254 04 0 00 032505 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4230	032505	324 00 0 00 032506 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4231									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4232									;IN THE SUBTEST) TO LOOP ON ERROR^
  4233					;**********
  4234
  4235					;THIS TEST VERIFIES THAT IF ONE OF THE OPERANDS OF THE AND INSTRUCTION
  4236					;IS ZERO, THE RESULT WILL BE ZERO.  THIS TEST IS REPEATED 36 TIMES WITH
  4237					;ALL ZEROS IN THE AC EXCEPT FOR ONE ONE IN BIT X
  4238					;WHERE X TAKES ON INTEGER VALUES 0 THRU 35.  E CONTAINS ALL ZEROS.
  4239					;THE RESULT SHOULD BE ALL ZEROS IN THE AC.  IF C(AC) IS NON-ZERO,
  4240					;'AND' FAILED.  C(0) IS ALSO CHECKED FOR ALL ZEROS.  IF C(0) IS
  4241					;NON-ZERO, AC0 WAS CLOBBERED BY 'AND'.
  4242
  4243			006444		SN=SN+1
  4244		400000	000000			ZZ=ZZ+ZZ
  4245						IFE	ZZ,<ZZ=1>
  4246	032506	400 00 0 00 000000 		SETZ			;PRESET E TO ALL ZEROS
  4247	032507	200 01 0 00 035003 		MOVE	1,[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN BIT X
  4248									;WHERE X VARIES FROM 0 THRU 35
  4249	032510	404 01 0 00 000000 		AND	1,0		;*AND SHOULD RESULT IN C(AC) = 0
  4250	032511	332 00 0 00 000001 		SKIPE	1		;FAIL IF C(AC) NON-ZERO
  4251						STOP^
  4252	032512	254 04 0 00 032513 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4253	032513	324 00 0 00 032514 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4254									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4255									;IN THE SUBTEST) TO LOOP ON ERROR^
  4256	032514	332 00 0 00 000000 		SKIPE	0		;FAIL IF C(0) IS NON-ZERO
  4257						STOP^
  4258	032515	254 04 0 00 032516 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4259	032516	324 00 0 00 032517 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 24-20
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0101

  4260									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4261									;IN THE SUBTEST) TO LOOP ON ERROR^
  4262					;**********
  4263
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0102

  4264			006500		SN=6500
  4265			000000			ZZ=0
  4266
  4267					A6500:	REPEAT	^D36,
  4268					<;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4269					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4270					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4271					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4272					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4273					SN=SN+1
  4274						ZZ=ZZ+ZZ
  4275						IFE	ZZ,<ZZ=1>
  4276						MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4277						AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4278									;POSITION WITH ITSELF SHOULD RESULT WITH
  4279									;C(AC) NONZERO
  4280						SKIPN			;PASS TEST IF C(AC) NONZERO
  4281						STOP
  4282					
  4283					;**********
  4284					>
  4285					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4286					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4287					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4288					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4289					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4290			006501		SN=SN+1
  4291			000000			ZZ=ZZ+ZZ
  4292			000001			IFE	ZZ,<ZZ=1>
  4293	032517	200 00 0 00 035012 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4294	032520	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4295									;POSITION WITH ITSELF SHOULD RESULT WITH
  4296									;C(AC) NONZERO
  4297	032521	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4298						STOP^
  4299	032522	254 04 0 00 032523 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4300	032523	324 00 0 00 032524 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4301									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4302									;IN THE SUBTEST) TO LOOP ON ERROR^
  4303
  4304					;**********
  4305
  4306					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4307					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4308					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4309					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4310					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4311			006502		SN=SN+1
  4312			000002			ZZ=ZZ+ZZ
  4313						IFE	ZZ,<ZZ=1>
  4314	032524	200 00 0 00 035013 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4315	032525	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4316									;POSITION WITH ITSELF SHOULD RESULT WITH
  4317									;C(AC) NONZERO
  4318	032526	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0103

  4319						STOP^
  4320	032527	254 04 0 00 032530 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4321	032530	324 00 0 00 032531 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4322									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4323									;IN THE SUBTEST) TO LOOP ON ERROR^
  4324
  4325					;**********
  4326
  4327					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4328					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4329					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4330					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4331					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4332			006503		SN=SN+1
  4333			000004			ZZ=ZZ+ZZ
  4334						IFE	ZZ,<ZZ=1>
  4335	032531	200 00 0 00 035014 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4336	032532	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4337									;POSITION WITH ITSELF SHOULD RESULT WITH
  4338									;C(AC) NONZERO
  4339	032533	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4340						STOP^
  4341	032534	254 04 0 00 032535 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4342	032535	324 00 0 00 032536 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4343									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4344									;IN THE SUBTEST) TO LOOP ON ERROR^
  4345
  4346					;**********
  4347
  4348					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4349					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4350					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4351					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4352					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4353			006504		SN=SN+1
  4354			000010			ZZ=ZZ+ZZ
  4355						IFE	ZZ,<ZZ=1>
  4356	032536	200 00 0 00 035015 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4357	032537	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4358									;POSITION WITH ITSELF SHOULD RESULT WITH
  4359									;C(AC) NONZERO
  4360	032540	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4361						STOP^
  4362	032541	254 04 0 00 032542 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4363	032542	324 00 0 00 032543 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4364									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4365									;IN THE SUBTEST) TO LOOP ON ERROR^
  4366
  4367					;**********
  4368
  4369					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4370					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4371					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4372					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4373					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0104

  4374			006505		SN=SN+1
  4375			000020			ZZ=ZZ+ZZ
  4376						IFE	ZZ,<ZZ=1>
  4377	032543	200 00 0 00 035016 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4378	032544	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4379									;POSITION WITH ITSELF SHOULD RESULT WITH
  4380									;C(AC) NONZERO
  4381	032545	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4382						STOP^
  4383	032546	254 04 0 00 032547 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4384	032547	324 00 0 00 032550 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4385									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4386									;IN THE SUBTEST) TO LOOP ON ERROR^
  4387
  4388					;**********
  4389
  4390					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4391					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4392					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4393					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4394					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4395			006506		SN=SN+1
  4396			000040			ZZ=ZZ+ZZ
  4397						IFE	ZZ,<ZZ=1>
  4398	032550	200 00 0 00 035017 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4399	032551	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4400									;POSITION WITH ITSELF SHOULD RESULT WITH
  4401									;C(AC) NONZERO
  4402	032552	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4403						STOP^
  4404	032553	254 04 0 00 032554 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4405	032554	324 00 0 00 032555 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4406									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4407									;IN THE SUBTEST) TO LOOP ON ERROR^
  4408
  4409					;**********
  4410
  4411					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4412					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4413					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4414					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4415					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4416			006507		SN=SN+1
  4417			000100			ZZ=ZZ+ZZ
  4418						IFE	ZZ,<ZZ=1>
  4419	032555	200 00 0 00 035020 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4420	032556	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4421									;POSITION WITH ITSELF SHOULD RESULT WITH
  4422									;C(AC) NONZERO
  4423	032557	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4424						STOP^
  4425	032560	254 04 0 00 032561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4426	032561	324 00 0 00 032562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4427									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4428									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0105

  4429
  4430					;**********
  4431
  4432					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4433					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4434					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4435					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4436					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4437			006510		SN=SN+1
  4438			000200			ZZ=ZZ+ZZ
  4439						IFE	ZZ,<ZZ=1>
  4440	032562	200 00 0 00 035021 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4441	032563	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4442									;POSITION WITH ITSELF SHOULD RESULT WITH
  4443									;C(AC) NONZERO
  4444	032564	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4445						STOP^
  4446	032565	254 04 0 00 032566 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4447	032566	324 00 0 00 032567 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4448									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4449									;IN THE SUBTEST) TO LOOP ON ERROR^
  4450
  4451					;**********
  4452
  4453					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4454					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4455					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4456					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4457					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4458			006511		SN=SN+1
  4459			000400			ZZ=ZZ+ZZ
  4460						IFE	ZZ,<ZZ=1>
  4461	032567	200 00 0 00 035022 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4462	032570	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4463									;POSITION WITH ITSELF SHOULD RESULT WITH
  4464									;C(AC) NONZERO
  4465	032571	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4466						STOP^
  4467	032572	254 04 0 00 032573 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4468	032573	324 00 0 00 032574 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4469									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4470									;IN THE SUBTEST) TO LOOP ON ERROR^
  4471
  4472					;**********
  4473
  4474					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4475					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4476					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4477					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4478					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4479			006512		SN=SN+1
  4480			001000			ZZ=ZZ+ZZ
  4481						IFE	ZZ,<ZZ=1>
  4482	032574	200 00 0 00 035023 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4483	032575	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0106

  4484									;POSITION WITH ITSELF SHOULD RESULT WITH
  4485									;C(AC) NONZERO
  4486	032576	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4487						STOP^
  4488	032577	254 04 0 00 032600 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4489	032600	324 00 0 00 032601 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4490									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4491									;IN THE SUBTEST) TO LOOP ON ERROR^
  4492
  4493					;**********
  4494
  4495					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4496					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4497					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4498					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4499					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4500			006513		SN=SN+1
  4501			002000			ZZ=ZZ+ZZ
  4502						IFE	ZZ,<ZZ=1>
  4503	032601	200 00 0 00 035024 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4504	032602	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4505									;POSITION WITH ITSELF SHOULD RESULT WITH
  4506									;C(AC) NONZERO
  4507	032603	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4508						STOP^
  4509	032604	254 04 0 00 032605 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4510	032605	324 00 0 00 032606 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4511									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4512									;IN THE SUBTEST) TO LOOP ON ERROR^
  4513
  4514					;**********
  4515
  4516					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4517					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4518					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4519					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4520					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4521			006514		SN=SN+1
  4522			004000			ZZ=ZZ+ZZ
  4523						IFE	ZZ,<ZZ=1>
  4524	032606	200 00 0 00 035025 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4525	032607	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4526									;POSITION WITH ITSELF SHOULD RESULT WITH
  4527									;C(AC) NONZERO
  4528	032610	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4529						STOP^
  4530	032611	254 04 0 00 032612 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4531	032612	324 00 0 00 032613 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4532									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4533									;IN THE SUBTEST) TO LOOP ON ERROR^
  4534
  4535					;**********
  4536
  4537					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4538					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0107

  4539					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4540					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4541					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4542			006515		SN=SN+1
  4543			010000			ZZ=ZZ+ZZ
  4544						IFE	ZZ,<ZZ=1>
  4545	032613	200 00 0 00 035026 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4546	032614	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4547									;POSITION WITH ITSELF SHOULD RESULT WITH
  4548									;C(AC) NONZERO
  4549	032615	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4550						STOP^
  4551	032616	254 04 0 00 032617 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4552	032617	324 00 0 00 032620 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4553									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4554									;IN THE SUBTEST) TO LOOP ON ERROR^
  4555
  4556					;**********
  4557
  4558					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4559					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4560					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4561					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4562					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4563			006516		SN=SN+1
  4564			020000			ZZ=ZZ+ZZ
  4565						IFE	ZZ,<ZZ=1>
  4566	032620	200 00 0 00 035027 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4567	032621	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4568									;POSITION WITH ITSELF SHOULD RESULT WITH
  4569									;C(AC) NONZERO
  4570	032622	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4571						STOP^
  4572	032623	254 04 0 00 032624 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4573	032624	324 00 0 00 032625 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4574									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4575									;IN THE SUBTEST) TO LOOP ON ERROR^
  4576
  4577					;**********
  4578
  4579					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4580					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4581					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4582					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4583					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4584			006517		SN=SN+1
  4585			040000			ZZ=ZZ+ZZ
  4586						IFE	ZZ,<ZZ=1>
  4587	032625	200 00 0 00 035030 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4588	032626	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4589									;POSITION WITH ITSELF SHOULD RESULT WITH
  4590									;C(AC) NONZERO
  4591	032627	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4592						STOP^
  4593	032630	254 04 0 00 032631 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0108

  4594	032631	324 00 0 00 032632 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4595									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4596									;IN THE SUBTEST) TO LOOP ON ERROR^
  4597
  4598					;**********
  4599
  4600					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4601					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4602					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4603					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4604					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4605			006520		SN=SN+1
  4606			100000			ZZ=ZZ+ZZ
  4607						IFE	ZZ,<ZZ=1>
  4608	032632	200 00 0 00 035031 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4609	032633	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4610									;POSITION WITH ITSELF SHOULD RESULT WITH
  4611									;C(AC) NONZERO
  4612	032634	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4613						STOP^
  4614	032635	254 04 0 00 032636 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4615	032636	324 00 0 00 032637 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4616									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4617									;IN THE SUBTEST) TO LOOP ON ERROR^
  4618
  4619					;**********
  4620
  4621					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4622					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4623					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4624					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4625					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4626			006521		SN=SN+1
  4627			200000			ZZ=ZZ+ZZ
  4628						IFE	ZZ,<ZZ=1>
  4629	032637	200 00 0 00 035032 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4630	032640	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4631									;POSITION WITH ITSELF SHOULD RESULT WITH
  4632									;C(AC) NONZERO
  4633	032641	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4634						STOP^
  4635	032642	254 04 0 00 032643 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4636	032643	324 00 0 00 032644 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4637									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4638									;IN THE SUBTEST) TO LOOP ON ERROR^
  4639
  4640					;**********
  4641
  4642					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4643					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4644					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4645					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4646					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4647			006522		SN=SN+1
  4648			400000			ZZ=ZZ+ZZ
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0109

  4649						IFE	ZZ,<ZZ=1>
  4650	032644	200 00 0 00 035033 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4651	032645	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4652									;POSITION WITH ITSELF SHOULD RESULT WITH
  4653									;C(AC) NONZERO
  4654	032646	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4655						STOP^
  4656	032647	254 04 0 00 032650 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4657	032650	324 00 0 00 032651 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4658									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4659									;IN THE SUBTEST) TO LOOP ON ERROR^
  4660
  4661					;**********
  4662
  4663					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4664					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4665					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4666					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4667					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4668			006523		SN=SN+1
  4669		000001	000000			ZZ=ZZ+ZZ
  4670						IFE	ZZ,<ZZ=1>
  4671	032651	200 00 0 00 035034 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4672	032652	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4673									;POSITION WITH ITSELF SHOULD RESULT WITH
  4674									;C(AC) NONZERO
  4675	032653	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4676						STOP^
  4677	032654	254 04 0 00 032655 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4678	032655	324 00 0 00 032656 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4679									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4680									;IN THE SUBTEST) TO LOOP ON ERROR^
  4681
  4682					;**********
  4683
  4684					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4685					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4686					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4687					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4688					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4689			006524		SN=SN+1
  4690		000002	000000			ZZ=ZZ+ZZ
  4691						IFE	ZZ,<ZZ=1>
  4692	032656	200 00 0 00 035035 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4693	032657	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4694									;POSITION WITH ITSELF SHOULD RESULT WITH
  4695									;C(AC) NONZERO
  4696	032660	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4697						STOP^
  4698	032661	254 04 0 00 032662 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4699	032662	324 00 0 00 032663 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4700									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4701									;IN THE SUBTEST) TO LOOP ON ERROR^
  4702
  4703					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0110

  4704
  4705					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4706					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4707					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4708					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4709					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4710			006525		SN=SN+1
  4711		000004	000000			ZZ=ZZ+ZZ
  4712						IFE	ZZ,<ZZ=1>
  4713	032663	200 00 0 00 035036 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4714	032664	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4715									;POSITION WITH ITSELF SHOULD RESULT WITH
  4716									;C(AC) NONZERO
  4717	032665	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4718						STOP^
  4719	032666	254 04 0 00 032667 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4720	032667	324 00 0 00 032670 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4721									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4722									;IN THE SUBTEST) TO LOOP ON ERROR^
  4723
  4724					;**********
  4725
  4726					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4727					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4728					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4729					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4730					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4731			006526		SN=SN+1
  4732		000010	000000			ZZ=ZZ+ZZ
  4733						IFE	ZZ,<ZZ=1>
  4734	032670	200 00 0 00 035037 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4735	032671	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4736									;POSITION WITH ITSELF SHOULD RESULT WITH
  4737									;C(AC) NONZERO
  4738	032672	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4739						STOP^
  4740	032673	254 04 0 00 032674 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4741	032674	324 00 0 00 032675 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4742									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4743									;IN THE SUBTEST) TO LOOP ON ERROR^
  4744
  4745					;**********
  4746
  4747					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4748					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4749					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4750					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4751					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4752			006527		SN=SN+1
  4753		000020	000000			ZZ=ZZ+ZZ
  4754						IFE	ZZ,<ZZ=1>
  4755	032675	200 00 0 00 035040 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4756	032676	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4757									;POSITION WITH ITSELF SHOULD RESULT WITH
  4758									;C(AC) NONZERO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0111

  4759	032677	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4760						STOP^
  4761	032700	254 04 0 00 032701 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4762	032701	324 00 0 00 032702 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4763									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4764									;IN THE SUBTEST) TO LOOP ON ERROR^
  4765
  4766					;**********
  4767
  4768					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4769					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4770					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4771					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4772					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4773			006530		SN=SN+1
  4774		000040	000000			ZZ=ZZ+ZZ
  4775						IFE	ZZ,<ZZ=1>
  4776	032702	200 00 0 00 035041 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4777	032703	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4778									;POSITION WITH ITSELF SHOULD RESULT WITH
  4779									;C(AC) NONZERO
  4780	032704	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4781						STOP^
  4782	032705	254 04 0 00 032706 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4783	032706	324 00 0 00 032707 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4784									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4785									;IN THE SUBTEST) TO LOOP ON ERROR^
  4786
  4787					;**********
  4788
  4789					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4790					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4791					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4792					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4793					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4794			006531		SN=SN+1
  4795		000100	000000			ZZ=ZZ+ZZ
  4796						IFE	ZZ,<ZZ=1>
  4797	032707	200 00 0 00 035042 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4798	032710	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4799									;POSITION WITH ITSELF SHOULD RESULT WITH
  4800									;C(AC) NONZERO
  4801	032711	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4802						STOP^
  4803	032712	254 04 0 00 032713 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4804	032713	324 00 0 00 032714 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4805									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4806									;IN THE SUBTEST) TO LOOP ON ERROR^
  4807
  4808					;**********
  4809
  4810					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4811					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4812					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4813					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0112

  4814					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4815			006532		SN=SN+1
  4816		000200	000000			ZZ=ZZ+ZZ
  4817						IFE	ZZ,<ZZ=1>
  4818	032714	200 00 0 00 035043 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4819	032715	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4820									;POSITION WITH ITSELF SHOULD RESULT WITH
  4821									;C(AC) NONZERO
  4822	032716	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4823						STOP^
  4824	032717	254 04 0 00 032720 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4825	032720	324 00 0 00 032721 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4826									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4827									;IN THE SUBTEST) TO LOOP ON ERROR^
  4828
  4829					;**********
  4830
  4831					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4832					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4833					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4834					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4835					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4836			006533		SN=SN+1
  4837		000400	000000			ZZ=ZZ+ZZ
  4838						IFE	ZZ,<ZZ=1>
  4839	032721	200 00 0 00 035011 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4840	032722	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4841									;POSITION WITH ITSELF SHOULD RESULT WITH
  4842									;C(AC) NONZERO
  4843	032723	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4844						STOP^
  4845	032724	254 04 0 00 032725 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4846	032725	324 00 0 00 032726 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4847									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4848									;IN THE SUBTEST) TO LOOP ON ERROR^
  4849
  4850					;**********
  4851
  4852					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4853					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4854					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4855					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4856					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4857			006534		SN=SN+1
  4858		001000	000000			ZZ=ZZ+ZZ
  4859						IFE	ZZ,<ZZ=1>
  4860	032726	200 00 0 00 035044 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4861	032727	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4862									;POSITION WITH ITSELF SHOULD RESULT WITH
  4863									;C(AC) NONZERO
  4864	032730	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4865						STOP^
  4866	032731	254 04 0 00 032732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4867	032732	324 00 0 00 032733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4868									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0113

  4869									;IN THE SUBTEST) TO LOOP ON ERROR^
  4870
  4871					;**********
  4872
  4873					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4874					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4875					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4876					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4877					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4878			006535		SN=SN+1
  4879		002000	000000			ZZ=ZZ+ZZ
  4880						IFE	ZZ,<ZZ=1>
  4881	032733	200 00 0 00 035045 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4882	032734	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4883									;POSITION WITH ITSELF SHOULD RESULT WITH
  4884									;C(AC) NONZERO
  4885	032735	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4886						STOP^
  4887	032736	254 04 0 00 032737 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4888	032737	324 00 0 00 032740 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4889									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4890									;IN THE SUBTEST) TO LOOP ON ERROR^
  4891
  4892					;**********
  4893
  4894					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4895					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4896					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4897					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4898					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4899			006536		SN=SN+1
  4900		004000	000000			ZZ=ZZ+ZZ
  4901						IFE	ZZ,<ZZ=1>
  4902	032740	200 00 0 00 035046 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4903	032741	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4904									;POSITION WITH ITSELF SHOULD RESULT WITH
  4905									;C(AC) NONZERO
  4906	032742	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4907						STOP^
  4908	032743	254 04 0 00 032744 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4909	032744	324 00 0 00 032745 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4910									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4911									;IN THE SUBTEST) TO LOOP ON ERROR^
  4912
  4913					;**********
  4914
  4915					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4916					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4917					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4918					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4919					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4920			006537		SN=SN+1
  4921		010000	000000			ZZ=ZZ+ZZ
  4922						IFE	ZZ,<ZZ=1>
  4923	032745	200 00 0 00 035047 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0114

  4924	032746	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4925									;POSITION WITH ITSELF SHOULD RESULT WITH
  4926									;C(AC) NONZERO
  4927	032747	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4928						STOP^
  4929	032750	254 04 0 00 032751 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4930	032751	324 00 0 00 032752 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4931									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4932									;IN THE SUBTEST) TO LOOP ON ERROR^
  4933
  4934					;**********
  4935
  4936					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4937					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4938					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4939					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4940					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4941			006540		SN=SN+1
  4942		020000	000000			ZZ=ZZ+ZZ
  4943						IFE	ZZ,<ZZ=1>
  4944	032752	200 00 0 00 035050 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4945	032753	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4946									;POSITION WITH ITSELF SHOULD RESULT WITH
  4947									;C(AC) NONZERO
  4948	032754	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4949						STOP^
  4950	032755	254 04 0 00 032756 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4951	032756	324 00 0 00 032757 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4952									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4953									;IN THE SUBTEST) TO LOOP ON ERROR^
  4954
  4955					;**********
  4956
  4957					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  4958					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4959					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4960					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4961					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4962			006541		SN=SN+1
  4963		040000	000000			ZZ=ZZ+ZZ
  4964						IFE	ZZ,<ZZ=1>
  4965	032757	200 00 0 00 035051 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4966	032760	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4967									;POSITION WITH ITSELF SHOULD RESULT WITH
  4968									;C(AC) NONZERO
  4969	032761	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4970						STOP^
  4971	032762	254 04 0 00 032763 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4972	032763	324 00 0 00 032764 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4973									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4974									;IN THE SUBTEST) TO LOOP ON ERROR^
  4975
  4976					;**********
  4977
  4978					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0115

  4979					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  4980					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  4981					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  4982					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  4983			006542		SN=SN+1
  4984		100000	000000			ZZ=ZZ+ZZ
  4985						IFE	ZZ,<ZZ=1>
  4986	032764	200 00 0 00 035052 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  4987	032765	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  4988									;POSITION WITH ITSELF SHOULD RESULT WITH
  4989									;C(AC) NONZERO
  4990	032766	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  4991						STOP^
  4992	032767	254 04 0 00 032770 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  4993	032770	324 00 0 00 032771 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  4994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  4995									;IN THE SUBTEST) TO LOOP ON ERROR^
  4996
  4997					;**********
  4998
  4999					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  5000					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  5001					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  5002					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  5003					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  5004			006543		SN=SN+1
  5005		200000	000000			ZZ=ZZ+ZZ
  5006						IFE	ZZ,<ZZ=1>
  5007	032771	200 00 0 00 035053 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  5008	032772	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  5009									;POSITION WITH ITSELF SHOULD RESULT WITH
  5010									;C(AC) NONZERO
  5011	032773	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  5012						STOP^
  5013	032774	254 04 0 00 032775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5014	032775	324 00 0 00 032776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5015									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5016									;IN THE SUBTEST) TO LOOP ON ERROR^
  5017
  5018					;**********
  5019
  5020					;THIS TEST VERIFIES THAT THE RESULT OF A WORD ANDED WITH ITSELF
  5021					;SHOULD BE THAT SAME WORD.  A WORD CONTAINING ALL ZEROS EXCEPT FOR A ONE
  5022					;IN ONLY ONE BIT IS ANDED WITH ITSELF.  THE AC IS THEN CHECKED FOR ITS
  5023					;CONTENTS NONZERO.  IF C(AC)=0, THE 'AND' INSTRUCTION FAILED.  THIS TEST IS REPEATED
  5024					;36 TIMES TO CHECK EACH BIT INDIVIDUALLY.
  5025			006544		SN=SN+1
  5026		400000	000000			ZZ=ZZ+ZZ
  5027						IFE	ZZ,<ZZ=1>
  5028	032776	200 00 0 00 035003 		MOVE	[ZZ]		;LOAD AC WITH ALL ZEROS EXCEPT FOR A ONE IN ONE BIT
  5029	032777	404 00 0 00 000000 		AND			;*AND OF WORD CONTAINING A ONE IN ONE BIT
  5030									;POSITION WITH ITSELF SHOULD RESULT WITH
  5031									;C(AC) NONZERO
  5032	033000	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NONZERO
  5033						STOP^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 25-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0116

  5034	033001	254 04 0 00 033002 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5035	033002	324 00 0 00 033003 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5036									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5037									;IN THE SUBTEST) TO LOOP ON ERROR^
  5038
  5039					;**********
  5040
  5041					;THIS TEST VERIFIES THAT THE RESULT OF THE AND INSTRUCTION WHERE
  5042					;C(AC)=0 AND C(E)=0 AND E OUTSIDE OF THE AC RANGE IS ALL ZEROS IN THE AC.
  5043					;FIRST, THE AC IS CLEARED; THEN, THE C(AC) IS ANDED WITH C(E) WHEN
  5044					;E GREATER THAN 20 AND C(E)=0. THE RESULT SHOULD BE C(AC)=0.
  5045					;IF C(AC) IS NON-ZERO, 'AND' FAILED WITH THE MEMORY OPERAND.
  5046
  5047	033003	200 00 0 00 035000 	A6600:	MOVE	[0]		;PRESET AC TO ALL ZEROS
  5048	033004	404 00 0 00 035000 		AND	[0]		;*AND OF TWO WORDS OF ALL ZEROS
  5049									;SHOULD RESULT IN C(AC)=0
  5050	033005	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5051						STOP^
  5052	033006	254 04 0 00 033007 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5053	033007	324 00 0 00 033010 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5054									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5055									;IN THE SUBTEST) TO LOOP ON ERROR^
  5056
  5057					;**********
  5058
  5059					;THIS TEST VERIFIES THAT THE RESULT OF THE AND INSTRUCTION WHERE C(AC)=0
  5060					;AND C(E) IS ALL ONES IS AN AC CONTAINING ALL ZEROS.  FIRST, THE AC IS
  5061					;CLEARED; THEN THE C(AC) IS ANDED WITH AN E CONTAINING ALL ONES, WHERE
  5062					;E IS BEYOND THE AC RANGE.  THE RESULT SHOULD BE C(AC)=0.
  5063					;IF C(AC) IS NON-ZERO, 'AND' FAILED WITH THE MEMORY OPERAND.
  5064
  5065	033010	200 00 0 00 035000 	A6700:	MOVE	[0]		;PRESET AC TO ALL ZEROS
  5066	033011	404 00 0 00 035001 		AND	[-1]		;*AND OF TWO WORDS WHERE C(AC)=0 SHOULD RESULT IN C(AC)=0
  5067	033012	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5068						STOP^
  5069	033013	254 04 0 00 033014 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5070	033014	324 00 0 00 033015 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5071									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5072									;IN THE SUBTEST) TO LOOP ON ERROR^
  5073
  5074					;AD FM+EN [ADFP],AD FM+EN A [ADFP],
  5075					;F CYC ACT EN C [F1],IR BOOLE AD FM+F [IR2],
  5076					;IR BOOLE [IR1],IRXX(1,4,5,11,13,16) [IR2]
  5077
  5078					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 26
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0117

  5079					;THIS TEST VERIFIES THAT THE RESULT OF THE AND INSTRUCTION WHERE C(E)=0
  5080					;AND C(AC) IS ALL ONES IS AN AC CONTAINING ALL ZEROS. FIRST, THE
  5081					;AC IS SET TO ALL ONES; THEN, THE AC IS ANDED WITH AN E CONTAINING ALL
  5082					;ZEROS, WHERE E IS BEYOND THE AC RANGE.  THE RESULT SHOULD BE C(AC)=0.
  5083					;IF C(AC) IS NON-ZERO, 'AND' FAILED WITH THE MEMORY OPERAND.
  5084
  5085	033015	200 00 0 00 035001 	A7000:	MOVE	[-1]		;PRESET AC TO ALL ONES
  5086	033016	404 00 0 00 035000 		AND	[0]		;*AND OF TWO WORDS WHERE C(E)=0 SHOULD RESULT IN C(AC)=0
  5087	033017	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  5088						STOP^
  5089	033020	254 04 0 00 033021 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5090	033021	324 00 0 00 033022 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5091									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5092									;IN THE SUBTEST) TO LOOP ON ERROR^
  5093
  5094					;**********
  5095
  5096					;THIS TEST VERIFIES THAT THE RESULT OF THE AND INSTRUCTION WHERE C(E) IS
  5097					;ALL ONES AND C(AC) IS ALL ONES IS AN AC CONTAINING ALL ONES.  FIRST, THE
  5098					;AC IS SET TO ALL ONES; THEN, C(AC) IS ANDED WITH AN E CONTAINING ALL
  5099					;ONES.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5100					;IF C(AC) IS ZERO, 'AND' FAILED WITH THE MEMORY OPERAND.
  5101
  5102	033022	200 00 0 00 035001 	A7100:	MOVE	[-1]		;PRELOAD AC WITH ALL ONES
  5103	033023	404 00 0 00 035001 		AND	[-1]		;*AND OF TWO WORDS OF ALL ONES SHOULD
  5104									;RESULT IN C(AC)=ALL ONES
  5105	033024	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) IS NON ZERO
  5106						STOP^
  5107	033025	254 04 0 00 033026 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5108	033026	324 00 0 00 033027 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5110									;IN THE SUBTEST) TO LOOP ON ERROR^
  5111
  5112					;**********
  5113
  5114					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE 
  5115					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHERE CONTENTS IS NON-ZERO.
  5116					;FIRST, THE AC IS CLEARED, THEN, XOR IS EXECUTED WHERE C(E) IS NON-ZERO.
  5117					;THE AC IS THEN CHECKED FOR NON-ZERO CONTENTS.
  5118	033027	200 00 0 00 035000 	A7200:	MOVE	[0]		;CLEAR AC
  5119	033030	430 00 0 00 035057 		XOR	[707070707070]	;*XOR WITH C(AC)=0 AND C(E)=7070707070 SHOULD
  5120									;RESTULT IN C(AC)=707070707070
  5121	033031	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5122						STOP^
  5123	033032	254 04 0 00 033033 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5124	033033	324 00 0 00 033034 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5125									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5126									;IN THE SUBTEST) TO LOOP ON ERROR^
  5127
  5128					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0118

  5129			007300		SN=7300
  5130			000000			ZZ=0
  5131
  5132					A7300:	REPEAT	^D36,
  5133					<;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5134					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5135					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5136					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5137					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5138					SN=SN+1
  5139						ZZ=ZZ+ZZ
  5140						IFE	ZZ,<ZZ=1>
  5141						MOVE	[0]		;CLEAR AC
  5142						XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5143									;RESULT IN C(AC) NONZERO
  5144						SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5145						STOP
  5146					
  5147					;**********
  5148					>
  5149					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5150					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5151					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5152					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5153					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5154			007301		SN=SN+1
  5155			000000			ZZ=ZZ+ZZ
  5156			000001			IFE	ZZ,<ZZ=1>
  5157	033034	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5158	033035	430 00 0 00 035012 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5159									;RESULT IN C(AC) NONZERO
  5160	033036	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5161						STOP^
  5162	033037	254 04 0 00 033040 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5163	033040	324 00 0 00 033041 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5164									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5165									;IN THE SUBTEST) TO LOOP ON ERROR^
  5166
  5167					;**********
  5168
  5169					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5170					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5171					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5172					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5173					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5174			007302		SN=SN+1
  5175			000002			ZZ=ZZ+ZZ
  5176						IFE	ZZ,<ZZ=1>
  5177	033041	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5178	033042	430 00 0 00 035013 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5179									;RESULT IN C(AC) NONZERO
  5180	033043	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5181						STOP^
  5182	033044	254 04 0 00 033045 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5183	033045	324 00 0 00 033046 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0119

  5184									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5185									;IN THE SUBTEST) TO LOOP ON ERROR^
  5186
  5187					;**********
  5188
  5189					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5190					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5191					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5192					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5193					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5194			007303		SN=SN+1
  5195			000004			ZZ=ZZ+ZZ
  5196						IFE	ZZ,<ZZ=1>
  5197	033046	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5198	033047	430 00 0 00 035014 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5199									;RESULT IN C(AC) NONZERO
  5200	033050	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5201						STOP^
  5202	033051	254 04 0 00 033052 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5203	033052	324 00 0 00 033053 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5204									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5205									;IN THE SUBTEST) TO LOOP ON ERROR^
  5206
  5207					;**********
  5208
  5209					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5210					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5211					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5212					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5213					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5214			007304		SN=SN+1
  5215			000010			ZZ=ZZ+ZZ
  5216						IFE	ZZ,<ZZ=1>
  5217	033053	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5218	033054	430 00 0 00 035015 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5219									;RESULT IN C(AC) NONZERO
  5220	033055	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5221						STOP^
  5222	033056	254 04 0 00 033057 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5223	033057	324 00 0 00 033060 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5224									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5225									;IN THE SUBTEST) TO LOOP ON ERROR^
  5226
  5227					;**********
  5228
  5229					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5230					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5231					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5232					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5233					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5234			007305		SN=SN+1
  5235			000020			ZZ=ZZ+ZZ
  5236						IFE	ZZ,<ZZ=1>
  5237	033060	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5238	033061	430 00 0 00 035016 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0120

  5239									;RESULT IN C(AC) NONZERO
  5240	033062	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5241						STOP^
  5242	033063	254 04 0 00 033064 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5243	033064	324 00 0 00 033065 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5244									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5245									;IN THE SUBTEST) TO LOOP ON ERROR^
  5246
  5247					;**********
  5248
  5249					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5250					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5251					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5252					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5253					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5254			007306		SN=SN+1
  5255			000040			ZZ=ZZ+ZZ
  5256						IFE	ZZ,<ZZ=1>
  5257	033065	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5258	033066	430 00 0 00 035017 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5259									;RESULT IN C(AC) NONZERO
  5260	033067	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5261						STOP^
  5262	033070	254 04 0 00 033071 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5263	033071	324 00 0 00 033072 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5264									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5265									;IN THE SUBTEST) TO LOOP ON ERROR^
  5266
  5267					;**********
  5268
  5269					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5270					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5271					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5272					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5273					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5274			007307		SN=SN+1
  5275			000100			ZZ=ZZ+ZZ
  5276						IFE	ZZ,<ZZ=1>
  5277	033072	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5278	033073	430 00 0 00 035020 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5279									;RESULT IN C(AC) NONZERO
  5280	033074	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5281						STOP^
  5282	033075	254 04 0 00 033076 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5283	033076	324 00 0 00 033077 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5284									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5285									;IN THE SUBTEST) TO LOOP ON ERROR^
  5286
  5287					;**********
  5288
  5289					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5290					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5291					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5292					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5293					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0121

  5294			007310		SN=SN+1
  5295			000200			ZZ=ZZ+ZZ
  5296						IFE	ZZ,<ZZ=1>
  5297	033077	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5298	033100	430 00 0 00 035021 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5299									;RESULT IN C(AC) NONZERO
  5300	033101	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5301						STOP^
  5302	033102	254 04 0 00 033103 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5303	033103	324 00 0 00 033104 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5304									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5305									;IN THE SUBTEST) TO LOOP ON ERROR^
  5306
  5307					;**********
  5308
  5309					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5310					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5311					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5312					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5313					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5314			007311		SN=SN+1
  5315			000400			ZZ=ZZ+ZZ
  5316						IFE	ZZ,<ZZ=1>
  5317	033104	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5318	033105	430 00 0 00 035022 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5319									;RESULT IN C(AC) NONZERO
  5320	033106	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5321						STOP^
  5322	033107	254 04 0 00 033110 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5323	033110	324 00 0 00 033111 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5324									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5325									;IN THE SUBTEST) TO LOOP ON ERROR^
  5326
  5327					;**********
  5328
  5329					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5330					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5331					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5332					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5333					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5334			007312		SN=SN+1
  5335			001000			ZZ=ZZ+ZZ
  5336						IFE	ZZ,<ZZ=1>
  5337	033111	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5338	033112	430 00 0 00 035023 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5339									;RESULT IN C(AC) NONZERO
  5340	033113	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5341						STOP^
  5342	033114	254 04 0 00 033115 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5343	033115	324 00 0 00 033116 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5344									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5345									;IN THE SUBTEST) TO LOOP ON ERROR^
  5346
  5347					;**********
  5348
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0122

  5349					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5350					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5351					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5352					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5353					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5354			007313		SN=SN+1
  5355			002000			ZZ=ZZ+ZZ
  5356						IFE	ZZ,<ZZ=1>
  5357	033116	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5358	033117	430 00 0 00 035024 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5359									;RESULT IN C(AC) NONZERO
  5360	033120	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5361						STOP^
  5362	033121	254 04 0 00 033122 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5363	033122	324 00 0 00 033123 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5364									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5365									;IN THE SUBTEST) TO LOOP ON ERROR^
  5366
  5367					;**********
  5368
  5369					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5370					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5371					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5372					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5373					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5374			007314		SN=SN+1
  5375			004000			ZZ=ZZ+ZZ
  5376						IFE	ZZ,<ZZ=1>
  5377	033123	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5378	033124	430 00 0 00 035025 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5379									;RESULT IN C(AC) NONZERO
  5380	033125	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5381						STOP^
  5382	033126	254 04 0 00 033127 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5383	033127	324 00 0 00 033130 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5385									;IN THE SUBTEST) TO LOOP ON ERROR^
  5386
  5387					;**********
  5388
  5389					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5390					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5391					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5392					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5393					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5394			007315		SN=SN+1
  5395			010000			ZZ=ZZ+ZZ
  5396						IFE	ZZ,<ZZ=1>
  5397	033130	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5398	033131	430 00 0 00 035026 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5399									;RESULT IN C(AC) NONZERO
  5400	033132	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5401						STOP^
  5402	033133	254 04 0 00 033134 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5403	033134	324 00 0 00 033135 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0123

  5404									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5405									;IN THE SUBTEST) TO LOOP ON ERROR^
  5406
  5407					;**********
  5408
  5409					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5410					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5411					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5412					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5413					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5414			007316		SN=SN+1
  5415			020000			ZZ=ZZ+ZZ
  5416						IFE	ZZ,<ZZ=1>
  5417	033135	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5418	033136	430 00 0 00 035027 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5419									;RESULT IN C(AC) NONZERO
  5420	033137	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5421						STOP^
  5422	033140	254 04 0 00 033141 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5423	033141	324 00 0 00 033142 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5424									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5425									;IN THE SUBTEST) TO LOOP ON ERROR^
  5426
  5427					;**********
  5428
  5429					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5430					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5431					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5432					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5433					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5434			007317		SN=SN+1
  5435			040000			ZZ=ZZ+ZZ
  5436						IFE	ZZ,<ZZ=1>
  5437	033142	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5438	033143	430 00 0 00 035030 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5439									;RESULT IN C(AC) NONZERO
  5440	033144	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5441						STOP^
  5442	033145	254 04 0 00 033146 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5443	033146	324 00 0 00 033147 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5444									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5445									;IN THE SUBTEST) TO LOOP ON ERROR^
  5446
  5447					;**********
  5448
  5449					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5450					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5451					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5452					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5453					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5454			007320		SN=SN+1
  5455			100000			ZZ=ZZ+ZZ
  5456						IFE	ZZ,<ZZ=1>
  5457	033147	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5458	033150	430 00 0 00 035031 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0124

  5459									;RESULT IN C(AC) NONZERO
  5460	033151	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5461						STOP^
  5462	033152	254 04 0 00 033153 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5463	033153	324 00 0 00 033154 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5464									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5465									;IN THE SUBTEST) TO LOOP ON ERROR^
  5466
  5467					;**********
  5468
  5469					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5470					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5471					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5472					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5473					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5474			007321		SN=SN+1
  5475			200000			ZZ=ZZ+ZZ
  5476						IFE	ZZ,<ZZ=1>
  5477	033154	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5478	033155	430 00 0 00 035032 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5479									;RESULT IN C(AC) NONZERO
  5480	033156	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5481						STOP^
  5482	033157	254 04 0 00 033160 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5483	033160	324 00 0 00 033161 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5484									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5485									;IN THE SUBTEST) TO LOOP ON ERROR^
  5486
  5487					;**********
  5488
  5489					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5490					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5491					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5492					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5493					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5494			007322		SN=SN+1
  5495			400000			ZZ=ZZ+ZZ
  5496						IFE	ZZ,<ZZ=1>
  5497	033161	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5498	033162	430 00 0 00 035033 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5499									;RESULT IN C(AC) NONZERO
  5500	033163	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5501						STOP^
  5502	033164	254 04 0 00 033165 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5503	033165	324 00 0 00 033166 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5504									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5505									;IN THE SUBTEST) TO LOOP ON ERROR^
  5506
  5507					;**********
  5508
  5509					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5510					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5511					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5512					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5513					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0125

  5514			007323		SN=SN+1
  5515		000001	000000			ZZ=ZZ+ZZ
  5516						IFE	ZZ,<ZZ=1>
  5517	033166	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5518	033167	430 00 0 00 035034 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5519									;RESULT IN C(AC) NONZERO
  5520	033170	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5521						STOP^
  5522	033171	254 04 0 00 033172 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5523	033172	324 00 0 00 033173 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5524									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5525									;IN THE SUBTEST) TO LOOP ON ERROR^
  5526
  5527					;**********
  5528
  5529					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5530					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5531					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5532					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5533					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5534			007324		SN=SN+1
  5535		000002	000000			ZZ=ZZ+ZZ
  5536						IFE	ZZ,<ZZ=1>
  5537	033173	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5538	033174	430 00 0 00 035035 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5539									;RESULT IN C(AC) NONZERO
  5540	033175	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5541						STOP^
  5542	033176	254 04 0 00 033177 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5543	033177	324 00 0 00 033200 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5544									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5545									;IN THE SUBTEST) TO LOOP ON ERROR^
  5546
  5547					;**********
  5548
  5549					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5550					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5551					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5552					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5553					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5554			007325		SN=SN+1
  5555		000004	000000			ZZ=ZZ+ZZ
  5556						IFE	ZZ,<ZZ=1>
  5557	033200	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5558	033201	430 00 0 00 035036 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5559									;RESULT IN C(AC) NONZERO
  5560	033202	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5561						STOP^
  5562	033203	254 04 0 00 033204 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5563	033204	324 00 0 00 033205 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5564									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5565									;IN THE SUBTEST) TO LOOP ON ERROR^
  5566
  5567					;**********
  5568
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0126

  5569					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5570					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5571					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5572					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5573					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5574			007326		SN=SN+1
  5575		000010	000000			ZZ=ZZ+ZZ
  5576						IFE	ZZ,<ZZ=1>
  5577	033205	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5578	033206	430 00 0 00 035037 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5579									;RESULT IN C(AC) NONZERO
  5580	033207	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5581						STOP^
  5582	033210	254 04 0 00 033211 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5583	033211	324 00 0 00 033212 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5584									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5585									;IN THE SUBTEST) TO LOOP ON ERROR^
  5586
  5587					;**********
  5588
  5589					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5590					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5591					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5592					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5593					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5594			007327		SN=SN+1
  5595		000020	000000			ZZ=ZZ+ZZ
  5596						IFE	ZZ,<ZZ=1>
  5597	033212	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5598	033213	430 00 0 00 035040 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5599									;RESULT IN C(AC) NONZERO
  5600	033214	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5601						STOP^
  5602	033215	254 04 0 00 033216 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5603	033216	324 00 0 00 033217 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5604									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5605									;IN THE SUBTEST) TO LOOP ON ERROR^
  5606
  5607					;**********
  5608
  5609					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5610					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5611					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5612					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5613					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5614			007330		SN=SN+1
  5615		000040	000000			ZZ=ZZ+ZZ
  5616						IFE	ZZ,<ZZ=1>
  5617	033217	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5618	033220	430 00 0 00 035041 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5619									;RESULT IN C(AC) NONZERO
  5620	033221	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5621						STOP^
  5622	033222	254 04 0 00 033223 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5623	033223	324 00 0 00 033224 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0127

  5624									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5625									;IN THE SUBTEST) TO LOOP ON ERROR^
  5626
  5627					;**********
  5628
  5629					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5630					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5631					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5632					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5633					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5634			007331		SN=SN+1
  5635		000100	000000			ZZ=ZZ+ZZ
  5636						IFE	ZZ,<ZZ=1>
  5637	033224	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5638	033225	430 00 0 00 035042 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5639									;RESULT IN C(AC) NONZERO
  5640	033226	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5641						STOP^
  5642	033227	254 04 0 00 033230 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5643	033230	324 00 0 00 033231 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5644									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5645									;IN THE SUBTEST) TO LOOP ON ERROR^
  5646
  5647					;**********
  5648
  5649					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5650					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5651					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5652					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5653					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5654			007332		SN=SN+1
  5655		000200	000000			ZZ=ZZ+ZZ
  5656						IFE	ZZ,<ZZ=1>
  5657	033231	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5658	033232	430 00 0 00 035043 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5659									;RESULT IN C(AC) NONZERO
  5660	033233	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5661						STOP^
  5662	033234	254 04 0 00 033235 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5663	033235	324 00 0 00 033236 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5664									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5665									;IN THE SUBTEST) TO LOOP ON ERROR^
  5666
  5667					;**********
  5668
  5669					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5670					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5671					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5672					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5673					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5674			007333		SN=SN+1
  5675		000400	000000			ZZ=ZZ+ZZ
  5676						IFE	ZZ,<ZZ=1>
  5677	033236	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5678	033237	430 00 0 00 035011 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0128

  5679									;RESULT IN C(AC) NONZERO
  5680	033240	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5681						STOP^
  5682	033241	254 04 0 00 033242 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5683	033242	324 00 0 00 033243 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5684									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5685									;IN THE SUBTEST) TO LOOP ON ERROR^
  5686
  5687					;**********
  5688
  5689					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5690					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5691					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5692					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5693					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5694			007334		SN=SN+1
  5695		001000	000000			ZZ=ZZ+ZZ
  5696						IFE	ZZ,<ZZ=1>
  5697	033243	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5698	033244	430 00 0 00 035044 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5699									;RESULT IN C(AC) NONZERO
  5700	033245	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5701						STOP^
  5702	033246	254 04 0 00 033247 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5703	033247	324 00 0 00 033250 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5704									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5705									;IN THE SUBTEST) TO LOOP ON ERROR^
  5706
  5707					;**********
  5708
  5709					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5710					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5711					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5712					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5713					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5714			007335		SN=SN+1
  5715		002000	000000			ZZ=ZZ+ZZ
  5716						IFE	ZZ,<ZZ=1>
  5717	033250	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5718	033251	430 00 0 00 035045 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5719									;RESULT IN C(AC) NONZERO
  5720	033252	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5721						STOP^
  5722	033253	254 04 0 00 033254 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5723	033254	324 00 0 00 033255 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5724									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5725									;IN THE SUBTEST) TO LOOP ON ERROR^
  5726
  5727					;**********
  5728
  5729					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5730					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5731					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5732					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5733					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0129

  5734			007336		SN=SN+1
  5735		004000	000000			ZZ=ZZ+ZZ
  5736						IFE	ZZ,<ZZ=1>
  5737	033255	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5738	033256	430 00 0 00 035046 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5739									;RESULT IN C(AC) NONZERO
  5740	033257	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5741						STOP^
  5742	033260	254 04 0 00 033261 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5743	033261	324 00 0 00 033262 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5744									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5745									;IN THE SUBTEST) TO LOOP ON ERROR^
  5746
  5747					;**********
  5748
  5749					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5750					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5751					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5752					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5753					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5754			007337		SN=SN+1
  5755		010000	000000			ZZ=ZZ+ZZ
  5756						IFE	ZZ,<ZZ=1>
  5757	033262	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5758	033263	430 00 0 00 035047 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5759									;RESULT IN C(AC) NONZERO
  5760	033264	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5761						STOP^
  5762	033265	254 04 0 00 033266 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5763	033266	324 00 0 00 033267 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5764									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5765									;IN THE SUBTEST) TO LOOP ON ERROR^
  5766
  5767					;**********
  5768
  5769					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5770					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5771					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5772					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5773					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5774			007340		SN=SN+1
  5775		020000	000000			ZZ=ZZ+ZZ
  5776						IFE	ZZ,<ZZ=1>
  5777	033267	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5778	033270	430 00 0 00 035050 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5779									;RESULT IN C(AC) NONZERO
  5780	033271	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5781						STOP^
  5782	033272	254 04 0 00 033273 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5783	033273	324 00 0 00 033274 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5784									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5785									;IN THE SUBTEST) TO LOOP ON ERROR^
  5786
  5787					;**********
  5788
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0130

  5789					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5790					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5791					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5792					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5793					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5794			007341		SN=SN+1
  5795		040000	000000			ZZ=ZZ+ZZ
  5796						IFE	ZZ,<ZZ=1>
  5797	033274	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5798	033275	430 00 0 00 035051 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5799									;RESULT IN C(AC) NONZERO
  5800	033276	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5801						STOP^
  5802	033277	254 04 0 00 033300 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5803	033300	324 00 0 00 033301 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5804									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5805									;IN THE SUBTEST) TO LOOP ON ERROR^
  5806
  5807					;**********
  5808
  5809					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5810					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5811					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5812					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5813					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5814			007342		SN=SN+1
  5815		100000	000000			ZZ=ZZ+ZZ
  5816						IFE	ZZ,<ZZ=1>
  5817	033301	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5818	033302	430 00 0 00 035052 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5819									;RESULT IN C(AC) NONZERO
  5820	033303	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5821						STOP^
  5822	033304	254 04 0 00 033305 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5823	033305	324 00 0 00 033306 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5824									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5825									;IN THE SUBTEST) TO LOOP ON ERROR^
  5826
  5827					;**********
  5828
  5829					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5830					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5831					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5832					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5833					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5834			007343		SN=SN+1
  5835		200000	000000			ZZ=ZZ+ZZ
  5836						IFE	ZZ,<ZZ=1>
  5837	033306	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5838	033307	430 00 0 00 035053 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5839									;RESULT IN C(AC) NONZERO
  5840	033310	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5841						STOP^
  5842	033311	254 04 0 00 033312 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5843	033312	324 00 0 00 033313 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0131

  5844									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5845									;IN THE SUBTEST) TO LOOP ON ERROR^
  5846
  5847					;**********
  5848
  5849					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5850					;C(AC)=0 AND C(E) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO. THIS
  5851					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS CLEARED AND XOR IS EXECUTED
  5852					;WITH ALL BITS OF E CLEAR EXCEPT FOR ONE FLOATING BIT WHICH IS SET TO A ONE.
  5853					;THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5854			007344		SN=SN+1
  5855		400000	000000			ZZ=ZZ+ZZ
  5856						IFE	ZZ,<ZZ=1>
  5857	033313	200 00 0 00 035000 		MOVE	[0]		;CLEAR AC
  5858	033314	430 00 0 00 035003 		XOR	[ZZ]		;*XOR WITH C(AC)=0 AND ONE BIT OF C(E) SET SHOULD
  5859									;RESULT IN C(AC) NONZERO
  5860	033315	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5861						STOP^
  5862	033316	254 04 0 00 033317 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5863	033317	324 00 0 00 033320 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5864									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5865									;IN THE SUBTEST) TO LOOP ON ERROR^
  5866
  5867					;**********
  5868
  5869			007400		SN=7400
  5870			000000			ZZ=0
  5871
  5872					A7400:	REPEAT	^D36,
  5873					<;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5874					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5875					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5876					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5877					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5878					SN=SN+1
  5879						ZZ=ZZ+ZZ
  5880						IFE	ZZ,<ZZ=1>
  5881						MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  5882						XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  5883									;RESULT IN C(AC) NON-ZERO
  5884						SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5885						STOP
  5886					
  5887					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  5888					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  5889					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  5890					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  5891					
  5892					;**********
  5893					>
  5894					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5895					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5896					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5897					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5898					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0132

  5899			007401		SN=SN+1
  5900			000000			ZZ=ZZ+ZZ
  5901			000001			IFE	ZZ,<ZZ=1>
  5902	033320	200 00 0 00 035012 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  5903	033321	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  5904									;RESULT IN C(AC) NON-ZERO
  5905	033322	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5906						STOP^
  5907	033323	254 04 0 00 033324 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5908	033324	324 00 0 00 033325 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5909									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5910									;IN THE SUBTEST) TO LOOP ON ERROR^
  5911
  5912					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  5913					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  5914					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  5915					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  5916
  5917					;**********
  5918
  5919					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5920					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5921					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5922					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5923					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5924			007402		SN=SN+1
  5925			000002			ZZ=ZZ+ZZ
  5926						IFE	ZZ,<ZZ=1>
  5927	033325	200 00 0 00 035013 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  5928	033326	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  5929									;RESULT IN C(AC) NON-ZERO
  5930	033327	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5931						STOP^
  5932	033330	254 04 0 00 033331 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5933	033331	324 00 0 00 033332 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5934									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5935									;IN THE SUBTEST) TO LOOP ON ERROR^
  5936
  5937					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  5938					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  5939					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  5940					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  5941
  5942					;**********
  5943
  5944					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5945					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5946					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5947					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5948					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5949			007403		SN=SN+1
  5950			000004			ZZ=ZZ+ZZ
  5951						IFE	ZZ,<ZZ=1>
  5952	033332	200 00 0 00 035014 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  5953	033333	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-15
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0133

  5954									;RESULT IN C(AC) NON-ZERO
  5955	033334	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5956						STOP^
  5957	033335	254 04 0 00 033336 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5958	033336	324 00 0 00 033337 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5959									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5960									;IN THE SUBTEST) TO LOOP ON ERROR^
  5961
  5962					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  5963					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  5964					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  5965					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  5966
  5967					;**********
  5968
  5969					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5970					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5971					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5972					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5973					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5974			007404		SN=SN+1
  5975			000010			ZZ=ZZ+ZZ
  5976						IFE	ZZ,<ZZ=1>
  5977	033337	200 00 0 00 035015 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  5978	033340	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  5979									;RESULT IN C(AC) NON-ZERO
  5980	033341	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  5981						STOP^
  5982	033342	254 04 0 00 033343 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  5983	033343	324 00 0 00 033344 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  5984									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  5985									;IN THE SUBTEST) TO LOOP ON ERROR^
  5986
  5987					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  5988					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  5989					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  5990					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  5991
  5992					;**********
  5993
  5994					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  5995					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  5996					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  5997					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  5998					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  5999			007405		SN=SN+1
  6000			000020			ZZ=ZZ+ZZ
  6001						IFE	ZZ,<ZZ=1>
  6002	033344	200 00 0 00 035016 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6003	033345	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6004									;RESULT IN C(AC) NON-ZERO
  6005	033346	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6006						STOP^
  6007	033347	254 04 0 00 033350 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6008	033350	324 00 0 00 033351 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-16
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0134

  6009									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6010									;IN THE SUBTEST) TO LOOP ON ERROR^
  6011
  6012					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6013					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6014					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6015					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6016
  6017					;**********
  6018
  6019					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6020					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6021					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6022					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6023					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6024			007406		SN=SN+1
  6025			000040			ZZ=ZZ+ZZ
  6026						IFE	ZZ,<ZZ=1>
  6027	033351	200 00 0 00 035017 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6028	033352	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6029									;RESULT IN C(AC) NON-ZERO
  6030	033353	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6031						STOP^
  6032	033354	254 04 0 00 033355 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6033	033355	324 00 0 00 033356 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6034									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6035									;IN THE SUBTEST) TO LOOP ON ERROR^
  6036
  6037					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6038					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6039					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6040					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6041
  6042					;**********
  6043
  6044					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6045					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6046					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6047					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6048					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6049			007407		SN=SN+1
  6050			000100			ZZ=ZZ+ZZ
  6051						IFE	ZZ,<ZZ=1>
  6052	033356	200 00 0 00 035020 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6053	033357	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6054									;RESULT IN C(AC) NON-ZERO
  6055	033360	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6056						STOP^
  6057	033361	254 04 0 00 033362 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6058	033362	324 00 0 00 033363 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6059									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6060									;IN THE SUBTEST) TO LOOP ON ERROR^
  6061
  6062					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6063					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-17
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0135

  6064					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6065					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6066
  6067					;**********
  6068
  6069					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6070					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6071					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6072					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6073					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6074			007410		SN=SN+1
  6075			000200			ZZ=ZZ+ZZ
  6076						IFE	ZZ,<ZZ=1>
  6077	033363	200 00 0 00 035021 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6078	033364	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6079									;RESULT IN C(AC) NON-ZERO
  6080	033365	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6081						STOP^
  6082	033366	254 04 0 00 033367 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6083	033367	324 00 0 00 033370 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6084									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6085									;IN THE SUBTEST) TO LOOP ON ERROR^
  6086
  6087					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6088					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6089					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6090					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6091
  6092					;**********
  6093
  6094					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6095					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6096					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6097					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6098					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6099			007411		SN=SN+1
  6100			000400			ZZ=ZZ+ZZ
  6101						IFE	ZZ,<ZZ=1>
  6102	033370	200 00 0 00 035022 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6103	033371	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6104									;RESULT IN C(AC) NON-ZERO
  6105	033372	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6106						STOP^
  6107	033373	254 04 0 00 033374 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6108	033374	324 00 0 00 033375 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6109									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6110									;IN THE SUBTEST) TO LOOP ON ERROR^
  6111
  6112					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6113					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6114					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6115					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6116
  6117					;**********
  6118
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-18
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0136

  6119					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6120					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6121					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6122					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6123					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6124			007412		SN=SN+1
  6125			001000			ZZ=ZZ+ZZ
  6126						IFE	ZZ,<ZZ=1>
  6127	033375	200 00 0 00 035023 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6128	033376	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6129									;RESULT IN C(AC) NON-ZERO
  6130	033377	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6131						STOP^
  6132	033400	254 04 0 00 033401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6133	033401	324 00 0 00 033402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6134									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6135									;IN THE SUBTEST) TO LOOP ON ERROR^
  6136
  6137					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6138					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6139					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6140					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6141
  6142					;**********
  6143
  6144					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6145					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6146					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6147					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6148					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6149			007413		SN=SN+1
  6150			002000			ZZ=ZZ+ZZ
  6151						IFE	ZZ,<ZZ=1>
  6152	033402	200 00 0 00 035024 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6153	033403	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6154									;RESULT IN C(AC) NON-ZERO
  6155	033404	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6156						STOP^
  6157	033405	254 04 0 00 033406 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6158	033406	324 00 0 00 033407 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6159									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6160									;IN THE SUBTEST) TO LOOP ON ERROR^
  6161
  6162					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6163					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6164					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6165					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6166
  6167					;**********
  6168
  6169					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6170					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6171					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6172					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6173					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-19
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0137

  6174			007414		SN=SN+1
  6175			004000			ZZ=ZZ+ZZ
  6176						IFE	ZZ,<ZZ=1>
  6177	033407	200 00 0 00 035025 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6178	033410	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6179									;RESULT IN C(AC) NON-ZERO
  6180	033411	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6181						STOP^
  6182	033412	254 04 0 00 033413 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6183	033413	324 00 0 00 033414 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6184									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6185									;IN THE SUBTEST) TO LOOP ON ERROR^
  6186
  6187					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6188					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6189					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6190					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6191
  6192					;**********
  6193
  6194					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6195					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6196					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6197					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6198					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6199			007415		SN=SN+1
  6200			010000			ZZ=ZZ+ZZ
  6201						IFE	ZZ,<ZZ=1>
  6202	033414	200 00 0 00 035026 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6203	033415	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6204									;RESULT IN C(AC) NON-ZERO
  6205	033416	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6206						STOP^
  6207	033417	254 04 0 00 033420 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6208	033420	324 00 0 00 033421 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6209									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6210									;IN THE SUBTEST) TO LOOP ON ERROR^
  6211
  6212					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6213					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6214					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6215					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6216
  6217					;**********
  6218
  6219					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6220					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6221					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6222					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6223					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6224			007416		SN=SN+1
  6225			020000			ZZ=ZZ+ZZ
  6226						IFE	ZZ,<ZZ=1>
  6227	033421	200 00 0 00 035027 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6228	033422	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-20
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0138

  6229									;RESULT IN C(AC) NON-ZERO
  6230	033423	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6231						STOP^
  6232	033424	254 04 0 00 033425 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6233	033425	324 00 0 00 033426 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6234									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6235									;IN THE SUBTEST) TO LOOP ON ERROR^
  6236
  6237					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6238					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6239					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6240					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6241
  6242					;**********
  6243
  6244					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6245					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6246					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6247					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6248					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6249			007417		SN=SN+1
  6250			040000			ZZ=ZZ+ZZ
  6251						IFE	ZZ,<ZZ=1>
  6252	033426	200 00 0 00 035030 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6253	033427	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6254									;RESULT IN C(AC) NON-ZERO
  6255	033430	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6256						STOP^
  6257	033431	254 04 0 00 033432 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6258	033432	324 00 0 00 033433 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6259									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6260									;IN THE SUBTEST) TO LOOP ON ERROR^
  6261
  6262					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6263					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6264					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6265					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6266
  6267					;**********
  6268
  6269					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6270					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6271					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6272					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6273					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6274			007420		SN=SN+1
  6275			100000			ZZ=ZZ+ZZ
  6276						IFE	ZZ,<ZZ=1>
  6277	033433	200 00 0 00 035031 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6278	033434	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6279									;RESULT IN C(AC) NON-ZERO
  6280	033435	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6281						STOP^
  6282	033436	254 04 0 00 033437 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6283	033437	324 00 0 00 033440 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-21
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0139

  6284									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6285									;IN THE SUBTEST) TO LOOP ON ERROR^
  6286
  6287					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6288					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6289					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6290					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6291
  6292					;**********
  6293
  6294					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6295					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6296					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6297					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6298					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6299			007421		SN=SN+1
  6300			200000			ZZ=ZZ+ZZ
  6301						IFE	ZZ,<ZZ=1>
  6302	033440	200 00 0 00 035032 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6303	033441	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6304									;RESULT IN C(AC) NON-ZERO
  6305	033442	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6306						STOP^
  6307	033443	254 04 0 00 033444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6308	033444	324 00 0 00 033445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6309									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6310									;IN THE SUBTEST) TO LOOP ON ERROR^
  6311
  6312					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6313					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6314					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6315					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6316
  6317					;**********
  6318
  6319					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6320					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6321					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6322					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6323					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6324			007422		SN=SN+1
  6325			400000			ZZ=ZZ+ZZ
  6326						IFE	ZZ,<ZZ=1>
  6327	033445	200 00 0 00 035033 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6328	033446	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6329									;RESULT IN C(AC) NON-ZERO
  6330	033447	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6331						STOP^
  6332	033450	254 04 0 00 033451 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6333	033451	324 00 0 00 033452 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6334									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6335									;IN THE SUBTEST) TO LOOP ON ERROR^
  6336
  6337					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6338					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-22
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0140

  6339					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6340					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6341
  6342					;**********
  6343
  6344					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6345					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6346					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6347					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6348					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6349			007423		SN=SN+1
  6350		000001	000000			ZZ=ZZ+ZZ
  6351						IFE	ZZ,<ZZ=1>
  6352	033452	200 00 0 00 035034 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6353	033453	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6354									;RESULT IN C(AC) NON-ZERO
  6355	033454	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6356						STOP^
  6357	033455	254 04 0 00 033456 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6358	033456	324 00 0 00 033457 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6359									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6360									;IN THE SUBTEST) TO LOOP ON ERROR^
  6361
  6362					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6363					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6364					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6365					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6366
  6367					;**********
  6368
  6369					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6370					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6371					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6372					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6373					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6374			007424		SN=SN+1
  6375		000002	000000			ZZ=ZZ+ZZ
  6376						IFE	ZZ,<ZZ=1>
  6377	033457	200 00 0 00 035035 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6378	033460	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6379									;RESULT IN C(AC) NON-ZERO
  6380	033461	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6381						STOP^
  6382	033462	254 04 0 00 033463 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6383	033463	324 00 0 00 033464 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6384									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6385									;IN THE SUBTEST) TO LOOP ON ERROR^
  6386
  6387					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6388					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6389					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6390					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6391
  6392					;**********
  6393
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-23
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0141

  6394					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6395					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6396					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6397					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6398					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6399			007425		SN=SN+1
  6400		000004	000000			ZZ=ZZ+ZZ
  6401						IFE	ZZ,<ZZ=1>
  6402	033464	200 00 0 00 035036 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6403	033465	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6404									;RESULT IN C(AC) NON-ZERO
  6405	033466	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6406						STOP^
  6407	033467	254 04 0 00 033470 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6408	033470	324 00 0 00 033471 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6409									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6410									;IN THE SUBTEST) TO LOOP ON ERROR^
  6411
  6412					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6413					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6414					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6415					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6416
  6417					;**********
  6418
  6419					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6420					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6421					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6422					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6423					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6424			007426		SN=SN+1
  6425		000010	000000			ZZ=ZZ+ZZ
  6426						IFE	ZZ,<ZZ=1>
  6427	033471	200 00 0 00 035037 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6428	033472	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6429									;RESULT IN C(AC) NON-ZERO
  6430	033473	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6431						STOP^
  6432	033474	254 04 0 00 033475 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6433	033475	324 00 0 00 033476 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6434									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6435									;IN THE SUBTEST) TO LOOP ON ERROR^
  6436
  6437					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6438					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6439					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6440					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6441
  6442					;**********
  6443
  6444					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6445					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6446					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6447					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6448					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-24
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0142

  6449			007427		SN=SN+1
  6450		000020	000000			ZZ=ZZ+ZZ
  6451						IFE	ZZ,<ZZ=1>
  6452	033476	200 00 0 00 035040 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6453	033477	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6454									;RESULT IN C(AC) NON-ZERO
  6455	033500	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6456						STOP^
  6457	033501	254 04 0 00 033502 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6458	033502	324 00 0 00 033503 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6459									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6460									;IN THE SUBTEST) TO LOOP ON ERROR^
  6461
  6462					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6463					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6464					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6465					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6466
  6467					;**********
  6468
  6469					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6470					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6471					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6472					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6473					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6474			007430		SN=SN+1
  6475		000040	000000			ZZ=ZZ+ZZ
  6476						IFE	ZZ,<ZZ=1>
  6477	033503	200 00 0 00 035041 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6478	033504	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6479									;RESULT IN C(AC) NON-ZERO
  6480	033505	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6481						STOP^
  6482	033506	254 04 0 00 033507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6483	033507	324 00 0 00 033510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6484									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6485									;IN THE SUBTEST) TO LOOP ON ERROR^
  6486
  6487					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6488					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6489					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6490					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6491
  6492					;**********
  6493
  6494					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6495					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6496					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6497					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6498					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6499			007431		SN=SN+1
  6500		000100	000000			ZZ=ZZ+ZZ
  6501						IFE	ZZ,<ZZ=1>
  6502	033510	200 00 0 00 035042 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6503	033511	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-25
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0143

  6504									;RESULT IN C(AC) NON-ZERO
  6505	033512	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6506						STOP^
  6507	033513	254 04 0 00 033514 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6508	033514	324 00 0 00 033515 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6509									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6510									;IN THE SUBTEST) TO LOOP ON ERROR^
  6511
  6512					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6513					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6514					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6515					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6516
  6517					;**********
  6518
  6519					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6520					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6521					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6522					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6523					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6524			007432		SN=SN+1
  6525		000200	000000			ZZ=ZZ+ZZ
  6526						IFE	ZZ,<ZZ=1>
  6527	033515	200 00 0 00 035043 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6528	033516	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6529									;RESULT IN C(AC) NON-ZERO
  6530	033517	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6531						STOP^
  6532	033520	254 04 0 00 033521 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6533	033521	324 00 0 00 033522 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6534									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6535									;IN THE SUBTEST) TO LOOP ON ERROR^
  6536
  6537					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6538					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6539					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6540					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6541
  6542					;**********
  6543
  6544					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6545					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6546					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6547					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6548					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6549			007433		SN=SN+1
  6550		000400	000000			ZZ=ZZ+ZZ
  6551						IFE	ZZ,<ZZ=1>
  6552	033522	200 00 0 00 035011 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6553	033523	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6554									;RESULT IN C(AC) NON-ZERO
  6555	033524	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6556						STOP^
  6557	033525	254 04 0 00 033526 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6558	033526	324 00 0 00 033527 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-26
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0144

  6559									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6560									;IN THE SUBTEST) TO LOOP ON ERROR^
  6561
  6562					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6563					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6564					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6565					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6566
  6567					;**********
  6568
  6569					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6570					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6571					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6572					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6573					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6574			007434		SN=SN+1
  6575		001000	000000			ZZ=ZZ+ZZ
  6576						IFE	ZZ,<ZZ=1>
  6577	033527	200 00 0 00 035044 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6578	033530	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6579									;RESULT IN C(AC) NON-ZERO
  6580	033531	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6581						STOP^
  6582	033532	254 04 0 00 033533 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6583	033533	324 00 0 00 033534 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6584									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6585									;IN THE SUBTEST) TO LOOP ON ERROR^
  6586
  6587					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6588					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6589					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6590					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6591
  6592					;**********
  6593
  6594					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6595					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6596					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6597					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6598					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6599			007435		SN=SN+1
  6600		002000	000000			ZZ=ZZ+ZZ
  6601						IFE	ZZ,<ZZ=1>
  6602	033534	200 00 0 00 035045 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6603	033535	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6604									;RESULT IN C(AC) NON-ZERO
  6605	033536	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6606						STOP^
  6607	033537	254 04 0 00 033540 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6608	033540	324 00 0 00 033541 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6609									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6610									;IN THE SUBTEST) TO LOOP ON ERROR^
  6611
  6612					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6613					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-27
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0145

  6614					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6615					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6616
  6617					;**********
  6618
  6619					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6620					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6621					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6622					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6623					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6624			007436		SN=SN+1
  6625		004000	000000			ZZ=ZZ+ZZ
  6626						IFE	ZZ,<ZZ=1>
  6627	033541	200 00 0 00 035046 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6628	033542	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6629									;RESULT IN C(AC) NON-ZERO
  6630	033543	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6631						STOP^
  6632	033544	254 04 0 00 033545 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6633	033545	324 00 0 00 033546 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6634									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6635									;IN THE SUBTEST) TO LOOP ON ERROR^
  6636
  6637					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6638					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6639					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6640					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6641
  6642					;**********
  6643
  6644					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6645					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6646					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6647					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6648					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6649			007437		SN=SN+1
  6650		010000	000000			ZZ=ZZ+ZZ
  6651						IFE	ZZ,<ZZ=1>
  6652	033546	200 00 0 00 035047 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6653	033547	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6654									;RESULT IN C(AC) NON-ZERO
  6655	033550	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6656						STOP^
  6657	033551	254 04 0 00 033552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6658	033552	324 00 0 00 033553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6659									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6660									;IN THE SUBTEST) TO LOOP ON ERROR^
  6661
  6662					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6663					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6664					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6665					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6666
  6667					;**********
  6668
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-28
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0146

  6669					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6670					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6671					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6672					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6673					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6674			007440		SN=SN+1
  6675		020000	000000			ZZ=ZZ+ZZ
  6676						IFE	ZZ,<ZZ=1>
  6677	033553	200 00 0 00 035050 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6678	033554	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6679									;RESULT IN C(AC) NON-ZERO
  6680	033555	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6681						STOP^
  6682	033556	254 04 0 00 033557 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6683	033557	324 00 0 00 033560 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6684									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6685									;IN THE SUBTEST) TO LOOP ON ERROR^
  6686
  6687					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6688					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6689					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6690					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6691
  6692					;**********
  6693
  6694					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6695					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6696					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6697					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6698					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6699			007441		SN=SN+1
  6700		040000	000000			ZZ=ZZ+ZZ
  6701						IFE	ZZ,<ZZ=1>
  6702	033560	200 00 0 00 035051 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6703	033561	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6704									;RESULT IN C(AC) NON-ZERO
  6705	033562	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6706						STOP^
  6707	033563	254 04 0 00 033564 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6708	033564	324 00 0 00 033565 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6709									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6710									;IN THE SUBTEST) TO LOOP ON ERROR^
  6711
  6712					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6713					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6714					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6715					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6716
  6717					;**********
  6718
  6719					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6720					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6721					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6722					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6723					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-29
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0147

  6724			007442		SN=SN+1
  6725		100000	000000			ZZ=ZZ+ZZ
  6726						IFE	ZZ,<ZZ=1>
  6727	033565	200 00 0 00 035052 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6728	033566	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6729									;RESULT IN C(AC) NON-ZERO
  6730	033567	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6731						STOP^
  6732	033570	254 04 0 00 033571 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6733	033571	324 00 0 00 033572 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6734									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6735									;IN THE SUBTEST) TO LOOP ON ERROR^
  6736
  6737					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6738					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6739					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6740					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6741
  6742					;**********
  6743
  6744					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6745					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6746					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6747					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6748					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6749			007443		SN=SN+1
  6750		200000	000000			ZZ=ZZ+ZZ
  6751						IFE	ZZ,<ZZ=1>
  6752	033572	200 00 0 00 035053 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6753	033573	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
  6754									;RESULT IN C(AC) NON-ZERO
  6755	033574	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6756						STOP^
  6757	033575	254 04 0 00 033576 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6758	033576	324 00 0 00 033577 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6759									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6760									;IN THE SUBTEST) TO LOOP ON ERROR^
  6761
  6762					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6763					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6764					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6765					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6766
  6767					;**********
  6768
  6769					;THIS TEST VERIFIES THAT THE RESULT OF THE XOR INSTRUCTION WHERE
  6770					;C(E)=0 AND C(AC) IS NON-ZERO IS AN AC WHOSE CONTENTS IS NON-ZERO.  THIS
  6771					;TEST IS REPEATED 36 TIMES. EACH TIME THE AC IS INITIALIZED SO THAT ONE
  6772					;AND ONLY ONE FLOATING BIT IS SET TO ONE AND XOR IS EXECUTED WITH E
  6773					;CONTAINING ALL ZEROS.  THE AC IS THEN CHECKED FOR A NON-ZERO RESULT.
  6774			007444		SN=SN+1
  6775		400000	000000			ZZ=ZZ+ZZ
  6776						IFE	ZZ,<ZZ=1>
  6777	033577	200 00 0 00 035003 		MOVE	[ZZ]		;PRELOAD AC WITH ONE FLOATING BIT SET
  6778	033600	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(E)=0 AND ONE BIT OF C(AC) SET SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 27-30
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0148

  6779									;RESULT IN C(AC) NON-ZERO
  6780	033601	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  6781						STOP^
  6782	033602	254 04 0 00 033603 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6783	033603	324 00 0 00 033604 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6784									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6785									;IN THE SUBTEST) TO LOOP ON ERROR^
  6786
  6787					;AD FM- EN [ADFM], AD FM- F/F'S[ADFM],F CYC ACT EN D[R1],
  6788					;IR BOOLE AD FM- F [IR2],IR BOOLE[IR1],IR XX (2,6,7,10,12,15)[IR2],
  6789					;AD EQV[ADCR],AD EQV F/F[ADC2],FCYC ACT EN A[F1],
  6790					;IR BOOLE (6,11)[IR2],IR BOOLE[IR1],IRXX(6,11)[IR2]
  6791
  6792					;**********
  6793
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0149

  6794			007500		SN=7500
  6795			000000			ZZ=0
  6796
  6797					A7500:	REPEAT ^D36,
  6798					<;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6799					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6800					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6801					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6802					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6803					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6804					;INDICATE AN ILLEGAL CARRY GENERATION.
  6805					SN=SN+1
  6806						ZZ=ZZ+ZZ
  6807						IFE	ZZ,<ZZ=1>
  6808						MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6809						XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6810						SKIPE			;PASS TEST IF C(AC)=0
  6811						STOP
  6812					
  6813					;**********
  6814					>
  6815					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6816					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6817					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6818					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6819					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6820					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6821					;INDICATE AN ILLEGAL CARRY GENERATION.
  6822			007501		SN=SN+1
  6823			000000			ZZ=ZZ+ZZ
  6824			000001			IFE	ZZ,<ZZ=1>
  6825	033604	200 00 0 00 035012 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6826	033605	430 00 0 00 035012 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6827	033606	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6828						STOP^
  6829	033607	254 04 0 00 033610 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6830	033610	324 00 0 00 033611 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6831									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6832									;IN THE SUBTEST) TO LOOP ON ERROR^
  6833
  6834					;**********
  6835
  6836					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6837					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6838					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6839					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6840					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6841					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6842					;INDICATE AN ILLEGAL CARRY GENERATION.
  6843			007502		SN=SN+1
  6844			000002			ZZ=ZZ+ZZ
  6845						IFE	ZZ,<ZZ=1>
  6846	033611	200 00 0 00 035013 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6847	033612	430 00 0 00 035013 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6848	033613	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0150

  6849						STOP^
  6850	033614	254 04 0 00 033615 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6851	033615	324 00 0 00 033616 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6852									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6853									;IN THE SUBTEST) TO LOOP ON ERROR^
  6854
  6855					;**********
  6856
  6857					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6858					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6859					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6860					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6861					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6862					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6863					;INDICATE AN ILLEGAL CARRY GENERATION.
  6864			007503		SN=SN+1
  6865			000004			ZZ=ZZ+ZZ
  6866						IFE	ZZ,<ZZ=1>
  6867	033616	200 00 0 00 035014 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6868	033617	430 00 0 00 035014 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6869	033620	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6870						STOP^
  6871	033621	254 04 0 00 033622 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6872	033622	324 00 0 00 033623 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6873									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6874									;IN THE SUBTEST) TO LOOP ON ERROR^
  6875
  6876					;**********
  6877
  6878					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6879					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6880					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6881					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6882					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6883					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6884					;INDICATE AN ILLEGAL CARRY GENERATION.
  6885			007504		SN=SN+1
  6886			000010			ZZ=ZZ+ZZ
  6887						IFE	ZZ,<ZZ=1>
  6888	033623	200 00 0 00 035015 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6889	033624	430 00 0 00 035015 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6890	033625	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6891						STOP^
  6892	033626	254 04 0 00 033627 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6893	033627	324 00 0 00 033630 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6894									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6895									;IN THE SUBTEST) TO LOOP ON ERROR^
  6896
  6897					;**********
  6898
  6899					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6900					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6901					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6902					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6903					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0151

  6904					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6905					;INDICATE AN ILLEGAL CARRY GENERATION.
  6906			007505		SN=SN+1
  6907			000020			ZZ=ZZ+ZZ
  6908						IFE	ZZ,<ZZ=1>
  6909	033630	200 00 0 00 035016 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6910	033631	430 00 0 00 035016 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6911	033632	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6912						STOP^
  6913	033633	254 04 0 00 033634 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6914	033634	324 00 0 00 033635 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6915									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6916									;IN THE SUBTEST) TO LOOP ON ERROR^
  6917
  6918					;**********
  6919
  6920					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6921					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6922					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6923					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6924					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6925					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6926					;INDICATE AN ILLEGAL CARRY GENERATION.
  6927			007506		SN=SN+1
  6928			000040			ZZ=ZZ+ZZ
  6929						IFE	ZZ,<ZZ=1>
  6930	033635	200 00 0 00 035017 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6931	033636	430 00 0 00 035017 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6932	033637	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6933						STOP^
  6934	033640	254 04 0 00 033641 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6935	033641	324 00 0 00 033642 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6936									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6937									;IN THE SUBTEST) TO LOOP ON ERROR^
  6938
  6939					;**********
  6940
  6941					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6942					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6943					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6944					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6945					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6946					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6947					;INDICATE AN ILLEGAL CARRY GENERATION.
  6948			007507		SN=SN+1
  6949			000100			ZZ=ZZ+ZZ
  6950						IFE	ZZ,<ZZ=1>
  6951	033642	200 00 0 00 035020 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6952	033643	430 00 0 00 035020 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6953	033644	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6954						STOP^
  6955	033645	254 04 0 00 033646 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6956	033646	324 00 0 00 033647 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6957									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6958									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0152

  6959
  6960					;**********
  6961
  6962					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6963					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6964					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6965					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6966					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6967					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6968					;INDICATE AN ILLEGAL CARRY GENERATION.
  6969			007510		SN=SN+1
  6970			000200			ZZ=ZZ+ZZ
  6971						IFE	ZZ,<ZZ=1>
  6972	033647	200 00 0 00 035021 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6973	033650	430 00 0 00 035021 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6974	033651	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6975						STOP^
  6976	033652	254 04 0 00 033653 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6977	033653	324 00 0 00 033654 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6978									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  6979									;IN THE SUBTEST) TO LOOP ON ERROR^
  6980
  6981					;**********
  6982
  6983					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  6984					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  6985					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  6986					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  6987					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  6988					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  6989					;INDICATE AN ILLEGAL CARRY GENERATION.
  6990			007511		SN=SN+1
  6991			000400			ZZ=ZZ+ZZ
  6992						IFE	ZZ,<ZZ=1>
  6993	033654	200 00 0 00 035022 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  6994	033655	430 00 0 00 035022 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  6995	033656	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  6996						STOP^
  6997	033657	254 04 0 00 033660 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  6998	033660	324 00 0 00 033661 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  6999									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7000									;IN THE SUBTEST) TO LOOP ON ERROR^
  7001
  7002					;**********
  7003
  7004					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7005					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7006					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7007					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7008					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7009					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7010					;INDICATE AN ILLEGAL CARRY GENERATION.
  7011			007512		SN=SN+1
  7012			001000			ZZ=ZZ+ZZ
  7013						IFE	ZZ,<ZZ=1>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0153

  7014	033661	200 00 0 00 035023 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7015	033662	430 00 0 00 035023 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7016	033663	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7017						STOP^
  7018	033664	254 04 0 00 033665 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7019	033665	324 00 0 00 033666 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7020									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7021									;IN THE SUBTEST) TO LOOP ON ERROR^
  7022
  7023					;**********
  7024
  7025					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7026					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7027					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7028					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7029					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7030					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7031					;INDICATE AN ILLEGAL CARRY GENERATION.
  7032			007513		SN=SN+1
  7033			002000			ZZ=ZZ+ZZ
  7034						IFE	ZZ,<ZZ=1>
  7035	033666	200 00 0 00 035024 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7036	033667	430 00 0 00 035024 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7037	033670	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7038						STOP^
  7039	033671	254 04 0 00 033672 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7040	033672	324 00 0 00 033673 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7041									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7042									;IN THE SUBTEST) TO LOOP ON ERROR^
  7043
  7044					;**********
  7045
  7046					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7047					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7048					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7049					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7050					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7051					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7052					;INDICATE AN ILLEGAL CARRY GENERATION.
  7053			007514		SN=SN+1
  7054			004000			ZZ=ZZ+ZZ
  7055						IFE	ZZ,<ZZ=1>
  7056	033673	200 00 0 00 035025 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7057	033674	430 00 0 00 035025 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7058	033675	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7059						STOP^
  7060	033676	254 04 0 00 033677 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7061	033677	324 00 0 00 033700 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7062									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7063									;IN THE SUBTEST) TO LOOP ON ERROR^
  7064
  7065					;**********
  7066
  7067					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7068					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0154

  7069					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7070					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7071					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7072					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7073					;INDICATE AN ILLEGAL CARRY GENERATION.
  7074			007515		SN=SN+1
  7075			010000			ZZ=ZZ+ZZ
  7076						IFE	ZZ,<ZZ=1>
  7077	033700	200 00 0 00 035026 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7078	033701	430 00 0 00 035026 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7079	033702	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7080						STOP^
  7081	033703	254 04 0 00 033704 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7082	033704	324 00 0 00 033705 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7083									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7084									;IN THE SUBTEST) TO LOOP ON ERROR^
  7085
  7086					;**********
  7087
  7088					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7089					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7090					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7091					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7092					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7093					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7094					;INDICATE AN ILLEGAL CARRY GENERATION.
  7095			007516		SN=SN+1
  7096			020000			ZZ=ZZ+ZZ
  7097						IFE	ZZ,<ZZ=1>
  7098	033705	200 00 0 00 035027 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7099	033706	430 00 0 00 035027 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7100	033707	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7101						STOP^
  7102	033710	254 04 0 00 033711 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7103	033711	324 00 0 00 033712 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7104									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7105									;IN THE SUBTEST) TO LOOP ON ERROR^
  7106
  7107					;**********
  7108
  7109					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7110					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7111					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7112					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7113					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7114					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7115					;INDICATE AN ILLEGAL CARRY GENERATION.
  7116			007517		SN=SN+1
  7117			040000			ZZ=ZZ+ZZ
  7118						IFE	ZZ,<ZZ=1>
  7119	033712	200 00 0 00 035030 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7120	033713	430 00 0 00 035030 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7121	033714	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7122						STOP^
  7123	033715	254 04 0 00 033716 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0155

  7124	033716	324 00 0 00 033717 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7125									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7126									;IN THE SUBTEST) TO LOOP ON ERROR^
  7127
  7128					;**********
  7129
  7130					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7131					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7132					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7133					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7134					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7135					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7136					;INDICATE AN ILLEGAL CARRY GENERATION.
  7137			007520		SN=SN+1
  7138			100000			ZZ=ZZ+ZZ
  7139						IFE	ZZ,<ZZ=1>
  7140	033717	200 00 0 00 035031 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7141	033720	430 00 0 00 035031 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7142	033721	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7143						STOP^
  7144	033722	254 04 0 00 033723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7145	033723	324 00 0 00 033724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7146									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7147									;IN THE SUBTEST) TO LOOP ON ERROR^
  7148
  7149					;**********
  7150
  7151					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7152					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7153					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7154					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7155					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7156					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7157					;INDICATE AN ILLEGAL CARRY GENERATION.
  7158			007521		SN=SN+1
  7159			200000			ZZ=ZZ+ZZ
  7160						IFE	ZZ,<ZZ=1>
  7161	033724	200 00 0 00 035032 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7162	033725	430 00 0 00 035032 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7163	033726	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7164						STOP^
  7165	033727	254 04 0 00 033730 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7166	033730	324 00 0 00 033731 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7167									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7168									;IN THE SUBTEST) TO LOOP ON ERROR^
  7169
  7170					;**********
  7171
  7172					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7173					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7174					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7175					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7176					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7177					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7178					;INDICATE AN ILLEGAL CARRY GENERATION.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0156

  7179			007522		SN=SN+1
  7180			400000			ZZ=ZZ+ZZ
  7181						IFE	ZZ,<ZZ=1>
  7182	033731	200 00 0 00 035033 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7183	033732	430 00 0 00 035033 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7184	033733	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7185						STOP^
  7186	033734	254 04 0 00 033735 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7187	033735	324 00 0 00 033736 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7188									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7189									;IN THE SUBTEST) TO LOOP ON ERROR^
  7190
  7191					;**********
  7192
  7193					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7194					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7195					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7196					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7197					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7198					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7199					;INDICATE AN ILLEGAL CARRY GENERATION.
  7200			007523		SN=SN+1
  7201		000001	000000			ZZ=ZZ+ZZ
  7202						IFE	ZZ,<ZZ=1>
  7203	033736	200 00 0 00 035034 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7204	033737	430 00 0 00 035034 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7205	033740	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7206						STOP^
  7207	033741	254 04 0 00 033742 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7208	033742	324 00 0 00 033743 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7209									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7210									;IN THE SUBTEST) TO LOOP ON ERROR^
  7211
  7212					;**********
  7213
  7214					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7215					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7216					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7217					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7218					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7219					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7220					;INDICATE AN ILLEGAL CARRY GENERATION.
  7221			007524		SN=SN+1
  7222		000002	000000			ZZ=ZZ+ZZ
  7223						IFE	ZZ,<ZZ=1>
  7224	033743	200 00 0 00 035035 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7225	033744	430 00 0 00 035035 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7226	033745	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7227						STOP^
  7228	033746	254 04 0 00 033747 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7229	033747	324 00 0 00 033750 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7230									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7231									;IN THE SUBTEST) TO LOOP ON ERROR^
  7232
  7233					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0157

  7234
  7235					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7236					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7237					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7238					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7239					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7240					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7241					;INDICATE AN ILLEGAL CARRY GENERATION.
  7242			007525		SN=SN+1
  7243		000004	000000			ZZ=ZZ+ZZ
  7244						IFE	ZZ,<ZZ=1>
  7245	033750	200 00 0 00 035036 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7246	033751	430 00 0 00 035036 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7247	033752	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7248						STOP^
  7249	033753	254 04 0 00 033754 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7250	033754	324 00 0 00 033755 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7251									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7252									;IN THE SUBTEST) TO LOOP ON ERROR^
  7253
  7254					;**********
  7255
  7256					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7257					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7258					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7259					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7260					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7261					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7262					;INDICATE AN ILLEGAL CARRY GENERATION.
  7263			007526		SN=SN+1
  7264		000010	000000			ZZ=ZZ+ZZ
  7265						IFE	ZZ,<ZZ=1>
  7266	033755	200 00 0 00 035037 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7267	033756	430 00 0 00 035037 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7268	033757	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7269						STOP^
  7270	033760	254 04 0 00 033761 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7271	033761	324 00 0 00 033762 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7272									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7273									;IN THE SUBTEST) TO LOOP ON ERROR^
  7274
  7275					;**********
  7276
  7277					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7278					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7279					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7280					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7281					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7282					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7283					;INDICATE AN ILLEGAL CARRY GENERATION.
  7284			007527		SN=SN+1
  7285		000020	000000			ZZ=ZZ+ZZ
  7286						IFE	ZZ,<ZZ=1>
  7287	033762	200 00 0 00 035040 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7288	033763	430 00 0 00 035040 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0158

  7289	033764	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7290						STOP^
  7291	033765	254 04 0 00 033766 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7292	033766	324 00 0 00 033767 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7293									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7294									;IN THE SUBTEST) TO LOOP ON ERROR^
  7295
  7296					;**********
  7297
  7298					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7299					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7300					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7301					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7302					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7303					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7304					;INDICATE AN ILLEGAL CARRY GENERATION.
  7305			007530		SN=SN+1
  7306		000040	000000			ZZ=ZZ+ZZ
  7307						IFE	ZZ,<ZZ=1>
  7308	033767	200 00 0 00 035041 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7309	033770	430 00 0 00 035041 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7310	033771	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7311						STOP^
  7312	033772	254 04 0 00 033773 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7313	033773	324 00 0 00 033774 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7314									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7315									;IN THE SUBTEST) TO LOOP ON ERROR^
  7316
  7317					;**********
  7318
  7319					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7320					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7321					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7322					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7323					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7324					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7325					;INDICATE AN ILLEGAL CARRY GENERATION.
  7326			007531		SN=SN+1
  7327		000100	000000			ZZ=ZZ+ZZ
  7328						IFE	ZZ,<ZZ=1>
  7329	033774	200 00 0 00 035042 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7330	033775	430 00 0 00 035042 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7331	033776	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7332						STOP^
  7333	033777	254 04 0 00 034000 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7334	034000	324 00 0 00 034001 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7335									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7336									;IN THE SUBTEST) TO LOOP ON ERROR^
  7337
  7338					;**********
  7339
  7340					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7341					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7342					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7343					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0159

  7344					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7345					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7346					;INDICATE AN ILLEGAL CARRY GENERATION.
  7347			007532		SN=SN+1
  7348		000200	000000			ZZ=ZZ+ZZ
  7349						IFE	ZZ,<ZZ=1>
  7350	034001	200 00 0 00 035043 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7351	034002	430 00 0 00 035043 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7352	034003	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7353						STOP^
  7354	034004	254 04 0 00 034005 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7355	034005	324 00 0 00 034006 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7356									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7357									;IN THE SUBTEST) TO LOOP ON ERROR^
  7358
  7359					;**********
  7360
  7361					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7362					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7363					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7364					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7365					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7366					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7367					;INDICATE AN ILLEGAL CARRY GENERATION.
  7368			007533		SN=SN+1
  7369		000400	000000			ZZ=ZZ+ZZ
  7370						IFE	ZZ,<ZZ=1>
  7371	034006	200 00 0 00 035011 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7372	034007	430 00 0 00 035011 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7373	034010	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7374						STOP^
  7375	034011	254 04 0 00 034012 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7376	034012	324 00 0 00 034013 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7377									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7378									;IN THE SUBTEST) TO LOOP ON ERROR^
  7379
  7380					;**********
  7381
  7382					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7383					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7384					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7385					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7386					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7387					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7388					;INDICATE AN ILLEGAL CARRY GENERATION.
  7389			007534		SN=SN+1
  7390		001000	000000			ZZ=ZZ+ZZ
  7391						IFE	ZZ,<ZZ=1>
  7392	034013	200 00 0 00 035044 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7393	034014	430 00 0 00 035044 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7394	034015	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7395						STOP^
  7396	034016	254 04 0 00 034017 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7397	034017	324 00 0 00 034020 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7398									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0160

  7399									;IN THE SUBTEST) TO LOOP ON ERROR^
  7400
  7401					;**********
  7402
  7403					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7404					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7405					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7406					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7407					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7408					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7409					;INDICATE AN ILLEGAL CARRY GENERATION.
  7410			007535		SN=SN+1
  7411		002000	000000			ZZ=ZZ+ZZ
  7412						IFE	ZZ,<ZZ=1>
  7413	034020	200 00 0 00 035045 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7414	034021	430 00 0 00 035045 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7415	034022	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7416						STOP^
  7417	034023	254 04 0 00 034024 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7418	034024	324 00 0 00 034025 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7419									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7420									;IN THE SUBTEST) TO LOOP ON ERROR^
  7421
  7422					;**********
  7423
  7424					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7425					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7426					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7427					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7428					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7429					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7430					;INDICATE AN ILLEGAL CARRY GENERATION.
  7431			007536		SN=SN+1
  7432		004000	000000			ZZ=ZZ+ZZ
  7433						IFE	ZZ,<ZZ=1>
  7434	034025	200 00 0 00 035046 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7435	034026	430 00 0 00 035046 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7436	034027	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7437						STOP^
  7438	034030	254 04 0 00 034031 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7439	034031	324 00 0 00 034032 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7440									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7441									;IN THE SUBTEST) TO LOOP ON ERROR^
  7442
  7443					;**********
  7444
  7445					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7446					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7447					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7448					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7449					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7450					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7451					;INDICATE AN ILLEGAL CARRY GENERATION.
  7452			007537		SN=SN+1
  7453		010000	000000			ZZ=ZZ+ZZ
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0161

  7454						IFE	ZZ,<ZZ=1>
  7455	034032	200 00 0 00 035047 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7456	034033	430 00 0 00 035047 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7457	034034	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7458						STOP^
  7459	034035	254 04 0 00 034036 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7460	034036	324 00 0 00 034037 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7461									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7462									;IN THE SUBTEST) TO LOOP ON ERROR^
  7463
  7464					;**********
  7465
  7466					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7467					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7468					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7469					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7470					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7471					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7472					;INDICATE AN ILLEGAL CARRY GENERATION.
  7473			007540		SN=SN+1
  7474		020000	000000			ZZ=ZZ+ZZ
  7475						IFE	ZZ,<ZZ=1>
  7476	034037	200 00 0 00 035050 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7477	034040	430 00 0 00 035050 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7478	034041	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7479						STOP^
  7480	034042	254 04 0 00 034043 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7481	034043	324 00 0 00 034044 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7482									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7483									;IN THE SUBTEST) TO LOOP ON ERROR^
  7484
  7485					;**********
  7486
  7487					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7488					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7489					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7490					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7491					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7492					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7493					;INDICATE AN ILLEGAL CARRY GENERATION.
  7494			007541		SN=SN+1
  7495		040000	000000			ZZ=ZZ+ZZ
  7496						IFE	ZZ,<ZZ=1>
  7497	034044	200 00 0 00 035051 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7498	034045	430 00 0 00 035051 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7499	034046	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7500						STOP^
  7501	034047	254 04 0 00 034050 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7502	034050	324 00 0 00 034051 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7503									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7504									;IN THE SUBTEST) TO LOOP ON ERROR^
  7505
  7506					;**********
  7507
  7508					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0162

  7509					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7510					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7511					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7512					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7513					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7514					;INDICATE AN ILLEGAL CARRY GENERATION.
  7515			007542		SN=SN+1
  7516		100000	000000			ZZ=ZZ+ZZ
  7517						IFE	ZZ,<ZZ=1>
  7518	034051	200 00 0 00 035052 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7519	034052	430 00 0 00 035052 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7520	034053	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7521						STOP^
  7522	034054	254 04 0 00 034055 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7523	034055	324 00 0 00 034056 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7524									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7525									;IN THE SUBTEST) TO LOOP ON ERROR^
  7526
  7527					;**********
  7528
  7529					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7530					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7531					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7532					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7533					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7534					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7535					;INDICATE AN ILLEGAL CARRY GENERATION.
  7536			007543		SN=SN+1
  7537		200000	000000			ZZ=ZZ+ZZ
  7538						IFE	ZZ,<ZZ=1>
  7539	034056	200 00 0 00 035053 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7540	034057	430 00 0 00 035053 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7541	034060	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7542						STOP^
  7543	034061	254 04 0 00 034062 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7544	034062	324 00 0 00 034063 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7545									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7546									;IN THE SUBTEST) TO LOOP ON ERROR^
  7547
  7548					;**********
  7549
  7550					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION
  7551					;WHERE C(AC) = C(E) IS AN AC CONTAINING ALL ZEROS.  FIRST,
  7552					;THE AC IS INITIALIZED WITH A WORD CONTAINING ALL ZEROS EXCEPT
  7553					;FOR ONE FLOATING ONE; THEN, XOR IS EXECUTED WITH E CONTAINING THE SAME
  7554					;NUMBER.  THE RESULT SHOULD BE AN AC CONTAINING ALL ZEROS.  THIS TEST
  7555					;IS REPEATED 36 TIMES.  IF ANY BIT IN THE RESULT IS NON-ZERO, IT MAY
  7556					;INDICATE AN ILLEGAL CARRY GENERATION.
  7557			007544		SN=SN+1
  7558		400000	000000			ZZ=ZZ+ZZ
  7559						IFE	ZZ,<ZZ=1>
  7560	034063	200 00 0 00 035003 		MOVE	[ZZ]		;INITIALIZE AC WITH ONE FLOATING BIT SET
  7561	034064	430 00 0 00 035003 		XOR	[ZZ]		;*XOR WITH C(AC)=C(E) SHOULD RESULT IN C(AC)=0
  7562	034065	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7563						STOP^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 28-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0163

  7564	034066	254 04 0 00 034067 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7565	034067	324 00 0 00 034070 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7566									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7567									;IN THE SUBTEST) TO LOOP ON ERROR^
  7568
  7569					;**********
  7570
  7571					;THIS TEST VERIFIES THAT THE RESULT OF AN XOR INSTRUCTION WHERE
  7572					;C(AC)=C(E)=0 IS AN AC CONTAINING ALL ZEROS; FIRST THE AC IS CLEARED; THEN
  7573					;XOR IS EXECUTED WITH C(E)=0.  THE RESULT IN THE AC IS CHECKED FOR ALL ZEROS
  7574
  7575	034070	200 00 0 00 035000 	A7600:	MOVE	[0]		;INITIALIZE AC TO ALL ZEROS
  7576	034071	430 00 0 00 035000 		XOR	[0]		;*XOR WITH C(AC)=C(E)=0 SHOULD RESULT INC(AC)=0
  7577	034072	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7578						STOP^
  7579	034073	254 04 0 00 034074 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7580	034074	324 00 0 00 034075 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7581									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7582									;IN THE SUBTEST) TO LOOP ON ERROR^
  7583
  7584					;**********
  7585
  7586					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7587					;C(AC)=0 AND C(E) ALL ONES IS AN AC CONTAINING ALL ZEROS SINCE
  7588					;THE EQUIVALENCE FUNCTION SHOULD SET ONLY LIKE BITS.  FIRST, THE AC
  7589					;SHOULD BE CLEARED; THEN, EQV IS EXECUTED WITH E CONTAINING ALL ONES.
  7590					;THE AC IS THEN CHECKED FOR ALL ZEROS
  7591
  7592	034075	200 00 0 00 035000 	A7700:	MOVE	[0]		;CLEAR THE AC
  7593	034076	444 00 0 00 035001 		EQV	[-1]		;*EQV WITH C(AC)=0 AND C(E) ALL ONES SHOULD
  7594									;RESULT IN C(AC)=0
  7595	034077	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  7596						STOP^
  7597	034100	254 04 0 00 034101 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7598	034101	324 00 0 00 034102 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7599									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7600									;IN THE SUBTEST) TO LOOP ON ERROR^
  7601
  7602					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0164

  7603			010000		SN=10000
  7604			000000			ZZ=0
  7605
  7606					A10000:	REPEAT	^D18,
  7607					<;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7608					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7609					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7610					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7611					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7612					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7613					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7614					SN=SN+1
  7615						ZZ=ZZ+ZZ+1
  7616						IFE	<ZZ-1>,<ZZ=-2>
  7617						MOVE	[0]		;PRESET AC TO ALL ZEROS
  7618						EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7619									;RESULT IN C(AC) NON-ZERO
  7620						SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7621						STOP
  7622					
  7623					;**********
  7624					>
  7625					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7626					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7627					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7628					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7629					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7630					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7631					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7632			010001		SN=SN+1
  7633			000001			ZZ=ZZ+ZZ+1
  7634		777777	777776			IFE	<ZZ-1>,<ZZ=-2>
  7635	034102	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7636	034103	444 00 0 00 035060 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7637									;RESULT IN C(AC) NON-ZERO
  7638	034104	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7639						STOP^
  7640	034105	254 04 0 00 034106 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7641	034106	324 00 0 00 034107 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7642									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7643									;IN THE SUBTEST) TO LOOP ON ERROR^
  7644
  7645					;**********
  7646
  7647					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7648					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7649					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7650					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7651					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7652					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7653					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7654			010002		SN=SN+1
  7655		777777	777775			ZZ=ZZ+ZZ+1
  7656						IFE	<ZZ-1>,<ZZ=-2>
  7657	034107	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0165

  7658	034110	444 00 0 00 035061 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7659									;RESULT IN C(AC) NON-ZERO
  7660	034111	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7661						STOP^
  7662	034112	254 04 0 00 034113 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7663	034113	324 00 0 00 034114 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7664									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7665									;IN THE SUBTEST) TO LOOP ON ERROR^
  7666
  7667					;**********
  7668
  7669					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7670					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7671					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7672					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7673					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7674					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7675					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7676			010003		SN=SN+1
  7677		777777	777773			ZZ=ZZ+ZZ+1
  7678						IFE	<ZZ-1>,<ZZ=-2>
  7679	034114	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7680	034115	444 00 0 00 035062 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7681									;RESULT IN C(AC) NON-ZERO
  7682	034116	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7683						STOP^
  7684	034117	254 04 0 00 034120 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7685	034120	324 00 0 00 034121 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7686									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7687									;IN THE SUBTEST) TO LOOP ON ERROR^
  7688
  7689					;**********
  7690
  7691					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7692					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7693					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7694					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7695					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7696					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7697					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7698			010004		SN=SN+1
  7699		777777	777767			ZZ=ZZ+ZZ+1
  7700						IFE	<ZZ-1>,<ZZ=-2>
  7701	034121	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7702	034122	444 00 0 00 035063 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7703									;RESULT IN C(AC) NON-ZERO
  7704	034123	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7705						STOP^
  7706	034124	254 04 0 00 034125 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7707	034125	324 00 0 00 034126 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7708									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7709									;IN THE SUBTEST) TO LOOP ON ERROR^
  7710
  7711					;**********
  7712
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0166

  7713					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7714					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7715					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7716					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7717					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7718					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7719					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7720			010005		SN=SN+1
  7721		777777	777757			ZZ=ZZ+ZZ+1
  7722						IFE	<ZZ-1>,<ZZ=-2>
  7723	034126	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7724	034127	444 00 0 00 035064 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7725									;RESULT IN C(AC) NON-ZERO
  7726	034130	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7727						STOP^
  7728	034131	254 04 0 00 034132 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7729	034132	324 00 0 00 034133 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7730									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7731									;IN THE SUBTEST) TO LOOP ON ERROR^
  7732
  7733					;**********
  7734
  7735					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7736					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7737					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7738					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7739					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7740					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7741					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7742			010006		SN=SN+1
  7743		777777	777737			ZZ=ZZ+ZZ+1
  7744						IFE	<ZZ-1>,<ZZ=-2>
  7745	034133	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7746	034134	444 00 0 00 035065 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7747									;RESULT IN C(AC) NON-ZERO
  7748	034135	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7749						STOP^
  7750	034136	254 04 0 00 034137 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7751	034137	324 00 0 00 034140 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7752									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7753									;IN THE SUBTEST) TO LOOP ON ERROR^
  7754
  7755					;**********
  7756
  7757					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7758					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7759					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7760					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7761					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7762					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7763					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7764			010007		SN=SN+1
  7765		777777	777677			ZZ=ZZ+ZZ+1
  7766						IFE	<ZZ-1>,<ZZ=-2>
  7767	034140	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0167

  7768	034141	444 00 0 00 035066 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7769									;RESULT IN C(AC) NON-ZERO
  7770	034142	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7771						STOP^
  7772	034143	254 04 0 00 034144 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7773	034144	324 00 0 00 034145 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7774									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7775									;IN THE SUBTEST) TO LOOP ON ERROR^
  7776
  7777					;**********
  7778
  7779					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7780					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7781					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7782					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7783					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7784					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7785					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7786			010010		SN=SN+1
  7787		777777	777577			ZZ=ZZ+ZZ+1
  7788						IFE	<ZZ-1>,<ZZ=-2>
  7789	034145	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7790	034146	444 00 0 00 035067 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7791									;RESULT IN C(AC) NON-ZERO
  7792	034147	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7793						STOP^
  7794	034150	254 04 0 00 034151 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7795	034151	324 00 0 00 034152 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7796									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7797									;IN THE SUBTEST) TO LOOP ON ERROR^
  7798
  7799					;**********
  7800
  7801					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7802					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7803					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7804					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7805					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7806					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7807					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7808			010011		SN=SN+1
  7809		777777	777377			ZZ=ZZ+ZZ+1
  7810						IFE	<ZZ-1>,<ZZ=-2>
  7811	034152	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7812	034153	444 00 0 00 035070 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7813									;RESULT IN C(AC) NON-ZERO
  7814	034154	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7815						STOP^
  7816	034155	254 04 0 00 034156 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7817	034156	324 00 0 00 034157 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7818									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7819									;IN THE SUBTEST) TO LOOP ON ERROR^
  7820
  7821					;**********
  7822
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0168

  7823					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7824					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7825					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7826					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7827					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7828					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7829					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7830			010012		SN=SN+1
  7831		777777	776777			ZZ=ZZ+ZZ+1
  7832						IFE	<ZZ-1>,<ZZ=-2>
  7833	034157	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7834	034160	444 00 0 00 035071 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7835									;RESULT IN C(AC) NON-ZERO
  7836	034161	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7837						STOP^
  7838	034162	254 04 0 00 034163 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7839	034163	324 00 0 00 034164 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7840									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7841									;IN THE SUBTEST) TO LOOP ON ERROR^
  7842
  7843					;**********
  7844
  7845					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7846					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7847					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7848					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7849					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7850					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7851					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7852			010013		SN=SN+1
  7853		777777	775777			ZZ=ZZ+ZZ+1
  7854						IFE	<ZZ-1>,<ZZ=-2>
  7855	034164	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7856	034165	444 00 0 00 035072 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7857									;RESULT IN C(AC) NON-ZERO
  7858	034166	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7859						STOP^
  7860	034167	254 04 0 00 034170 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7861	034170	324 00 0 00 034171 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7862									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7863									;IN THE SUBTEST) TO LOOP ON ERROR^
  7864
  7865					;**********
  7866
  7867					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7868					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7869					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7870					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7871					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7872					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7873					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7874			010014		SN=SN+1
  7875		777777	773777			ZZ=ZZ+ZZ+1
  7876						IFE	<ZZ-1>,<ZZ=-2>
  7877	034171	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0169

  7878	034172	444 00 0 00 035073 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7879									;RESULT IN C(AC) NON-ZERO
  7880	034173	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7881						STOP^
  7882	034174	254 04 0 00 034175 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7883	034175	324 00 0 00 034176 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7884									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7885									;IN THE SUBTEST) TO LOOP ON ERROR^
  7886
  7887					;**********
  7888
  7889					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7890					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7891					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7892					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7893					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7894					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7895					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7896			010015		SN=SN+1
  7897		777777	767777			ZZ=ZZ+ZZ+1
  7898						IFE	<ZZ-1>,<ZZ=-2>
  7899	034176	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7900	034177	444 00 0 00 035074 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7901									;RESULT IN C(AC) NON-ZERO
  7902	034200	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7903						STOP^
  7904	034201	254 04 0 00 034202 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7905	034202	324 00 0 00 034203 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7906									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7907									;IN THE SUBTEST) TO LOOP ON ERROR^
  7908
  7909					;**********
  7910
  7911					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7912					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7913					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7914					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7915					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7916					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7917					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7918			010016		SN=SN+1
  7919		777777	757777			ZZ=ZZ+ZZ+1
  7920						IFE	<ZZ-1>,<ZZ=-2>
  7921	034203	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7922	034204	444 00 0 00 035075 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7923									;RESULT IN C(AC) NON-ZERO
  7924	034205	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7925						STOP^
  7926	034206	254 04 0 00 034207 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7927	034207	324 00 0 00 034210 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7928									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7929									;IN THE SUBTEST) TO LOOP ON ERROR^
  7930
  7931					;**********
  7932
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0170

  7933					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7934					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7935					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7936					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7937					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7938					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7939					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7940			010017		SN=SN+1
  7941		777777	737777			ZZ=ZZ+ZZ+1
  7942						IFE	<ZZ-1>,<ZZ=-2>
  7943	034210	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7944	034211	444 00 0 00 035076 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7945									;RESULT IN C(AC) NON-ZERO
  7946	034212	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7947						STOP^
  7948	034213	254 04 0 00 034214 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7949	034214	324 00 0 00 034215 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7950									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7951									;IN THE SUBTEST) TO LOOP ON ERROR^
  7952
  7953					;**********
  7954
  7955					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7956					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7957					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7958					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7959					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7960					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7961					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7962			010020		SN=SN+1
  7963		777777	677777			ZZ=ZZ+ZZ+1
  7964						IFE	<ZZ-1>,<ZZ=-2>
  7965	034215	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  7966	034216	444 00 0 00 035077 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7967									;RESULT IN C(AC) NON-ZERO
  7968	034217	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7969						STOP^
  7970	034220	254 04 0 00 034221 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7971	034221	324 00 0 00 034222 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7972									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7973									;IN THE SUBTEST) TO LOOP ON ERROR^
  7974
  7975					;**********
  7976
  7977					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  7978					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  7979					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  7980					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  7981					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  7982					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  7983					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  7984			010021		SN=SN+1
  7985		777777	577777			ZZ=ZZ+ZZ+1
  7986						IFE	<ZZ-1>,<ZZ=-2>
  7987	034222	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0171

  7988	034223	444 00 0 00 035100 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  7989									;RESULT IN C(AC) NON-ZERO
  7990	034224	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  7991						STOP^
  7992	034225	254 04 0 00 034226 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  7993	034226	324 00 0 00 034227 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  7994									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  7995									;IN THE SUBTEST) TO LOOP ON ERROR^
  7996
  7997					;**********
  7998
  7999					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8000					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8001					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8002					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8003					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8004					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8005					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8006			010022		SN=SN+1
  8007		777777	377777			ZZ=ZZ+ZZ+1
  8008						IFE	<ZZ-1>,<ZZ=-2>
  8009	034227	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8010	034230	444 00 0 00 035101 		EQV	[XWD -1,ZZ]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8011									;RESULT IN C(AC) NON-ZERO
  8012	034231	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8013						STOP^
  8014	034232	254 04 0 00 034233 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8015	034233	324 00 0 00 034234 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8016									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8017									;IN THE SUBTEST) TO LOOP ON ERROR^
  8018
  8019					;**********
  8020
  8021			010100		SN=10100
  8022			000000			ZZ=0
  8023
  8024					A10100:	REPEAT	^D18,
  8025					<;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8026					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8027					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8028					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8029					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8030					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8031					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8032					SN=SN+1
  8033						ZZ=ZZ+ZZ+1
  8034						IFE	<ZZ-1>,<ZZ=-2>
  8035						MOVE	[0]		;PRESET AC TO ALL ZEROS
  8036						EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8037									;RESULT IN C(AC) NON-ZERO
  8038						SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8039						STOP
  8040					
  8041					;**********
  8042					>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0172

  8043					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8044					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8045					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8046					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8047					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8048					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8049					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8050			010101		SN=SN+1
  8051			000001			ZZ=ZZ+ZZ+1
  8052		777777	777776			IFE	<ZZ-1>,<ZZ=-2>
  8053	034234	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8054	034235	444 00 0 00 035102 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8055									;RESULT IN C(AC) NON-ZERO
  8056	034236	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8057						STOP^
  8058	034237	254 04 0 00 034240 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8059	034240	324 00 0 00 034241 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8060									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8061									;IN THE SUBTEST) TO LOOP ON ERROR^
  8062
  8063					;**********
  8064
  8065					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8066					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8067					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8068					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8069					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8070					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8071					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8072			010102		SN=SN+1
  8073		777777	777775			ZZ=ZZ+ZZ+1
  8074						IFE	<ZZ-1>,<ZZ=-2>
  8075	034241	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8076	034242	444 00 0 00 035103 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8077									;RESULT IN C(AC) NON-ZERO
  8078	034243	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8079						STOP^
  8080	034244	254 04 0 00 034245 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8081	034245	324 00 0 00 034246 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8082									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8083									;IN THE SUBTEST) TO LOOP ON ERROR^
  8084
  8085					;**********
  8086
  8087					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8088					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8089					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8090					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8091					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8092					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8093					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8094			010103		SN=SN+1
  8095		777777	777773			ZZ=ZZ+ZZ+1
  8096						IFE	<ZZ-1>,<ZZ=-2>
  8097	034246	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0173

  8098	034247	444 00 0 00 035104 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8099									;RESULT IN C(AC) NON-ZERO
  8100	034250	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8101						STOP^
  8102	034251	254 04 0 00 034252 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8103	034252	324 00 0 00 034253 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8104									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8105									;IN THE SUBTEST) TO LOOP ON ERROR^
  8106
  8107					;**********
  8108
  8109					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8110					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8111					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8112					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8113					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8114					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8115					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8116			010104		SN=SN+1
  8117		777777	777767			ZZ=ZZ+ZZ+1
  8118						IFE	<ZZ-1>,<ZZ=-2>
  8119	034253	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8120	034254	444 00 0 00 035105 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8121									;RESULT IN C(AC) NON-ZERO
  8122	034255	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8123						STOP^
  8124	034256	254 04 0 00 034257 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8125	034257	324 00 0 00 034260 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8126									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8127									;IN THE SUBTEST) TO LOOP ON ERROR^
  8128
  8129					;**********
  8130
  8131					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8132					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8133					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8134					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8135					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8136					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8137					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8138			010105		SN=SN+1
  8139		777777	777757			ZZ=ZZ+ZZ+1
  8140						IFE	<ZZ-1>,<ZZ=-2>
  8141	034260	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8142	034261	444 00 0 00 035106 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8143									;RESULT IN C(AC) NON-ZERO
  8144	034262	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8145						STOP^
  8146	034263	254 04 0 00 034264 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8147	034264	324 00 0 00 034265 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8148									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8149									;IN THE SUBTEST) TO LOOP ON ERROR^
  8150
  8151					;**********
  8152
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0174

  8153					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8154					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8155					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8156					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8157					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8158					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8159					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8160			010106		SN=SN+1
  8161		777777	777737			ZZ=ZZ+ZZ+1
  8162						IFE	<ZZ-1>,<ZZ=-2>
  8163	034265	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8164	034266	444 00 0 00 035107 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8165									;RESULT IN C(AC) NON-ZERO
  8166	034267	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8167						STOP^
  8168	034270	254 04 0 00 034271 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8169	034271	324 00 0 00 034272 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8170									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8171									;IN THE SUBTEST) TO LOOP ON ERROR^
  8172
  8173					;**********
  8174
  8175					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8176					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8177					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8178					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8179					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8180					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8181					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8182			010107		SN=SN+1
  8183		777777	777677			ZZ=ZZ+ZZ+1
  8184						IFE	<ZZ-1>,<ZZ=-2>
  8185	034272	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8186	034273	444 00 0 00 035110 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8187									;RESULT IN C(AC) NON-ZERO
  8188	034274	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8189						STOP^
  8190	034275	254 04 0 00 034276 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8191	034276	324 00 0 00 034277 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8192									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8193									;IN THE SUBTEST) TO LOOP ON ERROR^
  8194
  8195					;**********
  8196
  8197					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8198					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8199					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8200					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8201					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8202					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8203					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8204			010110		SN=SN+1
  8205		777777	777577			ZZ=ZZ+ZZ+1
  8206						IFE	<ZZ-1>,<ZZ=-2>
  8207	034277	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0175

  8208	034300	444 00 0 00 035111 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8209									;RESULT IN C(AC) NON-ZERO
  8210	034301	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8211						STOP^
  8212	034302	254 04 0 00 034303 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8213	034303	324 00 0 00 034304 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8214									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8215									;IN THE SUBTEST) TO LOOP ON ERROR^
  8216
  8217					;**********
  8218
  8219					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8220					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8221					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8222					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8223					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8224					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8225					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8226			010111		SN=SN+1
  8227		777777	777377			ZZ=ZZ+ZZ+1
  8228						IFE	<ZZ-1>,<ZZ=-2>
  8229	034304	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8230	034305	444 00 0 00 035112 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8231									;RESULT IN C(AC) NON-ZERO
  8232	034306	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8233						STOP^
  8234	034307	254 04 0 00 034310 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8235	034310	324 00 0 00 034311 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8236									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8237									;IN THE SUBTEST) TO LOOP ON ERROR^
  8238
  8239					;**********
  8240
  8241					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8242					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8243					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8244					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8245					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8246					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8247					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8248			010112		SN=SN+1
  8249		777777	776777			ZZ=ZZ+ZZ+1
  8250						IFE	<ZZ-1>,<ZZ=-2>
  8251	034311	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8252	034312	444 00 0 00 035113 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8253									;RESULT IN C(AC) NON-ZERO
  8254	034313	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8255						STOP^
  8256	034314	254 04 0 00 034315 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8257	034315	324 00 0 00 034316 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8258									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8259									;IN THE SUBTEST) TO LOOP ON ERROR^
  8260
  8261					;**********
  8262
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0176

  8263					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8264					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8265					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8266					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8267					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8268					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8269					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8270			010113		SN=SN+1
  8271		777777	775777			ZZ=ZZ+ZZ+1
  8272						IFE	<ZZ-1>,<ZZ=-2>
  8273	034316	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8274	034317	444 00 0 00 035114 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8275									;RESULT IN C(AC) NON-ZERO
  8276	034320	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8277						STOP^
  8278	034321	254 04 0 00 034322 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8279	034322	324 00 0 00 034323 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8280									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8281									;IN THE SUBTEST) TO LOOP ON ERROR^
  8282
  8283					;**********
  8284
  8285					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8286					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8287					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8288					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8289					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8290					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8291					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8292			010114		SN=SN+1
  8293		777777	773777			ZZ=ZZ+ZZ+1
  8294						IFE	<ZZ-1>,<ZZ=-2>
  8295	034323	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8296	034324	444 00 0 00 035115 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8297									;RESULT IN C(AC) NON-ZERO
  8298	034325	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8299						STOP^
  8300	034326	254 04 0 00 034327 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8301	034327	324 00 0 00 034330 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8302									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8303									;IN THE SUBTEST) TO LOOP ON ERROR^
  8304
  8305					;**********
  8306
  8307					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8308					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8309					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8310					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8311					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8312					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8313					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8314			010115		SN=SN+1
  8315		777777	767777			ZZ=ZZ+ZZ+1
  8316						IFE	<ZZ-1>,<ZZ=-2>
  8317	034330	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0177

  8318	034331	444 00 0 00 035116 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8319									;RESULT IN C(AC) NON-ZERO
  8320	034332	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8321						STOP^
  8322	034333	254 04 0 00 034334 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8323	034334	324 00 0 00 034335 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8324									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8325									;IN THE SUBTEST) TO LOOP ON ERROR^
  8326
  8327					;**********
  8328
  8329					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8330					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8331					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8332					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8333					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8334					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8335					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8336			010116		SN=SN+1
  8337		777777	757777			ZZ=ZZ+ZZ+1
  8338						IFE	<ZZ-1>,<ZZ=-2>
  8339	034335	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8340	034336	444 00 0 00 035117 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8341									;RESULT IN C(AC) NON-ZERO
  8342	034337	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8343						STOP^
  8344	034340	254 04 0 00 034341 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8345	034341	324 00 0 00 034342 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8346									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8347									;IN THE SUBTEST) TO LOOP ON ERROR^
  8348
  8349					;**********
  8350
  8351					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8352					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8353					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8354					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8355					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8356					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8357					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8358			010117		SN=SN+1
  8359		777777	737777			ZZ=ZZ+ZZ+1
  8360						IFE	<ZZ-1>,<ZZ=-2>
  8361	034342	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8362	034343	444 00 0 00 035120 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8363									;RESULT IN C(AC) NON-ZERO
  8364	034344	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8365						STOP^
  8366	034345	254 04 0 00 034346 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8367	034346	324 00 0 00 034347 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8368									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8369									;IN THE SUBTEST) TO LOOP ON ERROR^
  8370
  8371					;**********
  8372
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0178

  8373					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8374					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8375					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8376					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8377					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8378					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8379					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8380			010120		SN=SN+1
  8381		777777	677777			ZZ=ZZ+ZZ+1
  8382						IFE	<ZZ-1>,<ZZ=-2>
  8383	034347	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8384	034350	444 00 0 00 035121 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8385									;RESULT IN C(AC) NON-ZERO
  8386	034351	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8387						STOP^
  8388	034352	254 04 0 00 034353 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8389	034353	324 00 0 00 034354 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8390									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8391									;IN THE SUBTEST) TO LOOP ON ERROR^
  8392
  8393					;**********
  8394
  8395					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8396					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8397					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8398					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8399					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8400					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8401					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8402			010121		SN=SN+1
  8403		777777	577777			ZZ=ZZ+ZZ+1
  8404						IFE	<ZZ-1>,<ZZ=-2>
  8405	034354	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
  8406	034355	444 00 0 00 035122 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8407									;RESULT IN C(AC) NON-ZERO
  8408	034356	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8409						STOP^
  8410	034357	254 04 0 00 034360 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8411	034360	324 00 0 00 034361 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8412									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8413									;IN THE SUBTEST) TO LOOP ON ERROR^
  8414
  8415					;**********
  8416
  8417					;THIS TEST VERIFIES THAT THE RESULT OF AN EQV INSTRUCTION WHERE
  8418					;C(AC)=0 AND C(E) IS ALL ONES EXCEPT FOR A ZERO IN ONLY ONE BIT IS AN
  8419					;AC WHOSE CONTENTS IS NON-ZERO (A ONE RESULTS IN THE BIT WHERE
  8420					;E CONTAINS A ZERO).  THIS TEST IS REPEATED 36 TIMES SO THAT EACH BIT
  8421					;OF THE RESULT IS A ONE ONCE AND ONLY ONCE.  FIRST, THE AC IS
  8422					;CLEARED; THEN,EQV IS EXECUTED WITH ONE BIT OF E EQUAL TO ZERO.  THE 
  8423					;RESULT IN THE AC IS THEN CHECKED FOR ITS CONTENTS NON-ZERO
  8424			010122		SN=SN+1
  8425		777777	377777			ZZ=ZZ+ZZ+1
  8426						IFE	<ZZ-1>,<ZZ=-2>
  8427	034361	200 00 0 00 035000 		MOVE	[0]		;PRESET AC TO ALL ZEROS
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 29-15
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0179

  8428	034362	444 00 0 00 035002 		EQV	[XWD ZZ,-1]	;*EQV WITH C(AC)=0 AND ONE BIT OF C(E)=0 SHOULD
  8429									;RESULT IN C(AC) NON-ZERO
  8430	034363	336 00 0 00 000000 		SKIPN			;PASS TEST IF C(AC) NON-ZERO
  8431						STOP^
  8432	034364	254 04 0 00 034365 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8433	034365	324 00 0 00 034366 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8434									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8435									;IN THE SUBTEST) TO LOOP ON ERROR^
  8436
  8437					;**********
  8438
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 30
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0180

  8439					;THIS TEST VERIFIES THAT THE RESULT OF AN AC CONTAINING ALL ZEROS
  8440					;EQUIVALENCED WITH AN E CONTAINING ALL ZEROS IS AN AC CONTAINING ALL
  8441					;ONES; AND FUTHERMORE, IF THIS AC CONTAINING ALL ONES IS EQUIVALANCED
  8442					;WITH AN E CONTAINING ALL ZEROS, THE FINAL RESULT IN THE AC
  8443					;SHOULD BE ALL ZEROS.  FIRST, THE AC IS INITIALIZED TO ALL ZEROS, THEN,
  8444					;THIS AC IS EQUIVALENCED TWICE WITH AN E CONTAINING ALL ZEROS.  THE AC IS 
  8445					;THEN CHECKED FOR ALL ZEROS
  8446
  8447	034366	200 00 0 00 035000 	A10200:	MOVE	[0]		;CLEAR THE AC
  8448	034367	444 00 0 00 035000 		EQV	[0]		;*EQV SHOULD RESULT IN C(AC)=ALL ONES
  8449	034370	444 00 0 00 035000 		EQV	[0]		;*EQV SHOULD RESULT IN C(AC)=0
  8450	034371	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8451						STOP^
  8452	034372	254 04 0 00 034373 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8453	034373	324 00 0 00 034374 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8454									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8455									;IN THE SUBTEST) TO LOOP ON ERROR^
  8456
  8457					;**********
  8458
  8459					;THIS TEST VERIFIES THAT THE RESULT OF AN AC CONTAINING ALL ONES 
  8460					;EQUIVALENCED WITH AN E CONTAINING ALL ONES IS AN AC CONTAINING ALL ONES;
  8461					;AND FUTHERMORE, IF THIS AC CONTAINING ALL ONES ISEQUIVALENCED WITH AN E
  8462					;CONTAINING ALL ZEROS, THE FINAL RESULT IN THE AC SHOULD BE ALL ZEROS.
  8463					;FIRST, THE AC IS INITIALIZED TO ALL ONES; THEN, THIS AC IS 
  8464					;EQUIVALENCED WITH AN E OF ALL ONES.  NEXT, THIS SAME AC IS EQUIVALENCED
  8465					;WITH AN E OF ALL ZEROS.  THE AC IS THEN CHECKED FOR ALL ZEROS.
  8466
  8467	034374	200 00 0 00 035001 	A10300:	MOVE	[-1]		;SET C(AC) TO ALL ONES
  8468	034375	444 00 0 00 035001 		EQV	[-1]		;*EQV SHOULD RESULT IN C(AC) OF ALL ONES
  8469	034376	444 00 0 00 035000 		EQV	[0]		;*EQV SHOULD RESULT IN C(AC)=0
  8470	034377	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8471						STOP^
  8472	034400	254 04 0 00 034401 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8473	034401	324 00 0 00 034402 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8474									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8475									;IN THE SUBTEST) TO LOOP ON ERROR^
  8476
  8477					;**********
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0181

  8478			013000		SN=13000
  8479			000000			ZZ=0
  8480
  8481					A13000:	REPEAT	^D36,
  8482					<;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8483					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8484					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8485					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8486					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8487					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8488					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8489					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8490					SN=SN+1
  8491						ZZ=ZZ+ZZ
  8492						IFE	ZZ,<ZZ=1>
  8493						MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8494						AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8495						EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8496						EQV	[0]		;RESULTS IN C(AC)=0
  8497						SKIPE			;PASS TEST IF C(AC)=0
  8498						STOP
  8499					
  8500					;**********
  8501					>
  8502					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8503					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8504					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8505					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8506					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8507					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8508					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8509					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8510			013001		SN=SN+1
  8511			000000			ZZ=ZZ+ZZ
  8512			000001			IFE	ZZ,<ZZ=1>
  8513	034402	200 00 0 00 035012 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8514	034403	404 00 0 00 035012 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8515	034404	444 00 0 00 035012 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8516	034405	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8517	034406	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8518						STOP^
  8519	034407	254 04 0 00 034410 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8520	034410	324 00 0 00 034411 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8521									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8522									;IN THE SUBTEST) TO LOOP ON ERROR^
  8523
  8524					;**********
  8525
  8526					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8527					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8528					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8529					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8530					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8531					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8532					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-1
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0182

  8533					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8534			013002		SN=SN+1
  8535			000002			ZZ=ZZ+ZZ
  8536						IFE	ZZ,<ZZ=1>
  8537	034411	200 00 0 00 035013 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8538	034412	404 00 0 00 035013 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8539	034413	444 00 0 00 035013 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8540	034414	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8541	034415	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8542						STOP^
  8543	034416	254 04 0 00 034417 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8544	034417	324 00 0 00 034420 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8545									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8546									;IN THE SUBTEST) TO LOOP ON ERROR^
  8547
  8548					;**********
  8549
  8550					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8551					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8552					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8553					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8554					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8555					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8556					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8557					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8558			013003		SN=SN+1
  8559			000004			ZZ=ZZ+ZZ
  8560						IFE	ZZ,<ZZ=1>
  8561	034420	200 00 0 00 035014 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8562	034421	404 00 0 00 035014 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8563	034422	444 00 0 00 035014 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8564	034423	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8565	034424	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8566						STOP^
  8567	034425	254 04 0 00 034426 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8568	034426	324 00 0 00 034427 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8569									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8570									;IN THE SUBTEST) TO LOOP ON ERROR^
  8571
  8572					;**********
  8573
  8574					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8575					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8576					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8577					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8578					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8579					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8580					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8581					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8582			013004		SN=SN+1
  8583			000010			ZZ=ZZ+ZZ
  8584						IFE	ZZ,<ZZ=1>
  8585	034427	200 00 0 00 035015 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8586	034430	404 00 0 00 035015 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8587	034431	444 00 0 00 035015 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-2
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0183

  8588	034432	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8589	034433	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8590						STOP^
  8591	034434	254 04 0 00 034435 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8592	034435	324 00 0 00 034436 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8593									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8594									;IN THE SUBTEST) TO LOOP ON ERROR^
  8595
  8596					;**********
  8597
  8598					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8599					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8600					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8601					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8602					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8603					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8604					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8605					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8606			013005		SN=SN+1
  8607			000020			ZZ=ZZ+ZZ
  8608						IFE	ZZ,<ZZ=1>
  8609	034436	200 00 0 00 035016 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8610	034437	404 00 0 00 035016 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8611	034440	444 00 0 00 035016 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8612	034441	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8613	034442	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8614						STOP^
  8615	034443	254 04 0 00 034444 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8616	034444	324 00 0 00 034445 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8617									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8618									;IN THE SUBTEST) TO LOOP ON ERROR^
  8619
  8620					;**********
  8621
  8622					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8623					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8624					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8625					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8626					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8627					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8628					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8629					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8630			013006		SN=SN+1
  8631			000040			ZZ=ZZ+ZZ
  8632						IFE	ZZ,<ZZ=1>
  8633	034445	200 00 0 00 035017 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8634	034446	404 00 0 00 035017 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8635	034447	444 00 0 00 035017 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8636	034450	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8637	034451	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8638						STOP^
  8639	034452	254 04 0 00 034453 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8640	034453	324 00 0 00 034454 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8641									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8642									;IN THE SUBTEST) TO LOOP ON ERROR^
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-3
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0184

  8643
  8644					;**********
  8645
  8646					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8647					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8648					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8649					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8650					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8651					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8652					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8653					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8654			013007		SN=SN+1
  8655			000100			ZZ=ZZ+ZZ
  8656						IFE	ZZ,<ZZ=1>
  8657	034454	200 00 0 00 035020 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8658	034455	404 00 0 00 035020 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8659	034456	444 00 0 00 035020 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8660	034457	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8661	034460	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8662						STOP^
  8663	034461	254 04 0 00 034462 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8664	034462	324 00 0 00 034463 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8665									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8666									;IN THE SUBTEST) TO LOOP ON ERROR^
  8667
  8668					;**********
  8669
  8670					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8671					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8672					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8673					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8674					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8675					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8676					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8677					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8678			013010		SN=SN+1
  8679			000200			ZZ=ZZ+ZZ
  8680						IFE	ZZ,<ZZ=1>
  8681	034463	200 00 0 00 035021 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8682	034464	404 00 0 00 035021 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8683	034465	444 00 0 00 035021 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8684	034466	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8685	034467	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8686						STOP^
  8687	034470	254 04 0 00 034471 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8688	034471	324 00 0 00 034472 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8689									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8690									;IN THE SUBTEST) TO LOOP ON ERROR^
  8691
  8692					;**********
  8693
  8694					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8695					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8696					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8697					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-4
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0185

  8698					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8699					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8700					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8701					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8702			013011		SN=SN+1
  8703			000400			ZZ=ZZ+ZZ
  8704						IFE	ZZ,<ZZ=1>
  8705	034472	200 00 0 00 035022 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8706	034473	404 00 0 00 035022 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8707	034474	444 00 0 00 035022 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8708	034475	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8709	034476	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8710						STOP^
  8711	034477	254 04 0 00 034500 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8712	034500	324 00 0 00 034501 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8713									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8714									;IN THE SUBTEST) TO LOOP ON ERROR^
  8715
  8716					;**********
  8717
  8718					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8719					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8720					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8721					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8722					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8723					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8724					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8725					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8726			013012		SN=SN+1
  8727			001000			ZZ=ZZ+ZZ
  8728						IFE	ZZ,<ZZ=1>
  8729	034501	200 00 0 00 035023 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8730	034502	404 00 0 00 035023 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8731	034503	444 00 0 00 035023 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8732	034504	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8733	034505	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8734						STOP^
  8735	034506	254 04 0 00 034507 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8736	034507	324 00 0 00 034510 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8737									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8738									;IN THE SUBTEST) TO LOOP ON ERROR^
  8739
  8740					;**********
  8741
  8742					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8743					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8744					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8745					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8746					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8747					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8748					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8749					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8750			013013		SN=SN+1
  8751			002000			ZZ=ZZ+ZZ
  8752						IFE	ZZ,<ZZ=1>
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-5
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0186

  8753	034510	200 00 0 00 035024 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8754	034511	404 00 0 00 035024 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8755	034512	444 00 0 00 035024 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8756	034513	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8757	034514	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8758						STOP^
  8759	034515	254 04 0 00 034516 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8760	034516	324 00 0 00 034517 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8761									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8762									;IN THE SUBTEST) TO LOOP ON ERROR^
  8763
  8764					;**********
  8765
  8766					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8767					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8768					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8769					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8770					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8771					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8772					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8773					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8774			013014		SN=SN+1
  8775			004000			ZZ=ZZ+ZZ
  8776						IFE	ZZ,<ZZ=1>
  8777	034517	200 00 0 00 035025 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8778	034520	404 00 0 00 035025 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8779	034521	444 00 0 00 035025 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8780	034522	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8781	034523	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8782						STOP^
  8783	034524	254 04 0 00 034525 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8784	034525	324 00 0 00 034526 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8785									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8786									;IN THE SUBTEST) TO LOOP ON ERROR^
  8787
  8788					;**********
  8789
  8790					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8791					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8792					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8793					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8794					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8795					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8796					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8797					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8798			013015		SN=SN+1
  8799			010000			ZZ=ZZ+ZZ
  8800						IFE	ZZ,<ZZ=1>
  8801	034526	200 00 0 00 035026 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8802	034527	404 00 0 00 035026 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8803	034530	444 00 0 00 035026 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8804	034531	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8805	034532	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8806						STOP^
  8807	034533	254 04 0 00 034534 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-6
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0187

  8808	034534	324 00 0 00 034535 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8809									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8810									;IN THE SUBTEST) TO LOOP ON ERROR^
  8811
  8812					;**********
  8813
  8814					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8815					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8816					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8817					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8818					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8819					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8820					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8821					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8822			013016		SN=SN+1
  8823			020000			ZZ=ZZ+ZZ
  8824						IFE	ZZ,<ZZ=1>
  8825	034535	200 00 0 00 035027 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8826	034536	404 00 0 00 035027 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8827	034537	444 00 0 00 035027 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8828	034540	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8829	034541	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8830						STOP^
  8831	034542	254 04 0 00 034543 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8832	034543	324 00 0 00 034544 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8833									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8834									;IN THE SUBTEST) TO LOOP ON ERROR^
  8835
  8836					;**********
  8837
  8838					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8839					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8840					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8841					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8842					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8843					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8844					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8845					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8846			013017		SN=SN+1
  8847			040000			ZZ=ZZ+ZZ
  8848						IFE	ZZ,<ZZ=1>
  8849	034544	200 00 0 00 035030 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8850	034545	404 00 0 00 035030 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8851	034546	444 00 0 00 035030 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8852	034547	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8853	034550	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8854						STOP^
  8855	034551	254 04 0 00 034552 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8856	034552	324 00 0 00 034553 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8857									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8858									;IN THE SUBTEST) TO LOOP ON ERROR^
  8859
  8860					;**********
  8861
  8862					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-7
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0188

  8863					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8864					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8865					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8866					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8867					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8868					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8869					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8870			013020		SN=SN+1
  8871			100000			ZZ=ZZ+ZZ
  8872						IFE	ZZ,<ZZ=1>
  8873	034553	200 00 0 00 035031 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8874	034554	404 00 0 00 035031 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8875	034555	444 00 0 00 035031 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8876	034556	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8877	034557	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8878						STOP^
  8879	034560	254 04 0 00 034561 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8880	034561	324 00 0 00 034562 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8881									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8882									;IN THE SUBTEST) TO LOOP ON ERROR^
  8883
  8884					;**********
  8885
  8886					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8887					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8888					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8889					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8890					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8891					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8892					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8893					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8894			013021		SN=SN+1
  8895			200000			ZZ=ZZ+ZZ
  8896						IFE	ZZ,<ZZ=1>
  8897	034562	200 00 0 00 035032 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8898	034563	404 00 0 00 035032 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8899	034564	444 00 0 00 035032 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8900	034565	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8901	034566	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8902						STOP^
  8903	034567	254 04 0 00 034570 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8904	034570	324 00 0 00 034571 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8905									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8906									;IN THE SUBTEST) TO LOOP ON ERROR^
  8907
  8908					;**********
  8909
  8910					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8911					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8912					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8913					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8914					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8915					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8916					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8917					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-8
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0189

  8918			013022		SN=SN+1
  8919			400000			ZZ=ZZ+ZZ
  8920						IFE	ZZ,<ZZ=1>
  8921	034571	200 00 0 00 035033 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8922	034572	404 00 0 00 035033 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8923	034573	444 00 0 00 035033 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8924	034574	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8925	034575	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8926						STOP^
  8927	034576	254 04 0 00 034577 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8928	034577	324 00 0 00 034600 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8929									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8930									;IN THE SUBTEST) TO LOOP ON ERROR^
  8931
  8932					;**********
  8933
  8934					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8935					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8936					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8937					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8938					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8939					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8940					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8941					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8942			013023		SN=SN+1
  8943		000001	000000			ZZ=ZZ+ZZ
  8944						IFE	ZZ,<ZZ=1>
  8945	034600	200 00 0 00 035034 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8946	034601	404 00 0 00 035034 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8947	034602	444 00 0 00 035034 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8948	034603	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8949	034604	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8950						STOP^
  8951	034605	254 04 0 00 034606 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8952	034606	324 00 0 00 034607 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8953									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8954									;IN THE SUBTEST) TO LOOP ON ERROR^
  8955
  8956					;**********
  8957
  8958					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8959					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8960					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8961					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8962					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8963					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8964					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8965					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8966			013024		SN=SN+1
  8967		000002	000000			ZZ=ZZ+ZZ
  8968						IFE	ZZ,<ZZ=1>
  8969	034607	200 00 0 00 035035 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8970	034610	404 00 0 00 035035 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8971	034611	444 00 0 00 035035 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8972	034612	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-9
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0190

  8973	034613	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8974						STOP^
  8975	034614	254 04 0 00 034615 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  8976	034615	324 00 0 00 034616 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  8977									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  8978									;IN THE SUBTEST) TO LOOP ON ERROR^
  8979
  8980					;**********
  8981
  8982					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  8983					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  8984					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  8985					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  8986					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  8987					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  8988					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  8989					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  8990			013025		SN=SN+1
  8991		000004	000000			ZZ=ZZ+ZZ
  8992						IFE	ZZ,<ZZ=1>
  8993	034616	200 00 0 00 035036 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  8994	034617	404 00 0 00 035036 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  8995	034620	444 00 0 00 035036 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  8996	034621	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  8997	034622	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  8998						STOP^
  8999	034623	254 04 0 00 034624 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9000	034624	324 00 0 00 034625 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9001									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9002									;IN THE SUBTEST) TO LOOP ON ERROR^
  9003
  9004					;**********
  9005
  9006					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9007					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9008					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9009					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9010					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9011					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9012					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9013					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9014			013026		SN=SN+1
  9015		000010	000000			ZZ=ZZ+ZZ
  9016						IFE	ZZ,<ZZ=1>
  9017	034625	200 00 0 00 035037 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9018	034626	404 00 0 00 035037 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9019	034627	444 00 0 00 035037 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9020	034630	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9021	034631	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9022						STOP^
  9023	034632	254 04 0 00 034633 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9024	034633	324 00 0 00 034634 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9025									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9026									;IN THE SUBTEST) TO LOOP ON ERROR^
  9027
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-10
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0191

  9028					;**********
  9029
  9030					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9031					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9032					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9033					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9034					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9035					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9036					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9037					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9038			013027		SN=SN+1
  9039		000020	000000			ZZ=ZZ+ZZ
  9040						IFE	ZZ,<ZZ=1>
  9041	034634	200 00 0 00 035040 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9042	034635	404 00 0 00 035040 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9043	034636	444 00 0 00 035040 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9044	034637	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9045	034640	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9046						STOP^
  9047	034641	254 04 0 00 034642 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9048	034642	324 00 0 00 034643 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9049									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9050									;IN THE SUBTEST) TO LOOP ON ERROR^
  9051
  9052					;**********
  9053
  9054					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9055					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9056					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9057					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9058					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9059					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9060					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9061					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9062			013030		SN=SN+1
  9063		000040	000000			ZZ=ZZ+ZZ
  9064						IFE	ZZ,<ZZ=1>
  9065	034643	200 00 0 00 035041 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9066	034644	404 00 0 00 035041 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9067	034645	444 00 0 00 035041 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9068	034646	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9069	034647	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9070						STOP^
  9071	034650	254 04 0 00 034651 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9072	034651	324 00 0 00 034652 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9073									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9074									;IN THE SUBTEST) TO LOOP ON ERROR^
  9075
  9076					;**********
  9077
  9078					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9079					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9080					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9081					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9082					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-11
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0192

  9083					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9084					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9085					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9086			013031		SN=SN+1
  9087		000100	000000			ZZ=ZZ+ZZ
  9088						IFE	ZZ,<ZZ=1>
  9089	034652	200 00 0 00 035042 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9090	034653	404 00 0 00 035042 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9091	034654	444 00 0 00 035042 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9092	034655	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9093	034656	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9094						STOP^
  9095	034657	254 04 0 00 034660 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9096	034660	324 00 0 00 034661 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9097									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9098									;IN THE SUBTEST) TO LOOP ON ERROR^
  9099
  9100					;**********
  9101
  9102					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9103					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9104					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9105					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9106					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9107					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9108					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9109					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9110			013032		SN=SN+1
  9111		000200	000000			ZZ=ZZ+ZZ
  9112						IFE	ZZ,<ZZ=1>
  9113	034661	200 00 0 00 035043 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9114	034662	404 00 0 00 035043 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9115	034663	444 00 0 00 035043 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9116	034664	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9117	034665	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9118						STOP^
  9119	034666	254 04 0 00 034667 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9120	034667	324 00 0 00 034670 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9121									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9122									;IN THE SUBTEST) TO LOOP ON ERROR^
  9123
  9124					;**********
  9125
  9126					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9127					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9128					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9129					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9130					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9131					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9132					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9133					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9134			013033		SN=SN+1
  9135		000400	000000			ZZ=ZZ+ZZ
  9136						IFE	ZZ,<ZZ=1>
  9137	034670	200 00 0 00 035011 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-12
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0193

  9138	034671	404 00 0 00 035011 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9139	034672	444 00 0 00 035011 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9140	034673	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9141	034674	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9142						STOP^
  9143	034675	254 04 0 00 034676 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9144	034676	324 00 0 00 034677 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9145									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9146									;IN THE SUBTEST) TO LOOP ON ERROR^
  9147
  9148					;**********
  9149
  9150					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9151					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9152					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9153					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9154					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9155					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9156					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9157					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9158			013034		SN=SN+1
  9159		001000	000000			ZZ=ZZ+ZZ
  9160						IFE	ZZ,<ZZ=1>
  9161	034677	200 00 0 00 035044 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9162	034700	404 00 0 00 035044 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9163	034701	444 00 0 00 035044 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9164	034702	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9165	034703	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9166						STOP^
  9167	034704	254 04 0 00 034705 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9168	034705	324 00 0 00 034706 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9169									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9170									;IN THE SUBTEST) TO LOOP ON ERROR^
  9171
  9172					;**********
  9173
  9174					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9175					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9176					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9177					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9178					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9179					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9180					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9181					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9182			013035		SN=SN+1
  9183		002000	000000			ZZ=ZZ+ZZ
  9184						IFE	ZZ,<ZZ=1>
  9185	034706	200 00 0 00 035045 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9186	034707	404 00 0 00 035045 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9187	034710	444 00 0 00 035045 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9188	034711	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9189	034712	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9190						STOP^
  9191	034713	254 04 0 00 034714 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9192	034714	324 00 0 00 034715 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-13
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0194

  9193									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9194									;IN THE SUBTEST) TO LOOP ON ERROR^
  9195
  9196					;**********
  9197
  9198					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9199					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9200					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9201					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9202					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9203					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9204					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9205					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9206			013036		SN=SN+1
  9207		004000	000000			ZZ=ZZ+ZZ
  9208						IFE	ZZ,<ZZ=1>
  9209	034715	200 00 0 00 035046 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9210	034716	404 00 0 00 035046 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9211	034717	444 00 0 00 035046 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9212	034720	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9213	034721	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9214						STOP^
  9215	034722	254 04 0 00 034723 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9216	034723	324 00 0 00 034724 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9217									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9218									;IN THE SUBTEST) TO LOOP ON ERROR^
  9219
  9220					;**********
  9221
  9222					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9223					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9224					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9225					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9226					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9227					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9228					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9229					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9230			013037		SN=SN+1
  9231		010000	000000			ZZ=ZZ+ZZ
  9232						IFE	ZZ,<ZZ=1>
  9233	034724	200 00 0 00 035047 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9234	034725	404 00 0 00 035047 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9235	034726	444 00 0 00 035047 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9236	034727	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9237	034730	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9238						STOP^
  9239	034731	254 04 0 00 034732 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9240	034732	324 00 0 00 034733 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9241									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9242									;IN THE SUBTEST) TO LOOP ON ERROR^
  9243
  9244					;**********
  9245
  9246					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9247					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-14
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0195

  9248					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9249					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9250					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9251					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9252					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9253					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9254			013040		SN=SN+1
  9255		020000	000000			ZZ=ZZ+ZZ
  9256						IFE	ZZ,<ZZ=1>
  9257	034733	200 00 0 00 035050 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9258	034734	404 00 0 00 035050 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9259	034735	444 00 0 00 035050 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9260	034736	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9261	034737	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9262						STOP^
  9263	034740	254 04 0 00 034741 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9264	034741	324 00 0 00 034742 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9265									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9266									;IN THE SUBTEST) TO LOOP ON ERROR^
  9267
  9268					;**********
  9269
  9270					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9271					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9272					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9273					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9274					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9275					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9276					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9277					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9278			013041		SN=SN+1
  9279		040000	000000			ZZ=ZZ+ZZ
  9280						IFE	ZZ,<ZZ=1>
  9281	034742	200 00 0 00 035051 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9282	034743	404 00 0 00 035051 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9283	034744	444 00 0 00 035051 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9284	034745	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9285	034746	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9286						STOP^
  9287	034747	254 04 0 00 034750 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9288	034750	324 00 0 00 034751 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9289									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9290									;IN THE SUBTEST) TO LOOP ON ERROR^
  9291
  9292					;**********
  9293
  9294					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9295					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9296					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9297					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9298					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9299					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9300					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9301					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9302			013042		SN=SN+1
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-15
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0196

  9303		100000	000000			ZZ=ZZ+ZZ
  9304						IFE	ZZ,<ZZ=1>
  9305	034751	200 00 0 00 035052 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9306	034752	404 00 0 00 035052 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9307	034753	444 00 0 00 035052 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9308	034754	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9309	034755	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9310						STOP^
  9311	034756	254 04 0 00 034757 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9312	034757	324 00 0 00 034760 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9313									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9314									;IN THE SUBTEST) TO LOOP ON ERROR^
  9315
  9316					;**********
  9317
  9318					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9319					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9320					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9321					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9322					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9323					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9324					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9325					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9326			013043		SN=SN+1
  9327		200000	000000			ZZ=ZZ+ZZ
  9328						IFE	ZZ,<ZZ=1>
  9329	034760	200 00 0 00 035053 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9330	034761	404 00 0 00 035053 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9331	034762	444 00 0 00 035053 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9332	034763	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9333	034764	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
  9334						STOP^
  9335	034765	254 04 0 00 034766 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9336	034766	324 00 0 00 034767 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9337									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9338									;IN THE SUBTEST) TO LOOP ON ERROR^
  9339
  9340					;**********
  9341
  9342					;THIS TEST CHECKS THE 'AND' INSTRUCTION AND THE ADDER ON A ONE-BIT-AT-A-TIME BASIS.
  9343					;THE AC IS LOADED WITH ALL ZEROS EXCEPT FOR ONE BIT EQUAL TO ONE; THE AC IS THEN
  9344					;ANDED WITH C(E) WHERE C(E)=C(AC).  THE NET RESULT SHOULD BE NO CHANGE TO C(AC).
  9345					;NEXT, THE AC IS EQUIVALENCED WITH C(E) WHERE C(E)=C(AC).  THIS RESULT SHOULD
  9346					;BE ALL ONES IN THE AC.  THE AC IS THEN EQUIVALENCED WITH A WORD OF ALL ZEROS,
  9347					;WHICH SHOULD RESULT IN C(AC)=0.  THE AC IS CHECKED FOR ALL ZEROS.
  9348					;IF C(AC) IS NON-ZERO, THE TEST FAILS.  THIS TEST IS REPEATED 36 TIMES TO
  9349					;RIPPLE A ONE THROUGH EVERY BIT OF THE AC.
  9350			013044		SN=SN+1
  9351		400000	000000			ZZ=ZZ+ZZ
  9352						IFE	ZZ,<ZZ=1>
  9353	034767	200 00 0 00 035003 		MOVE	[ZZ]		;SETUP AC WITH A ONE IN ONLY ONE BIT
  9354	034770	404 00 0 00 035003 		AND	[ZZ]		;*AND FLOATING ONE WITH ITSELF SHOULD NOT CHANGE C(AC)
  9355	034771	444 00 0 00 035003 		EQV	[ZZ]		;RESULTS IN C(AC)=ALL ONES
  9356	034772	444 00 0 00 035000 		EQV	[0]		;RESULTS IN C(AC)=0
  9357	034773	332 00 0 00 000000 		SKIPE			;PASS TEST IF C(AC)=0
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 31-16
DSKAA1	MAC	28-Mar-78 09:38		TEST OF BOOLEAN INSTRUCTIONS (SETM, SETZ, AND, XOR, EQV)                           SEQ 0197

  9358						STOP^
  9359	034774	254 04 0 00 034775 		HALT	.+1		;TEST FAILED IF PROGRAM HALTS HERE
  9360	034775	324 00 0 00 034776 		JUMPA	.+1		;IF TEST FAILS, CHANGE THIS INSTRUCTION (JUMPA .+1) TO
  9361									;JUMPA X (X IS THE ADDRESS OF THE FIRST INSTRUCTION
  9362									;IN THE SUBTEST) TO LOOP ON ERROR^
  9363
  9364					;**********
  9365
  9366	034776	402 00 0 00 035124 	ENDIT:	SETZM	TNUMB#
  9367	034777	254 00 0 00 030057 		JRST	BEGEND
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0198

  9368					SUBTTL	*STOR* RESERVED STORAGE, MARCH 1978
  9369
  9370					;PROGRAM LITERALS
  9371
  9372						XLIST
  9373					IFNDEF	$LPAPER,<LIST>
  9374	035000					LIT
  9375	035000	000000	000000
  9376	035001	777777	777777
  9377	035002	377777	777777
  9378	035003	400000	000000
  9379	035004	777000	000000
  9380	035005	000377	000000
  9381	035006	000000	177000
  9382	035007	000000	000777
  9383	035010	000000	600000
  9384	035011	000400	000000
  9385	035012	000000	000001
  9386	035013	000000	000002
  9387	035014	000000	000004
  9388	035015	000000	000010
  9389	035016	000000	000020
  9390	035017	000000	000040
  9391	035020	000000	000100
  9392	035021	000000	000200
  9393	035022	000000	000400
  9394	035023	000000	001000
  9395	035024	000000	002000
  9396	035025	000000	004000
  9397	035026	000000	010000
  9398	035027	000000	020000
  9399	035030	000000	040000
  9400	035031	000000	100000
  9401	035032	000000	200000
  9402	035033	000000	400000
  9403	035034	000001	000000
  9404	035035	000002	000000
  9405	035036	000004	000000
  9406	035037	000010	000000
  9407	035040	000020	000000
  9408	035041	000040	000000
  9409	035042	000100	000000
  9410	035043	000200	000000
  9411	035044	001000	000000
  9412	035045	002000	000000
  9413	035046	004000	000000
  9414	035047	010000	000000
  9415	035050	020000	000000
  9416	035051	040000	000000
  9417	035052	100000	000000
  9418	035053	200000	000000
  9419	035054	000000	001234
  9420	035055	000000	777777
  9421	035056	777777	000000
  9422	035057	707070	707070
DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1-1
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0199

  9423	035060	777777	777776
  9424	035061	777777	777775
  9425	035062	777777	777773
  9426	035063	777777	777767
  9427	035064	777777	777757
  9428	035065	777777	777737
  9429	035066	777777	777677
  9430	035067	777777	777577
  9431	035070	777777	777377
  9432	035071	777777	776777
  9433	035072	777777	775777
  9434	035073	777777	773777
  9435	035074	777777	767777
  9436	035075	777777	757777
  9437	035076	777777	737777
  9438	035077	777777	677777
  9439	035100	777777	577777
  9440	035101	777777	377777
  9441	035102	777776	777777
  9442	035103	777775	777777
  9443	035104	777773	777777
  9444	035105	777767	777777
  9445	035106	777757	777777
  9446	035107	777737	777777
  9447	035110	777677	777777
  9448	035111	777577	777777
  9449	035112	777377	777777
  9450	035113	776777	777777
  9451	035114	775777	777777
  9452	035115	773777	777777
  9453	035116	767777	777777
  9454	035117	757777	777777
  9455	035120	737777	777777
  9456	035121	677777	777777
  9457	035122	577777	777777
  9458						LIST
  9459	035123	000000	000000		ENDSLD:	0
  9460
  9461					IFDEF	DEBUG,<
  9462					PATCH:	BLOCK DEBUG		;PATCHING AREA
  9463					>
  9464
  9465					;PROGRAM VARIABLES
  9466	035124					VAR
  9467
  9468					IFDEF	PGMEND,<
  9469	035125	000000	000000		END:	0
  9470			030000			END	BEGIN	>

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
ABSOLUTE BREAK IS 035126
CPU TIME USED 00:27.561

DSKAA DECSYSTEM-2020 BASIC INSTRUCTION DIAGNOSTIC (1) 0,1	MACRO %53(1020) 13:49 28-Mar-78 Page 1-2
STOR	KSM	28-Mar-78 11:25		*STOR* RESERVED STORAGE, MARCH 1978                                                SEQ 0200

22P CORE USED

A00	   816#
A100	   871#                                                                                                            SEQ 0201
A1000	   976#
A10000	  7606#
A10100	  8024#
A10200	  8447#
A10300	  8467#
A1100	   991#
A1200	  1004#
A12500	   817#
A12600	   861#
A12700	   853#
A1300	  1018#
A13000	  8481#
A13100	  1948#
A1400	  1032#
A1500	  1046#
A15000	   832#
A15100	   843#
A1600	  1060#
A1700	  1074#
A200	   884#
A2000	  1088#
A2100	  1102#
A2200	  1115#
A2300	  1129#
A2400	  1143#
A2500	  1157#
A2600	  1170#
A2700	  1184#
A300	   898#
A3000	  1198#
A3100	  1210#
A3200	  1915#
A3300	  1933#
A3400	  1961#
A3500	  1986#
A3600	  2004#
A3700	  2022#
A400	   914#
A4000	  2073#
A4100	  2089#
A4200	  2234#
A4300	  2252#
A4400	  2270#
A4500	  2037#
A4600	  2052#
A4700	  2289#
A500	   929#
A5000	  2305#
A5100	  2321#
A5200	  2336#
A5300	  2353#
A5400	  2373#
A5500	  2386#                                                                                                            SEQ 0202
A5600	  2746#
A5700	  3110#
A600	   948#
A6000	  3126#
A6100	  3146#
A6200	  3164#
A6300	  3185#
A6400	  3198#
A6500	  4267#
A6600	  5047#
A6700	  5065#
A700	   963#
A7000	  5085#
A7100	  5102#
A7200	  5118#
A7300	  5132#
A7400	  5872#
A7500	  6797#
A7600	  7575#
A7700	  7592#
ABORT	    92#
AC	  2087#	  2120	  2120#	  2121	  2121#	  2123	  2124	  2125	  2149	  2149#	  2150	  2152	  2153	  2154
	  2178	  2178#	  2179	  2181	  2182	  2183	  2207	  2207#	  2208	  2210	  2211	  2212
AC0	   687#
ALTMGO	   442#
AROV	   356#
AROVTP	   356#
AROVU	   356#
AST	   557#
ATSIN	   558#
BEGEND	   438#	  9367
BEGIN	   307	   308	   369#	   708	   771	  9470
BEGIN1	   385#	   439
BELL	   561#
BIS	   356#
CCA	   356#
CHAIN	   112#
CHNOFF	   356#
CHNON	   356#
CLKU	   356#
CLOCKF	   424#
CNTLC	   441#
CNTRP	   356#
COMMA	   550#
CONSW	   425#
CPOPJ	   445#
CPOPJ1	   443#
CRLF	   242	   243	   545#
CRLF2	   246	   247	   547#
CRY0	   356#
CRY1	   356#
CSHFLG	   604#
CSHMEM	   605#                                                                                                            SEQ 0203
CTRP	   356#
CYCL60	   598#
DCK	   356#
DDT	   689#
DDTLNK	   126#	   383
DDTSRT	   383#
DEBUG	  9461
DECVER	     5#	    12	    27	   404
DF22F	   509#
DIAGMN	   372#
DIAGNO	   688#
DIAMON	   690#
DING	    98#
DOLLAR	   564#
DSKUPD	   409
EBIT0	   356#
EBIT1	   356#
EBIT10	   356#
EBIT11	   356#
EBIT12	   356#
EBIT13	   356#
EBIT14	   356#
EBIT15	   356#
EBIT2	   356#
EBIT3	   356#
EBIT4	   356#
EBIT5	   356#
EBIT6	   356#
EBIT7	   356#
EBIT8	   356#
EBIT9	   356#
END	  9469#
ENDFIX	   684#
ENDIT	  9366#
ENDSLD	  9459#
ERMORE	   458#
EROLD	   318
ERRPC	   429#
ERRTLS	   430#
ERSTOP	   101#
EXCASB	    34#	   407
EXIOT	   356#
FOV	   356#
FOVU	   356#
FRDLNK	   124#
FSELNK	   123#
FXU	   356#
HYPEN	   555#
INHCSH	   109#
INHPAG	   106#
IOCLR	   356#
ITERAT	    81#	   402
ITRCH1	   462#                                                                                                            SEQ 0204
ITRCNT	   402#	   752	   758	   762	   768
JOB41	   356#
JOBAPR	   356#
JOBCNI	   356#
JOBDDT	   356#
JOBFF	   356#
JOBOPC	   356#
JOBREL	   356#
JOBREN	   356#
JOBSA	   356#
JOBSYM	   356#
JOBTPC	   356#
JOBUSY	   356#
JOBUUO	   356#
JOBVER	   356#
KAIFLG	   419#
KLFLG	   420#
KNTRP	   356#
KTRP	   356#
LACLK	   356#
LACLKE	   356#
LAPRAL	   356#
LAPRP1	   356#
LAPRP2	   356#
LAPRP3	   356#
LAPRP4	   356#
LAPRP5	   356#
LAPRP6	   356#
LAPRP7	   356#
LCHNOF	   356#
LCHNON	   356#
LCNTXT	   356#
LCNXER	   356#
LCPAER	   356#
LCPSFT	   356#
LCPWRF	   356#
LDATAF	   356#
LDLNK	   125#	   372	   374
LDNXER	   356#
LDPAER	   356#
LDPSFT	   356#
LDPWRF	   356#
LEBXMH	   356#
LEBXML	   356#
LENXER	   356#
LEPAER	   356#
LEPSFT	   356#
LEPWRF	   356#
LEUPFW	   356#
LEXCMP	   356#
LFLGCL	   356#
LFLGDS	   356#
LFLGEN	   356#                                                                                                            SEQ 0205
LFLGST	   356#
LFP	   559#
LINSTF	   356#
LINT	   356#
LIOCLR	   356#
LLACBL	   356#
LLDUSB	   356#
LMBXMH	   356#
LMBXML	   356#
LNXMEN	   356#
LNXMER	   356#
LOOPER	   100#
LPAREN	   356#
LPARER	   356#
LPFWPC	   356#
LPGFTR	   356#
LPICH1	   356#
LPICH2	   356#
LPICH3	   356#
LPICH4	   356#
LPICH5	   356#
LPICH6	   356#
LPICH7	   356#
LPICHA	   356#
LPICLR	   356#
LPIIP1	   356#
LPIIP2	   356#
LPIIP3	   356#
LPIIP4	   356#
LPIIP5	   356#
LPIIP6	   356#
LPIIP7	   356#
LPIOFF	   356#
LPION	   356#
LPRCH1	   356#
LPRCH2	   356#
LPRCH3	   356#
LPRCH4	   356#
LPRCH5	   356#
LPRCH6	   356#
LPRCH7	   356#
LPRFMH	   356#
LPRFML	   356#
LPSFT	   356#
LPSFTE	   356#
LPWRFE	   356#
LPWRFL	   356#
LREQSE	   356#
LRQCLR	   356#
LSECMO	   356#
LSMODE	   356#
LSNXER	   356#
LSPAER	   356#                                                                                                            SEQ 0206
LSPSFT	   356#
LSPWRF	   356#
LTBASH	   356#
LTBASL	   356#
LTRPAE	   356#
LTRPEN	   356#
LUSCMP	   356#
LUUO	   356#
LUUO1	   489	   490
LUUO10	   489	   494
LUUO11	   489	   494
LUUO12	   489	   495
LUUO13	   489	   495
LUUO14	   489	   496
LUUO15	   489	   496
LUUO16	   489	   497
LUUO17	   489	   497
LUUO2	   489	   491
LUUO20	   489	   498
LUUO21	   489	   498
LUUO22	   489	   499
LUUO23	   489	   499
LUUO24	   489	   500
LUUO25	   489	   500
LUUO26	   489	   501
LUUO27	   489	   501
LUUO3	   489	   491
LUUO30	   489	   502
LUUO31	   489	   502
LUUO32	   489	   503
LUUO33	   489	   503
LUUO4	   489	   492
LUUO5	   489	   492
LUUO6	   489	   493
LUUO7	   489	   493
LUUOI	   356#
LWRITE	   356#
MAPNEW	   510#
MARGIN	   432#
MCNVER	     4#	    12	    27	   404
MEMLOW	   512#
MEMMAP	   410
MEMSIZ	   513#
MEMTOT	   511#
MINUS	   554#
MODDVC	   108#
MODDVL	   307	   307#	   405
MODDVU	   308	   308#	   406
MODLNK	   127#	   369
MONCTL	   422#	   783
MONFLG	   421#	   746	   779
MONTEN	   423#	   751	   764	   770
MONTYP	   636#                                                                                                            SEQ 0207
MPVU	   356#
MUUO	   356#
MUUOPC	   356#
NOPNT	    96#
NXMU	   356#
OPRSEL	   110#
OPTIME	   524#
P	   153	   154	   155	   156	   356#	   444
PAG	   356#
PALERS	   102#
PAREA0	    74#
PAREA1	    75#	   400
PAREA2	    76#	   401
PAREA3	    77#	   398
PAREA4	    78#	   399
PAREA5	    79#	   411
PAREA6	    80#	   412
PAREA7	   411#
PAREA8	   412#
PARU	   356#
PASCNT	   426#	   757
PDISF	   521#
PDLOVU	   356#
PDOVTP	   356#
PERIOD	   551#
PFSTRT	   378#
PGMEND	    36#	  9468
PGMNAM	   403	   784	   787#
PICHN1	   356#
PICHN2	   356#
PICHN3	   356#
PICHN4	   356#
PICHN5	   356#
PICHN6	   356#
PICHN7	   356#
PICHNA	   356#
PICLR	   356#
PIOFF	   356#
PION	   356#
PLIST	   590#	   590
PLISTE	   590	   592#
PLISTS	   591#
PLUS	   556#
PNTENB	   520#
PNTEXT	   399#
PNTFLG	   519#
PNTINH	   522#
PNTLPT	    97#
PNTNAM	   398#
PNTRP	   356#
PNTSPC	   523#
PTRP	   356#
PVPAGI	   617#                                                                                                            SEQ 0208
QUEST	   562#
RADIX	   565#
RADLSC	   567#
RADLSP	   566#
RANDBS	   400#
REENTR	   380#
RELIAB	   104#
REPT	   356#
REPT1	   356#
REPTU	   478#
REQSET	   356#
RESRT1	   455#
RESRT2	   456#
RETURN	   387#	   766	   772
RSTART	    93#
RTP	   560#
RUNFLG	   427#
SADR1	    62#	   376
SADR10	    71#	   392
SADR11	    72#	   393
SADR2	    63#	   378
SADR3	    64#	   380
SADR4	    65#
SADR5	    66#	   441
SADR6	    67#	   442
SADR7	    68#	   389
SADR8	    69#	   390
SADR9	    70#	   391
SBINIT	   166	   386#
SCOPE	   479#
SFSTRT	   376#
SLASH	   563#
SM10	   667#
SN	  1207#	  1232	  1232#	  1251	  1251#	  1270	  1270#	  1289	  1289#	  1308	  1308#	  1327	  1327#	  1346
	  1346#	  1365	  1365#	  1384	  1384#	  1403	  1403#	  1422	  1422#	  1441	  1441#	  1460	  1460#	  1479
	  1479#	  1498	  1498#	  1517	  1517#	  1536	  1536#	  1555	  1555#	  1574	  1574#	  1593	  1593#	  1612
	  1612#	  1631	  1631#	  1650	  1650#	  1669	  1669#	  1688	  1688#	  1707	  1707#	  1726	  1726#	  1745
	  1745#	  1764	  1764#	  1783	  1783#	  1802	  1802#	  1821	  1821#	  1840	  1840#	  1859	  1859#	  1878
	  1878#	  1897	  1897#	  2086#	  2119	  2119#	  2148	  2148#	  2177	  2177#	  2206	  2206#	  2383#	  2407
	  2407#	  2426	  2426#	  2445	  2445#	  2464	  2464#	  2483	  2483#	  2502	  2502#	  2521	  2521#	  2540
	  2540#	  2559	  2559#	  2578	  2578#	  2597	  2597#	  2616	  2616#	  2635	  2635#	  2654	  2654#	  2673
	  2673#	  2692	  2692#	  2711	  2711#	  2730	  2730#	  2744#	  2768	  2768#	  2787	  2787#	  2806	  2806#
	  2825	  2825#	  2844	  2844#	  2863	  2863#	  2882	  2882#	  2901	  2901#	  2920	  2920#	  2939	  2939#
	  2958	  2958#	  2977	  2977#	  2996	  2996#	  3015	  3015#	  3034	  3034#	  3053	  3053#	  3072	  3072#
	  3091	  3091#	  3195#	  3228	  3228#	  3257	  3257#	  3286	  3286#	  3315	  3315#	  3344	  3344#	  3373
	  3373#	  3402	  3402#	  3431	  3431#	  3460	  3460#	  3489	  3489#	  3518	  3518#	  3547	  3547#	  3576
	  3576#	  3605	  3605#	  3634	  3634#	  3663	  3663#	  3692	  3692#	  3721	  3721#	  3750	  3750#	  3779
	  3779#	  3808	  3808#	  3837	  3837#	  3866	  3866#	  3895	  3895#	  3924	  3924#	  3953	  3953#	  3982
	  3982#	  4011	  4011#	  4040	  4040#	  4069	  4069#	  4098	  4098#	  4127	  4127#	  4156	  4156#	  4185
	  4185#	  4214	  4214#	  4243	  4243#	  4264#	  4290	  4290#	  4311	  4311#	  4332	  4332#	  4353	  4353#
	  4374	  4374#	  4395	  4395#	  4416	  4416#	  4437	  4437#	  4458	  4458#	  4479	  4479#	  4500	  4500#
	  4521	  4521#	  4542	  4542#	  4563	  4563#	  4584	  4584#	  4605	  4605#	  4626	  4626#	  4647	  4647#
	  4668	  4668#	  4689	  4689#	  4710	  4710#	  4731	  4731#	  4752	  4752#	  4773	  4773#	  4794	  4794#    SEQ 0209
	  4815	  4815#	  4836	  4836#	  4857	  4857#	  4878	  4878#	  4899	  4899#	  4920	  4920#	  4941	  4941#
	  4962	  4962#	  4983	  4983#	  5004	  5004#	  5025	  5025#	  5129#	  5154	  5154#	  5174	  5174#	  5194
	  5194#	  5214	  5214#	  5234	  5234#	  5254	  5254#	  5274	  5274#	  5294	  5294#	  5314	  5314#	  5334
	  5334#	  5354	  5354#	  5374	  5374#	  5394	  5394#	  5414	  5414#	  5434	  5434#	  5454	  5454#	  5474
	  5474#	  5494	  5494#	  5514	  5514#	  5534	  5534#	  5554	  5554#	  5574	  5574#	  5594	  5594#	  5614
	  5614#	  5634	  5634#	  5654	  5654#	  5674	  5674#	  5694	  5694#	  5714	  5714#	  5734	  5734#	  5754
	  5754#	  5774	  5774#	  5794	  5794#	  5814	  5814#	  5834	  5834#	  5854	  5854#	  5869#	  5899	  5899#
	  5924	  5924#	  5949	  5949#	  5974	  5974#	  5999	  5999#	  6024	  6024#	  6049	  6049#	  6074	  6074#
	  6099	  6099#	  6124	  6124#	  6149	  6149#	  6174	  6174#	  6199	  6199#	  6224	  6224#	  6249	  6249#
	  6274	  6274#	  6299	  6299#	  6324	  6324#	  6349	  6349#	  6374	  6374#	  6399	  6399#	  6424	  6424#
	  6449	  6449#	  6474	  6474#	  6499	  6499#	  6524	  6524#	  6549	  6549#	  6574	  6574#	  6599	  6599#
	  6624	  6624#	  6649	  6649#	  6674	  6674#	  6699	  6699#	  6724	  6724#	  6749	  6749#	  6774	  6774#
	  6794#	  6822	  6822#	  6843	  6843#	  6864	  6864#	  6885	  6885#	  6906	  6906#	  6927	  6927#	  6948
	  6948#	  6969	  6969#	  6990	  6990#	  7011	  7011#	  7032	  7032#	  7053	  7053#	  7074	  7074#	  7095
	  7095#	  7116	  7116#	  7137	  7137#	  7158	  7158#	  7179	  7179#	  7200	  7200#	  7221	  7221#	  7242
	  7242#	  7263	  7263#	  7284	  7284#	  7305	  7305#	  7326	  7326#	  7347	  7347#	  7368	  7368#	  7389
	  7389#	  7410	  7410#	  7431	  7431#	  7452	  7452#	  7473	  7473#	  7494	  7494#	  7515	  7515#	  7536
	  7536#	  7557	  7557#	  7603#	  7632	  7632#	  7654	  7654#	  7676	  7676#	  7698	  7698#	  7720	  7720#
	  7742	  7742#	  7764	  7764#	  7786	  7786#	  7808	  7808#	  7830	  7830#	  7852	  7852#	  7874	  7874#
	  7896	  7896#	  7918	  7918#	  7940	  7940#	  7962	  7962#	  7984	  7984#	  8006	  8006#	  8021#	  8050
	  8050#	  8072	  8072#	  8094	  8094#	  8116	  8116#	  8138	  8138#	  8160	  8160#	  8182	  8182#	  8204
	  8204#	  8226	  8226#	  8248	  8248#	  8270	  8270#	  8292	  8292#	  8314	  8314#	  8336	  8336#	  8358
	  8358#	  8380	  8380#	  8402	  8402#	  8424	  8424#	  8478#	  8510	  8510#	  8534	  8534#	  8558	  8558#
	  8582	  8582#	  8606	  8606#	  8630	  8630#	  8654	  8654#	  8678	  8678#	  8702	  8702#	  8726	  8726#
	  8750	  8750#	  8774	  8774#	  8798	  8798#	  8822	  8822#	  8846	  8846#	  8870	  8870#	  8894	  8894#
	  8918	  8918#	  8942	  8942#	  8966	  8966#	  8990	  8990#	  9014	  9014#	  9038	  9038#	  9062	  9062#
	  9086	  9086#	  9110	  9110#	  9134	  9134#	  9158	  9158#	  9182	  9182#	  9206	  9206#	  9230	  9230#
	  9254	  9254#	  9278	  9278#	  9302	  9302#	  9326	  9326#	  9350	  9350#
SNTRP	   356#
SPACE	   552#
SRTDDT	   382#
START	   370	   749	   753	   775#
START1	   389#
START2	   390#
START3	   391#
START4	   392#
START5	   393#
STARTA	    62	    63	    64	    65	    66	    67	    68	    69	    70	    71	    72	   385	   763	   769
	   782	   785	   807#
STRP	   356#
SUBLNK	   128#	   386
SWPTAB	   673#
SWTEXR	   401#
SYSEXR	   374#
TAB	   553#
TESTPC	   428#
TICKS	   431#
TN0	   356#
TN1	   356#
TNUMB	  9366#	  9366
TOTALS	    94#
TRP3TP	   356#
TTNBRF	   611#                                                                                                            SEQ 0210
TTYFIL	   527#
TTYSPD	   528#
TXTINH	   105#
UBAVEC	   356#
USER	   418#	   742	   745	   747	   748	   759	   775#	   775	   778	   780	   781
USERF	    40#	   356#	   744	   777
USRASB	    35#	   408
USRCRF	   537#
USRLFF	   536#
UUODIS	   490#
UUOEXT	   446#
UUORTN	   447#
UUOSKP	   444#
ZZ	  1208#	  1233	  1233#	  1234	  1234#	  1235	  1252	  1252#	  1253	  1254	  1271	  1271#	  1272	  1273
	  1290	  1290#	  1291	  1292	  1309	  1309#	  1310	  1311	  1328	  1328#	  1329	  1330	  1347	  1347#
	  1348	  1349	  1366	  1366#	  1367	  1368	  1385	  1385#	  1386	  1387	  1404	  1404#	  1405	  1406
	  1423	  1423#	  1424	  1425	  1442	  1442#	  1443	  1444	  1461	  1461#	  1462	  1463	  1480	  1480#
	  1481	  1482	  1499	  1499#	  1500	  1501	  1518	  1518#	  1519	  1520	  1537	  1537#	  1538	  1539
	  1556	  1556#	  1557	  1558	  1575	  1575#	  1576	  1577	  1594	  1594#	  1595	  1596	  1613	  1613#
	  1614	  1615	  1632	  1632#	  1633	  1634	  1651	  1651#	  1652	  1653	  1670	  1670#	  1671	  1672
	  1689	  1689#	  1690	  1691	  1708	  1708#	  1709	  1710	  1727	  1727#	  1728	  1729	  1746	  1746#
	  1747	  1748	  1765	  1765#	  1766	  1767	  1784	  1784#	  1785	  1786	  1803	  1803#	  1804	  1805
	  1822	  1822#	  1823	  1824	  1841	  1841#	  1842	  1843	  1860	  1860#	  1861	  1862	  1879	  1879#
	  1880	  1881	  1898	  1898#	  1899	  1900	  2384#	  2408	  2408#	  2409	  2409#	  2411	  2427	  2427#
	  2428	  2430	  2446	  2446#	  2447	  2449	  2465	  2465#	  2466	  2468	  2484	  2484#	  2485	  2487
	  2503	  2503#	  2504	  2506	  2522	  2522#	  2523	  2525	  2541	  2541#	  2542	  2544	  2560	  2560#
	  2561	  2563	  2579	  2579#	  2580	  2582	  2598	  2598#	  2599	  2601	  2617	  2617#	  2618	  2620
	  2636	  2636#	  2637	  2639	  2655	  2655#	  2656	  2658	  2674	  2674#	  2675	  2677	  2693	  2693#
	  2694	  2696	  2712	  2712#	  2713	  2715	  2731	  2731#	  2732	  2734	  2769	  2769#	  2771	  2788
	  2788#	  2790	  2807	  2807#	  2809	  2826	  2826#	  2828	  2845	  2845#	  2847	  2864	  2864#	  2866
	  2883	  2883#	  2885	  2902	  2902#	  2904	  2921	  2921#	  2923	  2940	  2940#	  2942	  2959	  2959#
	  2961	  2978	  2978#	  2980	  2997	  2997#	  2999	  3016	  3016#	  3018	  3035	  3035#	  3037	  3054
	  3054#	  3056	  3073	  3073#	  3075	  3092	  3092#	  3094	  3196#	  3229	  3229#	  3230	  3230#	  3232
	  3258	  3258#	  3259	  3261	  3287	  3287#	  3288	  3290	  3316	  3316#	  3317	  3319	  3345	  3345#
	  3346	  3348	  3374	  3374#	  3375	  3377	  3403	  3403#	  3404	  3406	  3432	  3432#	  3433	  3435
	  3461	  3461#	  3462	  3464	  3490	  3490#	  3491	  3493	  3519	  3519#	  3520	  3522	  3548	  3548#
	  3549	  3551	  3577	  3577#	  3578	  3580	  3606	  3606#	  3607	  3609	  3635	  3635#	  3636	  3638
	  3664	  3664#	  3665	  3667	  3693	  3693#	  3694	  3696	  3722	  3722#	  3723	  3725	  3751	  3751#
	  3752	  3754	  3780	  3780#	  3781	  3783	  3809	  3809#	  3810	  3812	  3838	  3838#	  3839	  3841
	  3867	  3867#	  3868	  3870	  3896	  3896#	  3897	  3899	  3925	  3925#	  3926	  3928	  3954	  3954#
	  3955	  3957	  3983	  3983#	  3984	  3986	  4012	  4012#	  4013	  4015	  4041	  4041#	  4042	  4044
	  4070	  4070#	  4071	  4073	  4099	  4099#	  4100	  4102	  4128	  4128#	  4129	  4131	  4157	  4157#
	  4158	  4160	  4186	  4186#	  4187	  4189	  4215	  4215#	  4216	  4218	  4244	  4244#	  4245	  4247
	  4265#	  4291	  4291#	  4292	  4292#	  4293	  4312	  4312#	  4313	  4314	  4333	  4333#	  4334	  4335
	  4354	  4354#	  4355	  4356	  4375	  4375#	  4376	  4377	  4396	  4396#	  4397	  4398	  4417	  4417#
	  4418	  4419	  4438	  4438#	  4439	  4440	  4459	  4459#	  4460	  4461	  4480	  4480#	  4481	  4482
	  4501	  4501#	  4502	  4503	  4522	  4522#	  4523	  4524	  4543	  4543#	  4544	  4545	  4564	  4564#
	  4565	  4566	  4585	  4585#	  4586	  4587	  4606	  4606#	  4607	  4608	  4627	  4627#	  4628	  4629
	  4648	  4648#	  4649	  4650	  4669	  4669#	  4670	  4671	  4690	  4690#	  4691	  4692	  4711	  4711#
	  4712	  4713	  4732	  4732#	  4733	  4734	  4753	  4753#	  4754	  4755	  4774	  4774#	  4775	  4776
	  4795	  4795#	  4796	  4797	  4816	  4816#	  4817	  4818	  4837	  4837#	  4838	  4839	  4858	  4858#
	  4859	  4860	  4879	  4879#	  4880	  4881	  4900	  4900#	  4901	  4902	  4921	  4921#	  4922	  4923
	  4942	  4942#	  4943	  4944	  4963	  4963#	  4964	  4965	  4984	  4984#	  4985	  4986	  5005	  5005#    SEQ 0211
	  5006	  5007	  5026	  5026#	  5027	  5028	  5130#	  5155	  5155#	  5156	  5156#	  5158	  5175	  5175#
	  5176	  5178	  5195	  5195#	  5196	  5198	  5215	  5215#	  5216	  5218	  5235	  5235#	  5236	  5238
	  5255	  5255#	  5256	  5258	  5275	  5275#	  5276	  5278	  5295	  5295#	  5296	  5298	  5315	  5315#
	  5316	  5318	  5335	  5335#	  5336	  5338	  5355	  5355#	  5356	  5358	  5375	  5375#	  5376	  5378
	  5395	  5395#	  5396	  5398	  5415	  5415#	  5416	  5418	  5435	  5435#	  5436	  5438	  5455	  5455#
	  5456	  5458	  5475	  5475#	  5476	  5478	  5495	  5495#	  5496	  5498	  5515	  5515#	  5516	  5518
	  5535	  5535#	  5536	  5538	  5555	  5555#	  5556	  5558	  5575	  5575#	  5576	  5578	  5595	  5595#
	  5596	  5598	  5615	  5615#	  5616	  5618	  5635	  5635#	  5636	  5638	  5655	  5655#	  5656	  5658
	  5675	  5675#	  5676	  5678	  5695	  5695#	  5696	  5698	  5715	  5715#	  5716	  5718	  5735	  5735#
	  5736	  5738	  5755	  5755#	  5756	  5758	  5775	  5775#	  5776	  5778	  5795	  5795#	  5796	  5798
	  5815	  5815#	  5816	  5818	  5835	  5835#	  5836	  5838	  5855	  5855#	  5856	  5858	  5870#	  5900
	  5900#	  5901	  5901#	  5902	  5925	  5925#	  5926	  5927	  5950	  5950#	  5951	  5952	  5975	  5975#
	  5976	  5977	  6000	  6000#	  6001	  6002	  6025	  6025#	  6026	  6027	  6050	  6050#	  6051	  6052
	  6075	  6075#	  6076	  6077	  6100	  6100#	  6101	  6102	  6125	  6125#	  6126	  6127	  6150	  6150#
	  6151	  6152	  6175	  6175#	  6176	  6177	  6200	  6200#	  6201	  6202	  6225	  6225#	  6226	  6227
	  6250	  6250#	  6251	  6252	  6275	  6275#	  6276	  6277	  6300	  6300#	  6301	  6302	  6325	  6325#
	  6326	  6327	  6350	  6350#	  6351	  6352	  6375	  6375#	  6376	  6377	  6400	  6400#	  6401	  6402
	  6425	  6425#	  6426	  6427	  6450	  6450#	  6451	  6452	  6475	  6475#	  6476	  6477	  6500	  6500#
	  6501	  6502	  6525	  6525#	  6526	  6527	  6550	  6550#	  6551	  6552	  6575	  6575#	  6576	  6577
	  6600	  6600#	  6601	  6602	  6625	  6625#	  6626	  6627	  6650	  6650#	  6651	  6652	  6675	  6675#
	  6676	  6677	  6700	  6700#	  6701	  6702	  6725	  6725#	  6726	  6727	  6750	  6750#	  6751	  6752
	  6775	  6775#	  6776	  6777	  6795#	  6823	  6823#	  6824	  6824#	  6825	  6826	  6844	  6844#	  6845
	  6846	  6847	  6865	  6865#	  6866	  6867	  6868	  6886	  6886#	  6887	  6888	  6889	  6907	  6907#
	  6908	  6909	  6910	  6928	  6928#	  6929	  6930	  6931	  6949	  6949#	  6950	  6951	  6952	  6970
	  6970#	  6971	  6972	  6973	  6991	  6991#	  6992	  6993	  6994	  7012	  7012#	  7013	  7014	  7015
	  7033	  7033#	  7034	  7035	  7036	  7054	  7054#	  7055	  7056	  7057	  7075	  7075#	  7076	  7077
	  7078	  7096	  7096#	  7097	  7098	  7099	  7117	  7117#	  7118	  7119	  7120	  7138	  7138#	  7139
	  7140	  7141	  7159	  7159#	  7160	  7161	  7162	  7180	  7180#	  7181	  7182	  7183	  7201	  7201#
	  7202	  7203	  7204	  7222	  7222#	  7223	  7224	  7225	  7243	  7243#	  7244	  7245	  7246	  7264
	  7264#	  7265	  7266	  7267	  7285	  7285#	  7286	  7287	  7288	  7306	  7306#	  7307	  7308	  7309
	  7327	  7327#	  7328	  7329	  7330	  7348	  7348#	  7349	  7350	  7351	  7369	  7369#	  7370	  7371
	  7372	  7390	  7390#	  7391	  7392	  7393	  7411	  7411#	  7412	  7413	  7414	  7432	  7432#	  7433
	  7434	  7435	  7453	  7453#	  7454	  7455	  7456	  7474	  7474#	  7475	  7476	  7477	  7495	  7495#
	  7496	  7497	  7498	  7516	  7516#	  7517	  7518	  7519	  7537	  7537#	  7538	  7539	  7540	  7558
	  7558#	  7559	  7560	  7561	  7604#	  7633	  7633#	  7634	  7634#	  7636	  7655	  7655#	  7656	  7658
	  7677	  7677#	  7678	  7680	  7699	  7699#	  7700	  7702	  7721	  7721#	  7722	  7724	  7743	  7743#
	  7744	  7746	  7765	  7765#	  7766	  7768	  7787	  7787#	  7788	  7790	  7809	  7809#	  7810	  7812
	  7831	  7831#	  7832	  7834	  7853	  7853#	  7854	  7856	  7875	  7875#	  7876	  7878	  7897	  7897#
	  7898	  7900	  7919	  7919#	  7920	  7922	  7941	  7941#	  7942	  7944	  7963	  7963#	  7964	  7966
	  7985	  7985#	  7986	  7988	  8007	  8007#	  8008	  8010	  8022#	  8051	  8051#	  8052	  8052#	  8054
	  8073	  8073#	  8074	  8076	  8095	  8095#	  8096	  8098	  8117	  8117#	  8118	  8120	  8139	  8139#
	  8140	  8142	  8161	  8161#	  8162	  8164	  8183	  8183#	  8184	  8186	  8205	  8205#	  8206	  8208
	  8227	  8227#	  8228	  8230	  8249	  8249#	  8250	  8252	  8271	  8271#	  8272	  8274	  8293	  8293#
	  8294	  8296	  8315	  8315#	  8316	  8318	  8337	  8337#	  8338	  8340	  8359	  8359#	  8360	  8362
	  8381	  8381#	  8382	  8384	  8403	  8403#	  8404	  8406	  8425	  8425#	  8426	  8428	  8479#	  8511
	  8511#	  8512	  8512#	  8513	  8514	  8515	  8535	  8535#	  8536	  8537	  8538	  8539	  8559	  8559#
	  8560	  8561	  8562	  8563	  8583	  8583#	  8584	  8585	  8586	  8587	  8607	  8607#	  8608	  8609
	  8610	  8611	  8631	  8631#	  8632	  8633	  8634	  8635	  8655	  8655#	  8656	  8657	  8658	  8659
	  8679	  8679#	  8680	  8681	  8682	  8683	  8703	  8703#	  8704	  8705	  8706	  8707	  8727	  8727#
	  8728	  8729	  8730	  8731	  8751	  8751#	  8752	  8753	  8754	  8755	  8775	  8775#	  8776	  8777
	  8778	  8779	  8799	  8799#	  8800	  8801	  8802	  8803	  8823	  8823#	  8824	  8825	  8826	  8827
	  8847	  8847#	  8848	  8849	  8850	  8851	  8871	  8871#	  8872	  8873	  8874	  8875	  8895	  8895#
	  8896	  8897	  8898	  8899	  8919	  8919#	  8920	  8921	  8922	  8923	  8943	  8943#	  8944	  8945     SEQ 0212
	  8946	  8947	  8967	  8967#	  8968	  8969	  8970	  8971	  8991	  8991#	  8992	  8993	  8994	  8995
	  9015	  9015#	  9016	  9017	  9018	  9019	  9039	  9039#	  9040	  9041	  9042	  9043	  9063	  9063#
	  9064	  9065	  9066	  9067	  9087	  9087#	  9088	  9089	  9090	  9091	  9111	  9111#	  9112	  9113
	  9114	  9115	  9135	  9135#	  9136	  9137	  9138	  9139	  9159	  9159#	  9160	  9161	  9162	  9163
	  9183	  9183#	  9184	  9185	  9186	  9187	  9207	  9207#	  9208	  9209	  9210	  9211	  9231	  9231#
	  9232	  9233	  9234	  9235	  9255	  9255#	  9256	  9257	  9258	  9259	  9279	  9279#	  9280	  9281
	  9282	  9283	  9303	  9303#	  9304	  9305	  9306	  9307	  9327	  9327#	  9328	  9329	  9330	  9331
	  9351	  9351#	  9352	  9353	  9354	  9355
$$420	   716#
$$421	   717#
$$422	   718#
$$423	   719#
$$424	   720#
$$425	   721#
$$426	   722#
$$427	   723#
$$430	   724#
$$431	   725#
$$432	   726#
$$433	   727#
$$434	   728#
$$435	   729#
$$436	   730#
$$437	   731#
$$500	   734#
$$501	   735#
$$502	   736#
$$503	   737#
$$BEGI	   704#
$$LOC	   701#	   738
$$MUUO	   642#
$$OUTE	   648#
$$STAR	   704	   705	   742#
$$TAX1	   660#
$$TAX2	   661#
$$TOGG	   654#
$$UUO	   631#
$ACC0	   469#
$BEGEN	   711#
$BEND1	   439#
$BEND2	   440#
$CHRIN	   530#
$CRLF	   532#
$DDT	   695#
$DEVCH	   356#
$DSKUP	   409#
$DVOFF	   526#
$EMODE	   407#
$FFF	   534#
$IBUF	   582#
$INEXT	   584#
$INNM	   583#
$ITRHL	   450#                                                                                                            SEQ 0213
$ITRX1	   451#
$LPAPE	  9373
$MMAP	   410#
$MODVL	   405#
$MODVU	   406#
$OBUF	   573#
$ONETM	   433#
$OUTEX	   575#
$OUTNM	   574#
$PAPER	   356
$PARER	   457#
$PNAME	   403#
$PSHER	   461#
$PVER	   404#
$RSRTX	   453#
$RSRTY	   454#
$SPAG1	   473#
$SPB1	   759#
$SPBEN	   711	   757#
$SPBEX	   760	   768#
$SPBUS	   762#
$START	   370#
$STD	   694#	   708#
$STKIL	   751#
$STL	   696#
$STM	   697#
$SVAPR	   471#
$SVPAG	   472#
$SVPI	   470#
$SVUPC	   476#
$SVUUO	   475#
$TABF	   533#
$TTCHR	   529#
$TWCNT	   525#
$TYPNB	   531#
$UMODE	   408#
$UORTX	   448#
$USRHL	   452#
$UUOER	   449#	   490
$VTF	   535#
%ACTFL	   482#
%ACTUL	   483#
%COREC	   481#
%CORFL	   480#
%DISCR	   484#
%ERHI1	   623#
%ERHI2	   624#
%ERHI3	   625#
.JB41	   356#
.JBAPR	   356#
.JBCNI	   356#
.JBDDT	   356#
.JBFF	   356#                                                                                                            SEQ 0214
.JBOPC	   356#
.JBREL	   356#
.JBREN	   356#
.JBSA	   356#
.JBSYM	   356#
.JBTPC	   356#
.JBUSY	   356#
.JBUUO	   356#
.JBVER	   356#

APRID	   356#
BCIO	   356#                                                                                                            SEQ 0215
BCIOB	   356#
BSIO	   356#
BSIOB	   356#
CFLUSH	   278#
CINVAL	   277#
CLOKOP	   272#
CLRPT	   356#
CWRTBI	   279#
DROPDV	   239#
ENDUUO	   285#	   438
EOPUUO	   286#	   440
ERLOOP	   326#
ERLP1	   327#
ERLP2	   328#
ERRHLT	   173#
ERROR	   335#
ERROR1	   346#
ERUUO	   325#
EXIT	   765
FATAL	   172#
FRD36	   314#
FRD8	   315#
FREAD	   313#
FSELEC	   312#
GET	   156#
GO	   153#
HALT	   158#	   459	   716	   718	   719	   723	   737	   771	   818	   834	   845	   855	   862	   874
	   887	   901	   918	   933	   952	   966	   980	   994	  1008	  1022	  1035	  1049	  1064	  1078
	  1091	  1105	  1119	  1132	  1146	  1160	  1173	  1187	  1201	  1238	  1257	  1276	  1295	  1314
	  1333	  1352	  1371	  1390	  1409	  1428	  1447	  1466	  1485	  1504	  1523	  1542	  1561	  1580
	  1599	  1618	  1637	  1656	  1675	  1694	  1713	  1732	  1751	  1770	  1789	  1808	  1827	  1846
	  1865	  1884	  1903	  1918	  1936	  1951	  1967	  1992	  2010	  2028	  2041	  2055	  2080	  2127
	  2133	  2156	  2162	  2185	  2191	  2214	  2220	  2238	  2257	  2275	  2293	  2309	  2325	  2340
	  2357	  2377	  2414	  2433	  2452	  2471	  2490	  2509	  2528	  2547	  2566	  2585	  2604	  2623
	  2642	  2661	  2680	  2699	  2718	  2737	  2774	  2793	  2812	  2831	  2850	  2869	  2888	  2907
	  2926	  2945	  2964	  2983	  3002	  3021	  3040	  3059	  3078	  3097	  3114	  3130	  3150	  3168
	  3189	  3237	  3243	  3266	  3272	  3295	  3301	  3324	  3330	  3353	  3359	  3382	  3388	  3411
	  3417	  3440	  3446	  3469	  3475	  3498	  3504	  3527	  3533	  3556	  3562	  3585	  3591	  3614
	  3620	  3643	  3649	  3672	  3678	  3701	  3707	  3730	  3736	  3759	  3765	  3788	  3794	  3817
	  3823	  3846	  3852	  3875	  3881	  3904	  3910	  3933	  3939	  3962	  3968	  3991	  3997	  4020
	  4026	  4049	  4055	  4078	  4084	  4107	  4113	  4136	  4142	  4165	  4171	  4194	  4200	  4223
	  4229	  4252	  4258	  4299	  4320	  4341	  4362	  4383	  4404	  4425	  4446	  4467	  4488	  4509
	  4530	  4551	  4572	  4593	  4614	  4635	  4656	  4677	  4698	  4719	  4740	  4761	  4782	  4803
	  4824	  4845	  4866	  4887	  4908	  4929	  4950	  4971	  4992	  5013	  5034	  5052	  5069	  5089
	  5107	  5123	  5162	  5182	  5202	  5222	  5242	  5262	  5282	  5302	  5322	  5342	  5362	  5382
	  5402	  5422	  5442	  5462	  5482	  5502	  5522	  5542	  5562	  5582	  5602	  5622	  5642	  5662
	  5682	  5702	  5722	  5742	  5762	  5782	  5802	  5822	  5842	  5862	  5907	  5932	  5957	  5982
	  6007	  6032	  6057	  6082	  6107	  6132	  6157	  6182	  6207	  6232	  6257	  6282	  6307	  6332
	  6357	  6382	  6407	  6432	  6457	  6482	  6507	  6532	  6557	  6582	  6607	  6632	  6657	  6682
	  6707	  6732	  6757	  6782	  6829	  6850	  6871	  6892	  6913	  6934	  6955	  6976	  6997	  7018
	  7039	  7060	  7081	  7102	  7123	  7144	  7165	  7186	  7207	  7228	  7249	  7270	  7291	  7312
	  7333	  7354	  7375	  7396	  7417	  7438	  7459	  7480	  7501	  7522	  7543	  7564	  7579	  7597
	  7640	  7662	  7684	  7706	  7728	  7750	  7772	  7794	  7816	  7838	  7860	  7882	  7904	  7926     SEQ 0216
	  7948	  7970	  7992	  8014	  8058	  8080	  8102	  8124	  8146	  8168	  8190	  8212	  8234	  8256
	  8278	  8300	  8322	  8344	  8366	  8388	  8410	  8432	  8452	  8472	  8519	  8543	  8567	  8591
	  8615	  8639	  8663	  8687	  8711	  8735	  8759	  8783	  8807	  8831	  8855	  8879	  8903	  8927
	  8951	  8975	  8999	  9023	  9047	  9071	  9095	  9119	  9143	  9167	  9191	  9215	  9239	  9263
	  9287	  9311	  9335	  9359
JEN	   160#
JRSTF	   159#
MAPADR	   295#
MAPCNK	   296#
MAPMEM	   292#
MAPPNT	   298#
MAPSET	   297#
MEMSEG	   294#
MEMZRO	   293#
MODPCP	   305#
MODPCU	   304#
MTROP	   273#
NAME	     9#	    12
PBELL	   248#
PCRL	   242#
PCRL2	   246#
PCRL2F	   247#
PCRLF	   243#
PFORCE	   250#
PGMINT	   166#
PJRST	   157#
PMSG	   252#
PMSGF	   255#
PNT1	   208#
PNT11	   222#
PNT11F	   223#
PNT1F	   209#
PNT2	   210#
PNT2F	   211#
PNT3	   212#
PNT3F	   213#
PNT4	   214#
PNT4F	   215#
PNT5	   216#
PNT5F	   217#
PNT6	   218#
PNT6F	   219#
PNT7	   220#
PNT7F	   221#
PNTA	   194#
PNTADF	   225#
PNTADR	   224#
PNTAF	   195#
PNTAL	   196#
PNTALF	   197#
PNTCHF	   207#
PNTCHR	   206#
PNTCI	   204#                                                                                                            SEQ 0217
PNTCIF	   205#
PNTCW	   240#
PNTCWF	   241#
PNTDCF	   233#
PNTDEC	   232#
PNTDS	   234#
PNTDSF	   235#
PNTHW	   228#
PNTHWF	   229#
PNTMSF	   201#
PNTMSG	   200#
PNTNM	   236#
PNTOCF	   231#
PNTOCS	   230#
PNTOCT	   226#
PNTOTF	   227#
PNTSIX	   237#
PNTSXF	   238#
PSIXL	   198#
PSIXLF	   199#
PSIXM	   202#
PSIXMF	   203#
PSP	   244#
PSPF	   245#
PUT	   155#
RDAPR	   356#
RDCSB	   356#
RDCSTM	   356#
RDEBR	   356#
RDHSB	   356#
RDINT	   356#
RDIO	   356#
RDIOB	   356#
RDPI	   356#
RDPUR	   356#
RDSPB	   356#
RDTIM	   356#
RDUBR	   356#
REPTUO	   329#
RTN	   154#	   446
S	    84#	    86	    90	   119	   121	   130	   133	   148	   149	   151	   162	   164	   168	   170
	   175	   179	   321	   323	   356	   361	   367	   394	   396	   414	   416	   434	   436	   465
	   467	   485	   487	   505	   507	   515	   517	   538	   543	   569	   571	   578	   580	   586
	   588	   594	   596	   600	   602	   607	   609	   613	   615	   619	   621	   627	   629	   632
	   634	   638	   640	   644	   646	   650	   652	   656	   658	   663	   665	   669	   671	   675
	   677	   679	   681
SFLAG	    56#
SIXBTZ	   261#
STOP	    48#	   873	   886	   900	   917	   932	   951	   965	   979	   993	  1007	  1021	  1034	  1048
	  1063	  1077	  1090	  1104	  1118	  1131	  1145	  1159	  1172	  1186	  1200	  1237	  1256	  1275
	  1294	  1313	  1332	  1351	  1370	  1389	  1408	  1427	  1446	  1465	  1484	  1503	  1522	  1541
	  1560	  1579	  1598	  1617	  1636	  1655	  1674	  1693	  1712	  1731	  1750	  1769	  1788	  1807
	  1826	  1845	  1864	  1883	  1902	  1917	  1935	  1950	  1966	  1991	  2009	  2027	  2040	  2054     SEQ 0218
	  2079	  2126	  2132	  2155	  2161	  2184	  2190	  2213	  2219	  2237	  2256	  2274	  2292	  2308
	  2324	  2339	  2356	  2376	  2413	  2432	  2451	  2470	  2489	  2508	  2527	  2546	  2565	  2584
	  2603	  2622	  2641	  2660	  2679	  2698	  2717	  2736	  2773	  2792	  2811	  2830	  2849	  2868
	  2887	  2906	  2925	  2944	  2963	  2982	  3001	  3020	  3039	  3058	  3077	  3096	  3113	  3129
	  3149	  3167	  3188	  3236	  3242	  3265	  3271	  3294	  3300	  3323	  3329	  3352	  3358	  3381
	  3387	  3410	  3416	  3439	  3445	  3468	  3474	  3497	  3503	  3526	  3532	  3555	  3561	  3584
	  3590	  3613	  3619	  3642	  3648	  3671	  3677	  3700	  3706	  3729	  3735	  3758	  3764	  3787
	  3793	  3816	  3822	  3845	  3851	  3874	  3880	  3903	  3909	  3932	  3938	  3961	  3967	  3990
	  3996	  4019	  4025	  4048	  4054	  4077	  4083	  4106	  4112	  4135	  4141	  4164	  4170	  4193
	  4199	  4222	  4228	  4251	  4257	  4298	  4319	  4340	  4361	  4382	  4403	  4424	  4445	  4466
	  4487	  4508	  4529	  4550	  4571	  4592	  4613	  4634	  4655	  4676	  4697	  4718	  4739	  4760
	  4781	  4802	  4823	  4844	  4865	  4886	  4907	  4928	  4949	  4970	  4991	  5012	  5033	  5051
	  5068	  5088	  5106	  5122	  5161	  5181	  5201	  5221	  5241	  5261	  5281	  5301	  5321	  5341
	  5361	  5381	  5401	  5421	  5441	  5461	  5481	  5501	  5521	  5541	  5561	  5581	  5601	  5621
	  5641	  5661	  5681	  5701	  5721	  5741	  5761	  5781	  5801	  5821	  5841	  5861	  5906	  5931
	  5956	  5981	  6006	  6031	  6056	  6081	  6106	  6131	  6156	  6181	  6206	  6231	  6256	  6281
	  6306	  6331	  6356	  6381	  6406	  6431	  6456	  6481	  6506	  6531	  6556	  6581	  6606	  6631
	  6656	  6681	  6706	  6731	  6756	  6781	  6828	  6849	  6870	  6891	  6912	  6933	  6954	  6975
	  6996	  7017	  7038	  7059	  7080	  7101	  7122	  7143	  7164	  7185	  7206	  7227	  7248	  7269
	  7290	  7311	  7332	  7353	  7374	  7395	  7416	  7437	  7458	  7479	  7500	  7521	  7542	  7563
	  7578	  7596	  7639	  7661	  7683	  7705	  7727	  7749	  7771	  7793	  7815	  7837	  7859	  7881
	  7903	  7925	  7947	  7969	  7991	  8013	  8057	  8079	  8101	  8123	  8145	  8167	  8189	  8211
	  8233	  8255	  8277	  8299	  8321	  8343	  8365	  8387	  8409	  8431	  8451	  8471	  8518	  8542
	  8566	  8590	  8614	  8638	  8662	  8686	  8710	  8734	  8758	  8782	  8806	  8830	  8854	  8878
	  8902	  8926	  8950	  8974	  8998	  9022	  9046	  9070	  9094	  9118	  9142	  9166	  9190	  9214
	  9238	  9262	  9286	  9310	  9334	  9358
SWITCH	   267#
TIOE	   356#
TIOEB	   356#
TION	   356#
TIONB	   356#
TTALTM	   188#
TTICHR	   181#
TTICLR	   191#
TTICNV	   186#
TTIDEC	   185#
TTINO	   183#
TTIOCT	   184#
TTIYES	   182#
TTLOOK	   187#
TTSIXB	   189#
TTYINP	   190#
WRAPR	   356#
WRCSB	   356#
WRCSTM	   356#
WREBR	   356#
WRHSB	   356#
WRINT	   356#
WRIO	   356#
WRIOB	   356#
WRPI	   356#
WRPUR	   356#
WRSPB	   356#                                                                                                            SEQ 0219
WRTIM	   356#
WRUBR	   356#

AND	  3186	  3234	  3263	  3292	  3321	  3350	  3379	  3408	  3437	  3466	  3495	  3524	  3553	  3582
	  3611	  3640	  3669	  3698	  3727	  3756	  3785	  3814	  3843	  3872	  3901	  3930	  3959	  3988     SEQ 0220
	  4017	  4046	  4075	  4104	  4133	  4162	  4191	  4220	  4249	  4294	  4315	  4336	  4357	  4378
	  4399	  4420	  4441	  4462	  4483	  4504	  4525	  4546	  4567	  4588	  4609	  4630	  4651	  4672
	  4693	  4714	  4735	  4756	  4777	  4798	  4819	  4840	  4861	  4882	  4903	  4924	  4945	  4966
	  4987	  5008	  5029	  5048	  5066	  5086	  5103	  8514	  8538	  8562	  8586	  8610	  8634	  8658
	  8682	  8706	  8730	  8754	  8778	  8802	  8826	  8850	  8874	  8898	  8922	  8946	  8970	  8994
	  9018	  9042	  9066	  9090	  9114	  9138	  9162	  9186	  9210	  9234	  9258	  9282	  9306	  9330
	  9354
AOS	   444	   757
ASCII	   545	   547	   550	   551	   552	   553	   555	   556	   557	   558	   559	   560	   562	   563
	   564
ASCIZ	   787
BLOCK	   513	   573	   576	   582	   585	   591
BYTE	   561
CAI	  1987	  2005
CAM	  1962	  2023
DEFINE	     9	    48	    56	    84	   252	   255	   261	   335	   346
END	  9470
EQV	  7593	  7636	  7658	  7680	  7702	  7724	  7746	  7768	  7790	  7812	  7834	  7856	  7878	  7900
	  7922	  7944	  7966	  7988	  8010	  8054	  8076	  8098	  8120	  8142	  8164	  8186	  8208	  8230
	  8252	  8274	  8296	  8318	  8340	  8362	  8384	  8406	  8428	  8448	  8449	  8468	  8469	  8515
	  8516	  8539	  8540	  8563	  8564	  8587	  8588	  8611	  8612	  8635	  8636	  8659	  8660	  8683
	  8684	  8707	  8708	  8731	  8732	  8755	  8756	  8779	  8780	  8803	  8804	  8827	  8828	  8851
	  8852	  8875	  8876	  8899	  8900	  8923	  8924	  8947	  8948	  8971	  8972	  8995	  8996	  9019
	  9020	  9043	  9044	  9067	  9068	  9091	  9092	  9115	  9116	  9139	  9140	  9163	  9164	  9187
	  9188	  9211	  9212	  9235	  9236	  9259	  9260	  9283	  9284	  9307	  9308	  9331	  9332	  9355
	  9356
HRRS	  2272
IFDEF	   356	   407	   408	   409	   410	  9461	  9468
IFE	  1234	  1253	  1272	  1291	  1310	  1329	  1348	  1367	  1386	  1405	  1424	  1443	  1462	  1481
	  1500	  1519	  1538	  1557	  1576	  1595	  1614	  1633	  1652	  1671	  1690	  1709	  1728	  1747
	  1766	  1785	  1804	  1823	  1842	  1861	  1880	  1899	  2121	  2150	  2179	  2208	  2409	  2428
	  2447	  2466	  2485	  2504	  2523	  2542	  2561	  2580	  2599	  2618	  2637	  2656	  2675	  2694
	  2713	  2732	  3230	  3259	  3288	  3317	  3346	  3375	  3404	  3433	  3462	  3491	  3520	  3549
	  3578	  3607	  3636	  3665	  3694	  3723	  3752	  3781	  3810	  3839	  3868	  3897	  3926	  3955
	  3984	  4013	  4042	  4071	  4100	  4129	  4158	  4187	  4216	  4245	  4292	  4313	  4334	  4355
	  4376	  4397	  4418	  4439	  4460	  4481	  4502	  4523	  4544	  4565	  4586	  4607	  4628	  4649
	  4670	  4691	  4712	  4733	  4754	  4775	  4796	  4817	  4838	  4859	  4880	  4901	  4922	  4943
	  4964	  4985	  5006	  5027	  5156	  5176	  5196	  5216	  5236	  5256	  5276	  5296	  5316	  5336
	  5356	  5376	  5396	  5416	  5436	  5456	  5476	  5496	  5516	  5536	  5556	  5576	  5596	  5616
	  5636	  5656	  5676	  5696	  5716	  5736	  5756	  5776	  5796	  5816	  5836	  5856	  5901	  5926
	  5951	  5976	  6001	  6026	  6051	  6076	  6101	  6126	  6151	  6176	  6201	  6226	  6251	  6276
	  6301	  6326	  6351	  6376	  6401	  6426	  6451	  6476	  6501	  6526	  6551	  6576	  6601	  6626
	  6651	  6676	  6701	  6726	  6751	  6776	  6824	  6845	  6866	  6887	  6908	  6929	  6950	  6971
	  6992	  7013	  7034	  7055	  7076	  7097	  7118	  7139	  7160	  7181	  7202	  7223	  7244	  7265
	  7286	  7307	  7328	  7349	  7370	  7391	  7412	  7433	  7454	  7475	  7496	  7517	  7538	  7559
	  7634	  7656	  7678	  7700	  7722	  7744	  7766	  7788	  7810	  7832	  7854	  7876	  7898	  7920
	  7942	  7964	  7986	  8008	  8052	  8074	  8096	  8118	  8140	  8162	  8184	  8206	  8228	  8250
	  8272	  8294	  8316	  8338	  8360	  8382	  8404	  8426	  8512	  8536	  8560	  8584	  8608	  8632
	  8656	  8680	  8704	  8728	  8752	  8776	  8800	  8824	  8848	  8872	  8896	  8920	  8944	  8968
	  8992	  9016	  9040	  9064	  9088	  9112	  9136	  9160	  9184	  9208	  9232	  9256	  9280	  9304
	  9328	  9352
IFNDEF	   307	   308	   318	   407	   408	   409	   410	   489	  9373
JFCL	   447	   448	   449	   450	   451	   452	   453	   454	   455	   456	   457	   458	   717             SEQ 0221
JRST	    66	    67	    68	    69	    70	    71	    72	   157	   158	   159	   160	   369	   370	   372
	   374	   376	   378	   380	   383	   385	   386	   439	   704	   705	   708	   711	   749	   753
	   760	   763	   766	   769	   772	   782	   785	   807	  9367
JSP	   166	   743	   776
JUMP	   832	   843	  2290
JUMPA	   853	   861	   875	   888	   902	   919	   934	   953	   967	   981	   995	  1009	  1023	  1036
	  1050	  1065	  1079	  1092	  1106	  1120	  1133	  1147	  1161	  1174	  1188	  1202	  1239	  1258
	  1277	  1296	  1315	  1334	  1353	  1372	  1391	  1410	  1429	  1448	  1467	  1486	  1505	  1524
	  1543	  1562	  1581	  1600	  1619	  1638	  1657	  1676	  1695	  1714	  1733	  1752	  1771	  1790
	  1809	  1828	  1847	  1866	  1885	  1904	  1919	  1937	  1952	  1968	  1993	  2011	  2029	  2042
	  2056	  2081	  2128	  2134	  2157	  2163	  2186	  2192	  2215	  2221	  2239	  2258	  2276	  2294
	  2310	  2326	  2341	  2358	  2378	  2415	  2434	  2453	  2472	  2491	  2510	  2529	  2548	  2567
	  2586	  2605	  2624	  2643	  2662	  2681	  2700	  2719	  2738	  2775	  2794	  2813	  2832	  2851
	  2870	  2889	  2908	  2927	  2946	  2965	  2984	  3003	  3022	  3041	  3060	  3079	  3098	  3115
	  3131	  3151	  3169	  3190	  3238	  3244	  3267	  3273	  3296	  3302	  3325	  3331	  3354	  3360
	  3383	  3389	  3412	  3418	  3441	  3447	  3470	  3476	  3499	  3505	  3528	  3534	  3557	  3563
	  3586	  3592	  3615	  3621	  3644	  3650	  3673	  3679	  3702	  3708	  3731	  3737	  3760	  3766
	  3789	  3795	  3818	  3824	  3847	  3853	  3876	  3882	  3905	  3911	  3934	  3940	  3963	  3969
	  3992	  3998	  4021	  4027	  4050	  4056	  4079	  4085	  4108	  4114	  4137	  4143	  4166	  4172
	  4195	  4201	  4224	  4230	  4253	  4259	  4300	  4321	  4342	  4363	  4384	  4405	  4426	  4447
	  4468	  4489	  4510	  4531	  4552	  4573	  4594	  4615	  4636	  4657	  4678	  4699	  4720	  4741
	  4762	  4783	  4804	  4825	  4846	  4867	  4888	  4909	  4930	  4951	  4972	  4993	  5014	  5035
	  5053	  5070	  5090	  5108	  5124	  5163	  5183	  5203	  5223	  5243	  5263	  5283	  5303	  5323
	  5343	  5363	  5383	  5403	  5423	  5443	  5463	  5483	  5503	  5523	  5543	  5563	  5583	  5603
	  5623	  5643	  5663	  5683	  5703	  5723	  5743	  5763	  5783	  5803	  5823	  5843	  5863	  5908
	  5933	  5958	  5983	  6008	  6033	  6058	  6083	  6108	  6133	  6158	  6183	  6208	  6233	  6258
	  6283	  6308	  6333	  6358	  6383	  6408	  6433	  6458	  6483	  6508	  6533	  6558	  6583	  6608
	  6633	  6658	  6683	  6708	  6733	  6758	  6783	  6830	  6851	  6872	  6893	  6914	  6935	  6956
	  6977	  6998	  7019	  7040	  7061	  7082	  7103	  7124	  7145	  7166	  7187	  7208	  7229	  7250
	  7271	  7292	  7313	  7334	  7355	  7376	  7397	  7418	  7439	  7460	  7481	  7502	  7523	  7544
	  7565	  7580	  7598	  7641	  7663	  7685	  7707	  7729	  7751	  7773	  7795	  7817	  7839	  7861
	  7883	  7905	  7927	  7949	  7971	  7993	  8015	  8059	  8081	  8103	  8125	  8147	  8169	  8191
	  8213	  8235	  8257	  8279	  8301	  8323	  8345	  8367	  8389	  8411	  8433	  8453	  8473	  8520
	  8544	  8568	  8592	  8616	  8640	  8664	  8688	  8712	  8736	  8760	  8784	  8808	  8832	  8856
	  8880	  8904	  8928	  8952	  8976	  9000	  9024	  9048	  9072	  9096	  9120	  9144	  9168	  9192
	  9216	  9240	  9264	  9288	  9312	  9336	  9360
LALL	    10
LIST	     9	   318	   356	   489	  9373	  9458
LIT	  9374
LOC	    26	   359	   683	   703	   707	   710	   715	   733	   738
MOVE	   871	   884	   898	   914	   929	   948	   963	   976	   991	  1004	  1018	  1032	  1046	  1060
	  1074	  1088	  1102	  1115	  1129	  1143	  1157	  1170	  1184	  1198	  1235	  1254	  1273	  1292
	  1311	  1330	  1349	  1368	  1387	  1406	  1425	  1444	  1463	  1482	  1501	  1520	  1539	  1558
	  1577	  1596	  1615	  1634	  1653	  1672	  1691	  1710	  1729	  1748	  1767	  1786	  1805	  1824
	  1843	  1862	  1881	  1900	  1933	  1948	  1961	  1963	  1986	  1988	  2004	  2006	  2022	  2024
	  2037	  2038	  2052	  2073	  2074	  2076	  2122	  2123	  2151	  2152	  2180	  2181	  2209	  2210
	  2234	  2252	  2253	  2270	  2271	  2289	  2305	  2321	  2336	  2353	  2373	  2410	  2429	  2448
	  2467	  2486	  2505	  2524	  2543	  2562	  2581	  2600	  2619	  2638	  2657	  2676	  2695	  2714
	  2733	  2770	  2789	  2808	  2827	  2846	  2865	  2884	  2903	  2922	  2941	  2960	  2979	  2998
	  3017	  3036	  3055	  3074	  3093	  3110	  3126	  3146	  3164	  3185	  3232	  3261	  3290	  3319
	  3348	  3377	  3406	  3435	  3464	  3493	  3522	  3551	  3580	  3609	  3638	  3667	  3696	  3725
	  3754	  3783	  3812	  3841	  3870	  3899	  3928	  3957	  3986	  4015	  4044	  4073	  4102	  4131
	  4160	  4189	  4218	  4247	  4293	  4314	  4335	  4356	  4377	  4398	  4419	  4440	  4461	  4482     SEQ 0222
	  4503	  4524	  4545	  4566	  4587	  4608	  4629	  4650	  4671	  4692	  4713	  4734	  4755	  4776
	  4797	  4818	  4839	  4860	  4881	  4902	  4923	  4944	  4965	  4986	  5007	  5028	  5047	  5065
	  5085	  5102	  5118	  5157	  5177	  5197	  5217	  5237	  5257	  5277	  5297	  5317	  5337	  5357
	  5377	  5397	  5417	  5437	  5457	  5477	  5497	  5517	  5537	  5557	  5577	  5597	  5617	  5637
	  5657	  5677	  5697	  5717	  5737	  5757	  5777	  5797	  5817	  5837	  5857	  5902	  5927	  5952
	  5977	  6002	  6027	  6052	  6077	  6102	  6127	  6152	  6177	  6202	  6227	  6252	  6277	  6302
	  6327	  6352	  6377	  6402	  6427	  6452	  6477	  6502	  6527	  6552	  6577	  6602	  6627	  6652
	  6677	  6702	  6727	  6752	  6777	  6825	  6846	  6867	  6888	  6909	  6930	  6951	  6972	  6993
	  7014	  7035	  7056	  7077	  7098	  7119	  7140	  7161	  7182	  7203	  7224	  7245	  7266	  7287
	  7308	  7329	  7350	  7371	  7392	  7413	  7434	  7455	  7476	  7497	  7518	  7539	  7560	  7575
	  7592	  7635	  7657	  7679	  7701	  7723	  7745	  7767	  7789	  7811	  7833	  7855	  7877	  7899
	  7921	  7943	  7965	  7987	  8009	  8053	  8075	  8097	  8119	  8141	  8163	  8185	  8207	  8229
	  8251	  8273	  8295	  8317	  8339	  8361	  8383	  8405	  8427	  8447	  8467	  8513	  8537	  8561
	  8585	  8609	  8633	  8657	  8681	  8705	  8729	  8753	  8777	  8801	  8825	  8849	  8873	  8897
	  8921	  8945	  8969	  8993	  9017	  9041	  9065	  9089	  9113	  9137	  9161	  9185	  9209	  9233
	  9257	  9281	  9305	  9329	  9353
MOVEI	  1915
MOVS	  2306	  2322	  2337	  2354	  2374	  2411	  2430	  2449	  2468	  2487	  2506	  2525	  2544	  2563
	  2582	  2601	  2620	  2639	  2658	  2677	  2696	  2715	  2734	  2771	  2790	  2809	  2828	  2847
	  2866	  2885	  2904	  2923	  2942	  2961	  2980	  2999	  3018	  3037	  3056	  3075	  3094
MOVSS	  2254
NOSYM	    29
OPDEF	   153	   154	   155	   156	   157	   158	   159	   160	   166	   172	   173	   181	   182	   183
	   184	   185	   186	   187	   188	   189	   190	   191	   194	   195	   196	   197	   198	   199
	   200	   201	   202	   203	   204	   205	   206	   207	   208	   209	   210	   211	   212	   213
	   214	   215	   216	   217	   218	   219	   220	   221	   222	   223	   224	   225	   226	   227
	   228	   229	   230	   231	   232	   233	   234	   235	   236	   237	   238	   239	   240	   241
	   242	   243	   244	   245	   246	   247	   248	   250	   267	   272	   273	   277	   278	   279
	   285	   286	   292	   293	   294	   295	   296	   297	   298	   304	   305	   312	   313	   314
	   315	   325	   326	   327	   328	   329	   356
POP	   156
POPJ	   154
PUSH	   155
PUSHJ	   153
REPEAT	  1210	  2089	  2386	  2746	  3198	  4267	  5132	  5872	  6797	  7606	  8024	  8481
SETM	  3111	  3127
SETOM	   745	   752	   778
SETZ	  3147	  3165	  3231	  3260	  3289	  3318	  3347	  3376	  3405	  3434	  3463	  3492	  3521	  3550
	  3579	  3608	  3637	  3666	  3695	  3724	  3753	  3782	  3811	  3840	  3869	  3898	  3927	  3956
	  3985	  4014	  4043	  4072	  4101	  4130	  4159	  4188	  4217	  4246
SETZM	   742	   747	   775	   780	  9366
SIXBIT	    77	    78	   574	   575	   583	   584
SKIP	   915	  1005	  2124	  2153	  2182	  2211	  2235
SKIPA	   817	   833	   844	   854	   872	   885	   916	   931	   950	   978	  1006	  1020	  1062	  1076
	  1117
SKIPE	   748	   762	   768	   977	   992	  1965	  1990	  2008	  2026	  2053	  2078	  2131	  2160	  2189
	  2218	  2236	  2255	  2273	  2291	  2307	  3128	  3148	  3166	  3187	  3235	  3241	  3264	  3270
	  3293	  3299	  3322	  3328	  3351	  3357	  3380	  3386	  3409	  3415	  3438	  3444	  3467	  3473
	  3496	  3502	  3525	  3531	  3554	  3560	  3583	  3589	  3612	  3618	  3641	  3647	  3670	  3676
	  3699	  3705	  3728	  3734	  3757	  3763	  3786	  3792	  3815	  3821	  3844	  3850	  3873	  3879
	  3902	  3908	  3931	  3937	  3960	  3966	  3989	  3995	  4018	  4024	  4047	  4053	  4076	  4082
	  4105	  4111	  4134	  4140	  4163	  4169	  4192	  4198	  4221	  4227	  4250	  4256	  5050	  5067
	  5087	  6827	  6848	  6869	  6890	  6911	  6932	  6953	  6974	  6995	  7016	  7037	  7058	  7079     SEQ 0223
	  7100	  7121	  7142	  7163	  7184	  7205	  7226	  7247	  7268	  7289	  7310	  7331	  7352	  7373
	  7394	  7415	  7436	  7457	  7478	  7499	  7520	  7541	  7562	  7577	  7595	  8450	  8470	  8517
	  8541	  8565	  8589	  8613	  8637	  8661	  8685	  8709	  8733	  8757	  8781	  8805	  8829	  8853
	  8877	  8901	  8925	  8949	  8973	  8997	  9021	  9045	  9069	  9093	  9117	  9141	  9165	  9189
	  9213	  9237	  9261	  9285	  9309	  9333	  9357
SKIPG	  1047	  1061	  1916	  2355
SKIPGE	   899	   930
SKIPL	   783	  1019	  1033	  1075	  1934	  1949	  2375	  3112
SKIPLE	  1089	  1103	  1116
SKIPN	   746	   751	   759	   764	   770	   779	   781	   949	   964	  1130	  1144	  1158	  1171	  1185
	  1199	  1236	  1255	  1274	  1293	  1312	  1331	  1350	  1369	  1388	  1407	  1426	  1445	  1464
	  1483	  1502	  1521	  1540	  1559	  1578	  1597	  1616	  1635	  1654	  1673	  1692	  1711	  1730
	  1749	  1768	  1787	  1806	  1825	  1844	  1863	  1882	  1901	  2039	  2125	  2154	  2183	  2212
	  2323	  2338	  2412	  2431	  2450	  2469	  2488	  2507	  2526	  2545	  2564	  2583	  2602	  2621
	  2640	  2659	  2678	  2697	  2716	  2735	  2772	  2791	  2810	  2829	  2848	  2867	  2886	  2905
	  2924	  2943	  2962	  2981	  3000	  3019	  3038	  3057	  3076	  3095	  4297	  4318	  4339	  4360
	  4381	  4402	  4423	  4444	  4465	  4486	  4507	  4528	  4549	  4570	  4591	  4612	  4633	  4654
	  4675	  4696	  4717	  4738	  4759	  4780	  4801	  4822	  4843	  4864	  4885	  4906	  4927	  4948
	  4969	  4990	  5011	  5032	  5105	  5121	  5160	  5180	  5200	  5220	  5240	  5260	  5280	  5300
	  5320	  5340	  5360	  5380	  5400	  5420	  5440	  5460	  5480	  5500	  5520	  5540	  5560	  5580
	  5600	  5620	  5640	  5660	  5680	  5700	  5720	  5740	  5760	  5780	  5800	  5820	  5840	  5860
	  5905	  5930	  5955	  5980	  6005	  6030	  6055	  6080	  6105	  6130	  6155	  6180	  6205	  6230
	  6255	  6280	  6305	  6330	  6355	  6380	  6405	  6430	  6455	  6480	  6505	  6530	  6555	  6580
	  6605	  6630	  6655	  6680	  6705	  6730	  6755	  6780	  7638	  7660	  7682	  7704	  7726	  7748
	  7770	  7792	  7814	  7836	  7858	  7880	  7902	  7924	  7946	  7968	  7990	  8012	  8056	  8078
	  8100	  8122	  8144	  8166	  8188	  8210	  8232	  8254	  8276	  8298	  8320	  8342	  8364	  8386
	  8408	  8430
SOS	   758	  2075
SUBTTL	    30	    82	   117	   319	   356	   357	   685	   773	   808	  1910	  2227	  3104	  9368
TITLE	    14
TLNE	   744	   777
TTCALL	   784
VAR	  9466
XLIST	     8	   317	   355	   488	  9372
XOR	  5119	  5158	  5178	  5198	  5218	  5238	  5258	  5278	  5298	  5318	  5338	  5358	  5378	  5398
	  5418	  5438	  5458	  5478	  5498	  5518	  5538	  5558	  5578	  5598	  5618	  5638	  5658	  5678
	  5698	  5718	  5738	  5758	  5778	  5798	  5818	  5838	  5858	  5903	  5928	  5953	  5978	  6003
	  6028	  6053	  6078	  6103	  6128	  6153	  6178	  6203	  6228	  6253	  6278	  6303	  6328	  6353
	  6378	  6403	  6428	  6453	  6478	  6503	  6528	  6553	  6578	  6603	  6628	  6653	  6678	  6703
	  6728	  6753	  6778	  6826	  6847	  6868	  6889	  6910	  6931	  6952	  6973	  6994	  7015	  7036
	  7057	  7078	  7099	  7120	  7141	  7162	  7183	  7204	  7225	  7246	  7267	  7288	  7309	  7330
	  7351	  7372	  7393	  7414	  7435	  7456	  7477	  7498	  7519	  7540	  7561	  7576
XWD	  1046	  1074	  1102	  1115	  1129	  1143	  1198	  2321	  2336	  2353	  2373	  7636	  7658	  7680
	  7702	  7724	  7746	  7768	  7790	  7812	  7834	  7856	  7878	  7900	  7922	  7944	  7966	  7988
	  8010	  8054	  8076	  8098	  8120	  8142	  8164	  8186	  8208	  8230	  8252	  8274	  8296	  8318
	  8340	  8362	  8384	  8406	  8428

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 1                  SEQ 0224
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777 


*030001  JRST	0,030600

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030600 
----------

*030600  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030601  JSP	0,030602

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030602 
FINAL
C(AC)= 000000 030602 
----------

*030602  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 010000 
FINAL
C(AC)= 000000 030602 
----------

*030604  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 2
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0225

*030606  SKIPE	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030602 
----------

*030610  SKIPN	0,030044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030602 
----------

*030612  JRST	0,030631

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030631 
----------

*030631  SETZM	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*030632  JSP	0,030633

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030602     E= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 3
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0226

*030633  TLNE	0,010000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 010000 
FINAL
C(AC)= 000000 030633 
----------

*030635  SKIPN	0,030042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 777777 777777 
FINAL
C(AC)= 000000 030633 
----------

*030637  SKIPN	0,030037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 030633 
----------

*030640  JRST	0,030660

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030660 
----------

*030660  JRST	0,030661

FLAGS - INT/FINAL   000000 000000 
INITIAL
    E= 000000 030661 
----------

*030661  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 4
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0227

*030663  JUMP 	0,030664

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030664 
----------

*030664  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

*030666  JUMP 	0,030670

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030670 
----------

*030667  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

*030671  JUMPA	0,030672

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030672 
----------

*030672  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 030633 
FINAL
C(AC)= 000000 030633 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 5
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0228

*030674  JUMPA	0,030676

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633     E= 000000 030676 
----------

*030676  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 030633  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030677  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030701  JUMPA	0,030702

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030702 
----------

*030702  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030703  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 6
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0229

*030705  JUMPA	0,030706

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030706 
----------

*030706  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030707  SKIPGE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030711  JUMPA	0,030712

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030712 
----------

*030712  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030713  SKIP 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 7
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0230

*030714  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030716  JUMPA	0,030717

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030717 
----------

*030717  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030720  SKIPGE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030721  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 8
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0231

*030723  JUMPA	0,030724

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030724 
----------

*030724  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030725  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030726  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030730  JUMPA	0,030731

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030731 
----------

*030731  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 9
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0232

*030732  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030734  JUMPA	0,030735

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030735 
----------

*030735  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030736  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030737  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 10
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0233

*030741  JUMPA	0,030742

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030742 
----------

*030742  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030743  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030745  JUMPA	0,030746

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030746 
----------

*030746  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030747  SKIP 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 11
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0234

*030750  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030752  JUMPA	0,030753

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030753 
----------

*030753  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030754  SKIPL	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030755  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 12
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0235

*030757  JUMPA	0,030760

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 030760 
----------

*030760  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030761  SKIPL	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030763  JUMPA	0,030764

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030764 
----------

*030764  MOVE 	0,035002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*030765  SKIPG	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 13
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0236

*030767  JUMPA	0,030770

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 030770 
----------

*030770  MOVE 	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030771  SKIPG	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030772  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*030774  JUMPA	0,030775

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777     E= 000000 030775 
----------

*030775  MOVE 	0,035002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 14
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0237

*030776  SKIPL	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*030777  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*031001  JUMPA	0,031002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 031002 
----------

*031002  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031003  SKIPLE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 15
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0238

*031005  JUMPA	0,031006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031006 
----------

*031006  MOVE 	0,035003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031007  SKIPLE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031011  JUMPA	0,031012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 031012 
----------

*031012  MOVE 	0,035002

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*031013  SKIPLE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 16
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0239

*031014  SKIPA	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 377777 777777 
FINAL
C(AC)= 377777 777777 
----------

*031016  JUMPA	0,031017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777     E= 000000 031017 
----------

*031017  MOVE 	0,035004

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 377777 777777  C(E)= 777000 000000 
FINAL
C(AC)= 777000 000000 
----------

*031020  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 000000  C(E)= 777000 000000 
FINAL
C(AC)= 777000 000000 
----------

*031022  JUMPA	0,031023

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 000000     E= 000000 031023 
----------

*031023  MOVE 	0,035005

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777000 000000  C(E)= 000377 000000 
FINAL
C(AC)= 000377 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 17
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0240

*031024  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000377 000000  C(E)= 000377 000000 
FINAL
C(AC)= 000377 000000 
----------

*031026  JUMPA	0,031027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000377 000000     E= 000000 031027 
----------

*031027  MOVE 	0,035006

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000377 000000  C(E)= 000000 177000 
FINAL
C(AC)= 000000 177000 
----------

*031030  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 177000  C(E)= 000000 177000 
FINAL
C(AC)= 000000 177000 
----------

*031032  JUMPA	0,031033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 177000     E= 000000 031033 
----------

*031033  MOVE 	0,035007

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 177000  C(E)= 000000 000777 
FINAL
C(AC)= 000000 000777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 18
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0241

*031034  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 000000 000777 
FINAL
C(AC)= 000000 000777 
----------

*031036  JUMPA	0,031037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777     E= 000000 031037 
----------

*031037  MOVE 	0,035010

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000777  C(E)= 000000 600000 
FINAL
C(AC)= 000000 600000 
----------

*031040  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 600000  C(E)= 000000 600000 
FINAL
C(AC)= 000000 600000 
----------

*031042  JUMPA	0,031043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 600000     E= 000000 031043 
----------

*031043  MOVE 	0,035011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 600000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 19
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0242

*031044  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031046  JUMPA	0,031047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 031047 
----------

*031047  MOVE 	0,035012

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031050  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*031052  JUMPA	0,031053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001     E= 000000 031053 
----------

*031053  MOVE 	0,035013

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 20
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0243

*031054  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031056  JUMPA	0,031057

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002     E= 000000 031057 
----------

*031057  MOVE 	0,035014

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031060  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031062  JUMPA	0,031063

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004     E= 000000 031063 
----------

*031063  MOVE 	0,035015

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 21
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0244

*031064  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031066  JUMPA	0,031067

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010     E= 000000 031067 
----------

*031067  MOVE 	0,035016

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031070  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*031072  JUMPA	0,031073

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020     E= 000000 031073 
----------

*031073  MOVE 	0,035017

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 22
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0245

*031074  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031076  JUMPA	0,031077

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040     E= 000000 031077 
----------

*031077  MOVE 	0,035020

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031100  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031102  JUMPA	0,031103

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100     E= 000000 031103 
----------

*031103  MOVE 	0,035021

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 23
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0246

*031104  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031106  JUMPA	0,031107

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200     E= 000000 031107 
----------

*031107  MOVE 	0,035022

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031110  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*031112  JUMPA	0,031113

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400     E= 000000 031113 
----------

*031113  MOVE 	0,035023

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 24
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0247

*031114  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031116  JUMPA	0,031117

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000     E= 000000 031117 
----------

*031117  MOVE 	0,035024

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031120  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031122  JUMPA	0,031123

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000     E= 000000 031123 
----------

*031123  MOVE 	0,035025

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 25
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0248

*031124  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*031126  JUMPA	0,031127

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000     E= 000000 031127 
----------

*031127  MOVE 	0,035026

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*031130  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*031132  JUMPA	0,031133

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000     E= 000000 031133 
----------

*031133  MOVE 	0,035027

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 26
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0249

*031134  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031136  JUMPA	0,031137

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000     E= 000000 031137 
----------

*031137  MOVE 	0,035030

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031140  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031142  JUMPA	0,031143

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000     E= 000000 031143 
----------

*031143  MOVE 	0,035031

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 27
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0250

*031144  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031146  JUMPA	0,031147

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000     E= 000000 031147 
----------

*031147  MOVE 	0,035032

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*031150  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*031152  JUMPA	0,031153

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000     E= 000000 031153 
----------

*031153  MOVE 	0,035033

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 28
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0251

*031154  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*031156  JUMPA	0,031157

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000     E= 000000 031157 
----------

*031157  MOVE 	0,035034

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 400000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031160  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031162  JUMPA	0,031163

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000     E= 000000 031163 
----------

*031163  MOVE 	0,035035

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000001 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 29
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0252

*031164  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*031166  JUMPA	0,031167

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000     E= 000000 031167 
----------

*031167  MOVE 	0,035036

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000002 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*031170  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*031172  JUMPA	0,031173

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000     E= 000000 031173 
----------

*031173  MOVE 	0,035037

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000004 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 30
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0253

*031174  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*031176  JUMPA	0,031177

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000     E= 000000 031177 
----------

*031177  MOVE 	0,035040

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000010 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*031200  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*031202  JUMPA	0,031203

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000     E= 000000 031203 
----------

*031203  MOVE 	0,035041

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000020 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 31
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0254

*031204  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*031206  JUMPA	0,031207

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000     E= 000000 031207 
----------

*031207  MOVE 	0,035042

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000040 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*031210  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*031212  JUMPA	0,031213

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000     E= 000000 031213 
----------

*031213  MOVE 	0,035043

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000100 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 32
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0255

*031214  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*031216  JUMPA	0,031217

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000     E= 000000 031217 
----------

*031217  MOVE 	0,035011

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000200 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031220  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031222  JUMPA	0,031223

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000     E= 000000 031223 
----------

*031223  MOVE 	0,035044

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000400 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 33
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0256

*031224  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*031226  JUMPA	0,031227

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000     E= 000000 031227 
----------

*031227  MOVE 	0,035045

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 001000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031230  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*031232  JUMPA	0,031233

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000     E= 000000 031233 
----------

*031233  MOVE 	0,035046

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 002000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 34
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0257

*031234  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031236  JUMPA	0,031237

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000     E= 000000 031237 
----------

*031237  MOVE 	0,035047

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 004000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031240  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031242  JUMPA	0,031243

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000     E= 000000 031243 
----------

*031243  MOVE 	0,035050

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 010000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 35
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0258

*031244  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*031246  JUMPA	0,031247

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000     E= 000000 031247 
----------

*031247  MOVE 	0,035051

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 020000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*031250  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*031252  JUMPA	0,031253

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000     E= 000000 031253 
----------

*031253  MOVE 	0,035052

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 040000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 36
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0259

*031254  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031256  JUMPA	0,031257

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000     E= 000000 031257 
----------

*031257  MOVE 	0,035053

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 100000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031260  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031262  JUMPA	0,031263

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000     E= 000000 031263 
----------

*031263  MOVE 	0,035003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 200000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 37
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0260

*031264  SKIPN	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031266  JUMPA	0,031267

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 031267 
----------

*031267  MOVEI	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 400000 000000     E= 000000 035001 
FINAL
C(AC)= 000000 035001 
----------

*031270  SKIPG	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 035001  C(E)= 000000 035001 
FINAL
C(AC)= 000000 035001 
----------

*031272  JUMPA	0,031273

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 035001     E= 000000 031273 
----------

*031273  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 035001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 38
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0261

*031274  SKIPL	0,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031276  JUMPA	0,031277

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031277 
----------

*031277  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031300  SKIPL	0,035003

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031302  JUMPA	0,031303

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031303 
----------

*031303  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 39
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0262

*031304  CAM 	0,035054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001234 
----------

*031305  MOVE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031306  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031310  JUMPA	0,031311

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031311 
----------

*031311  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031312  CAI 	0,035054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 035054 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 40
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0263

*031313  MOVE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031314  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031316  JUMPA	0,031317

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031317 
----------

*031317  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031320  CAI 	17,035054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 035054 
----------

*031321  MOVE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 41
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0264

*031322  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031324  JUMPA	0,031325

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031325 
----------

*031325  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031326  CAM 	17,035054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001234 
----------

*031327  MOVE 	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031330  SKIPE	0,000000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 42
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0265

*031332  JUMPA	0,031333

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031333 
----------

*031333  MOVE 	1,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031334  MOVE 	1,035001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031335  SKIPN	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031337  JUMPA	0,031340

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031340 
----------

*031340  MOVE 	1,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 43
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0266

*031341  SKIPE	0,000001

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031343  JUMPA	0,031344

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000     E= 000000 031344 
----------

*031344  MOVE 	0,035000

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031345  MOVE 	7,035054

FLAGS - INT/FINAL   000000 000000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001234 
FINAL
C(AC)= 000000 001234 
----------

*031346  SOS 	0,000007

FLAGS - INT/FINAL   000000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001234 
FINAL
C(AC)= 000000 000000  C(E)= 000000 001233 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 44
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0267

*031347  MOVE 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031350  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031352  JUMPA	0,031353

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031353 
----------

*031353  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031354  MOVE 	1,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 45
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0268

*031355  SKIP 	1,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031356  SKIPN	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031360  JUMPA	0,031361

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031361 
----------

*031361  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031363  JUMPA	0,031364

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031364 
----------

*031364  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 46
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0269

*031365  MOVE 	2,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031366  SKIP 	2,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031367  SKIPN	0,000002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031371  JUMPA	0,031372

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031372 
----------

*031372  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 47
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0270

*031374  JUMPA	0,031375

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031375 
----------

*031375  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031376  MOVE 	4,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031377  SKIP 	4,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031400  SKIPN	0,000004

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 48
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0271

*031402  JUMPA	0,031403

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031403 
----------

*031403  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031405  JUMPA	0,031406

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031406 
----------

*031406  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031407  MOVE 	10,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031410  SKIP 	10,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 49
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0272

*031411  SKIPN	0,000010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*031413  JUMPA	0,031414

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031414 
----------

*031414  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031416  JUMPA	0,031417

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031417 
----------

*031417  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031420  SKIP 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 50
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0273

*031421  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031423  JUMPA	0,031424

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031424 
----------

*031424  MOVE 	7,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001233  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031425  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031426  MOVSS	0,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 51
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0274

*031427  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031431  JUMPA	0,031432

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031432 
----------

*031432  MOVE 	7,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031433  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031434  HRRS	0,000007

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000  C(E)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 52
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0275

*031435  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031437  JUMPA	0,031440

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031440 
----------

*031440  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031441  JUMP 	0,031442

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031442 
----------

*031442  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031444  JUMPA	0,031445

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031445 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 53
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0276

*031445  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031446  MOVS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031447  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031451  JUMPA	0,031452

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031452 
----------

*031452  MOVE 	0,035055

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 54
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0277

*031453  MOVS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031454  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031456  JUMPA	0,031457

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000     E= 000000 031457 
----------

*031457  MOVE 	0,035056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031460  MOVS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 55
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0278

*031461  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031463  JUMPA	0,031464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 031464 
----------

*031464  MOVE 	0,035056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031465  MOVS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 000000 777777 
----------

*031466  SKIPG	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 56
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0279

*031470  JUMPA	0,031471

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777     E= 000000 031471 
----------

*031471  MOVE 	0,035055

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 000000 777777 
----------

*031472  MOVS 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 777777  C(E)= 000000 777777 
FINAL
C(AC)= 777777 000000 
----------

*031473  SKIPL	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 777777 000000 
FINAL
C(AC)= 777777 000000 
----------

*031475  JUMPA	0,031476

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000     E= 000000 031476 
----------

*031476  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 57
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0280

*031477  MOVS 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000001 000000 
----------

*031500  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*031502  JUMPA	0,031503

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000     E= 000000 031503 
----------

*031503  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031504  MOVS 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 58
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0281

*031505  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*031507  JUMPA	0,031510

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000     E= 000000 031510 
----------

*031510  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031511  MOVS 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000004 000000 
----------

*031512  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 59
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0282

*031514  JUMPA	0,031515

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000     E= 000000 031515 
----------

*031515  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031516  MOVS 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000010 000000 
----------

*031517  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*031521  JUMPA	0,031522

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000     E= 000000 031522 
----------

*031522  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 60
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0283

*031523  MOVS 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000020 000000 
----------

*031524  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*031526  JUMPA	0,031527

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000     E= 000000 031527 
----------

*031527  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031530  MOVS 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 61
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0284

*031531  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*031533  JUMPA	0,031534

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000     E= 000000 031534 
----------

*031534  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031535  MOVS 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000100 000000 
----------

*031536  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 62
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0285

*031540  JUMPA	0,031541

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000     E= 000000 031541 
----------

*031541  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031542  MOVS 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000200 000000 
----------

*031543  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*031545  JUMPA	0,031546

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000     E= 000000 031546 
----------

*031546  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 63
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0286

*031547  MOVS 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000400 000000 
----------

*031550  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*031552  JUMPA	0,031553

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000     E= 000000 031553 
----------

*031553  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031554  MOVS 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 64
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0287

*031555  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*031557  JUMPA	0,031560

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000     E= 000000 031560 
----------

*031560  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031561  MOVS 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 002000 000000 
----------

*031562  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 65
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0288

*031564  JUMPA	0,031565

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000     E= 000000 031565 
----------

*031565  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031566  MOVS 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 004000 000000 
----------

*031567  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*031571  JUMPA	0,031572

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000     E= 000000 031572 
----------

*031572  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 66
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0289

*031573  MOVS 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 010000 000000 
----------

*031574  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*031576  JUMPA	0,031577

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000     E= 000000 031577 
----------

*031577  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031600  MOVS 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 67
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0290

*031601  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*031603  JUMPA	0,031604

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000     E= 000000 031604 
----------

*031604  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031605  MOVS 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 040000 000000 
----------

*031606  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 68
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0291

*031610  JUMPA	0,031611

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000     E= 000000 031611 
----------

*031611  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031612  MOVS 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 100000 000000 
----------

*031613  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*031615  JUMPA	0,031616

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000     E= 000000 031616 
----------

*031616  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 69
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0292

*031617  MOVS 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 200000 000000 
----------

*031620  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*031622  JUMPA	0,031623

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 031623 
----------

*031623  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031624  MOVS 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 70
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0293

*031625  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*031627  JUMPA	0,031630

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000     E= 000000 031630 
----------

*031630  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031631  MOVS 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000000 000001 
----------

*031632  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 71
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0294

*031634  JUMPA	0,031635

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 031635 
----------

*031635  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031636  MOVS 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000000 000002 
----------

*031637  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*031641  JUMPA	0,031642

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 031642 
----------

*031642  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 72
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0295

*031643  MOVS 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000000 000004 
----------

*031644  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*031646  JUMPA	0,031647

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 031647 
----------

*031647  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031650  MOVS 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 73
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0296

*031651  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*031653  JUMPA	0,031654

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010     E= 000000 031654 
----------

*031654  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031655  MOVS 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000000 000020 
----------

*031656  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 74
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0297

*031660  JUMPA	0,031661

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020     E= 000000 031661 
----------

*031661  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031662  MOVS 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000000 000040 
----------

*031663  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*031665  JUMPA	0,031666

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040     E= 000000 031666 
----------

*031666  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 75
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0298

*031667  MOVS 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000000 000100 
----------

*031670  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*031672  JUMPA	0,031673

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 031673 
----------

*031673  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031674  MOVS 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 76
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0299

*031675  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*031677  JUMPA	0,031700

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200     E= 000000 031700 
----------

*031700  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031701  MOVS 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000000 000400 
----------

*031702  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 77
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0300

*031704  JUMPA	0,031705

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400     E= 000000 031705 
----------

*031705  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031706  MOVS 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 000000 001000 
----------

*031707  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*031711  JUMPA	0,031712

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000     E= 000000 031712 
----------

*031712  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 78
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0301

*031713  MOVS 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 000000 002000 
----------

*031714  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*031716  JUMPA	0,031717

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000     E= 000000 031717 
----------

*031717  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031720  MOVS 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 79
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0302

*031721  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*031723  JUMPA	0,031724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000     E= 000000 031724 
----------

*031724  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031725  MOVS 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 000000 010000 
----------

*031726  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 80
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0303

*031730  JUMPA	0,031731

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000     E= 000000 031731 
----------

*031731  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031732  MOVS 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 000000 020000 
----------

*031733  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*031735  JUMPA	0,031736

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000     E= 000000 031736 
----------

*031736  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 81
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0304

*031737  MOVS 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 000000 040000 
----------

*031740  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*031742  JUMPA	0,031743

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000     E= 000000 031743 
----------

*031743  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031744  MOVS 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 82
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0305

*031745  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*031747  JUMPA	0,031750

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000     E= 000000 031750 
----------

*031750  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031751  MOVS 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 000000 200000 
----------

*031752  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 83
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0306

*031754  JUMPA	0,031755

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000     E= 000000 031755 
----------

*031755  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031756  MOVS 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 400000 
----------

*031757  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*031761  JUMPA	0,031762

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000     E= 000000 031762 
----------

*031762  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 84
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0307

*031763  SETM 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031764  SKIPL	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031766  JUMPA	0,031767

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 031767 
----------

*031767  MOVE 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*031770  SETM 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 85
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0308

*031771  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031773  JUMPA	0,031774

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 031774 
----------

*031774  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031775  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*031776  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 86
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0309

*032000  JUMPA	0,032001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032001 
----------

*032001  MOVE 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*032002  SETZ 	0,032002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 400000 032002 
FINAL
C(AC)= 000000 000000 
----------

*032003  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032005  JUMPA	0,032006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032006 
----------

*032006  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 87
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0310

*032007  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032010  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032012  JUMPA	0,032013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032013 
----------

*032013  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032014  MOVE 	1,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 88
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0311

*032015  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032016  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032020  JUMPA	0,032021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032021 
----------

*032021  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032023  JUMPA	0,032024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032024 
----------

*032024  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 89
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0312

*032025  MOVE 	1,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032026  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032027  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032031  JUMPA	0,032032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032032 
----------

*032032  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 90
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0313

*032034  JUMPA	0,032035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032035 
----------

*032035  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032036  MOVE 	1,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032037  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032040  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 91
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0314

*032042  JUMPA	0,032043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032043 
----------

*032043  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032045  JUMPA	0,032046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032046 
----------

*032046  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032047  MOVE 	1,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032050  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 92
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0315

*032051  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032053  JUMPA	0,032054

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032054 
----------

*032054  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032056  JUMPA	0,032057

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032057 
----------

*032057  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032060  MOVE 	1,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 93
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0316

*032061  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032062  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032064  JUMPA	0,032065

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032065 
----------

*032065  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032067  JUMPA	0,032070

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032070 
----------

*032070  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 94
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0317

*032071  MOVE 	1,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*032072  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032073  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032075  JUMPA	0,032076

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032076 
----------

*032076  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 95
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0318

*032100  JUMPA	0,032101

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032101 
----------

*032101  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032102  MOVE 	1,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*032103  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032104  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 96
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0319

*032106  JUMPA	0,032107

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032107 
----------

*032107  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032111  JUMPA	0,032112

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032112 
----------

*032112  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032113  MOVE 	1,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*032114  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 97
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0320

*032115  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032117  JUMPA	0,032120

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032120 
----------

*032120  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032122  JUMPA	0,032123

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032123 
----------

*032123  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032124  MOVE 	1,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 98
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0321

*032125  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032126  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032130  JUMPA	0,032131

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032131 
----------

*032131  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032133  JUMPA	0,032134

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032134 
----------

*032134  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 99
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0322

*032135  MOVE 	1,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032136  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032137  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032141  JUMPA	0,032142

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032142 
----------

*032142  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 100
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0323

*032144  JUMPA	0,032145

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032145 
----------

*032145  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032146  MOVE 	1,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032147  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032150  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 101
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0324

*032152  JUMPA	0,032153

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032153 
----------

*032153  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032155  JUMPA	0,032156

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032156 
----------

*032156  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032157  MOVE 	1,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*032160  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 102
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0325

*032161  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032163  JUMPA	0,032164

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032164 
----------

*032164  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032166  JUMPA	0,032167

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032167 
----------

*032167  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032170  MOVE 	1,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 103
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0326

*032171  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032172  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032174  JUMPA	0,032175

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032175 
----------

*032175  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032177  JUMPA	0,032200

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032200 
----------

*032200  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 104
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0327

*032201  MOVE 	1,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*032202  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032203  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032205  JUMPA	0,032206

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032206 
----------

*032206  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 105
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0328

*032210  JUMPA	0,032211

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032211 
----------

*032211  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032212  MOVE 	1,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032213  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032214  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 106
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0329

*032216  JUMPA	0,032217

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032217 
----------

*032217  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032221  JUMPA	0,032222

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032222 
----------

*032222  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032223  MOVE 	1,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*032224  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 107
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0330

*032225  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032227  JUMPA	0,032230

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032230 
----------

*032230  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032232  JUMPA	0,032233

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032233 
----------

*032233  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032234  MOVE 	1,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 108
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0331

*032235  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032236  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032240  JUMPA	0,032241

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032241 
----------

*032241  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032243  JUMPA	0,032244

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032244 
----------

*032244  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 109
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0332

*032245  MOVE 	1,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*032246  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032247  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032251  JUMPA	0,032252

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032252 
----------

*032252  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 110
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0333

*032254  JUMPA	0,032255

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032255 
----------

*032255  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032256  MOVE 	1,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*032257  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032260  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 111
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0334

*032262  JUMPA	0,032263

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032263 
----------

*032263  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032265  JUMPA	0,032266

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032266 
----------

*032266  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032267  MOVE 	1,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*032270  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 112
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0335

*032271  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032273  JUMPA	0,032274

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032274 
----------

*032274  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032276  JUMPA	0,032277

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032277 
----------

*032277  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032300  MOVE 	1,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 113
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0336

*032301  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032302  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032304  JUMPA	0,032305

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032305 
----------

*032305  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032307  JUMPA	0,032310

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032310 
----------

*032310  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 114
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0337

*032311  MOVE 	1,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*032312  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032313  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032315  JUMPA	0,032316

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032316 
----------

*032316  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 115
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0338

*032320  JUMPA	0,032321

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032321 
----------

*032321  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032322  MOVE 	1,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*032323  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032324  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 116
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0339

*032326  JUMPA	0,032327

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032327 
----------

*032327  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032331  JUMPA	0,032332

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032332 
----------

*032332  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032333  MOVE 	1,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*032334  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 117
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0340

*032335  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032337  JUMPA	0,032340

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032340 
----------

*032340  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032342  JUMPA	0,032343

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032343 
----------

*032343  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032344  MOVE 	1,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 118
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0341

*032345  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032346  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032350  JUMPA	0,032351

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032351 
----------

*032351  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032353  JUMPA	0,032354

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032354 
----------

*032354  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 119
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0342

*032355  MOVE 	1,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*032356  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032357  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032361  JUMPA	0,032362

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032362 
----------

*032362  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 120
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0343

*032364  JUMPA	0,032365

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032365 
----------

*032365  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032366  MOVE 	1,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*032367  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032370  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 121
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0344

*032372  JUMPA	0,032373

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032373 
----------

*032373  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032375  JUMPA	0,032376

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032376 
----------

*032376  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032377  MOVE 	1,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*032400  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 122
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0345

*032401  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032403  JUMPA	0,032404

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032404 
----------

*032404  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032406  JUMPA	0,032407

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032407 
----------

*032407  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032410  MOVE 	1,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 123
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0346

*032411  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032412  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032414  JUMPA	0,032415

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032415 
----------

*032415  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032417  JUMPA	0,032420

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032420 
----------

*032420  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 124
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0347

*032421  MOVE 	1,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032422  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032423  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032425  JUMPA	0,032426

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032426 
----------

*032426  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 125
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0348

*032430  JUMPA	0,032431

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032431 
----------

*032431  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032432  MOVE 	1,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032433  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032434  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 126
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0349

*032436  JUMPA	0,032437

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032437 
----------

*032437  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032441  JUMPA	0,032442

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032442 
----------

*032442  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032443  MOVE 	1,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*032444  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 127
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0350

*032445  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032447  JUMPA	0,032450

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032450 
----------

*032450  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032452  JUMPA	0,032453

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032453 
----------

*032453  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032454  MOVE 	1,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 128
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0351

*032455  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032456  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032460  JUMPA	0,032461

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032461 
----------

*032461  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032463  JUMPA	0,032464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032464 
----------

*032464  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 129
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0352

*032465  MOVE 	1,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*032466  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032467  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032471  JUMPA	0,032472

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032472 
----------

*032472  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 130
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0353

*032474  JUMPA	0,032475

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032475 
----------

*032475  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032476  MOVE 	1,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032477  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032500  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 131
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0354

*032502  JUMPA	0,032503

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032503 
----------

*032503  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032505  JUMPA	0,032506

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032506 
----------

*032506  SETZ 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032507  MOVE 	1,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*032510  AND 	1,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 132
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0355

*032511  SKIPE	0,000001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032513  JUMPA	0,032514

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032514 
----------

*032514  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*032516  JUMPA	0,032517

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 032517 
----------

*032517  MOVE 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032520  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 133
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0356

*032521  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*032523  JUMPA	0,032524

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 032524 
----------

*032524  MOVE 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032525  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*032526  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 134
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0357

*032530  JUMPA	0,032531

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 032531 
----------

*032531  MOVE 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032532  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032533  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*032535  JUMPA	0,032536

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 032536 
----------

*032536  MOVE 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 135
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0358

*032537  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032540  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*032542  JUMPA	0,032543

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010     E= 000000 032543 
----------

*032543  MOVE 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*032544  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 136
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0359

*032545  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*032547  JUMPA	0,032550

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020     E= 000000 032550 
----------

*032550  MOVE 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*032551  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*032552  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 137
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0360

*032554  JUMPA	0,032555

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040     E= 000000 032555 
----------

*032555  MOVE 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*032556  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*032557  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*032561  JUMPA	0,032562

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 032562 
----------

*032562  MOVE 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 138
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0361

*032563  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*032564  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*032566  JUMPA	0,032567

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200     E= 000000 032567 
----------

*032567  MOVE 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*032570  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 139
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0362

*032571  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*032573  JUMPA	0,032574

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400     E= 000000 032574 
----------

*032574  MOVE 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032575  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*032576  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 140
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0363

*032600  JUMPA	0,032601

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000     E= 000000 032601 
----------

*032601  MOVE 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032602  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032603  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*032605  JUMPA	0,032606

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000     E= 000000 032606 
----------

*032606  MOVE 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 141
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0364

*032607  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*032610  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*032612  JUMPA	0,032613

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000     E= 000000 032613 
----------

*032613  MOVE 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*032614  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 142
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0365

*032615  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*032617  JUMPA	0,032620

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000     E= 000000 032620 
----------

*032620  MOVE 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*032621  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*032622  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 143
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0366

*032624  JUMPA	0,032625

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000     E= 000000 032625 
----------

*032625  MOVE 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032626  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032627  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*032631  JUMPA	0,032632

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000     E= 000000 032632 
----------

*032632  MOVE 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 144
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0367

*032633  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*032634  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*032636  JUMPA	0,032637

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000     E= 000000 032637 
----------

*032637  MOVE 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*032640  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 145
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0368

*032641  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*032643  JUMPA	0,032644

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000     E= 000000 032644 
----------

*032644  MOVE 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*032645  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*032646  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 146
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0369

*032650  JUMPA	0,032651

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000     E= 000000 032651 
----------

*032651  MOVE 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*032652  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*032653  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*032655  JUMPA	0,032656

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000     E= 000000 032656 
----------

*032656  MOVE 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 147
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0370

*032657  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*032660  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*032662  JUMPA	0,032663

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000     E= 000000 032663 
----------

*032663  MOVE 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*032664  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 148
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0371

*032665  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*032667  JUMPA	0,032670

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000     E= 000000 032670 
----------

*032670  MOVE 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*032671  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*032672  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 149
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0372

*032674  JUMPA	0,032675

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000     E= 000000 032675 
----------

*032675  MOVE 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*032676  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*032677  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*032701  JUMPA	0,032702

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000     E= 000000 032702 
----------

*032702  MOVE 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 150
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0373

*032703  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*032704  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*032706  JUMPA	0,032707

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000     E= 000000 032707 
----------

*032707  MOVE 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*032710  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 151
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0374

*032711  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*032713  JUMPA	0,032714

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000     E= 000000 032714 
----------

*032714  MOVE 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*032715  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*032716  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 152
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0375

*032720  JUMPA	0,032721

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000     E= 000000 032721 
----------

*032721  MOVE 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*032722  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*032723  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*032725  JUMPA	0,032726

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000     E= 000000 032726 
----------

*032726  MOVE 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 153
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0376

*032727  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*032730  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*032732  JUMPA	0,032733

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000     E= 000000 032733 
----------

*032733  MOVE 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*032734  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 154
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0377

*032735  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*032737  JUMPA	0,032740

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000     E= 000000 032740 
----------

*032740  MOVE 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032741  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*032742  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 155
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0378

*032744  JUMPA	0,032745

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000     E= 000000 032745 
----------

*032745  MOVE 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032746  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032747  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*032751  JUMPA	0,032752

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000     E= 000000 032752 
----------

*032752  MOVE 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 156
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0379

*032753  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*032754  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*032756  JUMPA	0,032757

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000     E= 000000 032757 
----------

*032757  MOVE 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*032760  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 157
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0380

*032761  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*032763  JUMPA	0,032764

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000     E= 000000 032764 
----------

*032764  MOVE 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*032765  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*032766  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 158
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0381

*032770  JUMPA	0,032771

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000     E= 000000 032771 
----------

*032771  MOVE 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032772  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032773  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*032775  JUMPA	0,032776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 032776 
----------

*032776  MOVE 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 159
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0382

*032777  AND 	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033000  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033002  JUMPA	0,033003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000     E= 000000 033003 
----------

*033003  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033004  AND 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 160
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0383

*033005  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033007  JUMPA	0,033010

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033010 
----------

*033010  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033011  AND 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*033012  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 161
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0384

*033014  JUMPA	0,033015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033015 
----------

*033015  MOVE 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033016  AND 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033017  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033021  JUMPA	0,033022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033022 
----------

*033022  MOVE 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 162
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0385

*033023  AND 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033024  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*033026  JUMPA	0,033027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777     E= 000000 033027 
----------

*033027  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033030  XOR 	0,035057

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 163
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0386

*033031  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 707070 707070 
FINAL
C(AC)= 707070 707070 
----------

*033033  JUMPA	0,033034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070     E= 000000 033034 
----------

*033034  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 707070 707070  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033035  XOR 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033036  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 164
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0387

*033040  JUMPA	0,033041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 033041 
----------

*033041  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033042  XOR 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033043  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033045  JUMPA	0,033046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 033046 
----------

*033046  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 165
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0388

*033047  XOR 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*033050  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*033052  JUMPA	0,033053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 033053 
----------

*033053  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033054  XOR 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 166
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0389

*033055  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033057  JUMPA	0,033060

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010     E= 000000 033060 
----------

*033060  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033061  XOR 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*033062  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 167
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0390

*033064  JUMPA	0,033065

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020     E= 000000 033065 
----------

*033065  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033066  XOR 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033067  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033071  JUMPA	0,033072

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040     E= 000000 033072 
----------

*033072  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 168
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0391

*033073  XOR 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*033074  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*033076  JUMPA	0,033077

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 033077 
----------

*033077  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033100  XOR 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 169
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0392

*033101  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*033103  JUMPA	0,033104

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200     E= 000000 033104 
----------

*033104  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033105  XOR 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*033106  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 170
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0393

*033110  JUMPA	0,033111

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400     E= 000000 033111 
----------

*033111  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033112  XOR 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033113  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033115  JUMPA	0,033116

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000     E= 000000 033116 
----------

*033116  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 171
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0394

*033117  XOR 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*033120  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*033122  JUMPA	0,033123

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000     E= 000000 033123 
----------

*033123  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033124  XOR 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 172
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0395

*033125  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033127  JUMPA	0,033130

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000     E= 000000 033130 
----------

*033130  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033131  XOR 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033132  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 173
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0396

*033134  JUMPA	0,033135

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000     E= 000000 033135 
----------

*033135  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033136  XOR 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033137  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033141  JUMPA	0,033142

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000     E= 000000 033142 
----------

*033142  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 174
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0397

*033143  XOR 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*033144  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*033146  JUMPA	0,033147

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000     E= 000000 033147 
----------

*033147  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033150  XOR 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 175
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0398

*033151  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033153  JUMPA	0,033154

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000     E= 000000 033154 
----------

*033154  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033155  XOR 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*033156  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 176
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0399

*033160  JUMPA	0,033161

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000     E= 000000 033161 
----------

*033161  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033162  XOR 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033163  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033165  JUMPA	0,033166

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000     E= 000000 033166 
----------

*033166  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 177
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0400

*033167  XOR 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*033170  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*033172  JUMPA	0,033173

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000     E= 000000 033173 
----------

*033173  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033174  XOR 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 178
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0401

*033175  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*033177  JUMPA	0,033200

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000     E= 000000 033200 
----------

*033200  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033201  XOR 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*033202  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 179
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0402

*033204  JUMPA	0,033205

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000     E= 000000 033205 
----------

*033205  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033206  XOR 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033207  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033211  JUMPA	0,033212

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000     E= 000000 033212 
----------

*033212  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 180
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0403

*033213  XOR 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*033214  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*033216  JUMPA	0,033217

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000     E= 000000 033217 
----------

*033217  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033220  XOR 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 181
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0404

*033221  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033223  JUMPA	0,033224

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000     E= 000000 033224 
----------

*033224  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033225  XOR 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*033226  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 182
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0405

*033230  JUMPA	0,033231

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000     E= 000000 033231 
----------

*033231  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033232  XOR 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*033233  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*033235  JUMPA	0,033236

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000     E= 000000 033236 
----------

*033236  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 183
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0406

*033237  XOR 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*033240  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*033242  JUMPA	0,033243

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000     E= 000000 033243 
----------

*033243  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033244  XOR 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 184
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0407

*033245  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*033247  JUMPA	0,033250

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000     E= 000000 033250 
----------

*033250  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033251  XOR 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*033252  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 185
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0408

*033254  JUMPA	0,033255

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000     E= 000000 033255 
----------

*033255  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033256  XOR 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033257  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033261  JUMPA	0,033262

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000     E= 000000 033262 
----------

*033262  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 186
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0409

*033263  XOR 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033264  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033266  JUMPA	0,033267

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000     E= 000000 033267 
----------

*033267  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033270  XOR 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 187
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0410

*033271  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*033273  JUMPA	0,033274

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000     E= 000000 033274 
----------

*033274  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033275  XOR 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033276  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 188
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0411

*033300  JUMPA	0,033301

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000     E= 000000 033301 
----------

*033301  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033302  XOR 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033303  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033305  JUMPA	0,033306

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000     E= 000000 033306 
----------

*033306  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 189
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0412

*033307  XOR 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*033310  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*033312  JUMPA	0,033313

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 033313 
----------

*033313  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033314  XOR 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 190
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0413

*033315  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033317  JUMPA	0,033320

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000     E= 000000 033320 
----------

*033320  MOVE 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033321  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000001 
----------

*033322  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 191
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0414

*033324  JUMPA	0,033325

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 033325 
----------

*033325  MOVE 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033326  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000002 
----------

*033327  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033331  JUMPA	0,033332

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 033332 
----------

*033332  MOVE 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 192
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0415

*033333  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000004 
----------

*033334  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*033336  JUMPA	0,033337

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 033337 
----------

*033337  MOVE 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033340  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000010 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 193
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0416

*033341  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033343  JUMPA	0,033344

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010     E= 000000 033344 
----------

*033344  MOVE 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*033345  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000020 
----------

*033346  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 194
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0417

*033350  JUMPA	0,033351

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020     E= 000000 033351 
----------

*033351  MOVE 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033352  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000040 
----------

*033353  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033355  JUMPA	0,033356

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040     E= 000000 033356 
----------

*033356  MOVE 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 195
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0418

*033357  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000100 
----------

*033360  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*033362  JUMPA	0,033363

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 033363 
----------

*033363  MOVE 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*033364  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000200 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 196
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0419

*033365  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*033367  JUMPA	0,033370

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200     E= 000000 033370 
----------

*033370  MOVE 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*033371  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000400 
----------

*033372  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 197
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0420

*033374  JUMPA	0,033375

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400     E= 000000 033375 
----------

*033375  MOVE 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033376  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 001000 
----------

*033377  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033401  JUMPA	0,033402

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000     E= 000000 033402 
----------

*033402  MOVE 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 198
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0421

*033403  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 002000 
----------

*033404  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*033406  JUMPA	0,033407

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000     E= 000000 033407 
----------

*033407  MOVE 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033410  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 004000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 199
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0422

*033411  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033413  JUMPA	0,033414

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000     E= 000000 033414 
----------

*033414  MOVE 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033415  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 010000 
----------

*033416  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 200
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0423

*033420  JUMPA	0,033421

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000     E= 000000 033421 
----------

*033421  MOVE 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033422  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 020000 
----------

*033423  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033425  JUMPA	0,033426

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000     E= 000000 033426 
----------

*033426  MOVE 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 201
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0424

*033427  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 040000 
----------

*033430  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*033432  JUMPA	0,033433

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000     E= 000000 033433 
----------

*033433  MOVE 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033434  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 202
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0425

*033435  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033437  JUMPA	0,033440

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000     E= 000000 033440 
----------

*033440  MOVE 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*033441  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 200000 
----------

*033442  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 203
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0426

*033444  JUMPA	0,033445

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000     E= 000000 033445 
----------

*033445  MOVE 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033446  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 400000 
----------

*033447  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033451  JUMPA	0,033452

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000     E= 000000 033452 
----------

*033452  MOVE 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 204
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0427

*033453  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000001 000000 
----------

*033454  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*033456  JUMPA	0,033457

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000     E= 000000 033457 
----------

*033457  MOVE 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*033460  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 205
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0428

*033461  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*033463  JUMPA	0,033464

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000     E= 000000 033464 
----------

*033464  MOVE 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*033465  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000004 000000 
----------

*033466  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 206
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0429

*033470  JUMPA	0,033471

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000     E= 000000 033471 
----------

*033471  MOVE 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033472  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000010 000000 
----------

*033473  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033475  JUMPA	0,033476

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000     E= 000000 033476 
----------

*033476  MOVE 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 207
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0430

*033477  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000020 000000 
----------

*033500  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*033502  JUMPA	0,033503

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000     E= 000000 033503 
----------

*033503  MOVE 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033504  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000040 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 208
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0431

*033505  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033507  JUMPA	0,033510

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000     E= 000000 033510 
----------

*033510  MOVE 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*033511  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000100 000000 
----------

*033512  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 209
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0432

*033514  JUMPA	0,033515

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000     E= 000000 033515 
----------

*033515  MOVE 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*033516  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000200 000000 
----------

*033517  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*033521  JUMPA	0,033522

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000     E= 000000 033522 
----------

*033522  MOVE 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 210
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0433

*033523  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000400 000000 
----------

*033524  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*033526  JUMPA	0,033527

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000     E= 000000 033527 
----------

*033527  MOVE 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*033530  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 001000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 211
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0434

*033531  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*033533  JUMPA	0,033534

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000     E= 000000 033534 
----------

*033534  MOVE 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*033535  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 002000 000000 
----------

*033536  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 212
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0435

*033540  JUMPA	0,033541

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000     E= 000000 033541 
----------

*033541  MOVE 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033542  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033543  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*033545  JUMPA	0,033546

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000     E= 000000 033546 
----------

*033546  MOVE 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 213
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0436

*033547  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033550  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*033552  JUMPA	0,033553

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000     E= 000000 033553 
----------

*033553  MOVE 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*033554  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 020000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 214
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0437

*033555  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*033557  JUMPA	0,033560

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000     E= 000000 033560 
----------

*033560  MOVE 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033561  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 040000 000000 
----------

*033562  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 215
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0438

*033564  JUMPA	0,033565

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000     E= 000000 033565 
----------

*033565  MOVE 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033566  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033567  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*033571  JUMPA	0,033572

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000     E= 000000 033572 
----------

*033572  MOVE 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 216
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0439

*033573  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 200000 000000 
----------

*033574  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*033576  JUMPA	0,033577

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 033577 
----------

*033577  MOVE 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033600  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 217
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0440

*033601  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*033603  JUMPA	0,033604

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000     E= 000000 033604 
----------

*033604  MOVE 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*033605  XOR 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000 
----------

*033606  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 218
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0441

*033610  JUMPA	0,033611

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033611 
----------

*033611  MOVE 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*033612  XOR 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000000 
----------

*033613  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033615  JUMPA	0,033616

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033616 
----------

*033616  MOVE 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 219
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0442

*033617  XOR 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000000 
----------

*033620  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033622  JUMPA	0,033623

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033623 
----------

*033623  MOVE 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*033624  XOR 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 220
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0443

*033625  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033627  JUMPA	0,033630

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033630 
----------

*033630  MOVE 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*033631  XOR 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000000 
----------

*033632  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 221
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0444

*033634  JUMPA	0,033635

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033635 
----------

*033635  MOVE 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*033636  XOR 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000000 
----------

*033637  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033641  JUMPA	0,033642

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033642 
----------

*033642  MOVE 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 222
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0445

*033643  XOR 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000000 
----------

*033644  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033646  JUMPA	0,033647

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033647 
----------

*033647  MOVE 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*033650  XOR 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 223
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0446

*033651  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033653  JUMPA	0,033654

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033654 
----------

*033654  MOVE 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*033655  XOR 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000000 
----------

*033656  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 224
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0447

*033660  JUMPA	0,033661

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033661 
----------

*033661  MOVE 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*033662  XOR 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 000000 
----------

*033663  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033665  JUMPA	0,033666

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033666 
----------

*033666  MOVE 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 225
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0448

*033667  XOR 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 000000 
----------

*033670  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033672  JUMPA	0,033673

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033673 
----------

*033673  MOVE 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*033674  XOR 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 226
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0449

*033675  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033677  JUMPA	0,033700

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033700 
----------

*033700  MOVE 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*033701  XOR 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 000000 
----------

*033702  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 227
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0450

*033704  JUMPA	0,033705

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033705 
----------

*033705  MOVE 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*033706  XOR 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 000000 
----------

*033707  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033711  JUMPA	0,033712

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033712 
----------

*033712  MOVE 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 228
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0451

*033713  XOR 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 000000 
----------

*033714  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033716  JUMPA	0,033717

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033717 
----------

*033717  MOVE 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*033720  XOR 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 229
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0452

*033721  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033723  JUMPA	0,033724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033724 
----------

*033724  MOVE 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*033725  XOR 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 000000 
----------

*033726  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 230
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0453

*033730  JUMPA	0,033731

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033731 
----------

*033731  MOVE 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*033732  XOR 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 000000 
----------

*033733  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033735  JUMPA	0,033736

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033736 
----------

*033736  MOVE 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 231
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0454

*033737  XOR 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000000 000000 
----------

*033740  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033742  JUMPA	0,033743

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033743 
----------

*033743  MOVE 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*033744  XOR 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 232
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0455

*033745  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033747  JUMPA	0,033750

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033750 
----------

*033750  MOVE 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*033751  XOR 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000000 000000 
----------

*033752  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 233
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0456

*033754  JUMPA	0,033755

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033755 
----------

*033755  MOVE 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*033756  XOR 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000000 000000 
----------

*033757  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033761  JUMPA	0,033762

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033762 
----------

*033762  MOVE 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 234
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0457

*033763  XOR 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000000 000000 
----------

*033764  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033766  JUMPA	0,033767

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033767 
----------

*033767  MOVE 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*033770  XOR 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 235
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0458

*033771  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*033773  JUMPA	0,033774

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 033774 
----------

*033774  MOVE 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*033775  XOR 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000000 000000 
----------

*033776  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 236
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0459

*034000  JUMPA	0,034001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034001 
----------

*034001  MOVE 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*034002  XOR 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000000 000000 
----------

*034003  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034005  JUMPA	0,034006

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034006 
----------

*034006  MOVE 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 237
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0460

*034007  XOR 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000000 000000 
----------

*034010  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034012  JUMPA	0,034013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034013 
----------

*034013  MOVE 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*034014  XOR 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 238
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0461

*034015  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034017  JUMPA	0,034020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034020 
----------

*034020  MOVE 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*034021  XOR 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034022  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 239
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0462

*034024  JUMPA	0,034025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034025 
----------

*034025  MOVE 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*034026  XOR 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034027  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034031  JUMPA	0,034032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034032 
----------

*034032  MOVE 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 240
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0463

*034033  XOR 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034034  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034036  JUMPA	0,034037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034037 
----------

*034037  MOVE 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*034040  XOR 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 241
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0464

*034041  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034043  JUMPA	0,034044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034044 
----------

*034044  MOVE 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*034045  XOR 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034046  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 242
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0465

*034050  JUMPA	0,034051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034051 
----------

*034051  MOVE 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*034052  XOR 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034053  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034055  JUMPA	0,034056

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034056 
----------

*034056  MOVE 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 243
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0466

*034057  XOR 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034060  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034062  JUMPA	0,034063

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034063 
----------

*034063  MOVE 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*034064  XOR 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 244
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0467

*034065  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034067  JUMPA	0,034070

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034070 
----------

*034070  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034071  XOR 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034072  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 245
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0468

*034074  JUMPA	0,034075

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034075 
----------

*034075  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034076  EQV 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*034077  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034101  JUMPA	0,034102

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034102 
----------

*034102  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 246
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0469

*034103  EQV 	0,035060

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777776 
FINAL
C(AC)= 000000 000001 
----------

*034104  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034106  JUMPA	0,034107

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001     E= 000000 034107 
----------

*034107  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034110  EQV 	0,035061

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777775 
FINAL
C(AC)= 000000 000002 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 247
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0470

*034111  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*034113  JUMPA	0,034114

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002     E= 000000 034114 
----------

*034114  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034115  EQV 	0,035062

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777773 
FINAL
C(AC)= 000000 000004 
----------

*034116  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 248
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0471

*034120  JUMPA	0,034121

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004     E= 000000 034121 
----------

*034121  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034122  EQV 	0,035063

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777767 
FINAL
C(AC)= 000000 000010 
----------

*034123  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*034125  JUMPA	0,034126

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010     E= 000000 034126 
----------

*034126  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 249
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0472

*034127  EQV 	0,035064

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777757 
FINAL
C(AC)= 000000 000020 
----------

*034130  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*034132  JUMPA	0,034133

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020     E= 000000 034133 
----------

*034133  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034134  EQV 	0,035065

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777737 
FINAL
C(AC)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 250
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0473

*034135  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*034137  JUMPA	0,034140

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040     E= 000000 034140 
----------

*034140  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034141  EQV 	0,035066

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777677 
FINAL
C(AC)= 000000 000100 
----------

*034142  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 251
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0474

*034144  JUMPA	0,034145

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100     E= 000000 034145 
----------

*034145  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034146  EQV 	0,035067

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777577 
FINAL
C(AC)= 000000 000200 
----------

*034147  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*034151  JUMPA	0,034152

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200     E= 000000 034152 
----------

*034152  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 252
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0475

*034153  EQV 	0,035070

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777377 
FINAL
C(AC)= 000000 000400 
----------

*034154  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*034156  JUMPA	0,034157

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400     E= 000000 034157 
----------

*034157  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034160  EQV 	0,035071

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 776777 
FINAL
C(AC)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 253
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0476

*034161  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*034163  JUMPA	0,034164

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000     E= 000000 034164 
----------

*034164  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034165  EQV 	0,035072

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 775777 
FINAL
C(AC)= 000000 002000 
----------

*034166  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 254
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0477

*034170  JUMPA	0,034171

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000     E= 000000 034171 
----------

*034171  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034172  EQV 	0,035073

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 773777 
FINAL
C(AC)= 000000 004000 
----------

*034173  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*034175  JUMPA	0,034176

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000     E= 000000 034176 
----------

*034176  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 255
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0478

*034177  EQV 	0,035074

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 767777 
FINAL
C(AC)= 000000 010000 
----------

*034200  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*034202  JUMPA	0,034203

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000     E= 000000 034203 
----------

*034203  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034204  EQV 	0,035075

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 757777 
FINAL
C(AC)= 000000 020000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 256
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0479

*034205  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*034207  JUMPA	0,034210

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000     E= 000000 034210 
----------

*034210  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034211  EQV 	0,035076

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 737777 
FINAL
C(AC)= 000000 040000 
----------

*034212  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 257
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0480

*034214  JUMPA	0,034215

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000     E= 000000 034215 
----------

*034215  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034216  EQV 	0,035077

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 677777 
FINAL
C(AC)= 000000 100000 
----------

*034217  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*034221  JUMPA	0,034222

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000     E= 000000 034222 
----------

*034222  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 258
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0481

*034223  EQV 	0,035100

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 577777 
FINAL
C(AC)= 000000 200000 
----------

*034224  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*034226  JUMPA	0,034227

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000     E= 000000 034227 
----------

*034227  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034230  EQV 	0,035101

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 377777 
FINAL
C(AC)= 000000 400000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 259
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0482

*034231  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*034233  JUMPA	0,034234

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000     E= 000000 034234 
----------

*034234  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034235  EQV 	0,035102

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777776 777777 
FINAL
C(AC)= 000001 000000 
----------

*034236  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 260
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0483

*034240  JUMPA	0,034241

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000     E= 000000 034241 
----------

*034241  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034242  EQV 	0,035103

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777775 777777 
FINAL
C(AC)= 000002 000000 
----------

*034243  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*034245  JUMPA	0,034246

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000     E= 000000 034246 
----------

*034246  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 261
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0484

*034247  EQV 	0,035104

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777773 777777 
FINAL
C(AC)= 000004 000000 
----------

*034250  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*034252  JUMPA	0,034253

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000     E= 000000 034253 
----------

*034253  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034254  EQV 	0,035105

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777767 777777 
FINAL
C(AC)= 000010 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 262
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0485

*034255  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*034257  JUMPA	0,034260

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000     E= 000000 034260 
----------

*034260  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034261  EQV 	0,035106

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777757 777777 
FINAL
C(AC)= 000020 000000 
----------

*034262  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 263
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0486

*034264  JUMPA	0,034265

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000     E= 000000 034265 
----------

*034265  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034266  EQV 	0,035107

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777737 777777 
FINAL
C(AC)= 000040 000000 
----------

*034267  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*034271  JUMPA	0,034272

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000     E= 000000 034272 
----------

*034272  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 264
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0487

*034273  EQV 	0,035110

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777677 777777 
FINAL
C(AC)= 000100 000000 
----------

*034274  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*034276  JUMPA	0,034277

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000     E= 000000 034277 
----------

*034277  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034300  EQV 	0,035111

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777577 777777 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 265
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0488

*034301  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*034303  JUMPA	0,034304

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000     E= 000000 034304 
----------

*034304  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034305  EQV 	0,035112

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777377 777777 
FINAL
C(AC)= 000400 000000 
----------

*034306  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 266
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0489

*034310  JUMPA	0,034311

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000     E= 000000 034311 
----------

*034311  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034312  EQV 	0,035113

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 776777 777777 
FINAL
C(AC)= 001000 000000 
----------

*034313  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*034315  JUMPA	0,034316

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000     E= 000000 034316 
----------

*034316  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 267
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0490

*034317  EQV 	0,035114

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 775777 777777 
FINAL
C(AC)= 002000 000000 
----------

*034320  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*034322  JUMPA	0,034323

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000     E= 000000 034323 
----------

*034323  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034324  EQV 	0,035115

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 773777 777777 
FINAL
C(AC)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 268
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0491

*034325  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*034327  JUMPA	0,034330

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000     E= 000000 034330 
----------

*034330  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034331  EQV 	0,035116

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 767777 777777 
FINAL
C(AC)= 010000 000000 
----------

*034332  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 269
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0492

*034334  JUMPA	0,034335

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000     E= 000000 034335 
----------

*034335  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034336  EQV 	0,035117

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 757777 777777 
FINAL
C(AC)= 020000 000000 
----------

*034337  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*034341  JUMPA	0,034342

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000     E= 000000 034342 
----------

*034342  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 270
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0493

*034343  EQV 	0,035120

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 737777 777777 
FINAL
C(AC)= 040000 000000 
----------

*034344  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*034346  JUMPA	0,034347

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000     E= 000000 034347 
----------

*034347  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034350  EQV 	0,035121

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 677777 777777 
FINAL
C(AC)= 100000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 271
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0494

*034351  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*034353  JUMPA	0,034354

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000     E= 000000 034354 
----------

*034354  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034355  EQV 	0,035122

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 577777 777777 
FINAL
C(AC)= 200000 000000 
----------

*034356  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 272
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0495

*034360  JUMPA	0,034361

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000     E= 000000 034361 
----------

*034361  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034362  EQV 	0,035002

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 377777 777777 
FINAL
C(AC)= 400000 000000 
----------

*034363  SKIPN	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*034365  JUMPA	0,034366

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000     E= 000000 034366 
----------

*034366  MOVE 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 273
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0496

*034367  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034370  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034371  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034373  JUMPA	0,034374

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034374 
----------

*034374  MOVE 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 274
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0497

*034375  EQV 	0,035001

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 777777 777777 
FINAL
C(AC)= 777777 777777 
----------

*034376  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034377  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034401  JUMPA	0,034402

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034402 
----------

*034402  MOVE 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 275
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0498

*034403  AND 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000001 
----------

*034404  EQV 	0,035012

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000001  C(E)= 000000 000001 
FINAL
C(AC)= 777777 777777 
----------

*034405  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034406  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034410  JUMPA	0,034411

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034411 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 276
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0499

*034411  MOVE 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*034412  AND 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 000000 000002 
----------

*034413  EQV 	0,035013

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000002  C(E)= 000000 000002 
FINAL
C(AC)= 777777 777777 
----------

*034414  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034415  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 277
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0500

*034417  JUMPA	0,034420

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034420 
----------

*034420  MOVE 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*034421  AND 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 000000 000004 
----------

*034422  EQV 	0,035014

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000004  C(E)= 000000 000004 
FINAL
C(AC)= 777777 777777 
----------

*034423  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 278
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0501

*034424  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034426  JUMPA	0,034427

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034427 
----------

*034427  MOVE 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*034430  AND 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 000000 000010 
----------

*034431  EQV 	0,035015

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000010  C(E)= 000000 000010 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 279
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0502

*034432  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034433  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034435  JUMPA	0,034436

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034436 
----------

*034436  MOVE 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

*034437  AND 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 000000 000020 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 280
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0503

*034440  EQV 	0,035016

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000020  C(E)= 000000 000020 
FINAL
C(AC)= 777777 777777 
----------

*034441  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034442  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034444  JUMPA	0,034445

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034445 
----------

*034445  MOVE 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 281
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0504

*034446  AND 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 000000 000040 
----------

*034447  EQV 	0,035017

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000040  C(E)= 000000 000040 
FINAL
C(AC)= 777777 777777 
----------

*034450  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034451  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034453  JUMPA	0,034454

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034454 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 282
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0505

*034454  MOVE 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*034455  AND 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 000000 000100 
----------

*034456  EQV 	0,035020

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000100  C(E)= 000000 000100 
FINAL
C(AC)= 777777 777777 
----------

*034457  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034460  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 283
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0506

*034462  JUMPA	0,034463

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034463 
----------

*034463  MOVE 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*034464  AND 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 000000 000200 
----------

*034465  EQV 	0,035021

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000200  C(E)= 000000 000200 
FINAL
C(AC)= 777777 777777 
----------

*034466  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 284
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0507

*034467  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034471  JUMPA	0,034472

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034472 
----------

*034472  MOVE 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*034473  AND 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 000000 000400 
----------

*034474  EQV 	0,035022

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000400  C(E)= 000000 000400 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 285
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0508

*034475  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034476  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034500  JUMPA	0,034501

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034501 
----------

*034501  MOVE 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

*034502  AND 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 000000 001000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 286
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0509

*034503  EQV 	0,035023

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 001000  C(E)= 000000 001000 
FINAL
C(AC)= 777777 777777 
----------

*034504  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034505  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034507  JUMPA	0,034510

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034510 
----------

*034510  MOVE 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 287
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0510

*034511  AND 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 000000 002000 
----------

*034512  EQV 	0,035024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 002000  C(E)= 000000 002000 
FINAL
C(AC)= 777777 777777 
----------

*034513  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034514  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034516  JUMPA	0,034517

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034517 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 288
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0511

*034517  MOVE 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*034520  AND 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 000000 004000 
----------

*034521  EQV 	0,035025

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 004000  C(E)= 000000 004000 
FINAL
C(AC)= 777777 777777 
----------

*034522  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034523  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 289
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0512

*034525  JUMPA	0,034526

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034526 
----------

*034526  MOVE 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*034527  AND 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 000000 010000 
----------

*034530  EQV 	0,035026

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 010000  C(E)= 000000 010000 
FINAL
C(AC)= 777777 777777 
----------

*034531  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 290
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0513

*034532  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034534  JUMPA	0,034535

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034535 
----------

*034535  MOVE 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*034536  AND 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 000000 020000 
----------

*034537  EQV 	0,035027

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 020000  C(E)= 000000 020000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 291
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0514

*034540  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034541  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034543  JUMPA	0,034544

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034544 
----------

*034544  MOVE 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

*034545  AND 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 000000 040000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 292
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0515

*034546  EQV 	0,035030

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 040000  C(E)= 000000 040000 
FINAL
C(AC)= 777777 777777 
----------

*034547  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034550  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034552  JUMPA	0,034553

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034553 
----------

*034553  MOVE 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 293
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0516

*034554  AND 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 000000 100000 
----------

*034555  EQV 	0,035031

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 100000  C(E)= 000000 100000 
FINAL
C(AC)= 777777 777777 
----------

*034556  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034557  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034561  JUMPA	0,034562

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034562 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 294
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0517

*034562  MOVE 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*034563  AND 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 000000 200000 
----------

*034564  EQV 	0,035032

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 200000  C(E)= 000000 200000 
FINAL
C(AC)= 777777 777777 
----------

*034565  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034566  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 295
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0518

*034570  JUMPA	0,034571

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034571 
----------

*034571  MOVE 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*034572  AND 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 000000 400000 
----------

*034573  EQV 	0,035033

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 400000  C(E)= 000000 400000 
FINAL
C(AC)= 777777 777777 
----------

*034574  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 296
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0519

*034575  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034577  JUMPA	0,034600

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034600 
----------

*034600  MOVE 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*034601  AND 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 000001 000000 
----------

*034602  EQV 	0,035034

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000001 000000  C(E)= 000001 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 297
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0520

*034603  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034604  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034606  JUMPA	0,034607

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034607 
----------

*034607  MOVE 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

*034610  AND 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 000002 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 298
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0521

*034611  EQV 	0,035035

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000002 000000  C(E)= 000002 000000 
FINAL
C(AC)= 777777 777777 
----------

*034612  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034613  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034615  JUMPA	0,034616

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034616 
----------

*034616  MOVE 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 299
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0522

*034617  AND 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 000004 000000 
----------

*034620  EQV 	0,035036

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000004 000000  C(E)= 000004 000000 
FINAL
C(AC)= 777777 777777 
----------

*034621  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034622  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034624  JUMPA	0,034625

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034625 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 300
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0523

*034625  MOVE 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*034626  AND 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 000010 000000 
----------

*034627  EQV 	0,035037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000010 000000  C(E)= 000010 000000 
FINAL
C(AC)= 777777 777777 
----------

*034630  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034631  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 301
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0524

*034633  JUMPA	0,034634

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034634 
----------

*034634  MOVE 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*034635  AND 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 000020 000000 
----------

*034636  EQV 	0,035040

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000020 000000  C(E)= 000020 000000 
FINAL
C(AC)= 777777 777777 
----------

*034637  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 302
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0525

*034640  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034642  JUMPA	0,034643

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034643 
----------

*034643  MOVE 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*034644  AND 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 000040 000000 
----------

*034645  EQV 	0,035041

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000040 000000  C(E)= 000040 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 303
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0526

*034646  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034647  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034651  JUMPA	0,034652

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034652 
----------

*034652  MOVE 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

*034653  AND 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 000100 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 304
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0527

*034654  EQV 	0,035042

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000100 000000  C(E)= 000100 000000 
FINAL
C(AC)= 777777 777777 
----------

*034655  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034656  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034660  JUMPA	0,034661

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034661 
----------

*034661  MOVE 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 305
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0528

*034662  AND 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 000200 000000 
----------

*034663  EQV 	0,035043

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000200 000000  C(E)= 000200 000000 
FINAL
C(AC)= 777777 777777 
----------

*034664  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034665  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034667  JUMPA	0,034670

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034670 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 306
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0529

*034670  MOVE 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*034671  AND 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 000400 000000 
----------

*034672  EQV 	0,035011

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000400 000000  C(E)= 000400 000000 
FINAL
C(AC)= 777777 777777 
----------

*034673  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034674  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 307
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0530

*034676  JUMPA	0,034677

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034677 
----------

*034677  MOVE 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*034700  AND 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 001000 000000 
----------

*034701  EQV 	0,035044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 001000 000000  C(E)= 001000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034702  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 308
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0531

*034703  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034705  JUMPA	0,034706

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034706 
----------

*034706  MOVE 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*034707  AND 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 002000 000000 
----------

*034710  EQV 	0,035045

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 002000 000000  C(E)= 002000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 309
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0532

*034711  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034712  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034714  JUMPA	0,034715

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034715 
----------

*034715  MOVE 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

*034716  AND 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 004000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 310
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0533

*034717  EQV 	0,035046

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 004000 000000  C(E)= 004000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034720  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034721  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034723  JUMPA	0,034724

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034724 
----------

*034724  MOVE 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 311
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0534

*034725  AND 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 010000 000000 
----------

*034726  EQV 	0,035047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 010000 000000  C(E)= 010000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034727  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034730  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034732  JUMPA	0,034733

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034733 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 312
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0535

*034733  MOVE 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*034734  AND 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 020000 000000 
----------

*034735  EQV 	0,035050

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 020000 000000  C(E)= 020000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034736  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034737  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 313
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0536

*034741  JUMPA	0,034742

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034742 
----------

*034742  MOVE 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*034743  AND 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 040000 000000 
----------

*034744  EQV 	0,035051

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 040000 000000  C(E)= 040000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034745  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 314
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0537

*034746  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034750  JUMPA	0,034751

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034751 
----------

*034751  MOVE 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*034752  AND 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 100000 000000 
----------

*034753  EQV 	0,035052

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 100000 000000  C(E)= 100000 000000 
FINAL
C(AC)= 777777 777777 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 315
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0538

*034754  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034755  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034757  JUMPA	0,034760

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034760 
----------

*034760  MOVE 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

*034761  AND 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 200000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 316
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0539

*034762  EQV 	0,035053

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 200000 000000  C(E)= 200000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034763  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034764  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034766  JUMPA	0,034767

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034767 
----------

*034767  MOVE 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 317
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0540

*034770  AND 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 400000 000000 
----------

*034771  EQV 	0,035003

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 400000 000000  C(E)= 400000 000000 
FINAL
C(AC)= 777777 777777 
----------

*034772  EQV 	0,035000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 777777 777777  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034773  SKIPE	0,000000

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*034775  JUMPA	0,034776

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000     E= 000000 034776 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 318
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0541

*034776  SETZM	0,035124

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
 C(E)= 000000 000000 
----------

*034777  JRST	0,030057

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030057 
----------

*030057  JRST	0,030613

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030613 
----------

*030613  AOS 	0,030047

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000001 
----------

*030614  SOS 	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000001 
FINAL
C(AC)= 000000 000000  C(E)= 000000 000000 
----------

*030615  SKIPN	0,030037

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

PROGRAM	   SWITCHES        MASK           INSTR      CNTLPC   UPRPC	KSSIM VER 4.0  28-MAR-78   PAGE 319
DSKAA	000000 000000  000000 000000  000000 000000  030000  777777                                                        SEQ 0542

*030616  JRST	0,030624

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 030624 
----------

*030624  SKIPE	0,030024

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 000000 000000 
FINAL
C(AC)= 000000 000000 
----------

*030626  SKIPN	0,030044

FLAGS - INT/FINAL   300000 300000 
INITIAL
C(AC)= 000000 000000  C(E)= 777777 777777 
FINAL
C(AC)= 000000 000000 
----------

*030630  JRST	0,@030012

FLAGS - INT/FINAL   300000 300000 
INITIAL
    E= 000000 431110 
----------
