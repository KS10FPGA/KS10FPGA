G++     := arm-none-eabi-g++.exe
GCC     := arm-none-eabi-gcc.exe
LD      := arm-none-eabi-ld.exe
XXD     := xxd
OBJCOPY := arm-none-eabi-objcopy

TARGET  := console

BOOTFILE := diagnostics..dskda.sav

#	-MD \

CFLAGS := \
	-W -Wall \
	-mcpu=cortex-m3 \
	-mthumb \
	-O0 \
	-std=gnu++11 \
	-fno-rtti \
	-fcheck-new \
        -pedantic \
	-ffunction-sections \
	-fdata-sections \
	-fno-exceptions \
        -Wno-ctor-dtor-privacy \
	-Wno-non-virtual-dtor 

LDFLAGS := \
	--script=$(TARGET).ld \
	--entry vectReset \
        --gc-sections \
	-Map $(TARGET).map

DRIVERS := \
	drivers/epi.hpp \
	drivers/gpio.hpp \
	drivers/ks10.hpp \
	drivers/sysctl.hpp \
	drivers/uart.hpp \
	drivers/memmap.hpp \
	commands.hpp \
	printf.h


LIBS := \
	/usr/local/lib/gcc/arm-none-eabi/4.7.2/thumb/libgcc.a \
	/usr/local/arm-none-eabi/lib/thumb/libc.a \


	
$(TARGET).bin : $(TARGET).elf
	$(OBJCOPY) -O binary $< $@

$(TARGET).elf :$(TARGET).ld console.o commands.o startup.o bootcode.o printf.o
	$(LD) $(LDFLAGS) console.o commands.o startup.o bootcode.o printf.o $(LIBS) -o $(TARGET).elf

$(TARGET).o : $(TARGET).cpp $(DRIVERS)
	$(GCC) $(CFLAGS) -c $< -o $@

.cpp.o : 
	$(GCC) $(CFLAGS) -c $< -o $@

.c.o : 
	$(GCC) $(CFLAGS) -c $< -o $@

bootcode.cpp : $(BOOTFILE) makefile
	@echo "Making bootcode.cpp"
	@echo ""   >  bootcode.cpp
	@echo "//" >> bootcode.cpp
	@echo "// Do not edit this file.  It was created by the makefile." >> bootcode.cpp
	@echo "//" >> bootcode.cpp
	@echo ""   >> bootcode.cpp
	@echo "#include <stdint.h>" >> bootcode.cpp
	@echo "extern const uint8_t bootcode[] = {" >> bootcode.cpp
	@$(XXD) -g1 -i < $(BOOTFILE) >> bootcode.cpp
	@echo "};" >> bootcode.cpp
	@echo ""   >> bootcode.cpp
	@echo "//" >> bootcode.cpp
	@echo "// Boot image sanity check." >> bootcode.cpp
	@echo "//" >> bootcode.cpp
	@echo ""   >> bootcode.cpp
	@echo "static_assert((sizeof(bootcode) % 5) == 0, \"Boot image is malformed.\");" >> bootcode.cpp
	@echo ""   >> bootcode.cpp

load :  $(TARGET).bin
	openocd -f ek-lm3s9b9x.cfg

clean:
	rcsclean *
	rcsclean drivers/*
	rm -f bootcode.cpp
	rm -f *.elf
	rm -f *.map
	rm -f *.bin
	rm -f *.o
	rm -rf ../doc/Doxygen/*

archive_all:
	tar -czvf ks10_code_all_`date '+%y%m%d'`.tgz *
